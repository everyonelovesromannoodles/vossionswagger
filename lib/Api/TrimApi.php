<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TrimApi
{

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sxapiarcustomermntPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiarcustomermnt $sxapiarcustomermnt sxapiarcustomermnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiarcustomermntResp
     */
    public function sxapiarcustomermntPost($sxapiarcustomermnt)
    {
        list($response) = $this->sxapiarcustomermntPostWithHttpInfo($sxapiarcustomermnt);
        return $response;
    }

    /**
     * Operation sxapiarcustomermntPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiarcustomermnt $sxapiarcustomermnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiarcustomermntResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiarcustomermntPostWithHttpInfo($sxapiarcustomermnt)
    {
        $returnType = '\Swagger\Client\Model\SxapiarcustomermntResp';
        $request = $this->sxapiarcustomermntPostRequest($sxapiarcustomermnt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiarcustomermntResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiarcustomermntPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiarcustomermnt $sxapiarcustomermnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiarcustomermntPostAsync($sxapiarcustomermnt)
    {
        return $this->sxapiarcustomermntPostAsyncWithHttpInfo($sxapiarcustomermnt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiarcustomermntPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiarcustomermnt $sxapiarcustomermnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiarcustomermntPostAsyncWithHttpInfo($sxapiarcustomermnt)
    {
        $returnType = '\Swagger\Client\Model\SxapiarcustomermntResp';
        $request = $this->sxapiarcustomermntPostRequest($sxapiarcustomermnt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiarcustomermntPost'
     *
     * @param  \Swagger\Client\Model\Sxapiarcustomermnt $sxapiarcustomermnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiarcustomermntPostRequest($sxapiarcustomermnt)
    {
        // verify the required parameter 'sxapiarcustomermnt' is set
        if ($sxapiarcustomermnt === null || (is_array($sxapiarcustomermnt) && count($sxapiarcustomermnt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiarcustomermnt when calling sxapiarcustomermntPost'
            );
        }

        $resourcePath = '/sxapiarcustomermnt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiarcustomermnt)) {
            $_tempBody = $sxapiarcustomermnt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerdatageneralv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatageneralv2 $sxapiargetcustomerdatageneralv2 sxapiargetcustomerdatageneralv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiargetcustomerdatageneralv2Resp
     */
    public function sxapiargetcustomerdatageneralv2Post($sxapiargetcustomerdatageneralv2)
    {   
        list($response) = $this->sxapiargetcustomerdatageneralv2PostWithHttpInfo($sxapiargetcustomerdatageneralv2);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerdatageneralv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatageneralv2 $sxapiargetcustomerdatageneralv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiargetcustomerdatageneralv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerdatageneralv2PostWithHttpInfo($sxapiargetcustomerdatageneralv2)
    {   
        $returnType = '\Swagger\Client\Model\Sxapiargetcustomerdatageneralv2Resp';
        $request = $this->sxapiargetcustomerdatageneralv2PostRequest($sxapiargetcustomerdatageneralv2);
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            $responseBody = $response->getBody(); 
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }
            
            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200: 
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiargetcustomerdatageneralv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerdatageneralv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatageneralv2 $sxapiargetcustomerdatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdatageneralv2PostAsync($sxapiargetcustomerdatageneralv2)
    {   
        return $this->sxapiargetcustomerdatageneralv2PostAsyncWithHttpInfo($sxapiargetcustomerdatageneralv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerdatageneralv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatageneralv2 $sxapiargetcustomerdatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdatageneralv2PostAsyncWithHttpInfo($sxapiargetcustomerdatageneralv2)
    {   
        $returnType = '\Swagger\Client\Model\Sxapiargetcustomerdatageneralv2Resp';
        $request = $this->sxapiargetcustomerdatageneralv2PostRequest($sxapiargetcustomerdatageneralv2);
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody(); 
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerdatageneralv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatageneralv2 $sxapiargetcustomerdatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerdatageneralv2PostRequest($sxapiargetcustomerdatageneralv2)
    {   
        // verify the required parameter 'sxapiargetcustomerdatageneralv2' is set
        if ($sxapiargetcustomerdatageneralv2 === null || (is_array($sxapiargetcustomerdatageneralv2) && count($sxapiargetcustomerdatageneralv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustomerdatageneralv2 when calling sxapiargetcustomerdatageneralv2Post'
            );
        }
        
        $resourcePath = '/sxapiargetcustomerdatageneralv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        
        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustomerdatageneralv2)) {
            $_tempBody = $sxapiargetcustomerdatageneralv2;
        }
        
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            ); 
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );
        
        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioefullordermntv6Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv6 $sxapioefullordermntv6 sxapioefullordermntv6 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioefullordermntv6Resp
     */
    public function sxapioefullordermntv6Post($sxapioefullordermntv6)
    {   
        list($response) = $this->sxapioefullordermntv6PostWithHttpInfo($sxapioefullordermntv6);
        return $response;
    }

    /**
     * Operation sxapioefullordermntv6PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv6 $sxapioefullordermntv6 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioefullordermntv6Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioefullordermntv6PostWithHttpInfo($sxapioefullordermntv6)
    {   
        $returnType = '\Swagger\Client\Model\Sxapioefullordermntv6Resp';
        $request = $this->sxapioefullordermntv6PostRequest($sxapioefullordermntv6);
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            $responseBody = $response->getBody(); 
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }
            
            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200: 
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioefullordermntv6Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioefullordermntv6PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv6 $sxapioefullordermntv6 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioefullordermntv6PostAsync($sxapioefullordermntv6)
    {   
        return $this->sxapioefullordermntv6PostAsyncWithHttpInfo($sxapioefullordermntv6)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioefullordermntv6PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv6 $sxapioefullordermntv6 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioefullordermntv6PostAsyncWithHttpInfo($sxapioefullordermntv6)
    {   
        $returnType = '\Swagger\Client\Model\Sxapioefullordermntv6Resp';
        $request = $this->sxapioefullordermntv6PostRequest($sxapioefullordermntv6);
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody(); 
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioefullordermntv6Post'
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv6 $sxapioefullordermntv6 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioefullordermntv6PostRequest($sxapioefullordermntv6)
    {   
        // verify the required parameter 'sxapioefullordermntv6' is set
        if ($sxapioefullordermntv6 === null || (is_array($sxapioefullordermntv6) && count($sxapioefullordermntv6) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioefullordermntv6 when calling sxapioefullordermntv6Post'
            );
        }
        
        $resourcePath = '/sxapioefullordermntv6';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        
        // body params
        $_tempBody = null;
        if (isset($sxapioefullordermntv6)) {
            $_tempBody = $sxapioefullordermntv6;
        }
        
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            ); 
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );
        
        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerdatataxingPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatataxing $sxapiargetcustomerdatataxing sxapiargetcustomerdatataxing (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiargetcustomerdatataxingResp
     */
    public function sxapiargetcustomerdatataxingPost($sxapiargetcustomerdatataxing)
    {
        list($response) = $this->sxapiargetcustomerdatataxingPostWithHttpInfo($sxapiargetcustomerdatataxing);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerdatataxingPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatataxing $sxapiargetcustomerdatataxing (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiargetcustomerdatataxingResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerdatataxingPostWithHttpInfo($sxapiargetcustomerdatataxing)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdatataxingResp';
        $request = $this->sxapiargetcustomerdatataxingPostRequest($sxapiargetcustomerdatataxing);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiargetcustomerdatataxingResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerdatataxingPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatataxing $sxapiargetcustomerdatataxing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdatataxingPostAsync($sxapiargetcustomerdatataxing)
    {
        return $this->sxapiargetcustomerdatataxingPostAsyncWithHttpInfo($sxapiargetcustomerdatataxing)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerdatataxingPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatataxing $sxapiargetcustomerdatataxing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdatataxingPostAsyncWithHttpInfo($sxapiargetcustomerdatataxing)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdatataxingResp';
        $request = $this->sxapiargetcustomerdatataxingPostRequest($sxapiargetcustomerdatataxing);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerdatataxingPost'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatataxing $sxapiargetcustomerdatataxing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerdatataxingPostRequest($sxapiargetcustomerdatataxing)
    {
        // verify the required parameter 'sxapiargetcustomerdatataxing' is set
        if ($sxapiargetcustomerdatataxing === null || (is_array($sxapiargetcustomerdatataxing) && count($sxapiargetcustomerdatataxing) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustomerdatataxing when calling sxapiargetcustomerdatataxingPost'
            );
        }

        $resourcePath = '/sxapiargetcustomerdatataxing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustomerdatataxing)) {
            $_tempBody = $sxapiargetcustomerdatataxing;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerlistv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerlistv2 $sxapiargetcustomerlistv2 sxapiargetcustomerlistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiargetcustomerlistv2Resp
     */
    public function sxapiargetcustomerlistv2Post($sxapiargetcustomerlistv2)
    {
        list($response) = $this->sxapiargetcustomerlistv2PostWithHttpInfo($sxapiargetcustomerlistv2);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerlistv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerlistv2 $sxapiargetcustomerlistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiargetcustomerlistv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerlistv2PostWithHttpInfo($sxapiargetcustomerlistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetcustomerlistv2Resp';
        $request = $this->sxapiargetcustomerlistv2PostRequest($sxapiargetcustomerlistv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiargetcustomerlistv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerlistv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerlistv2 $sxapiargetcustomerlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerlistv2PostAsync($sxapiargetcustomerlistv2)
    {
        return $this->sxapiargetcustomerlistv2PostAsyncWithHttpInfo($sxapiargetcustomerlistv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerlistv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerlistv2 $sxapiargetcustomerlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerlistv2PostAsyncWithHttpInfo($sxapiargetcustomerlistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetcustomerlistv2Resp';
        $request = $this->sxapiargetcustomerlistv2PostRequest($sxapiargetcustomerlistv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerlistv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerlistv2 $sxapiargetcustomerlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerlistv2PostRequest($sxapiargetcustomerlistv2)
    {
        // verify the required parameter 'sxapiargetcustomerlistv2' is set
        if ($sxapiargetcustomerlistv2 === null || (is_array($sxapiargetcustomerlistv2) && count($sxapiargetcustomerlistv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustomerlistv2 when calling sxapiargetcustomerlistv2Post'
            );
        }

        $resourcePath = '/sxapiargetcustomerlistv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustomerlistv2)) {
            $_tempBody = $sxapiargetcustomerlistv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetproductdatageneralv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv2 $sxapiicgetproductdatageneralv2 sxapiicgetproductdatageneralv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetproductdatageneralv2Resp
     */
    public function sxapiicgetproductdatageneralv2Post($sxapiicgetproductdatageneralv2)
    {
        list($response) = $this->sxapiicgetproductdatageneralv2PostWithHttpInfo($sxapiicgetproductdatageneralv2);
        return $response;
    }

    /**
     * Operation sxapiicgetproductdatageneralv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv2 $sxapiicgetproductdatageneralv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetproductdatageneralv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetproductdatageneralv2PostWithHttpInfo($sxapiicgetproductdatageneralv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetproductdatageneralv2Resp';
        $request = $this->sxapiicgetproductdatageneralv2PostRequest($sxapiicgetproductdatageneralv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetproductdatageneralv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetproductdatageneralv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv2 $sxapiicgetproductdatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductdatageneralv2PostAsync($sxapiicgetproductdatageneralv2)
    {
        return $this->sxapiicgetproductdatageneralv2PostAsyncWithHttpInfo($sxapiicgetproductdatageneralv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetproductdatageneralv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv2 $sxapiicgetproductdatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductdatageneralv2PostAsyncWithHttpInfo($sxapiicgetproductdatageneralv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetproductdatageneralv2Resp';
        $request = $this->sxapiicgetproductdatageneralv2PostRequest($sxapiicgetproductdatageneralv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetproductdatageneralv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv2 $sxapiicgetproductdatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetproductdatageneralv2PostRequest($sxapiicgetproductdatageneralv2)
    {
        // verify the required parameter 'sxapiicgetproductdatageneralv2' is set
        if ($sxapiicgetproductdatageneralv2 === null || (is_array($sxapiicgetproductdatageneralv2) && count($sxapiicgetproductdatageneralv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetproductdatageneralv2 when calling sxapiicgetproductdatageneralv2Post'
            );
        }

        $resourcePath = '/sxapiicgetproductdatageneralv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetproductdatageneralv2)) {
            $_tempBody = $sxapiicgetproductdatageneralv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetproductdatageneralv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv3 $sxapiicgetproductdatageneralv3 sxapiicgetproductdatageneralv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetproductdatageneralv3Resp
     */
    public function sxapiicgetproductdatageneralv3Post($sxapiicgetproductdatageneralv3)
    {
        list($response) = $this->sxapiicgetproductdatageneralv3PostWithHttpInfo($sxapiicgetproductdatageneralv3);
        return $response;
    }

    /**
     * Operation sxapiicgetproductdatageneralv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv3 $sxapiicgetproductdatageneralv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetproductdatageneralv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetproductdatageneralv3PostWithHttpInfo($sxapiicgetproductdatageneralv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetproductdatageneralv3Resp';
        $request = $this->sxapiicgetproductdatageneralv3PostRequest($sxapiicgetproductdatageneralv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetproductdatageneralv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetproductdatageneralv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv3 $sxapiicgetproductdatageneralv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductdatageneralv3PostAsync($sxapiicgetproductdatageneralv3)
    {
        return $this->sxapiicgetproductdatageneralv3PostAsyncWithHttpInfo($sxapiicgetproductdatageneralv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetproductdatageneralv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv3 $sxapiicgetproductdatageneralv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductdatageneralv3PostAsyncWithHttpInfo($sxapiicgetproductdatageneralv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetproductdatageneralv3Resp';
        $request = $this->sxapiicgetproductdatageneralv3PostRequest($sxapiicgetproductdatageneralv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetproductdatageneralv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv3 $sxapiicgetproductdatageneralv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetproductdatageneralv3PostRequest($sxapiicgetproductdatageneralv3)
    {
        // verify the required parameter 'sxapiicgetproductdatageneralv3' is set
        if ($sxapiicgetproductdatageneralv3 === null || (is_array($sxapiicgetproductdatageneralv3) && count($sxapiicgetproductdatageneralv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetproductdatageneralv3 when calling sxapiicgetproductdatageneralv3Post'
            );
        }

        $resourcePath = '/sxapiicgetproductdatageneralv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetproductdatageneralv3)) {
            $_tempBody = $sxapiicgetproductdatageneralv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwhseproductdatausagePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatausage $sxapiicgetwhseproductdatausage sxapiicgetwhseproductdatausage (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetwhseproductdatausageResp
     */
    public function sxapiicgetwhseproductdatausagePost($sxapiicgetwhseproductdatausage)
    {
        list($response) = $this->sxapiicgetwhseproductdatausagePostWithHttpInfo($sxapiicgetwhseproductdatausage);
        return $response;
    }

    /**
     * Operation sxapiicgetwhseproductdatausagePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatausage $sxapiicgetwhseproductdatausage (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetwhseproductdatausageResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwhseproductdatausagePostWithHttpInfo($sxapiicgetwhseproductdatausage)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwhseproductdatausageResp';
        $request = $this->sxapiicgetwhseproductdatausagePostRequest($sxapiicgetwhseproductdatausage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetwhseproductdatausageResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwhseproductdatausagePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatausage $sxapiicgetwhseproductdatausage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdatausagePostAsync($sxapiicgetwhseproductdatausage)
    {
        return $this->sxapiicgetwhseproductdatausagePostAsyncWithHttpInfo($sxapiicgetwhseproductdatausage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwhseproductdatausagePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatausage $sxapiicgetwhseproductdatausage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdatausagePostAsyncWithHttpInfo($sxapiicgetwhseproductdatausage)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwhseproductdatausageResp';
        $request = $this->sxapiicgetwhseproductdatausagePostRequest($sxapiicgetwhseproductdatausage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwhseproductdatausagePost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatausage $sxapiicgetwhseproductdatausage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwhseproductdatausagePostRequest($sxapiicgetwhseproductdatausage)
    {
        // verify the required parameter 'sxapiicgetwhseproductdatausage' is set
        if ($sxapiicgetwhseproductdatausage === null || (is_array($sxapiicgetwhseproductdatausage) && count($sxapiicgetwhseproductdatausage) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwhseproductdatausage when calling sxapiicgetwhseproductdatausagePost'
            );
        }

        $resourcePath = '/sxapiicgetwhseproductdatausage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwhseproductdatausage)) {
            $_tempBody = $sxapiicgetwhseproductdatausage;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicproductavailbywhsePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicproductavailbywhse $sxapiicproductavailbywhse sxapiicproductavailbywhse (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicproductavailbywhseResp
     */
    public function sxapiicproductavailbywhsePost($sxapiicproductavailbywhse)
    {
        list($response) = $this->sxapiicproductavailbywhsePostWithHttpInfo($sxapiicproductavailbywhse);
        return $response;
    }

    /**
     * Operation sxapiicproductavailbywhsePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicproductavailbywhse $sxapiicproductavailbywhse (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicproductavailbywhseResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicproductavailbywhsePostWithHttpInfo($sxapiicproductavailbywhse)
    {
        $returnType = '\Swagger\Client\Model\SxapiicproductavailbywhseResp';
        $request = $this->sxapiicproductavailbywhsePostRequest($sxapiicproductavailbywhse);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicproductavailbywhseResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicproductavailbywhsePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicproductavailbywhse $sxapiicproductavailbywhse (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicproductavailbywhsePostAsync($sxapiicproductavailbywhse)
    {
        return $this->sxapiicproductavailbywhsePostAsyncWithHttpInfo($sxapiicproductavailbywhse)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicproductavailbywhsePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicproductavailbywhse $sxapiicproductavailbywhse (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicproductavailbywhsePostAsyncWithHttpInfo($sxapiicproductavailbywhse)
    {
        $returnType = '\Swagger\Client\Model\SxapiicproductavailbywhseResp';
        $request = $this->sxapiicproductavailbywhsePostRequest($sxapiicproductavailbywhse);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicproductavailbywhsePost'
     *
     * @param  \Swagger\Client\Model\Sxapiicproductavailbywhse $sxapiicproductavailbywhse (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicproductavailbywhsePostRequest($sxapiicproductavailbywhse)
    {
        // verify the required parameter 'sxapiicproductavailbywhse' is set
        if ($sxapiicproductavailbywhse === null || (is_array($sxapiicproductavailbywhse) && count($sxapiicproductavailbywhse) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicproductavailbywhse when calling sxapiicproductavailbywhsePost'
            );
        }

        $resourcePath = '/sxapiicproductavailbywhse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicproductavailbywhse)) {
            $_tempBody = $sxapiicproductavailbywhse;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetlistofordersv4Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv4 $sxapioegetlistofordersv4 sxapioegetlistofordersv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioegetlistofordersv4Resp
     */
    public function sxapioegetlistofordersv4Post($sxapioegetlistofordersv4)
    {
        list($response) = $this->sxapioegetlistofordersv4PostWithHttpInfo($sxapioegetlistofordersv4);
        return $response;
    }

    /**
     * Operation sxapioegetlistofordersv4PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv4 $sxapioegetlistofordersv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioegetlistofordersv4Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetlistofordersv4PostWithHttpInfo($sxapioegetlistofordersv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapioegetlistofordersv4Resp';
        $request = $this->sxapioegetlistofordersv4PostRequest($sxapioegetlistofordersv4);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioegetlistofordersv4Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetlistofordersv4PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv4 $sxapioegetlistofordersv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetlistofordersv4PostAsync($sxapioegetlistofordersv4)
    {
        return $this->sxapioegetlistofordersv4PostAsyncWithHttpInfo($sxapioegetlistofordersv4)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetlistofordersv4PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv4 $sxapioegetlistofordersv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetlistofordersv4PostAsyncWithHttpInfo($sxapioegetlistofordersv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapioegetlistofordersv4Resp';
        $request = $this->sxapioegetlistofordersv4PostRequest($sxapioegetlistofordersv4);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetlistofordersv4Post'
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv4 $sxapioegetlistofordersv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetlistofordersv4PostRequest($sxapioegetlistofordersv4)
    {
        // verify the required parameter 'sxapioegetlistofordersv4' is set
        if ($sxapioegetlistofordersv4 === null || (is_array($sxapioegetlistofordersv4) && count($sxapioegetlistofordersv4) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetlistofordersv4 when calling sxapioegetlistofordersv4Post'
            );
        }

        $resourcePath = '/sxapioegetlistofordersv4';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetlistofordersv4)) {
            $_tempBody = $sxapioegetlistofordersv4;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetsinglebatchorderPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsinglebatchorder $sxapioegetsinglebatchorder sxapioegetsinglebatchorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioegetsinglebatchorderResp
     */
    public function sxapioegetsinglebatchorderPost($sxapioegetsinglebatchorder)
    {
        list($response) = $this->sxapioegetsinglebatchorderPostWithHttpInfo($sxapioegetsinglebatchorder);
        return $response;
    }

    /**
     * Operation sxapioegetsinglebatchorderPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsinglebatchorder $sxapioegetsinglebatchorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioegetsinglebatchorderResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetsinglebatchorderPostWithHttpInfo($sxapioegetsinglebatchorder)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetsinglebatchorderResp';
        $request = $this->sxapioegetsinglebatchorderPostRequest($sxapioegetsinglebatchorder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioegetsinglebatchorderResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetsinglebatchorderPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsinglebatchorder $sxapioegetsinglebatchorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetsinglebatchorderPostAsync($sxapioegetsinglebatchorder)
    {
        return $this->sxapioegetsinglebatchorderPostAsyncWithHttpInfo($sxapioegetsinglebatchorder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetsinglebatchorderPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsinglebatchorder $sxapioegetsinglebatchorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetsinglebatchorderPostAsyncWithHttpInfo($sxapioegetsinglebatchorder)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetsinglebatchorderResp';
        $request = $this->sxapioegetsinglebatchorderPostRequest($sxapioegetsinglebatchorder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetsinglebatchorderPost'
     *
     * @param  \Swagger\Client\Model\Sxapioegetsinglebatchorder $sxapioegetsinglebatchorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetsinglebatchorderPostRequest($sxapioegetsinglebatchorder)
    {
        // verify the required parameter 'sxapioegetsinglebatchorder' is set
        if ($sxapioegetsinglebatchorder === null || (is_array($sxapioegetsinglebatchorder) && count($sxapioegetsinglebatchorder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetsinglebatchorder when calling sxapioegetsinglebatchorderPost'
            );
        }

        $resourcePath = '/sxapioegetsinglebatchorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetsinglebatchorder)) {
            $_tempBody = $sxapioegetsinglebatchorder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetsingleorderv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsingleorderv3 $sxapioegetsingleorderv3 sxapioegetsingleorderv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioegetsingleorderv3Resp
     */
    public function sxapioegetsingleorderv3Post($sxapioegetsingleorderv3)
    {
        list($response) = $this->sxapioegetsingleorderv3PostWithHttpInfo($sxapioegetsingleorderv3);
        return $response;
    }

    /**
     * Operation sxapioegetsingleorderv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsingleorderv3 $sxapioegetsingleorderv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioegetsingleorderv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetsingleorderv3PostWithHttpInfo($sxapioegetsingleorderv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapioegetsingleorderv3Resp';
        $request = $this->sxapioegetsingleorderv3PostRequest($sxapioegetsingleorderv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioegetsingleorderv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetsingleorderv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsingleorderv3 $sxapioegetsingleorderv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetsingleorderv3PostAsync($sxapioegetsingleorderv3)
    {
        return $this->sxapioegetsingleorderv3PostAsyncWithHttpInfo($sxapioegetsingleorderv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetsingleorderv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsingleorderv3 $sxapioegetsingleorderv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetsingleorderv3PostAsyncWithHttpInfo($sxapioegetsingleorderv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapioegetsingleorderv3Resp';
        $request = $this->sxapioegetsingleorderv3PostRequest($sxapioegetsingleorderv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetsingleorderv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapioegetsingleorderv3 $sxapioegetsingleorderv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetsingleorderv3PostRequest($sxapioegetsingleorderv3)
    {
        // verify the required parameter 'sxapioegetsingleorderv3' is set
        if ($sxapioegetsingleorderv3 === null || (is_array($sxapioegetsingleorderv3) && count($sxapioegetsingleorderv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetsingleorderv3 when calling sxapioegetsingleorderv3Post'
            );
        }

        $resourcePath = '/sxapioegetsingleorderv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetsingleorderv3)) {
            $_tempBody = $sxapioegetsingleorderv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioepricingmultiplev3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev3 $sxapioepricingmultiplev3 sxapioepricingmultiplev3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioepricingmultiplev3Resp
     */
    public function sxapioepricingmultiplev3Post($sxapioepricingmultiplev3)
    {
        list($response) = $this->sxapioepricingmultiplev3PostWithHttpInfo($sxapioepricingmultiplev3);
        return $response;
    }

    /**
     * Operation sxapioepricingmultiplev3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev3 $sxapioepricingmultiplev3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioepricingmultiplev3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioepricingmultiplev3PostWithHttpInfo($sxapioepricingmultiplev3)
    {
        $returnType = '\Swagger\Client\Model\Sxapioepricingmultiplev3Resp';
        $request = $this->sxapioepricingmultiplev3PostRequest($sxapioepricingmultiplev3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioepricingmultiplev3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioepricingmultiplev3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev3 $sxapioepricingmultiplev3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingmultiplev3PostAsync($sxapioepricingmultiplev3)
    {
        return $this->sxapioepricingmultiplev3PostAsyncWithHttpInfo($sxapioepricingmultiplev3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioepricingmultiplev3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev3 $sxapioepricingmultiplev3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingmultiplev3PostAsyncWithHttpInfo($sxapioepricingmultiplev3)
    {
        $returnType = '\Swagger\Client\Model\Sxapioepricingmultiplev3Resp';
        $request = $this->sxapioepricingmultiplev3PostRequest($sxapioepricingmultiplev3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioepricingmultiplev3Post'
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev3 $sxapioepricingmultiplev3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioepricingmultiplev3PostRequest($sxapioepricingmultiplev3)
    {
        // verify the required parameter 'sxapioepricingmultiplev3' is set
        if ($sxapioepricingmultiplev3 === null || (is_array($sxapioepricingmultiplev3) && count($sxapioepricingmultiplev3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioepricingmultiplev3 when calling sxapioepricingmultiplev3Post'
            );
        }

        $resourcePath = '/sxapioepricingmultiplev3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioepricingmultiplev3)) {
            $_tempBody = $sxapioepricingmultiplev3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioepricingv4Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv4 $sxapioepricingv4 sxapioepricingv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioepricingv4Resp
     */
    public function sxapioepricingv4Post($sxapioepricingv4)
    {
        list($response) = $this->sxapioepricingv4PostWithHttpInfo($sxapioepricingv4);
        return $response;
    }

    /**
     * Operation sxapioepricingv4PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv4 $sxapioepricingv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioepricingv4Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioepricingv4PostWithHttpInfo($sxapioepricingv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapioepricingv4Resp';
        $request = $this->sxapioepricingv4PostRequest($sxapioepricingv4);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioepricingv4Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioepricingv4PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv4 $sxapioepricingv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingv4PostAsync($sxapioepricingv4)
    {
        return $this->sxapioepricingv4PostAsyncWithHttpInfo($sxapioepricingv4)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioepricingv4PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv4 $sxapioepricingv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingv4PostAsyncWithHttpInfo($sxapioepricingv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapioepricingv4Resp';
        $request = $this->sxapioepricingv4PostRequest($sxapioepricingv4);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioepricingv4Post'
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv4 $sxapioepricingv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioepricingv4PostRequest($sxapioepricingv4)
    {
        // verify the required parameter 'sxapioepricingv4' is set
        if ($sxapioepricingv4 === null || (is_array($sxapioepricingv4) && count($sxapioepricingv4) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioepricingv4 when calling sxapioepricingv4Post'
            );
        }

        $resourcePath = '/sxapioepricingv4';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioepricingv4)) {
            $_tempBody = $sxapioepricingv4;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

}
