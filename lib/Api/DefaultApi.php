<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sxapiaddressvalidationPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiaddressvalidation $sxapiaddressvalidation sxapiaddressvalidation (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiaddressvalidationResp
     */
    public function sxapiaddressvalidationPost($sxapiaddressvalidation)
    {
        list($response) = $this->sxapiaddressvalidationPostWithHttpInfo($sxapiaddressvalidation);
        return $response;
    }

    /**
     * Operation sxapiaddressvalidationPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiaddressvalidation $sxapiaddressvalidation (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiaddressvalidationResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiaddressvalidationPostWithHttpInfo($sxapiaddressvalidation)
    {
        $returnType = '\Swagger\Client\Model\SxapiaddressvalidationResp';
        $request = $this->sxapiaddressvalidationPostRequest($sxapiaddressvalidation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiaddressvalidationResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiaddressvalidationPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiaddressvalidation $sxapiaddressvalidation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiaddressvalidationPostAsync($sxapiaddressvalidation)
    {
        return $this->sxapiaddressvalidationPostAsyncWithHttpInfo($sxapiaddressvalidation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiaddressvalidationPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiaddressvalidation $sxapiaddressvalidation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiaddressvalidationPostAsyncWithHttpInfo($sxapiaddressvalidation)
    {
        $returnType = '\Swagger\Client\Model\SxapiaddressvalidationResp';
        $request = $this->sxapiaddressvalidationPostRequest($sxapiaddressvalidation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiaddressvalidationPost'
     *
     * @param  \Swagger\Client\Model\Sxapiaddressvalidation $sxapiaddressvalidation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiaddressvalidationPostRequest($sxapiaddressvalidation)
    {
        // verify the required parameter 'sxapiaddressvalidation' is set
        if ($sxapiaddressvalidation === null || (is_array($sxapiaddressvalidation) && count($sxapiaddressvalidation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiaddressvalidation when calling sxapiaddressvalidationPost'
            );
        }

        $resourcePath = '/sxapiaddressvalidation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiaddressvalidation)) {
            $_tempBody = $sxapiaddressvalidation;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiapgetshipfmlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetshipfmlist $sxapiapgetshipfmlist sxapiapgetshipfmlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiapgetshipfmlistResp
     */
    public function sxapiapgetshipfmlistPost($sxapiapgetshipfmlist)
    {
        list($response) = $this->sxapiapgetshipfmlistPostWithHttpInfo($sxapiapgetshipfmlist);
        return $response;
    }

    /**
     * Operation sxapiapgetshipfmlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetshipfmlist $sxapiapgetshipfmlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiapgetshipfmlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiapgetshipfmlistPostWithHttpInfo($sxapiapgetshipfmlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiapgetshipfmlistResp';
        $request = $this->sxapiapgetshipfmlistPostRequest($sxapiapgetshipfmlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiapgetshipfmlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiapgetshipfmlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetshipfmlist $sxapiapgetshipfmlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapgetshipfmlistPostAsync($sxapiapgetshipfmlist)
    {
        return $this->sxapiapgetshipfmlistPostAsyncWithHttpInfo($sxapiapgetshipfmlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiapgetshipfmlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetshipfmlist $sxapiapgetshipfmlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapgetshipfmlistPostAsyncWithHttpInfo($sxapiapgetshipfmlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiapgetshipfmlistResp';
        $request = $this->sxapiapgetshipfmlistPostRequest($sxapiapgetshipfmlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiapgetshipfmlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiapgetshipfmlist $sxapiapgetshipfmlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiapgetshipfmlistPostRequest($sxapiapgetshipfmlist)
    {
        // verify the required parameter 'sxapiapgetshipfmlist' is set
        if ($sxapiapgetshipfmlist === null || (is_array($sxapiapgetshipfmlist) && count($sxapiapgetshipfmlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiapgetshipfmlist when calling sxapiapgetshipfmlistPost'
            );
        }

        $resourcePath = '/sxapiapgetshipfmlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiapgetshipfmlist)) {
            $_tempBody = $sxapiapgetshipfmlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiapgetshipfmlistv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetshipfmlistv2 $sxapiapgetshipfmlistv2 sxapiapgetshipfmlistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiapgetshipfmlistv2Resp
     */
    public function sxapiapgetshipfmlistv2Post($sxapiapgetshipfmlistv2)
    {
        list($response) = $this->sxapiapgetshipfmlistv2PostWithHttpInfo($sxapiapgetshipfmlistv2);
        return $response;
    }

    /**
     * Operation sxapiapgetshipfmlistv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetshipfmlistv2 $sxapiapgetshipfmlistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiapgetshipfmlistv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiapgetshipfmlistv2PostWithHttpInfo($sxapiapgetshipfmlistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiapgetshipfmlistv2Resp';
        $request = $this->sxapiapgetshipfmlistv2PostRequest($sxapiapgetshipfmlistv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiapgetshipfmlistv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiapgetshipfmlistv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetshipfmlistv2 $sxapiapgetshipfmlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapgetshipfmlistv2PostAsync($sxapiapgetshipfmlistv2)
    {
        return $this->sxapiapgetshipfmlistv2PostAsyncWithHttpInfo($sxapiapgetshipfmlistv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiapgetshipfmlistv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetshipfmlistv2 $sxapiapgetshipfmlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapgetshipfmlistv2PostAsyncWithHttpInfo($sxapiapgetshipfmlistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiapgetshipfmlistv2Resp';
        $request = $this->sxapiapgetshipfmlistv2PostRequest($sxapiapgetshipfmlistv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiapgetshipfmlistv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiapgetshipfmlistv2 $sxapiapgetshipfmlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiapgetshipfmlistv2PostRequest($sxapiapgetshipfmlistv2)
    {
        // verify the required parameter 'sxapiapgetshipfmlistv2' is set
        if ($sxapiapgetshipfmlistv2 === null || (is_array($sxapiapgetshipfmlistv2) && count($sxapiapgetshipfmlistv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiapgetshipfmlistv2 when calling sxapiapgetshipfmlistv2Post'
            );
        }

        $resourcePath = '/sxapiapgetshipfmlistv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiapgetshipfmlistv2)) {
            $_tempBody = $sxapiapgetshipfmlistv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiapgetvendordataediPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordataedi $sxapiapgetvendordataedi sxapiapgetvendordataedi (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiapgetvendordataediResp
     */
    public function sxapiapgetvendordataediPost($sxapiapgetvendordataedi)
    {
        list($response) = $this->sxapiapgetvendordataediPostWithHttpInfo($sxapiapgetvendordataedi);
        return $response;
    }

    /**
     * Operation sxapiapgetvendordataediPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordataedi $sxapiapgetvendordataedi (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiapgetvendordataediResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiapgetvendordataediPostWithHttpInfo($sxapiapgetvendordataedi)
    {
        $returnType = '\Swagger\Client\Model\SxapiapgetvendordataediResp';
        $request = $this->sxapiapgetvendordataediPostRequest($sxapiapgetvendordataedi);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiapgetvendordataediResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiapgetvendordataediPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordataedi $sxapiapgetvendordataedi (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapgetvendordataediPostAsync($sxapiapgetvendordataedi)
    {
        return $this->sxapiapgetvendordataediPostAsyncWithHttpInfo($sxapiapgetvendordataedi)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiapgetvendordataediPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordataedi $sxapiapgetvendordataedi (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapgetvendordataediPostAsyncWithHttpInfo($sxapiapgetvendordataedi)
    {
        $returnType = '\Swagger\Client\Model\SxapiapgetvendordataediResp';
        $request = $this->sxapiapgetvendordataediPostRequest($sxapiapgetvendordataedi);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiapgetvendordataediPost'
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordataedi $sxapiapgetvendordataedi (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiapgetvendordataediPostRequest($sxapiapgetvendordataedi)
    {
        // verify the required parameter 'sxapiapgetvendordataedi' is set
        if ($sxapiapgetvendordataedi === null || (is_array($sxapiapgetvendordataedi) && count($sxapiapgetvendordataedi) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiapgetvendordataedi when calling sxapiapgetvendordataediPost'
            );
        }

        $resourcePath = '/sxapiapgetvendordataedi';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiapgetvendordataedi)) {
            $_tempBody = $sxapiapgetvendordataedi;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiapgetvendordataediv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordataediv2 $sxapiapgetvendordataediv2 sxapiapgetvendordataediv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiapgetvendordataediv2Resp
     */
    public function sxapiapgetvendordataediv2Post($sxapiapgetvendordataediv2)
    {
        list($response) = $this->sxapiapgetvendordataediv2PostWithHttpInfo($sxapiapgetvendordataediv2);
        return $response;
    }

    /**
     * Operation sxapiapgetvendordataediv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordataediv2 $sxapiapgetvendordataediv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiapgetvendordataediv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiapgetvendordataediv2PostWithHttpInfo($sxapiapgetvendordataediv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiapgetvendordataediv2Resp';
        $request = $this->sxapiapgetvendordataediv2PostRequest($sxapiapgetvendordataediv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiapgetvendordataediv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiapgetvendordataediv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordataediv2 $sxapiapgetvendordataediv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapgetvendordataediv2PostAsync($sxapiapgetvendordataediv2)
    {
        return $this->sxapiapgetvendordataediv2PostAsyncWithHttpInfo($sxapiapgetvendordataediv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiapgetvendordataediv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordataediv2 $sxapiapgetvendordataediv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapgetvendordataediv2PostAsyncWithHttpInfo($sxapiapgetvendordataediv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiapgetvendordataediv2Resp';
        $request = $this->sxapiapgetvendordataediv2PostRequest($sxapiapgetvendordataediv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiapgetvendordataediv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordataediv2 $sxapiapgetvendordataediv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiapgetvendordataediv2PostRequest($sxapiapgetvendordataediv2)
    {
        // verify the required parameter 'sxapiapgetvendordataediv2' is set
        if ($sxapiapgetvendordataediv2 === null || (is_array($sxapiapgetvendordataediv2) && count($sxapiapgetvendordataediv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiapgetvendordataediv2 when calling sxapiapgetvendordataediv2Post'
            );
        }

        $resourcePath = '/sxapiapgetvendordataediv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiapgetvendordataediv2)) {
            $_tempBody = $sxapiapgetvendordataediv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiapgetvendordatageneralPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordatageneral $sxapiapgetvendordatageneral sxapiapgetvendordatageneral (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiapgetvendordatageneralResp
     */
    public function sxapiapgetvendordatageneralPost($sxapiapgetvendordatageneral)
    {
        list($response) = $this->sxapiapgetvendordatageneralPostWithHttpInfo($sxapiapgetvendordatageneral);
        return $response;
    }

    /**
     * Operation sxapiapgetvendordatageneralPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordatageneral $sxapiapgetvendordatageneral (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiapgetvendordatageneralResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiapgetvendordatageneralPostWithHttpInfo($sxapiapgetvendordatageneral)
    {
        $returnType = '\Swagger\Client\Model\SxapiapgetvendordatageneralResp';
        $request = $this->sxapiapgetvendordatageneralPostRequest($sxapiapgetvendordatageneral);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiapgetvendordatageneralResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiapgetvendordatageneralPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordatageneral $sxapiapgetvendordatageneral (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapgetvendordatageneralPostAsync($sxapiapgetvendordatageneral)
    {
        return $this->sxapiapgetvendordatageneralPostAsyncWithHttpInfo($sxapiapgetvendordatageneral)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiapgetvendordatageneralPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordatageneral $sxapiapgetvendordatageneral (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapgetvendordatageneralPostAsyncWithHttpInfo($sxapiapgetvendordatageneral)
    {
        $returnType = '\Swagger\Client\Model\SxapiapgetvendordatageneralResp';
        $request = $this->sxapiapgetvendordatageneralPostRequest($sxapiapgetvendordatageneral);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiapgetvendordatageneralPost'
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordatageneral $sxapiapgetvendordatageneral (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiapgetvendordatageneralPostRequest($sxapiapgetvendordatageneral)
    {
        // verify the required parameter 'sxapiapgetvendordatageneral' is set
        if ($sxapiapgetvendordatageneral === null || (is_array($sxapiapgetvendordatageneral) && count($sxapiapgetvendordatageneral) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiapgetvendordatageneral when calling sxapiapgetvendordatageneralPost'
            );
        }

        $resourcePath = '/sxapiapgetvendordatageneral';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiapgetvendordatageneral)) {
            $_tempBody = $sxapiapgetvendordatageneral;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiapgetvendordatageneralv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordatageneralv2 $sxapiapgetvendordatageneralv2 sxapiapgetvendordatageneralv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiapgetvendordatageneralv2Resp
     */
    public function sxapiapgetvendordatageneralv2Post($sxapiapgetvendordatageneralv2)
    {
        list($response) = $this->sxapiapgetvendordatageneralv2PostWithHttpInfo($sxapiapgetvendordatageneralv2);
        return $response;
    }

    /**
     * Operation sxapiapgetvendordatageneralv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordatageneralv2 $sxapiapgetvendordatageneralv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiapgetvendordatageneralv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiapgetvendordatageneralv2PostWithHttpInfo($sxapiapgetvendordatageneralv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiapgetvendordatageneralv2Resp';
        $request = $this->sxapiapgetvendordatageneralv2PostRequest($sxapiapgetvendordatageneralv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiapgetvendordatageneralv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiapgetvendordatageneralv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordatageneralv2 $sxapiapgetvendordatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapgetvendordatageneralv2PostAsync($sxapiapgetvendordatageneralv2)
    {
        return $this->sxapiapgetvendordatageneralv2PostAsyncWithHttpInfo($sxapiapgetvendordatageneralv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiapgetvendordatageneralv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordatageneralv2 $sxapiapgetvendordatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapgetvendordatageneralv2PostAsyncWithHttpInfo($sxapiapgetvendordatageneralv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiapgetvendordatageneralv2Resp';
        $request = $this->sxapiapgetvendordatageneralv2PostRequest($sxapiapgetvendordatageneralv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiapgetvendordatageneralv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordatageneralv2 $sxapiapgetvendordatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiapgetvendordatageneralv2PostRequest($sxapiapgetvendordatageneralv2)
    {
        // verify the required parameter 'sxapiapgetvendordatageneralv2' is set
        if ($sxapiapgetvendordatageneralv2 === null || (is_array($sxapiapgetvendordatageneralv2) && count($sxapiapgetvendordatageneralv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiapgetvendordatageneralv2 when calling sxapiapgetvendordatageneralv2Post'
            );
        }

        $resourcePath = '/sxapiapgetvendordatageneralv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiapgetvendordatageneralv2)) {
            $_tempBody = $sxapiapgetvendordatageneralv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiapgetvendordataorderingPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordataordering $sxapiapgetvendordataordering sxapiapgetvendordataordering (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiapgetvendordataorderingResp
     */
    public function sxapiapgetvendordataorderingPost($sxapiapgetvendordataordering)
    {
        list($response) = $this->sxapiapgetvendordataorderingPostWithHttpInfo($sxapiapgetvendordataordering);
        return $response;
    }

    /**
     * Operation sxapiapgetvendordataorderingPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordataordering $sxapiapgetvendordataordering (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiapgetvendordataorderingResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiapgetvendordataorderingPostWithHttpInfo($sxapiapgetvendordataordering)
    {
        $returnType = '\Swagger\Client\Model\SxapiapgetvendordataorderingResp';
        $request = $this->sxapiapgetvendordataorderingPostRequest($sxapiapgetvendordataordering);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiapgetvendordataorderingResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiapgetvendordataorderingPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordataordering $sxapiapgetvendordataordering (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapgetvendordataorderingPostAsync($sxapiapgetvendordataordering)
    {
        return $this->sxapiapgetvendordataorderingPostAsyncWithHttpInfo($sxapiapgetvendordataordering)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiapgetvendordataorderingPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordataordering $sxapiapgetvendordataordering (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapgetvendordataorderingPostAsyncWithHttpInfo($sxapiapgetvendordataordering)
    {
        $returnType = '\Swagger\Client\Model\SxapiapgetvendordataorderingResp';
        $request = $this->sxapiapgetvendordataorderingPostRequest($sxapiapgetvendordataordering);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiapgetvendordataorderingPost'
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordataordering $sxapiapgetvendordataordering (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiapgetvendordataorderingPostRequest($sxapiapgetvendordataordering)
    {
        // verify the required parameter 'sxapiapgetvendordataordering' is set
        if ($sxapiapgetvendordataordering === null || (is_array($sxapiapgetvendordataordering) && count($sxapiapgetvendordataordering) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiapgetvendordataordering when calling sxapiapgetvendordataorderingPost'
            );
        }

        $resourcePath = '/sxapiapgetvendordataordering';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiapgetvendordataordering)) {
            $_tempBody = $sxapiapgetvendordataordering;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiapgetvendordataorderingv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordataorderingv2 $sxapiapgetvendordataorderingv2 sxapiapgetvendordataorderingv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiapgetvendordataorderingv2Resp
     */
    public function sxapiapgetvendordataorderingv2Post($sxapiapgetvendordataorderingv2)
    {
        list($response) = $this->sxapiapgetvendordataorderingv2PostWithHttpInfo($sxapiapgetvendordataorderingv2);
        return $response;
    }

    /**
     * Operation sxapiapgetvendordataorderingv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordataorderingv2 $sxapiapgetvendordataorderingv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiapgetvendordataorderingv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiapgetvendordataorderingv2PostWithHttpInfo($sxapiapgetvendordataorderingv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiapgetvendordataorderingv2Resp';
        $request = $this->sxapiapgetvendordataorderingv2PostRequest($sxapiapgetvendordataorderingv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiapgetvendordataorderingv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiapgetvendordataorderingv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordataorderingv2 $sxapiapgetvendordataorderingv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapgetvendordataorderingv2PostAsync($sxapiapgetvendordataorderingv2)
    {
        return $this->sxapiapgetvendordataorderingv2PostAsyncWithHttpInfo($sxapiapgetvendordataorderingv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiapgetvendordataorderingv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordataorderingv2 $sxapiapgetvendordataorderingv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapgetvendordataorderingv2PostAsyncWithHttpInfo($sxapiapgetvendordataorderingv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiapgetvendordataorderingv2Resp';
        $request = $this->sxapiapgetvendordataorderingv2PostRequest($sxapiapgetvendordataorderingv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiapgetvendordataorderingv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendordataorderingv2 $sxapiapgetvendordataorderingv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiapgetvendordataorderingv2PostRequest($sxapiapgetvendordataorderingv2)
    {
        // verify the required parameter 'sxapiapgetvendordataorderingv2' is set
        if ($sxapiapgetvendordataorderingv2 === null || (is_array($sxapiapgetvendordataorderingv2) && count($sxapiapgetvendordataorderingv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiapgetvendordataorderingv2 when calling sxapiapgetvendordataorderingv2Post'
            );
        }

        $resourcePath = '/sxapiapgetvendordataorderingv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiapgetvendordataorderingv2)) {
            $_tempBody = $sxapiapgetvendordataorderingv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiapgetvendorlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendorlist $sxapiapgetvendorlist sxapiapgetvendorlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiapgetvendorlistResp
     */
    public function sxapiapgetvendorlistPost($sxapiapgetvendorlist)
    {
        list($response) = $this->sxapiapgetvendorlistPostWithHttpInfo($sxapiapgetvendorlist);
        return $response;
    }

    /**
     * Operation sxapiapgetvendorlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendorlist $sxapiapgetvendorlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiapgetvendorlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiapgetvendorlistPostWithHttpInfo($sxapiapgetvendorlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiapgetvendorlistResp';
        $request = $this->sxapiapgetvendorlistPostRequest($sxapiapgetvendorlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiapgetvendorlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiapgetvendorlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendorlist $sxapiapgetvendorlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapgetvendorlistPostAsync($sxapiapgetvendorlist)
    {
        return $this->sxapiapgetvendorlistPostAsyncWithHttpInfo($sxapiapgetvendorlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiapgetvendorlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendorlist $sxapiapgetvendorlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapgetvendorlistPostAsyncWithHttpInfo($sxapiapgetvendorlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiapgetvendorlistResp';
        $request = $this->sxapiapgetvendorlistPostRequest($sxapiapgetvendorlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiapgetvendorlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendorlist $sxapiapgetvendorlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiapgetvendorlistPostRequest($sxapiapgetvendorlist)
    {
        // verify the required parameter 'sxapiapgetvendorlist' is set
        if ($sxapiapgetvendorlist === null || (is_array($sxapiapgetvendorlist) && count($sxapiapgetvendorlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiapgetvendorlist when calling sxapiapgetvendorlistPost'
            );
        }

        $resourcePath = '/sxapiapgetvendorlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiapgetvendorlist)) {
            $_tempBody = $sxapiapgetvendorlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiapgetvendorlistv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendorlistv2 $sxapiapgetvendorlistv2 sxapiapgetvendorlistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiapgetvendorlistv2Resp
     */
    public function sxapiapgetvendorlistv2Post($sxapiapgetvendorlistv2)
    {
        list($response) = $this->sxapiapgetvendorlistv2PostWithHttpInfo($sxapiapgetvendorlistv2);
        return $response;
    }

    /**
     * Operation sxapiapgetvendorlistv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendorlistv2 $sxapiapgetvendorlistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiapgetvendorlistv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiapgetvendorlistv2PostWithHttpInfo($sxapiapgetvendorlistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiapgetvendorlistv2Resp';
        $request = $this->sxapiapgetvendorlistv2PostRequest($sxapiapgetvendorlistv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiapgetvendorlistv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiapgetvendorlistv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendorlistv2 $sxapiapgetvendorlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapgetvendorlistv2PostAsync($sxapiapgetvendorlistv2)
    {
        return $this->sxapiapgetvendorlistv2PostAsyncWithHttpInfo($sxapiapgetvendorlistv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiapgetvendorlistv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendorlistv2 $sxapiapgetvendorlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapgetvendorlistv2PostAsyncWithHttpInfo($sxapiapgetvendorlistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiapgetvendorlistv2Resp';
        $request = $this->sxapiapgetvendorlistv2PostRequest($sxapiapgetvendorlistv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiapgetvendorlistv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiapgetvendorlistv2 $sxapiapgetvendorlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiapgetvendorlistv2PostRequest($sxapiapgetvendorlistv2)
    {
        // verify the required parameter 'sxapiapgetvendorlistv2' is set
        if ($sxapiapgetvendorlistv2 === null || (is_array($sxapiapgetvendorlistv2) && count($sxapiapgetvendorlistv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiapgetvendorlistv2 when calling sxapiapgetvendorlistv2Post'
            );
        }

        $resourcePath = '/sxapiapgetvendorlistv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiapgetvendorlistv2)) {
            $_tempBody = $sxapiapgetvendorlistv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiapinvoiceprocessPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapinvoiceprocess $sxapiapinvoiceprocess sxapiapinvoiceprocess (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiapinvoiceprocessResp
     */
    public function sxapiapinvoiceprocessPost($sxapiapinvoiceprocess)
    {
        list($response) = $this->sxapiapinvoiceprocessPostWithHttpInfo($sxapiapinvoiceprocess);
        return $response;
    }

    /**
     * Operation sxapiapinvoiceprocessPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapinvoiceprocess $sxapiapinvoiceprocess (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiapinvoiceprocessResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiapinvoiceprocessPostWithHttpInfo($sxapiapinvoiceprocess)
    {
        $returnType = '\Swagger\Client\Model\SxapiapinvoiceprocessResp';
        $request = $this->sxapiapinvoiceprocessPostRequest($sxapiapinvoiceprocess);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiapinvoiceprocessResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiapinvoiceprocessPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapinvoiceprocess $sxapiapinvoiceprocess (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapinvoiceprocessPostAsync($sxapiapinvoiceprocess)
    {
        return $this->sxapiapinvoiceprocessPostAsyncWithHttpInfo($sxapiapinvoiceprocess)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiapinvoiceprocessPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapinvoiceprocess $sxapiapinvoiceprocess (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapinvoiceprocessPostAsyncWithHttpInfo($sxapiapinvoiceprocess)
    {
        $returnType = '\Swagger\Client\Model\SxapiapinvoiceprocessResp';
        $request = $this->sxapiapinvoiceprocessPostRequest($sxapiapinvoiceprocess);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiapinvoiceprocessPost'
     *
     * @param  \Swagger\Client\Model\Sxapiapinvoiceprocess $sxapiapinvoiceprocess (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiapinvoiceprocessPostRequest($sxapiapinvoiceprocess)
    {
        // verify the required parameter 'sxapiapinvoiceprocess' is set
        if ($sxapiapinvoiceprocess === null || (is_array($sxapiapinvoiceprocess) && count($sxapiapinvoiceprocess) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiapinvoiceprocess when calling sxapiapinvoiceprocessPost'
            );
        }

        $resourcePath = '/sxapiapinvoiceprocess';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiapinvoiceprocess)) {
            $_tempBody = $sxapiapinvoiceprocess;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiapvendormntPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapvendormnt $sxapiapvendormnt sxapiapvendormnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiapvendormntResp
     */
    public function sxapiapvendormntPost($sxapiapvendormnt)
    {
        list($response) = $this->sxapiapvendormntPostWithHttpInfo($sxapiapvendormnt);
        return $response;
    }

    /**
     * Operation sxapiapvendormntPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapvendormnt $sxapiapvendormnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiapvendormntResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiapvendormntPostWithHttpInfo($sxapiapvendormnt)
    {
        $returnType = '\Swagger\Client\Model\SxapiapvendormntResp';
        $request = $this->sxapiapvendormntPostRequest($sxapiapvendormnt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiapvendormntResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiapvendormntPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapvendormnt $sxapiapvendormnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapvendormntPostAsync($sxapiapvendormnt)
    {
        return $this->sxapiapvendormntPostAsyncWithHttpInfo($sxapiapvendormnt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiapvendormntPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiapvendormnt $sxapiapvendormnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiapvendormntPostAsyncWithHttpInfo($sxapiapvendormnt)
    {
        $returnType = '\Swagger\Client\Model\SxapiapvendormntResp';
        $request = $this->sxapiapvendormntPostRequest($sxapiapvendormnt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiapvendormntPost'
     *
     * @param  \Swagger\Client\Model\Sxapiapvendormnt $sxapiapvendormnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiapvendormntPostRequest($sxapiapvendormnt)
    {
        // verify the required parameter 'sxapiapvendormnt' is set
        if ($sxapiapvendormnt === null || (is_array($sxapiapvendormnt) && count($sxapiapvendormnt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiapvendormnt when calling sxapiapvendormntPost'
            );
        }

        $resourcePath = '/sxapiapvendormnt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiapvendormnt)) {
            $_tempBody = $sxapiapvendormnt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiarcreatetransactionPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiarcreatetransaction $sxapiarcreatetransaction sxapiarcreatetransaction (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiarcreatetransactionResp
     */
    public function sxapiarcreatetransactionPost($sxapiarcreatetransaction)
    {
        list($response) = $this->sxapiarcreatetransactionPostWithHttpInfo($sxapiarcreatetransaction);
        return $response;
    }

    /**
     * Operation sxapiarcreatetransactionPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiarcreatetransaction $sxapiarcreatetransaction (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiarcreatetransactionResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiarcreatetransactionPostWithHttpInfo($sxapiarcreatetransaction)
    {
        $returnType = '\Swagger\Client\Model\SxapiarcreatetransactionResp';
        $request = $this->sxapiarcreatetransactionPostRequest($sxapiarcreatetransaction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiarcreatetransactionResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiarcreatetransactionPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiarcreatetransaction $sxapiarcreatetransaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiarcreatetransactionPostAsync($sxapiarcreatetransaction)
    {
        return $this->sxapiarcreatetransactionPostAsyncWithHttpInfo($sxapiarcreatetransaction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiarcreatetransactionPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiarcreatetransaction $sxapiarcreatetransaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiarcreatetransactionPostAsyncWithHttpInfo($sxapiarcreatetransaction)
    {
        $returnType = '\Swagger\Client\Model\SxapiarcreatetransactionResp';
        $request = $this->sxapiarcreatetransactionPostRequest($sxapiarcreatetransaction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiarcreatetransactionPost'
     *
     * @param  \Swagger\Client\Model\Sxapiarcreatetransaction $sxapiarcreatetransaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiarcreatetransactionPostRequest($sxapiarcreatetransaction)
    {
        // verify the required parameter 'sxapiarcreatetransaction' is set
        if ($sxapiarcreatetransaction === null || (is_array($sxapiarcreatetransaction) && count($sxapiarcreatetransaction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiarcreatetransaction when calling sxapiarcreatetransactionPost'
            );
        }

        $resourcePath = '/sxapiarcreatetransaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiarcreatetransaction)) {
            $_tempBody = $sxapiarcreatetransaction;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiarcustomermntPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiarcustomermnt $sxapiarcustomermnt sxapiarcustomermnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiarcustomermntResp
     */
    public function sxapiarcustomermntPost($sxapiarcustomermnt)
    {
        list($response) = $this->sxapiarcustomermntPostWithHttpInfo($sxapiarcustomermnt);
        return $response;
    }

    /**
     * Operation sxapiarcustomermntPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiarcustomermnt $sxapiarcustomermnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiarcustomermntResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiarcustomermntPostWithHttpInfo($sxapiarcustomermnt)
    {
        $returnType = '\Swagger\Client\Model\SxapiarcustomermntResp';
        $request = $this->sxapiarcustomermntPostRequest($sxapiarcustomermnt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiarcustomermntResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiarcustomermntPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiarcustomermnt $sxapiarcustomermnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiarcustomermntPostAsync($sxapiarcustomermnt)
    {
        return $this->sxapiarcustomermntPostAsyncWithHttpInfo($sxapiarcustomermnt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiarcustomermntPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiarcustomermnt $sxapiarcustomermnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiarcustomermntPostAsyncWithHttpInfo($sxapiarcustomermnt)
    {
        $returnType = '\Swagger\Client\Model\SxapiarcustomermntResp';
        $request = $this->sxapiarcustomermntPostRequest($sxapiarcustomermnt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiarcustomermntPost'
     *
     * @param  \Swagger\Client\Model\Sxapiarcustomermnt $sxapiarcustomermnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiarcustomermntPostRequest($sxapiarcustomermnt)
    {
        // verify the required parameter 'sxapiarcustomermnt' is set
        if ($sxapiarcustomermnt === null || (is_array($sxapiarcustomermnt) && count($sxapiarcustomermnt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiarcustomermnt when calling sxapiarcustomermntPost'
            );
        }

        $resourcePath = '/sxapiarcustomermnt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiarcustomermnt)) {
            $_tempBody = $sxapiarcustomermnt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcontactlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcontactlist $sxapiargetcontactlist sxapiargetcontactlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiargetcontactlistResp
     */
    public function sxapiargetcontactlistPost($sxapiargetcontactlist)
    {
        list($response) = $this->sxapiargetcontactlistPostWithHttpInfo($sxapiargetcontactlist);
        return $response;
    }

    /**
     * Operation sxapiargetcontactlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcontactlist $sxapiargetcontactlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiargetcontactlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcontactlistPostWithHttpInfo($sxapiargetcontactlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcontactlistResp';
        $request = $this->sxapiargetcontactlistPostRequest($sxapiargetcontactlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiargetcontactlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcontactlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcontactlist $sxapiargetcontactlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcontactlistPostAsync($sxapiargetcontactlist)
    {
        return $this->sxapiargetcontactlistPostAsyncWithHttpInfo($sxapiargetcontactlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcontactlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcontactlist $sxapiargetcontactlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcontactlistPostAsyncWithHttpInfo($sxapiargetcontactlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcontactlistResp';
        $request = $this->sxapiargetcontactlistPostRequest($sxapiargetcontactlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcontactlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcontactlist $sxapiargetcontactlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcontactlistPostRequest($sxapiargetcontactlist)
    {
        // verify the required parameter 'sxapiargetcontactlist' is set
        if ($sxapiargetcontactlist === null || (is_array($sxapiargetcontactlist) && count($sxapiargetcontactlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcontactlist when calling sxapiargetcontactlistPost'
            );
        }

        $resourcePath = '/sxapiargetcontactlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcontactlist)) {
            $_tempBody = $sxapiargetcontactlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcontactlistv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcontactlistv2 $sxapiargetcontactlistv2 sxapiargetcontactlistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiargetcontactlistv2Resp
     */
    public function sxapiargetcontactlistv2Post($sxapiargetcontactlistv2)
    {
        list($response) = $this->sxapiargetcontactlistv2PostWithHttpInfo($sxapiargetcontactlistv2);
        return $response;
    }

    /**
     * Operation sxapiargetcontactlistv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcontactlistv2 $sxapiargetcontactlistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiargetcontactlistv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcontactlistv2PostWithHttpInfo($sxapiargetcontactlistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetcontactlistv2Resp';
        $request = $this->sxapiargetcontactlistv2PostRequest($sxapiargetcontactlistv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiargetcontactlistv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcontactlistv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcontactlistv2 $sxapiargetcontactlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcontactlistv2PostAsync($sxapiargetcontactlistv2)
    {
        return $this->sxapiargetcontactlistv2PostAsyncWithHttpInfo($sxapiargetcontactlistv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcontactlistv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcontactlistv2 $sxapiargetcontactlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcontactlistv2PostAsyncWithHttpInfo($sxapiargetcontactlistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetcontactlistv2Resp';
        $request = $this->sxapiargetcontactlistv2PostRequest($sxapiargetcontactlistv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcontactlistv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcontactlistv2 $sxapiargetcontactlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcontactlistv2PostRequest($sxapiargetcontactlistv2)
    {
        // verify the required parameter 'sxapiargetcontactlistv2' is set
        if ($sxapiargetcontactlistv2 === null || (is_array($sxapiargetcontactlistv2) && count($sxapiargetcontactlistv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcontactlistv2 when calling sxapiargetcontactlistv2Post'
            );
        }

        $resourcePath = '/sxapiargetcontactlistv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcontactlistv2)) {
            $_tempBody = $sxapiargetcontactlistv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerbalancePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerbalance $sxapiargetcustomerbalance sxapiargetcustomerbalance (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiargetcustomerbalanceResp
     */
    public function sxapiargetcustomerbalancePost($sxapiargetcustomerbalance)
    {
        list($response) = $this->sxapiargetcustomerbalancePostWithHttpInfo($sxapiargetcustomerbalance);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerbalancePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerbalance $sxapiargetcustomerbalance (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiargetcustomerbalanceResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerbalancePostWithHttpInfo($sxapiargetcustomerbalance)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerbalanceResp';
        $request = $this->sxapiargetcustomerbalancePostRequest($sxapiargetcustomerbalance);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiargetcustomerbalanceResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerbalancePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerbalance $sxapiargetcustomerbalance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerbalancePostAsync($sxapiargetcustomerbalance)
    {
        return $this->sxapiargetcustomerbalancePostAsyncWithHttpInfo($sxapiargetcustomerbalance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerbalancePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerbalance $sxapiargetcustomerbalance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerbalancePostAsyncWithHttpInfo($sxapiargetcustomerbalance)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerbalanceResp';
        $request = $this->sxapiargetcustomerbalancePostRequest($sxapiargetcustomerbalance);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerbalancePost'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerbalance $sxapiargetcustomerbalance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerbalancePostRequest($sxapiargetcustomerbalance)
    {
        // verify the required parameter 'sxapiargetcustomerbalance' is set
        if ($sxapiargetcustomerbalance === null || (is_array($sxapiargetcustomerbalance) && count($sxapiargetcustomerbalance) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustomerbalance when calling sxapiargetcustomerbalancePost'
            );
        }

        $resourcePath = '/sxapiargetcustomerbalance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustomerbalance)) {
            $_tempBody = $sxapiargetcustomerbalance;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerbalancev2Get
     *
     * .
     *
     * @param  int $company_number company_number (required)
     * @param  string $operator_init operator_init (required)
     * @param  string $operator_password operator_password (required)
     * @param  double $customer_number customer_number (required)
     * @param  string $ship_to ship_to (optional)
     * @param  string $extra_param extra_param (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiargetcustomerbalancev2Resp
     */
    public function sxapiargetcustomerbalancev2Get($company_number, $operator_init, $operator_password, $customer_number, $ship_to = null, $extra_param = null)
    {
        list($response) = $this->sxapiargetcustomerbalancev2GetWithHttpInfo($company_number, $operator_init, $operator_password, $customer_number, $ship_to, $extra_param);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerbalancev2GetWithHttpInfo
     *
     * .
     *
     * @param  int $company_number (required)
     * @param  string $operator_init (required)
     * @param  string $operator_password (required)
     * @param  double $customer_number (required)
     * @param  string $ship_to (optional)
     * @param  string $extra_param (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiargetcustomerbalancev2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerbalancev2GetWithHttpInfo($company_number, $operator_init, $operator_password, $customer_number, $ship_to = null, $extra_param = null)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetcustomerbalancev2Resp';
        $request = $this->sxapiargetcustomerbalancev2GetRequest($company_number, $operator_init, $operator_password, $customer_number, $ship_to, $extra_param);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiargetcustomerbalancev2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerbalancev2GetAsync
     *
     * .
     *
     * @param  int $company_number (required)
     * @param  string $operator_init (required)
     * @param  string $operator_password (required)
     * @param  double $customer_number (required)
     * @param  string $ship_to (optional)
     * @param  string $extra_param (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerbalancev2GetAsync($company_number, $operator_init, $operator_password, $customer_number, $ship_to = null, $extra_param = null)
    {
        return $this->sxapiargetcustomerbalancev2GetAsyncWithHttpInfo($company_number, $operator_init, $operator_password, $customer_number, $ship_to, $extra_param)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerbalancev2GetAsyncWithHttpInfo
     *
     * .
     *
     * @param  int $company_number (required)
     * @param  string $operator_init (required)
     * @param  string $operator_password (required)
     * @param  double $customer_number (required)
     * @param  string $ship_to (optional)
     * @param  string $extra_param (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerbalancev2GetAsyncWithHttpInfo($company_number, $operator_init, $operator_password, $customer_number, $ship_to = null, $extra_param = null)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetcustomerbalancev2Resp';
        $request = $this->sxapiargetcustomerbalancev2GetRequest($company_number, $operator_init, $operator_password, $customer_number, $ship_to, $extra_param);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerbalancev2Get'
     *
     * @param  int $company_number (required)
     * @param  string $operator_init (required)
     * @param  string $operator_password (required)
     * @param  double $customer_number (required)
     * @param  string $ship_to (optional)
     * @param  string $extra_param (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerbalancev2GetRequest($company_number, $operator_init, $operator_password, $customer_number, $ship_to = null, $extra_param = null)
    {
        // verify the required parameter 'company_number' is set
        if ($company_number === null || (is_array($company_number) && count($company_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_number when calling sxapiargetcustomerbalancev2Get'
            );
        }
        // verify the required parameter 'operator_init' is set
        if ($operator_init === null || (is_array($operator_init) && count($operator_init) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operator_init when calling sxapiargetcustomerbalancev2Get'
            );
        }
        // verify the required parameter 'operator_password' is set
        if ($operator_password === null || (is_array($operator_password) && count($operator_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operator_password when calling sxapiargetcustomerbalancev2Get'
            );
        }
        // verify the required parameter 'customer_number' is set
        if ($customer_number === null || (is_array($customer_number) && count($customer_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_number when calling sxapiargetcustomerbalancev2Get'
            );
        }

        $resourcePath = '/sxapiargetcustomerbalancev2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($company_number !== null) {
            $queryParams['companyNumber'] = ObjectSerializer::toQueryValue($company_number);
        }
        // query params
        if ($operator_init !== null) {
            $queryParams['operatorInit'] = ObjectSerializer::toQueryValue($operator_init);
        }
        // query params
        if ($operator_password !== null) {
            $queryParams['operatorPassword'] = ObjectSerializer::toQueryValue($operator_password);
        }
        // query params
        if ($customer_number !== null) {
            $queryParams['customerNumber'] = ObjectSerializer::toQueryValue($customer_number);
        }
        // query params
        if ($ship_to !== null) {
            $queryParams['shipTo'] = ObjectSerializer::toQueryValue($ship_to);
        }
        // query params
        if ($extra_param !== null) {
            $queryParams['extraParam'] = ObjectSerializer::toQueryValue($extra_param);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerbalancev2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerbalancev2 $sxapiargetcustomerbalancev2 sxapiargetcustomerbalancev2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiargetcustomerbalancev2Resp
     */
    public function sxapiargetcustomerbalancev2Post($sxapiargetcustomerbalancev2)
    {
        list($response) = $this->sxapiargetcustomerbalancev2PostWithHttpInfo($sxapiargetcustomerbalancev2);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerbalancev2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerbalancev2 $sxapiargetcustomerbalancev2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiargetcustomerbalancev2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerbalancev2PostWithHttpInfo($sxapiargetcustomerbalancev2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetcustomerbalancev2Resp';
        $request = $this->sxapiargetcustomerbalancev2PostRequest($sxapiargetcustomerbalancev2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiargetcustomerbalancev2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerbalancev2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerbalancev2 $sxapiargetcustomerbalancev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerbalancev2PostAsync($sxapiargetcustomerbalancev2)
    {
        return $this->sxapiargetcustomerbalancev2PostAsyncWithHttpInfo($sxapiargetcustomerbalancev2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerbalancev2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerbalancev2 $sxapiargetcustomerbalancev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerbalancev2PostAsyncWithHttpInfo($sxapiargetcustomerbalancev2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetcustomerbalancev2Resp';
        $request = $this->sxapiargetcustomerbalancev2PostRequest($sxapiargetcustomerbalancev2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerbalancev2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerbalancev2 $sxapiargetcustomerbalancev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerbalancev2PostRequest($sxapiargetcustomerbalancev2)
    {
        // verify the required parameter 'sxapiargetcustomerbalancev2' is set
        if ($sxapiargetcustomerbalancev2 === null || (is_array($sxapiargetcustomerbalancev2) && count($sxapiargetcustomerbalancev2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustomerbalancev2 when calling sxapiargetcustomerbalancev2Post'
            );
        }

        $resourcePath = '/sxapiargetcustomerbalancev2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustomerbalancev2)) {
            $_tempBody = $sxapiargetcustomerbalancev2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerdataPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdata $sxapiargetcustomerdata sxapiargetcustomerdata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiargetcustomerdataResp
     */
    public function sxapiargetcustomerdataPost($sxapiargetcustomerdata)
    {
        list($response) = $this->sxapiargetcustomerdataPostWithHttpInfo($sxapiargetcustomerdata);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerdataPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdata $sxapiargetcustomerdata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiargetcustomerdataResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerdataPostWithHttpInfo($sxapiargetcustomerdata)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdataResp';
        $request = $this->sxapiargetcustomerdataPostRequest($sxapiargetcustomerdata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiargetcustomerdataResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerdataPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdata $sxapiargetcustomerdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdataPostAsync($sxapiargetcustomerdata)
    {
        return $this->sxapiargetcustomerdataPostAsyncWithHttpInfo($sxapiargetcustomerdata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerdataPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdata $sxapiargetcustomerdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdataPostAsyncWithHttpInfo($sxapiargetcustomerdata)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdataResp';
        $request = $this->sxapiargetcustomerdataPostRequest($sxapiargetcustomerdata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerdataPost'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdata $sxapiargetcustomerdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerdataPostRequest($sxapiargetcustomerdata)
    {
        // verify the required parameter 'sxapiargetcustomerdata' is set
        if ($sxapiargetcustomerdata === null || (is_array($sxapiargetcustomerdata) && count($sxapiargetcustomerdata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustomerdata when calling sxapiargetcustomerdataPost'
            );
        }

        $resourcePath = '/sxapiargetcustomerdata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustomerdata)) {
            $_tempBody = $sxapiargetcustomerdata;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerdatacreditPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatacredit $sxapiargetcustomerdatacredit sxapiargetcustomerdatacredit (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiargetcustomerdatacreditResp
     */
    public function sxapiargetcustomerdatacreditPost($sxapiargetcustomerdatacredit)
    {
        list($response) = $this->sxapiargetcustomerdatacreditPostWithHttpInfo($sxapiargetcustomerdatacredit);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerdatacreditPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatacredit $sxapiargetcustomerdatacredit (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiargetcustomerdatacreditResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerdatacreditPostWithHttpInfo($sxapiargetcustomerdatacredit)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdatacreditResp';
        $request = $this->sxapiargetcustomerdatacreditPostRequest($sxapiargetcustomerdatacredit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiargetcustomerdatacreditResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerdatacreditPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatacredit $sxapiargetcustomerdatacredit (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdatacreditPostAsync($sxapiargetcustomerdatacredit)
    {
        return $this->sxapiargetcustomerdatacreditPostAsyncWithHttpInfo($sxapiargetcustomerdatacredit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerdatacreditPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatacredit $sxapiargetcustomerdatacredit (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdatacreditPostAsyncWithHttpInfo($sxapiargetcustomerdatacredit)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdatacreditResp';
        $request = $this->sxapiargetcustomerdatacreditPostRequest($sxapiargetcustomerdatacredit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerdatacreditPost'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatacredit $sxapiargetcustomerdatacredit (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerdatacreditPostRequest($sxapiargetcustomerdatacredit)
    {
        // verify the required parameter 'sxapiargetcustomerdatacredit' is set
        if ($sxapiargetcustomerdatacredit === null || (is_array($sxapiargetcustomerdatacredit) && count($sxapiargetcustomerdatacredit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustomerdatacredit when calling sxapiargetcustomerdatacreditPost'
            );
        }

        $resourcePath = '/sxapiargetcustomerdatacredit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustomerdatacredit)) {
            $_tempBody = $sxapiargetcustomerdatacredit;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerdatacreditmessPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatacreditmess $sxapiargetcustomerdatacreditmess sxapiargetcustomerdatacreditmess (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiargetcustomerdatacreditmessResp
     */
    public function sxapiargetcustomerdatacreditmessPost($sxapiargetcustomerdatacreditmess)
    {
        list($response) = $this->sxapiargetcustomerdatacreditmessPostWithHttpInfo($sxapiargetcustomerdatacreditmess);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerdatacreditmessPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatacreditmess $sxapiargetcustomerdatacreditmess (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiargetcustomerdatacreditmessResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerdatacreditmessPostWithHttpInfo($sxapiargetcustomerdatacreditmess)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdatacreditmessResp';
        $request = $this->sxapiargetcustomerdatacreditmessPostRequest($sxapiargetcustomerdatacreditmess);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiargetcustomerdatacreditmessResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerdatacreditmessPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatacreditmess $sxapiargetcustomerdatacreditmess (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdatacreditmessPostAsync($sxapiargetcustomerdatacreditmess)
    {
        return $this->sxapiargetcustomerdatacreditmessPostAsyncWithHttpInfo($sxapiargetcustomerdatacreditmess)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerdatacreditmessPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatacreditmess $sxapiargetcustomerdatacreditmess (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdatacreditmessPostAsyncWithHttpInfo($sxapiargetcustomerdatacreditmess)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdatacreditmessResp';
        $request = $this->sxapiargetcustomerdatacreditmessPostRequest($sxapiargetcustomerdatacreditmess);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerdatacreditmessPost'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatacreditmess $sxapiargetcustomerdatacreditmess (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerdatacreditmessPostRequest($sxapiargetcustomerdatacreditmess)
    {
        // verify the required parameter 'sxapiargetcustomerdatacreditmess' is set
        if ($sxapiargetcustomerdatacreditmess === null || (is_array($sxapiargetcustomerdatacreditmess) && count($sxapiargetcustomerdatacreditmess) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustomerdatacreditmess when calling sxapiargetcustomerdatacreditmessPost'
            );
        }

        $resourcePath = '/sxapiargetcustomerdatacreditmess';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustomerdatacreditmess)) {
            $_tempBody = $sxapiargetcustomerdatacreditmess;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerdatacreditrestPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatacreditrest $sxapiargetcustomerdatacreditrest sxapiargetcustomerdatacreditrest (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiargetcustomerdatacreditrestResp
     */
    public function sxapiargetcustomerdatacreditrestPost($sxapiargetcustomerdatacreditrest)
    {
        list($response) = $this->sxapiargetcustomerdatacreditrestPostWithHttpInfo($sxapiargetcustomerdatacreditrest);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerdatacreditrestPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatacreditrest $sxapiargetcustomerdatacreditrest (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiargetcustomerdatacreditrestResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerdatacreditrestPostWithHttpInfo($sxapiargetcustomerdatacreditrest)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdatacreditrestResp';
        $request = $this->sxapiargetcustomerdatacreditrestPostRequest($sxapiargetcustomerdatacreditrest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiargetcustomerdatacreditrestResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerdatacreditrestPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatacreditrest $sxapiargetcustomerdatacreditrest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdatacreditrestPostAsync($sxapiargetcustomerdatacreditrest)
    {
        return $this->sxapiargetcustomerdatacreditrestPostAsyncWithHttpInfo($sxapiargetcustomerdatacreditrest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerdatacreditrestPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatacreditrest $sxapiargetcustomerdatacreditrest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdatacreditrestPostAsyncWithHttpInfo($sxapiargetcustomerdatacreditrest)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdatacreditrestResp';
        $request = $this->sxapiargetcustomerdatacreditrestPostRequest($sxapiargetcustomerdatacreditrest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerdatacreditrestPost'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatacreditrest $sxapiargetcustomerdatacreditrest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerdatacreditrestPostRequest($sxapiargetcustomerdatacreditrest)
    {
        // verify the required parameter 'sxapiargetcustomerdatacreditrest' is set
        if ($sxapiargetcustomerdatacreditrest === null || (is_array($sxapiargetcustomerdatacreditrest) && count($sxapiargetcustomerdatacreditrest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustomerdatacreditrest when calling sxapiargetcustomerdatacreditrestPost'
            );
        }

        $resourcePath = '/sxapiargetcustomerdatacreditrest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustomerdatacreditrest)) {
            $_tempBody = $sxapiargetcustomerdatacreditrest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerdatacreditv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatacreditv2 $sxapiargetcustomerdatacreditv2 sxapiargetcustomerdatacreditv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiargetcustomerdatacreditv2Resp
     */
    public function sxapiargetcustomerdatacreditv2Post($sxapiargetcustomerdatacreditv2)
    {
        list($response) = $this->sxapiargetcustomerdatacreditv2PostWithHttpInfo($sxapiargetcustomerdatacreditv2);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerdatacreditv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatacreditv2 $sxapiargetcustomerdatacreditv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiargetcustomerdatacreditv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerdatacreditv2PostWithHttpInfo($sxapiargetcustomerdatacreditv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetcustomerdatacreditv2Resp';
        $request = $this->sxapiargetcustomerdatacreditv2PostRequest($sxapiargetcustomerdatacreditv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiargetcustomerdatacreditv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerdatacreditv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatacreditv2 $sxapiargetcustomerdatacreditv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdatacreditv2PostAsync($sxapiargetcustomerdatacreditv2)
    {
        return $this->sxapiargetcustomerdatacreditv2PostAsyncWithHttpInfo($sxapiargetcustomerdatacreditv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerdatacreditv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatacreditv2 $sxapiargetcustomerdatacreditv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdatacreditv2PostAsyncWithHttpInfo($sxapiargetcustomerdatacreditv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetcustomerdatacreditv2Resp';
        $request = $this->sxapiargetcustomerdatacreditv2PostRequest($sxapiargetcustomerdatacreditv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerdatacreditv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatacreditv2 $sxapiargetcustomerdatacreditv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerdatacreditv2PostRequest($sxapiargetcustomerdatacreditv2)
    {
        // verify the required parameter 'sxapiargetcustomerdatacreditv2' is set
        if ($sxapiargetcustomerdatacreditv2 === null || (is_array($sxapiargetcustomerdatacreditv2) && count($sxapiargetcustomerdatacreditv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustomerdatacreditv2 when calling sxapiargetcustomerdatacreditv2Post'
            );
        }

        $resourcePath = '/sxapiargetcustomerdatacreditv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustomerdatacreditv2)) {
            $_tempBody = $sxapiargetcustomerdatacreditv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerdataediPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdataedi $sxapiargetcustomerdataedi sxapiargetcustomerdataedi (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiargetcustomerdataediResp
     */
    public function sxapiargetcustomerdataediPost($sxapiargetcustomerdataedi)
    {
        list($response) = $this->sxapiargetcustomerdataediPostWithHttpInfo($sxapiargetcustomerdataedi);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerdataediPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdataedi $sxapiargetcustomerdataedi (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiargetcustomerdataediResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerdataediPostWithHttpInfo($sxapiargetcustomerdataedi)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdataediResp';
        $request = $this->sxapiargetcustomerdataediPostRequest($sxapiargetcustomerdataedi);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiargetcustomerdataediResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerdataediPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdataedi $sxapiargetcustomerdataedi (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdataediPostAsync($sxapiargetcustomerdataedi)
    {
        return $this->sxapiargetcustomerdataediPostAsyncWithHttpInfo($sxapiargetcustomerdataedi)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerdataediPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdataedi $sxapiargetcustomerdataedi (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdataediPostAsyncWithHttpInfo($sxapiargetcustomerdataedi)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdataediResp';
        $request = $this->sxapiargetcustomerdataediPostRequest($sxapiargetcustomerdataedi);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerdataediPost'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdataedi $sxapiargetcustomerdataedi (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerdataediPostRequest($sxapiargetcustomerdataedi)
    {
        // verify the required parameter 'sxapiargetcustomerdataedi' is set
        if ($sxapiargetcustomerdataedi === null || (is_array($sxapiargetcustomerdataedi) && count($sxapiargetcustomerdataedi) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustomerdataedi when calling sxapiargetcustomerdataediPost'
            );
        }

        $resourcePath = '/sxapiargetcustomerdataedi';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustomerdataedi)) {
            $_tempBody = $sxapiargetcustomerdataedi;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerdatageneralPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatageneral $sxapiargetcustomerdatageneral sxapiargetcustomerdatageneral (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiargetcustomerdatageneralResp
     */
    public function sxapiargetcustomerdatageneralPost($sxapiargetcustomerdatageneral)
    {
        list($response) = $this->sxapiargetcustomerdatageneralPostWithHttpInfo($sxapiargetcustomerdatageneral);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerdatageneralPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatageneral $sxapiargetcustomerdatageneral (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiargetcustomerdatageneralResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerdatageneralPostWithHttpInfo($sxapiargetcustomerdatageneral)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdatageneralResp';
        $request = $this->sxapiargetcustomerdatageneralPostRequest($sxapiargetcustomerdatageneral);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiargetcustomerdatageneralResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerdatageneralPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatageneral $sxapiargetcustomerdatageneral (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdatageneralPostAsync($sxapiargetcustomerdatageneral)
    {
        return $this->sxapiargetcustomerdatageneralPostAsyncWithHttpInfo($sxapiargetcustomerdatageneral)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerdatageneralPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatageneral $sxapiargetcustomerdatageneral (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdatageneralPostAsyncWithHttpInfo($sxapiargetcustomerdatageneral)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdatageneralResp';
        $request = $this->sxapiargetcustomerdatageneralPostRequest($sxapiargetcustomerdatageneral);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerdatageneralPost'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatageneral $sxapiargetcustomerdatageneral (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerdatageneralPostRequest($sxapiargetcustomerdatageneral)
    {
        // verify the required parameter 'sxapiargetcustomerdatageneral' is set
        if ($sxapiargetcustomerdatageneral === null || (is_array($sxapiargetcustomerdatageneral) && count($sxapiargetcustomerdatageneral) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustomerdatageneral when calling sxapiargetcustomerdatageneralPost'
            );
        }

        $resourcePath = '/sxapiargetcustomerdatageneral';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustomerdatageneral)) {
            $_tempBody = $sxapiargetcustomerdatageneral;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerdatageneralrestPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatageneralrest $sxapiargetcustomerdatageneralrest sxapiargetcustomerdatageneralrest (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiargetcustomerdatageneralrestResp
     */
    public function sxapiargetcustomerdatageneralrestPost($sxapiargetcustomerdatageneralrest)
    {
        list($response) = $this->sxapiargetcustomerdatageneralrestPostWithHttpInfo($sxapiargetcustomerdatageneralrest);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerdatageneralrestPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatageneralrest $sxapiargetcustomerdatageneralrest (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiargetcustomerdatageneralrestResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerdatageneralrestPostWithHttpInfo($sxapiargetcustomerdatageneralrest)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdatageneralrestResp';
        $request = $this->sxapiargetcustomerdatageneralrestPostRequest($sxapiargetcustomerdatageneralrest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiargetcustomerdatageneralrestResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerdatageneralrestPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatageneralrest $sxapiargetcustomerdatageneralrest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdatageneralrestPostAsync($sxapiargetcustomerdatageneralrest)
    {
        return $this->sxapiargetcustomerdatageneralrestPostAsyncWithHttpInfo($sxapiargetcustomerdatageneralrest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerdatageneralrestPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatageneralrest $sxapiargetcustomerdatageneralrest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdatageneralrestPostAsyncWithHttpInfo($sxapiargetcustomerdatageneralrest)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdatageneralrestResp';
        $request = $this->sxapiargetcustomerdatageneralrestPostRequest($sxapiargetcustomerdatageneralrest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerdatageneralrestPost'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatageneralrest $sxapiargetcustomerdatageneralrest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerdatageneralrestPostRequest($sxapiargetcustomerdatageneralrest)
    {
        // verify the required parameter 'sxapiargetcustomerdatageneralrest' is set
        if ($sxapiargetcustomerdatageneralrest === null || (is_array($sxapiargetcustomerdatageneralrest) && count($sxapiargetcustomerdatageneralrest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustomerdatageneralrest when calling sxapiargetcustomerdatageneralrestPost'
            );
        }

        $resourcePath = '/sxapiargetcustomerdatageneralrest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustomerdatageneralrest)) {
            $_tempBody = $sxapiargetcustomerdatageneralrest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerdatageneralv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatageneralv2 $sxapiargetcustomerdatageneralv2 sxapiargetcustomerdatageneralv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiargetcustomerdatageneralv2Resp
     */
    public function sxapiargetcustomerdatageneralv2Post($sxapiargetcustomerdatageneralv2)
    {
        list($response) = $this->sxapiargetcustomerdatageneralv2PostWithHttpInfo($sxapiargetcustomerdatageneralv2);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerdatageneralv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatageneralv2 $sxapiargetcustomerdatageneralv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiargetcustomerdatageneralv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerdatageneralv2PostWithHttpInfo($sxapiargetcustomerdatageneralv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetcustomerdatageneralv2Resp';
        $request = $this->sxapiargetcustomerdatageneralv2PostRequest($sxapiargetcustomerdatageneralv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiargetcustomerdatageneralv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerdatageneralv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatageneralv2 $sxapiargetcustomerdatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdatageneralv2PostAsync($sxapiargetcustomerdatageneralv2)
    {
        return $this->sxapiargetcustomerdatageneralv2PostAsyncWithHttpInfo($sxapiargetcustomerdatageneralv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerdatageneralv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatageneralv2 $sxapiargetcustomerdatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdatageneralv2PostAsyncWithHttpInfo($sxapiargetcustomerdatageneralv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetcustomerdatageneralv2Resp';
        $request = $this->sxapiargetcustomerdatageneralv2PostRequest($sxapiargetcustomerdatageneralv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerdatageneralv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatageneralv2 $sxapiargetcustomerdatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerdatageneralv2PostRequest($sxapiargetcustomerdatageneralv2)
    {
        // verify the required parameter 'sxapiargetcustomerdatageneralv2' is set
        if ($sxapiargetcustomerdatageneralv2 === null || (is_array($sxapiargetcustomerdatageneralv2) && count($sxapiargetcustomerdatageneralv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustomerdatageneralv2 when calling sxapiargetcustomerdatageneralv2Post'
            );
        }

        $resourcePath = '/sxapiargetcustomerdatageneralv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustomerdatageneralv2)) {
            $_tempBody = $sxapiargetcustomerdatageneralv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerdataorderingPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdataordering $sxapiargetcustomerdataordering sxapiargetcustomerdataordering (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiargetcustomerdataorderingResp
     */
    public function sxapiargetcustomerdataorderingPost($sxapiargetcustomerdataordering)
    {
        list($response) = $this->sxapiargetcustomerdataorderingPostWithHttpInfo($sxapiargetcustomerdataordering);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerdataorderingPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdataordering $sxapiargetcustomerdataordering (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiargetcustomerdataorderingResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerdataorderingPostWithHttpInfo($sxapiargetcustomerdataordering)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdataorderingResp';
        $request = $this->sxapiargetcustomerdataorderingPostRequest($sxapiargetcustomerdataordering);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiargetcustomerdataorderingResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerdataorderingPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdataordering $sxapiargetcustomerdataordering (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdataorderingPostAsync($sxapiargetcustomerdataordering)
    {
        return $this->sxapiargetcustomerdataorderingPostAsyncWithHttpInfo($sxapiargetcustomerdataordering)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerdataorderingPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdataordering $sxapiargetcustomerdataordering (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdataorderingPostAsyncWithHttpInfo($sxapiargetcustomerdataordering)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdataorderingResp';
        $request = $this->sxapiargetcustomerdataorderingPostRequest($sxapiargetcustomerdataordering);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerdataorderingPost'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdataordering $sxapiargetcustomerdataordering (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerdataorderingPostRequest($sxapiargetcustomerdataordering)
    {
        // verify the required parameter 'sxapiargetcustomerdataordering' is set
        if ($sxapiargetcustomerdataordering === null || (is_array($sxapiargetcustomerdataordering) && count($sxapiargetcustomerdataordering) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustomerdataordering when calling sxapiargetcustomerdataorderingPost'
            );
        }

        $resourcePath = '/sxapiargetcustomerdataordering';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustomerdataordering)) {
            $_tempBody = $sxapiargetcustomerdataordering;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerdataorderingrestPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdataorderingrest $sxapiargetcustomerdataorderingrest sxapiargetcustomerdataorderingrest (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiargetcustomerdataorderingrestResp
     */
    public function sxapiargetcustomerdataorderingrestPost($sxapiargetcustomerdataorderingrest)
    {
        list($response) = $this->sxapiargetcustomerdataorderingrestPostWithHttpInfo($sxapiargetcustomerdataorderingrest);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerdataorderingrestPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdataorderingrest $sxapiargetcustomerdataorderingrest (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiargetcustomerdataorderingrestResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerdataorderingrestPostWithHttpInfo($sxapiargetcustomerdataorderingrest)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdataorderingrestResp';
        $request = $this->sxapiargetcustomerdataorderingrestPostRequest($sxapiargetcustomerdataorderingrest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiargetcustomerdataorderingrestResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerdataorderingrestPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdataorderingrest $sxapiargetcustomerdataorderingrest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdataorderingrestPostAsync($sxapiargetcustomerdataorderingrest)
    {
        return $this->sxapiargetcustomerdataorderingrestPostAsyncWithHttpInfo($sxapiargetcustomerdataorderingrest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerdataorderingrestPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdataorderingrest $sxapiargetcustomerdataorderingrest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdataorderingrestPostAsyncWithHttpInfo($sxapiargetcustomerdataorderingrest)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdataorderingrestResp';
        $request = $this->sxapiargetcustomerdataorderingrestPostRequest($sxapiargetcustomerdataorderingrest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerdataorderingrestPost'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdataorderingrest $sxapiargetcustomerdataorderingrest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerdataorderingrestPostRequest($sxapiargetcustomerdataorderingrest)
    {
        // verify the required parameter 'sxapiargetcustomerdataorderingrest' is set
        if ($sxapiargetcustomerdataorderingrest === null || (is_array($sxapiargetcustomerdataorderingrest) && count($sxapiargetcustomerdataorderingrest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustomerdataorderingrest when calling sxapiargetcustomerdataorderingrestPost'
            );
        }

        $resourcePath = '/sxapiargetcustomerdataorderingrest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustomerdataorderingrest)) {
            $_tempBody = $sxapiargetcustomerdataorderingrest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerdatataxingPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatataxing $sxapiargetcustomerdatataxing sxapiargetcustomerdatataxing (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiargetcustomerdatataxingResp
     */
    public function sxapiargetcustomerdatataxingPost($sxapiargetcustomerdatataxing)
    {
        list($response) = $this->sxapiargetcustomerdatataxingPostWithHttpInfo($sxapiargetcustomerdatataxing);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerdatataxingPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatataxing $sxapiargetcustomerdatataxing (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiargetcustomerdatataxingResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerdatataxingPostWithHttpInfo($sxapiargetcustomerdatataxing)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdatataxingResp';
        $request = $this->sxapiargetcustomerdatataxingPostRequest($sxapiargetcustomerdatataxing);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiargetcustomerdatataxingResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerdatataxingPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatataxing $sxapiargetcustomerdatataxing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdatataxingPostAsync($sxapiargetcustomerdatataxing)
    {
        return $this->sxapiargetcustomerdatataxingPostAsyncWithHttpInfo($sxapiargetcustomerdatataxing)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerdatataxingPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatataxing $sxapiargetcustomerdatataxing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerdatataxingPostAsyncWithHttpInfo($sxapiargetcustomerdatataxing)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerdatataxingResp';
        $request = $this->sxapiargetcustomerdatataxingPostRequest($sxapiargetcustomerdatataxing);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerdatataxingPost'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerdatataxing $sxapiargetcustomerdatataxing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerdatataxingPostRequest($sxapiargetcustomerdatataxing)
    {
        // verify the required parameter 'sxapiargetcustomerdatataxing' is set
        if ($sxapiargetcustomerdatataxing === null || (is_array($sxapiargetcustomerdatataxing) && count($sxapiargetcustomerdatataxing) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustomerdatataxing when calling sxapiargetcustomerdatataxingPost'
            );
        }

        $resourcePath = '/sxapiargetcustomerdatataxing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustomerdatataxing)) {
            $_tempBody = $sxapiargetcustomerdatataxing;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerlist $sxapiargetcustomerlist sxapiargetcustomerlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiargetcustomerlistResp
     */
    public function sxapiargetcustomerlistPost($sxapiargetcustomerlist)
    {
        list($response) = $this->sxapiargetcustomerlistPostWithHttpInfo($sxapiargetcustomerlist);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerlist $sxapiargetcustomerlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiargetcustomerlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerlistPostWithHttpInfo($sxapiargetcustomerlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerlistResp';
        $request = $this->sxapiargetcustomerlistPostRequest($sxapiargetcustomerlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiargetcustomerlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerlist $sxapiargetcustomerlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerlistPostAsync($sxapiargetcustomerlist)
    {
        return $this->sxapiargetcustomerlistPostAsyncWithHttpInfo($sxapiargetcustomerlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerlist $sxapiargetcustomerlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerlistPostAsyncWithHttpInfo($sxapiargetcustomerlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustomerlistResp';
        $request = $this->sxapiargetcustomerlistPostRequest($sxapiargetcustomerlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerlist $sxapiargetcustomerlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerlistPostRequest($sxapiargetcustomerlist)
    {
        // verify the required parameter 'sxapiargetcustomerlist' is set
        if ($sxapiargetcustomerlist === null || (is_array($sxapiargetcustomerlist) && count($sxapiargetcustomerlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustomerlist when calling sxapiargetcustomerlistPost'
            );
        }

        $resourcePath = '/sxapiargetcustomerlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustomerlist)) {
            $_tempBody = $sxapiargetcustomerlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerlistv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerlistv2 $sxapiargetcustomerlistv2 sxapiargetcustomerlistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiargetcustomerlistv2Resp
     */
    public function sxapiargetcustomerlistv2Post($sxapiargetcustomerlistv2)
    {
        list($response) = $this->sxapiargetcustomerlistv2PostWithHttpInfo($sxapiargetcustomerlistv2);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerlistv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerlistv2 $sxapiargetcustomerlistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiargetcustomerlistv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerlistv2PostWithHttpInfo($sxapiargetcustomerlistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetcustomerlistv2Resp';
        $request = $this->sxapiargetcustomerlistv2PostRequest($sxapiargetcustomerlistv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiargetcustomerlistv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerlistv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerlistv2 $sxapiargetcustomerlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerlistv2PostAsync($sxapiargetcustomerlistv2)
    {
        return $this->sxapiargetcustomerlistv2PostAsyncWithHttpInfo($sxapiargetcustomerlistv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerlistv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerlistv2 $sxapiargetcustomerlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerlistv2PostAsyncWithHttpInfo($sxapiargetcustomerlistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetcustomerlistv2Resp';
        $request = $this->sxapiargetcustomerlistv2PostRequest($sxapiargetcustomerlistv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerlistv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerlistv2 $sxapiargetcustomerlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerlistv2PostRequest($sxapiargetcustomerlistv2)
    {
        // verify the required parameter 'sxapiargetcustomerlistv2' is set
        if ($sxapiargetcustomerlistv2 === null || (is_array($sxapiargetcustomerlistv2) && count($sxapiargetcustomerlistv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustomerlistv2 when calling sxapiargetcustomerlistv2Post'
            );
        }

        $resourcePath = '/sxapiargetcustomerlistv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustomerlistv2)) {
            $_tempBody = $sxapiargetcustomerlistv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustomerlistv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerlistv3 $sxapiargetcustomerlistv3 sxapiargetcustomerlistv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiargetcustomerlistv3Resp
     */
    public function sxapiargetcustomerlistv3Post($sxapiargetcustomerlistv3)
    {
        list($response) = $this->sxapiargetcustomerlistv3PostWithHttpInfo($sxapiargetcustomerlistv3);
        return $response;
    }

    /**
     * Operation sxapiargetcustomerlistv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerlistv3 $sxapiargetcustomerlistv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiargetcustomerlistv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustomerlistv3PostWithHttpInfo($sxapiargetcustomerlistv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetcustomerlistv3Resp';
        $request = $this->sxapiargetcustomerlistv3PostRequest($sxapiargetcustomerlistv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiargetcustomerlistv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustomerlistv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerlistv3 $sxapiargetcustomerlistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerlistv3PostAsync($sxapiargetcustomerlistv3)
    {
        return $this->sxapiargetcustomerlistv3PostAsyncWithHttpInfo($sxapiargetcustomerlistv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustomerlistv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerlistv3 $sxapiargetcustomerlistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustomerlistv3PostAsyncWithHttpInfo($sxapiargetcustomerlistv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetcustomerlistv3Resp';
        $request = $this->sxapiargetcustomerlistv3PostRequest($sxapiargetcustomerlistv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustomerlistv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustomerlistv3 $sxapiargetcustomerlistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustomerlistv3PostRequest($sxapiargetcustomerlistv3)
    {
        // verify the required parameter 'sxapiargetcustomerlistv3' is set
        if ($sxapiargetcustomerlistv3 === null || (is_array($sxapiargetcustomerlistv3) && count($sxapiargetcustomerlistv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustomerlistv3 when calling sxapiargetcustomerlistv3Post'
            );
        }

        $resourcePath = '/sxapiargetcustomerlistv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustomerlistv3)) {
            $_tempBody = $sxapiargetcustomerlistv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetcustpricetypelistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustpricetypelist $sxapiargetcustpricetypelist sxapiargetcustpricetypelist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiargetcustpricetypelistResp
     */
    public function sxapiargetcustpricetypelistPost($sxapiargetcustpricetypelist)
    {
        list($response) = $this->sxapiargetcustpricetypelistPostWithHttpInfo($sxapiargetcustpricetypelist);
        return $response;
    }

    /**
     * Operation sxapiargetcustpricetypelistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustpricetypelist $sxapiargetcustpricetypelist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiargetcustpricetypelistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetcustpricetypelistPostWithHttpInfo($sxapiargetcustpricetypelist)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustpricetypelistResp';
        $request = $this->sxapiargetcustpricetypelistPostRequest($sxapiargetcustpricetypelist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiargetcustpricetypelistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetcustpricetypelistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustpricetypelist $sxapiargetcustpricetypelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustpricetypelistPostAsync($sxapiargetcustpricetypelist)
    {
        return $this->sxapiargetcustpricetypelistPostAsyncWithHttpInfo($sxapiargetcustpricetypelist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetcustpricetypelistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustpricetypelist $sxapiargetcustpricetypelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetcustpricetypelistPostAsyncWithHttpInfo($sxapiargetcustpricetypelist)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetcustpricetypelistResp';
        $request = $this->sxapiargetcustpricetypelistPostRequest($sxapiargetcustpricetypelist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetcustpricetypelistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiargetcustpricetypelist $sxapiargetcustpricetypelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetcustpricetypelistPostRequest($sxapiargetcustpricetypelist)
    {
        // verify the required parameter 'sxapiargetcustpricetypelist' is set
        if ($sxapiargetcustpricetypelist === null || (is_array($sxapiargetcustpricetypelist) && count($sxapiargetcustpricetypelist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetcustpricetypelist when calling sxapiargetcustpricetypelistPost'
            );
        }

        $resourcePath = '/sxapiargetcustpricetypelist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetcustpricetypelist)) {
            $_tempBody = $sxapiargetcustpricetypelist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetinvoicelistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetinvoicelist $sxapiargetinvoicelist sxapiargetinvoicelist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiargetinvoicelistResp
     */
    public function sxapiargetinvoicelistPost($sxapiargetinvoicelist)
    {
        list($response) = $this->sxapiargetinvoicelistPostWithHttpInfo($sxapiargetinvoicelist);
        return $response;
    }

    /**
     * Operation sxapiargetinvoicelistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetinvoicelist $sxapiargetinvoicelist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiargetinvoicelistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetinvoicelistPostWithHttpInfo($sxapiargetinvoicelist)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetinvoicelistResp';
        $request = $this->sxapiargetinvoicelistPostRequest($sxapiargetinvoicelist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiargetinvoicelistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetinvoicelistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetinvoicelist $sxapiargetinvoicelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetinvoicelistPostAsync($sxapiargetinvoicelist)
    {
        return $this->sxapiargetinvoicelistPostAsyncWithHttpInfo($sxapiargetinvoicelist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetinvoicelistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetinvoicelist $sxapiargetinvoicelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetinvoicelistPostAsyncWithHttpInfo($sxapiargetinvoicelist)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetinvoicelistResp';
        $request = $this->sxapiargetinvoicelistPostRequest($sxapiargetinvoicelist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetinvoicelistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiargetinvoicelist $sxapiargetinvoicelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetinvoicelistPostRequest($sxapiargetinvoicelist)
    {
        // verify the required parameter 'sxapiargetinvoicelist' is set
        if ($sxapiargetinvoicelist === null || (is_array($sxapiargetinvoicelist) && count($sxapiargetinvoicelist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetinvoicelist when calling sxapiargetinvoicelistPost'
            );
        }

        $resourcePath = '/sxapiargetinvoicelist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetinvoicelist)) {
            $_tempBody = $sxapiargetinvoicelist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetinvoicelistv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetinvoicelistv2 $sxapiargetinvoicelistv2 sxapiargetinvoicelistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiargetinvoicelistv2Resp
     */
    public function sxapiargetinvoicelistv2Post($sxapiargetinvoicelistv2)
    {
        list($response) = $this->sxapiargetinvoicelistv2PostWithHttpInfo($sxapiargetinvoicelistv2);
        return $response;
    }

    /**
     * Operation sxapiargetinvoicelistv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetinvoicelistv2 $sxapiargetinvoicelistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiargetinvoicelistv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetinvoicelistv2PostWithHttpInfo($sxapiargetinvoicelistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetinvoicelistv2Resp';
        $request = $this->sxapiargetinvoicelistv2PostRequest($sxapiargetinvoicelistv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiargetinvoicelistv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetinvoicelistv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetinvoicelistv2 $sxapiargetinvoicelistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetinvoicelistv2PostAsync($sxapiargetinvoicelistv2)
    {
        return $this->sxapiargetinvoicelistv2PostAsyncWithHttpInfo($sxapiargetinvoicelistv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetinvoicelistv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetinvoicelistv2 $sxapiargetinvoicelistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetinvoicelistv2PostAsyncWithHttpInfo($sxapiargetinvoicelistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetinvoicelistv2Resp';
        $request = $this->sxapiargetinvoicelistv2PostRequest($sxapiargetinvoicelistv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetinvoicelistv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiargetinvoicelistv2 $sxapiargetinvoicelistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetinvoicelistv2PostRequest($sxapiargetinvoicelistv2)
    {
        // verify the required parameter 'sxapiargetinvoicelistv2' is set
        if ($sxapiargetinvoicelistv2 === null || (is_array($sxapiargetinvoicelistv2) && count($sxapiargetinvoicelistv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetinvoicelistv2 when calling sxapiargetinvoicelistv2Post'
            );
        }

        $resourcePath = '/sxapiargetinvoicelistv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetinvoicelistv2)) {
            $_tempBody = $sxapiargetinvoicelistv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetinvoicelistv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetinvoicelistv3 $sxapiargetinvoicelistv3 sxapiargetinvoicelistv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiargetinvoicelistv3Resp
     */
    public function sxapiargetinvoicelistv3Post($sxapiargetinvoicelistv3)
    {
        list($response) = $this->sxapiargetinvoicelistv3PostWithHttpInfo($sxapiargetinvoicelistv3);
        return $response;
    }

    /**
     * Operation sxapiargetinvoicelistv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetinvoicelistv3 $sxapiargetinvoicelistv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiargetinvoicelistv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetinvoicelistv3PostWithHttpInfo($sxapiargetinvoicelistv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetinvoicelistv3Resp';
        $request = $this->sxapiargetinvoicelistv3PostRequest($sxapiargetinvoicelistv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiargetinvoicelistv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetinvoicelistv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetinvoicelistv3 $sxapiargetinvoicelistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetinvoicelistv3PostAsync($sxapiargetinvoicelistv3)
    {
        return $this->sxapiargetinvoicelistv3PostAsyncWithHttpInfo($sxapiargetinvoicelistv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetinvoicelistv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetinvoicelistv3 $sxapiargetinvoicelistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetinvoicelistv3PostAsyncWithHttpInfo($sxapiargetinvoicelistv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetinvoicelistv3Resp';
        $request = $this->sxapiargetinvoicelistv3PostRequest($sxapiargetinvoicelistv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetinvoicelistv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapiargetinvoicelistv3 $sxapiargetinvoicelistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetinvoicelistv3PostRequest($sxapiargetinvoicelistv3)
    {
        // verify the required parameter 'sxapiargetinvoicelistv3' is set
        if ($sxapiargetinvoicelistv3 === null || (is_array($sxapiargetinvoicelistv3) && count($sxapiargetinvoicelistv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetinvoicelistv3 when calling sxapiargetinvoicelistv3Post'
            );
        }

        $resourcePath = '/sxapiargetinvoicelistv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetinvoicelistv3)) {
            $_tempBody = $sxapiargetinvoicelistv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetmisccustomerlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetmisccustomerlist $sxapiargetmisccustomerlist sxapiargetmisccustomerlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiargetmisccustomerlistResp
     */
    public function sxapiargetmisccustomerlistPost($sxapiargetmisccustomerlist)
    {
        list($response) = $this->sxapiargetmisccustomerlistPostWithHttpInfo($sxapiargetmisccustomerlist);
        return $response;
    }

    /**
     * Operation sxapiargetmisccustomerlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetmisccustomerlist $sxapiargetmisccustomerlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiargetmisccustomerlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetmisccustomerlistPostWithHttpInfo($sxapiargetmisccustomerlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetmisccustomerlistResp';
        $request = $this->sxapiargetmisccustomerlistPostRequest($sxapiargetmisccustomerlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiargetmisccustomerlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetmisccustomerlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetmisccustomerlist $sxapiargetmisccustomerlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetmisccustomerlistPostAsync($sxapiargetmisccustomerlist)
    {
        return $this->sxapiargetmisccustomerlistPostAsyncWithHttpInfo($sxapiargetmisccustomerlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetmisccustomerlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetmisccustomerlist $sxapiargetmisccustomerlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetmisccustomerlistPostAsyncWithHttpInfo($sxapiargetmisccustomerlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetmisccustomerlistResp';
        $request = $this->sxapiargetmisccustomerlistPostRequest($sxapiargetmisccustomerlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetmisccustomerlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiargetmisccustomerlist $sxapiargetmisccustomerlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetmisccustomerlistPostRequest($sxapiargetmisccustomerlist)
    {
        // verify the required parameter 'sxapiargetmisccustomerlist' is set
        if ($sxapiargetmisccustomerlist === null || (is_array($sxapiargetmisccustomerlist) && count($sxapiargetmisccustomerlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetmisccustomerlist when calling sxapiargetmisccustomerlistPost'
            );
        }

        $resourcePath = '/sxapiargetmisccustomerlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetmisccustomerlist)) {
            $_tempBody = $sxapiargetmisccustomerlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetshiptolistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetshiptolist $sxapiargetshiptolist sxapiargetshiptolist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiargetshiptolistResp
     */
    public function sxapiargetshiptolistPost($sxapiargetshiptolist)
    {
        list($response) = $this->sxapiargetshiptolistPostWithHttpInfo($sxapiargetshiptolist);
        return $response;
    }

    /**
     * Operation sxapiargetshiptolistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetshiptolist $sxapiargetshiptolist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiargetshiptolistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetshiptolistPostWithHttpInfo($sxapiargetshiptolist)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetshiptolistResp';
        $request = $this->sxapiargetshiptolistPostRequest($sxapiargetshiptolist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiargetshiptolistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetshiptolistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetshiptolist $sxapiargetshiptolist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetshiptolistPostAsync($sxapiargetshiptolist)
    {
        return $this->sxapiargetshiptolistPostAsyncWithHttpInfo($sxapiargetshiptolist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetshiptolistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetshiptolist $sxapiargetshiptolist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetshiptolistPostAsyncWithHttpInfo($sxapiargetshiptolist)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetshiptolistResp';
        $request = $this->sxapiargetshiptolistPostRequest($sxapiargetshiptolist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetshiptolistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiargetshiptolist $sxapiargetshiptolist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetshiptolistPostRequest($sxapiargetshiptolist)
    {
        // verify the required parameter 'sxapiargetshiptolist' is set
        if ($sxapiargetshiptolist === null || (is_array($sxapiargetshiptolist) && count($sxapiargetshiptolist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetshiptolist when calling sxapiargetshiptolistPost'
            );
        }

        $resourcePath = '/sxapiargetshiptolist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetshiptolist)) {
            $_tempBody = $sxapiargetshiptolist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetshiptolistv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetshiptolistv2 $sxapiargetshiptolistv2 sxapiargetshiptolistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiargetshiptolistv2Resp
     */
    public function sxapiargetshiptolistv2Post($sxapiargetshiptolistv2)
    {
        list($response) = $this->sxapiargetshiptolistv2PostWithHttpInfo($sxapiargetshiptolistv2);
        return $response;
    }

    /**
     * Operation sxapiargetshiptolistv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetshiptolistv2 $sxapiargetshiptolistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiargetshiptolistv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetshiptolistv2PostWithHttpInfo($sxapiargetshiptolistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetshiptolistv2Resp';
        $request = $this->sxapiargetshiptolistv2PostRequest($sxapiargetshiptolistv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiargetshiptolistv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetshiptolistv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetshiptolistv2 $sxapiargetshiptolistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetshiptolistv2PostAsync($sxapiargetshiptolistv2)
    {
        return $this->sxapiargetshiptolistv2PostAsyncWithHttpInfo($sxapiargetshiptolistv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetshiptolistv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetshiptolistv2 $sxapiargetshiptolistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetshiptolistv2PostAsyncWithHttpInfo($sxapiargetshiptolistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetshiptolistv2Resp';
        $request = $this->sxapiargetshiptolistv2PostRequest($sxapiargetshiptolistv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetshiptolistv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiargetshiptolistv2 $sxapiargetshiptolistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetshiptolistv2PostRequest($sxapiargetshiptolistv2)
    {
        // verify the required parameter 'sxapiargetshiptolistv2' is set
        if ($sxapiargetshiptolistv2 === null || (is_array($sxapiargetshiptolistv2) && count($sxapiargetshiptolistv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetshiptolistv2 when calling sxapiargetshiptolistv2Post'
            );
        }

        $resourcePath = '/sxapiargetshiptolistv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetshiptolistv2)) {
            $_tempBody = $sxapiargetshiptolistv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetshiptolistv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetshiptolistv3 $sxapiargetshiptolistv3 sxapiargetshiptolistv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiargetshiptolistv3Resp
     */
    public function sxapiargetshiptolistv3Post($sxapiargetshiptolistv3)
    {
        list($response) = $this->sxapiargetshiptolistv3PostWithHttpInfo($sxapiargetshiptolistv3);
        return $response;
    }

    /**
     * Operation sxapiargetshiptolistv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetshiptolistv3 $sxapiargetshiptolistv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiargetshiptolistv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetshiptolistv3PostWithHttpInfo($sxapiargetshiptolistv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetshiptolistv3Resp';
        $request = $this->sxapiargetshiptolistv3PostRequest($sxapiargetshiptolistv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiargetshiptolistv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetshiptolistv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetshiptolistv3 $sxapiargetshiptolistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetshiptolistv3PostAsync($sxapiargetshiptolistv3)
    {
        return $this->sxapiargetshiptolistv3PostAsyncWithHttpInfo($sxapiargetshiptolistv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetshiptolistv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetshiptolistv3 $sxapiargetshiptolistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetshiptolistv3PostAsyncWithHttpInfo($sxapiargetshiptolistv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetshiptolistv3Resp';
        $request = $this->sxapiargetshiptolistv3PostRequest($sxapiargetshiptolistv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetshiptolistv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapiargetshiptolistv3 $sxapiargetshiptolistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetshiptolistv3PostRequest($sxapiargetshiptolistv3)
    {
        // verify the required parameter 'sxapiargetshiptolistv3' is set
        if ($sxapiargetshiptolistv3 === null || (is_array($sxapiargetshiptolistv3) && count($sxapiargetshiptolistv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetshiptolistv3 when calling sxapiargetshiptolistv3Post'
            );
        }

        $resourcePath = '/sxapiargetshiptolistv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetshiptolistv3)) {
            $_tempBody = $sxapiargetshiptolistv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetshiptolistv4Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetshiptolistv4 $sxapiargetshiptolistv4 sxapiargetshiptolistv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiargetshiptolistv4Resp
     */
    public function sxapiargetshiptolistv4Post($sxapiargetshiptolistv4)
    {
        list($response) = $this->sxapiargetshiptolistv4PostWithHttpInfo($sxapiargetshiptolistv4);
        return $response;
    }

    /**
     * Operation sxapiargetshiptolistv4PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetshiptolistv4 $sxapiargetshiptolistv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiargetshiptolistv4Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetshiptolistv4PostWithHttpInfo($sxapiargetshiptolistv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetshiptolistv4Resp';
        $request = $this->sxapiargetshiptolistv4PostRequest($sxapiargetshiptolistv4);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiargetshiptolistv4Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetshiptolistv4PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetshiptolistv4 $sxapiargetshiptolistv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetshiptolistv4PostAsync($sxapiargetshiptolistv4)
    {
        return $this->sxapiargetshiptolistv4PostAsyncWithHttpInfo($sxapiargetshiptolistv4)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetshiptolistv4PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetshiptolistv4 $sxapiargetshiptolistv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetshiptolistv4PostAsyncWithHttpInfo($sxapiargetshiptolistv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapiargetshiptolistv4Resp';
        $request = $this->sxapiargetshiptolistv4PostRequest($sxapiargetshiptolistv4);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetshiptolistv4Post'
     *
     * @param  \Swagger\Client\Model\Sxapiargetshiptolistv4 $sxapiargetshiptolistv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetshiptolistv4PostRequest($sxapiargetshiptolistv4)
    {
        // verify the required parameter 'sxapiargetshiptolistv4' is set
        if ($sxapiargetshiptolistv4 === null || (is_array($sxapiargetshiptolistv4) && count($sxapiargetshiptolistv4) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetshiptolistv4 when calling sxapiargetshiptolistv4Post'
            );
        }

        $resourcePath = '/sxapiargetshiptolistv4';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetshiptolistv4)) {
            $_tempBody = $sxapiargetshiptolistv4;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiargetsinglecustomerPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetsinglecustomer $sxapiargetsinglecustomer sxapiargetsinglecustomer (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiargetsinglecustomerResp
     */
    public function sxapiargetsinglecustomerPost($sxapiargetsinglecustomer)
    {
        list($response) = $this->sxapiargetsinglecustomerPostWithHttpInfo($sxapiargetsinglecustomer);
        return $response;
    }

    /**
     * Operation sxapiargetsinglecustomerPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetsinglecustomer $sxapiargetsinglecustomer (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiargetsinglecustomerResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiargetsinglecustomerPostWithHttpInfo($sxapiargetsinglecustomer)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetsinglecustomerResp';
        $request = $this->sxapiargetsinglecustomerPostRequest($sxapiargetsinglecustomer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiargetsinglecustomerResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiargetsinglecustomerPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetsinglecustomer $sxapiargetsinglecustomer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetsinglecustomerPostAsync($sxapiargetsinglecustomer)
    {
        return $this->sxapiargetsinglecustomerPostAsyncWithHttpInfo($sxapiargetsinglecustomer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiargetsinglecustomerPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiargetsinglecustomer $sxapiargetsinglecustomer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiargetsinglecustomerPostAsyncWithHttpInfo($sxapiargetsinglecustomer)
    {
        $returnType = '\Swagger\Client\Model\SxapiargetsinglecustomerResp';
        $request = $this->sxapiargetsinglecustomerPostRequest($sxapiargetsinglecustomer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiargetsinglecustomerPost'
     *
     * @param  \Swagger\Client\Model\Sxapiargetsinglecustomer $sxapiargetsinglecustomer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiargetsinglecustomerPostRequest($sxapiargetsinglecustomer)
    {
        // verify the required parameter 'sxapiargetsinglecustomer' is set
        if ($sxapiargetsinglecustomer === null || (is_array($sxapiargetsinglecustomer) && count($sxapiargetsinglecustomer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiargetsinglecustomer when calling sxapiargetsinglecustomerPost'
            );
        }

        $resourcePath = '/sxapiargetsinglecustomer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiargetsinglecustomer)) {
            $_tempBody = $sxapiargetsinglecustomer;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiarsetcustomerbalancesPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiarsetcustomerbalances $sxapiarsetcustomerbalances sxapiarsetcustomerbalances (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiarsetcustomerbalancesResp
     */
    public function sxapiarsetcustomerbalancesPost($sxapiarsetcustomerbalances)
    {
        list($response) = $this->sxapiarsetcustomerbalancesPostWithHttpInfo($sxapiarsetcustomerbalances);
        return $response;
    }

    /**
     * Operation sxapiarsetcustomerbalancesPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiarsetcustomerbalances $sxapiarsetcustomerbalances (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiarsetcustomerbalancesResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiarsetcustomerbalancesPostWithHttpInfo($sxapiarsetcustomerbalances)
    {
        $returnType = '\Swagger\Client\Model\SxapiarsetcustomerbalancesResp';
        $request = $this->sxapiarsetcustomerbalancesPostRequest($sxapiarsetcustomerbalances);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiarsetcustomerbalancesResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiarsetcustomerbalancesPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiarsetcustomerbalances $sxapiarsetcustomerbalances (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiarsetcustomerbalancesPostAsync($sxapiarsetcustomerbalances)
    {
        return $this->sxapiarsetcustomerbalancesPostAsyncWithHttpInfo($sxapiarsetcustomerbalances)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiarsetcustomerbalancesPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiarsetcustomerbalances $sxapiarsetcustomerbalances (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiarsetcustomerbalancesPostAsyncWithHttpInfo($sxapiarsetcustomerbalances)
    {
        $returnType = '\Swagger\Client\Model\SxapiarsetcustomerbalancesResp';
        $request = $this->sxapiarsetcustomerbalancesPostRequest($sxapiarsetcustomerbalances);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiarsetcustomerbalancesPost'
     *
     * @param  \Swagger\Client\Model\Sxapiarsetcustomerbalances $sxapiarsetcustomerbalances (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiarsetcustomerbalancesPostRequest($sxapiarsetcustomerbalances)
    {
        // verify the required parameter 'sxapiarsetcustomerbalances' is set
        if ($sxapiarsetcustomerbalances === null || (is_array($sxapiarsetcustomerbalances) && count($sxapiarsetcustomerbalances) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiarsetcustomerbalances when calling sxapiarsetcustomerbalancesPost'
            );
        }

        $resourcePath = '/sxapiarsetcustomerbalances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiarsetcustomerbalances)) {
            $_tempBody = $sxapiarsetcustomerbalances;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicamactivityclosePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamactivityclose $sxapicamactivityclose sxapicamactivityclose (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapicamactivitycloseResp
     */
    public function sxapicamactivityclosePost($sxapicamactivityclose)
    {
        list($response) = $this->sxapicamactivityclosePostWithHttpInfo($sxapicamactivityclose);
        return $response;
    }

    /**
     * Operation sxapicamactivityclosePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamactivityclose $sxapicamactivityclose (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapicamactivitycloseResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicamactivityclosePostWithHttpInfo($sxapicamactivityclose)
    {
        $returnType = '\Swagger\Client\Model\SxapicamactivitycloseResp';
        $request = $this->sxapicamactivityclosePostRequest($sxapicamactivityclose);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapicamactivitycloseResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicamactivityclosePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamactivityclose $sxapicamactivityclose (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicamactivityclosePostAsync($sxapicamactivityclose)
    {
        return $this->sxapicamactivityclosePostAsyncWithHttpInfo($sxapicamactivityclose)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicamactivityclosePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamactivityclose $sxapicamactivityclose (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicamactivityclosePostAsyncWithHttpInfo($sxapicamactivityclose)
    {
        $returnType = '\Swagger\Client\Model\SxapicamactivitycloseResp';
        $request = $this->sxapicamactivityclosePostRequest($sxapicamactivityclose);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicamactivityclosePost'
     *
     * @param  \Swagger\Client\Model\Sxapicamactivityclose $sxapicamactivityclose (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicamactivityclosePostRequest($sxapicamactivityclose)
    {
        // verify the required parameter 'sxapicamactivityclose' is set
        if ($sxapicamactivityclose === null || (is_array($sxapicamactivityclose) && count($sxapicamactivityclose) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicamactivityclose when calling sxapicamactivityclosePost'
            );
        }

        $resourcePath = '/sxapicamactivityclose';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicamactivityclose)) {
            $_tempBody = $sxapicamactivityclose;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicamactivitymntPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamactivitymnt $sxapicamactivitymnt sxapicamactivitymnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapicamactivitymntResp
     */
    public function sxapicamactivitymntPost($sxapicamactivitymnt)
    {
        list($response) = $this->sxapicamactivitymntPostWithHttpInfo($sxapicamactivitymnt);
        return $response;
    }

    /**
     * Operation sxapicamactivitymntPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamactivitymnt $sxapicamactivitymnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapicamactivitymntResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicamactivitymntPostWithHttpInfo($sxapicamactivitymnt)
    {
        $returnType = '\Swagger\Client\Model\SxapicamactivitymntResp';
        $request = $this->sxapicamactivitymntPostRequest($sxapicamactivitymnt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapicamactivitymntResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicamactivitymntPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamactivitymnt $sxapicamactivitymnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicamactivitymntPostAsync($sxapicamactivitymnt)
    {
        return $this->sxapicamactivitymntPostAsyncWithHttpInfo($sxapicamactivitymnt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicamactivitymntPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamactivitymnt $sxapicamactivitymnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicamactivitymntPostAsyncWithHttpInfo($sxapicamactivitymnt)
    {
        $returnType = '\Swagger\Client\Model\SxapicamactivitymntResp';
        $request = $this->sxapicamactivitymntPostRequest($sxapicamactivitymnt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicamactivitymntPost'
     *
     * @param  \Swagger\Client\Model\Sxapicamactivitymnt $sxapicamactivitymnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicamactivitymntPostRequest($sxapicamactivitymnt)
    {
        // verify the required parameter 'sxapicamactivitymnt' is set
        if ($sxapicamactivitymnt === null || (is_array($sxapicamactivitymnt) && count($sxapicamactivitymnt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicamactivitymnt when calling sxapicamactivitymntPost'
            );
        }

        $resourcePath = '/sxapicamactivitymnt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicamactivitymnt)) {
            $_tempBody = $sxapicamactivitymnt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicamactivityvalidatePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamactivityvalidate $sxapicamactivityvalidate sxapicamactivityvalidate (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapicamactivityvalidateResp
     */
    public function sxapicamactivityvalidatePost($sxapicamactivityvalidate)
    {
        list($response) = $this->sxapicamactivityvalidatePostWithHttpInfo($sxapicamactivityvalidate);
        return $response;
    }

    /**
     * Operation sxapicamactivityvalidatePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamactivityvalidate $sxapicamactivityvalidate (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapicamactivityvalidateResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicamactivityvalidatePostWithHttpInfo($sxapicamactivityvalidate)
    {
        $returnType = '\Swagger\Client\Model\SxapicamactivityvalidateResp';
        $request = $this->sxapicamactivityvalidatePostRequest($sxapicamactivityvalidate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapicamactivityvalidateResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicamactivityvalidatePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamactivityvalidate $sxapicamactivityvalidate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicamactivityvalidatePostAsync($sxapicamactivityvalidate)
    {
        return $this->sxapicamactivityvalidatePostAsyncWithHttpInfo($sxapicamactivityvalidate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicamactivityvalidatePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamactivityvalidate $sxapicamactivityvalidate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicamactivityvalidatePostAsyncWithHttpInfo($sxapicamactivityvalidate)
    {
        $returnType = '\Swagger\Client\Model\SxapicamactivityvalidateResp';
        $request = $this->sxapicamactivityvalidatePostRequest($sxapicamactivityvalidate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicamactivityvalidatePost'
     *
     * @param  \Swagger\Client\Model\Sxapicamactivityvalidate $sxapicamactivityvalidate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicamactivityvalidatePostRequest($sxapicamactivityvalidate)
    {
        // verify the required parameter 'sxapicamactivityvalidate' is set
        if ($sxapicamactivityvalidate === null || (is_array($sxapicamactivityvalidate) && count($sxapicamactivityvalidate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicamactivityvalidate when calling sxapicamactivityvalidatePost'
            );
        }

        $resourcePath = '/sxapicamactivityvalidate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicamactivityvalidate)) {
            $_tempBody = $sxapicamactivityvalidate;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicamcontactmntPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamcontactmnt $sxapicamcontactmnt sxapicamcontactmnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapicamcontactmntResp
     */
    public function sxapicamcontactmntPost($sxapicamcontactmnt)
    {
        list($response) = $this->sxapicamcontactmntPostWithHttpInfo($sxapicamcontactmnt);
        return $response;
    }

    /**
     * Operation sxapicamcontactmntPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamcontactmnt $sxapicamcontactmnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapicamcontactmntResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicamcontactmntPostWithHttpInfo($sxapicamcontactmnt)
    {
        $returnType = '\Swagger\Client\Model\SxapicamcontactmntResp';
        $request = $this->sxapicamcontactmntPostRequest($sxapicamcontactmnt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapicamcontactmntResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicamcontactmntPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamcontactmnt $sxapicamcontactmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicamcontactmntPostAsync($sxapicamcontactmnt)
    {
        return $this->sxapicamcontactmntPostAsyncWithHttpInfo($sxapicamcontactmnt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicamcontactmntPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamcontactmnt $sxapicamcontactmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicamcontactmntPostAsyncWithHttpInfo($sxapicamcontactmnt)
    {
        $returnType = '\Swagger\Client\Model\SxapicamcontactmntResp';
        $request = $this->sxapicamcontactmntPostRequest($sxapicamcontactmnt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicamcontactmntPost'
     *
     * @param  \Swagger\Client\Model\Sxapicamcontactmnt $sxapicamcontactmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicamcontactmntPostRequest($sxapicamcontactmnt)
    {
        // verify the required parameter 'sxapicamcontactmnt' is set
        if ($sxapicamcontactmnt === null || (is_array($sxapicamcontactmnt) && count($sxapicamcontactmnt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicamcontactmnt when calling sxapicamcontactmntPost'
            );
        }

        $resourcePath = '/sxapicamcontactmnt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicamcontactmnt)) {
            $_tempBody = $sxapicamcontactmnt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicamgetactivitylistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetactivitylist $sxapicamgetactivitylist sxapicamgetactivitylist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapicamgetactivitylistResp
     */
    public function sxapicamgetactivitylistPost($sxapicamgetactivitylist)
    {
        list($response) = $this->sxapicamgetactivitylistPostWithHttpInfo($sxapicamgetactivitylist);
        return $response;
    }

    /**
     * Operation sxapicamgetactivitylistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetactivitylist $sxapicamgetactivitylist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapicamgetactivitylistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicamgetactivitylistPostWithHttpInfo($sxapicamgetactivitylist)
    {
        $returnType = '\Swagger\Client\Model\SxapicamgetactivitylistResp';
        $request = $this->sxapicamgetactivitylistPostRequest($sxapicamgetactivitylist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapicamgetactivitylistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicamgetactivitylistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetactivitylist $sxapicamgetactivitylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicamgetactivitylistPostAsync($sxapicamgetactivitylist)
    {
        return $this->sxapicamgetactivitylistPostAsyncWithHttpInfo($sxapicamgetactivitylist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicamgetactivitylistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetactivitylist $sxapicamgetactivitylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicamgetactivitylistPostAsyncWithHttpInfo($sxapicamgetactivitylist)
    {
        $returnType = '\Swagger\Client\Model\SxapicamgetactivitylistResp';
        $request = $this->sxapicamgetactivitylistPostRequest($sxapicamgetactivitylist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicamgetactivitylistPost'
     *
     * @param  \Swagger\Client\Model\Sxapicamgetactivitylist $sxapicamgetactivitylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicamgetactivitylistPostRequest($sxapicamgetactivitylist)
    {
        // verify the required parameter 'sxapicamgetactivitylist' is set
        if ($sxapicamgetactivitylist === null || (is_array($sxapicamgetactivitylist) && count($sxapicamgetactivitylist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicamgetactivitylist when calling sxapicamgetactivitylistPost'
            );
        }

        $resourcePath = '/sxapicamgetactivitylist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicamgetactivitylist)) {
            $_tempBody = $sxapicamgetactivitylist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicamgetactivitylistv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetactivitylistv2 $sxapicamgetactivitylistv2 sxapicamgetactivitylistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapicamgetactivitylistv2Resp
     */
    public function sxapicamgetactivitylistv2Post($sxapicamgetactivitylistv2)
    {
        list($response) = $this->sxapicamgetactivitylistv2PostWithHttpInfo($sxapicamgetactivitylistv2);
        return $response;
    }

    /**
     * Operation sxapicamgetactivitylistv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetactivitylistv2 $sxapicamgetactivitylistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapicamgetactivitylistv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicamgetactivitylistv2PostWithHttpInfo($sxapicamgetactivitylistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapicamgetactivitylistv2Resp';
        $request = $this->sxapicamgetactivitylistv2PostRequest($sxapicamgetactivitylistv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapicamgetactivitylistv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicamgetactivitylistv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetactivitylistv2 $sxapicamgetactivitylistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicamgetactivitylistv2PostAsync($sxapicamgetactivitylistv2)
    {
        return $this->sxapicamgetactivitylistv2PostAsyncWithHttpInfo($sxapicamgetactivitylistv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicamgetactivitylistv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetactivitylistv2 $sxapicamgetactivitylistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicamgetactivitylistv2PostAsyncWithHttpInfo($sxapicamgetactivitylistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapicamgetactivitylistv2Resp';
        $request = $this->sxapicamgetactivitylistv2PostRequest($sxapicamgetactivitylistv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicamgetactivitylistv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapicamgetactivitylistv2 $sxapicamgetactivitylistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicamgetactivitylistv2PostRequest($sxapicamgetactivitylistv2)
    {
        // verify the required parameter 'sxapicamgetactivitylistv2' is set
        if ($sxapicamgetactivitylistv2 === null || (is_array($sxapicamgetactivitylistv2) && count($sxapicamgetactivitylistv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicamgetactivitylistv2 when calling sxapicamgetactivitylistv2Post'
            );
        }

        $resourcePath = '/sxapicamgetactivitylistv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicamgetactivitylistv2)) {
            $_tempBody = $sxapicamgetactivitylistv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicamgetcontactlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetcontactlist $sxapicamgetcontactlist sxapicamgetcontactlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapicamgetcontactlistResp
     */
    public function sxapicamgetcontactlistPost($sxapicamgetcontactlist)
    {
        list($response) = $this->sxapicamgetcontactlistPostWithHttpInfo($sxapicamgetcontactlist);
        return $response;
    }

    /**
     * Operation sxapicamgetcontactlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetcontactlist $sxapicamgetcontactlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapicamgetcontactlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicamgetcontactlistPostWithHttpInfo($sxapicamgetcontactlist)
    {
        $returnType = '\Swagger\Client\Model\SxapicamgetcontactlistResp';
        $request = $this->sxapicamgetcontactlistPostRequest($sxapicamgetcontactlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapicamgetcontactlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicamgetcontactlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetcontactlist $sxapicamgetcontactlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicamgetcontactlistPostAsync($sxapicamgetcontactlist)
    {
        return $this->sxapicamgetcontactlistPostAsyncWithHttpInfo($sxapicamgetcontactlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicamgetcontactlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetcontactlist $sxapicamgetcontactlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicamgetcontactlistPostAsyncWithHttpInfo($sxapicamgetcontactlist)
    {
        $returnType = '\Swagger\Client\Model\SxapicamgetcontactlistResp';
        $request = $this->sxapicamgetcontactlistPostRequest($sxapicamgetcontactlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicamgetcontactlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapicamgetcontactlist $sxapicamgetcontactlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicamgetcontactlistPostRequest($sxapicamgetcontactlist)
    {
        // verify the required parameter 'sxapicamgetcontactlist' is set
        if ($sxapicamgetcontactlist === null || (is_array($sxapicamgetcontactlist) && count($sxapicamgetcontactlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicamgetcontactlist when calling sxapicamgetcontactlistPost'
            );
        }

        $resourcePath = '/sxapicamgetcontactlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicamgetcontactlist)) {
            $_tempBody = $sxapicamgetcontactlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicamgetcontactlistv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetcontactlistv2 $sxapicamgetcontactlistv2 sxapicamgetcontactlistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapicamgetcontactlistv2Resp
     */
    public function sxapicamgetcontactlistv2Post($sxapicamgetcontactlistv2)
    {
        list($response) = $this->sxapicamgetcontactlistv2PostWithHttpInfo($sxapicamgetcontactlistv2);
        return $response;
    }

    /**
     * Operation sxapicamgetcontactlistv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetcontactlistv2 $sxapicamgetcontactlistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapicamgetcontactlistv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicamgetcontactlistv2PostWithHttpInfo($sxapicamgetcontactlistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapicamgetcontactlistv2Resp';
        $request = $this->sxapicamgetcontactlistv2PostRequest($sxapicamgetcontactlistv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapicamgetcontactlistv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicamgetcontactlistv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetcontactlistv2 $sxapicamgetcontactlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicamgetcontactlistv2PostAsync($sxapicamgetcontactlistv2)
    {
        return $this->sxapicamgetcontactlistv2PostAsyncWithHttpInfo($sxapicamgetcontactlistv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicamgetcontactlistv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetcontactlistv2 $sxapicamgetcontactlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicamgetcontactlistv2PostAsyncWithHttpInfo($sxapicamgetcontactlistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapicamgetcontactlistv2Resp';
        $request = $this->sxapicamgetcontactlistv2PostRequest($sxapicamgetcontactlistv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicamgetcontactlistv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapicamgetcontactlistv2 $sxapicamgetcontactlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicamgetcontactlistv2PostRequest($sxapicamgetcontactlistv2)
    {
        // verify the required parameter 'sxapicamgetcontactlistv2' is set
        if ($sxapicamgetcontactlistv2 === null || (is_array($sxapicamgetcontactlistv2) && count($sxapicamgetcontactlistv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicamgetcontactlistv2 when calling sxapicamgetcontactlistv2Post'
            );
        }

        $resourcePath = '/sxapicamgetcontactlistv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicamgetcontactlistv2)) {
            $_tempBody = $sxapicamgetcontactlistv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicamgetcontactlistv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetcontactlistv3 $sxapicamgetcontactlistv3 sxapicamgetcontactlistv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapicamgetcontactlistv3Resp
     */
    public function sxapicamgetcontactlistv3Post($sxapicamgetcontactlistv3)
    {
        list($response) = $this->sxapicamgetcontactlistv3PostWithHttpInfo($sxapicamgetcontactlistv3);
        return $response;
    }

    /**
     * Operation sxapicamgetcontactlistv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetcontactlistv3 $sxapicamgetcontactlistv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapicamgetcontactlistv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicamgetcontactlistv3PostWithHttpInfo($sxapicamgetcontactlistv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapicamgetcontactlistv3Resp';
        $request = $this->sxapicamgetcontactlistv3PostRequest($sxapicamgetcontactlistv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapicamgetcontactlistv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicamgetcontactlistv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetcontactlistv3 $sxapicamgetcontactlistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicamgetcontactlistv3PostAsync($sxapicamgetcontactlistv3)
    {
        return $this->sxapicamgetcontactlistv3PostAsyncWithHttpInfo($sxapicamgetcontactlistv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicamgetcontactlistv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetcontactlistv3 $sxapicamgetcontactlistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicamgetcontactlistv3PostAsyncWithHttpInfo($sxapicamgetcontactlistv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapicamgetcontactlistv3Resp';
        $request = $this->sxapicamgetcontactlistv3PostRequest($sxapicamgetcontactlistv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicamgetcontactlistv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapicamgetcontactlistv3 $sxapicamgetcontactlistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicamgetcontactlistv3PostRequest($sxapicamgetcontactlistv3)
    {
        // verify the required parameter 'sxapicamgetcontactlistv3' is set
        if ($sxapicamgetcontactlistv3 === null || (is_array($sxapicamgetcontactlistv3) && count($sxapicamgetcontactlistv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicamgetcontactlistv3 when calling sxapicamgetcontactlistv3Post'
            );
        }

        $resourcePath = '/sxapicamgetcontactlistv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicamgetcontactlistv3)) {
            $_tempBody = $sxapicamgetcontactlistv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicamgetcontactlistv4Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetcontactlistv4 $sxapicamgetcontactlistv4 sxapicamgetcontactlistv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapicamgetcontactlistv4Resp
     */
    public function sxapicamgetcontactlistv4Post($sxapicamgetcontactlistv4)
    {
        list($response) = $this->sxapicamgetcontactlistv4PostWithHttpInfo($sxapicamgetcontactlistv4);
        return $response;
    }

    /**
     * Operation sxapicamgetcontactlistv4PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetcontactlistv4 $sxapicamgetcontactlistv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapicamgetcontactlistv4Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicamgetcontactlistv4PostWithHttpInfo($sxapicamgetcontactlistv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapicamgetcontactlistv4Resp';
        $request = $this->sxapicamgetcontactlistv4PostRequest($sxapicamgetcontactlistv4);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapicamgetcontactlistv4Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicamgetcontactlistv4PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetcontactlistv4 $sxapicamgetcontactlistv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicamgetcontactlistv4PostAsync($sxapicamgetcontactlistv4)
    {
        return $this->sxapicamgetcontactlistv4PostAsyncWithHttpInfo($sxapicamgetcontactlistv4)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicamgetcontactlistv4PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicamgetcontactlistv4 $sxapicamgetcontactlistv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicamgetcontactlistv4PostAsyncWithHttpInfo($sxapicamgetcontactlistv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapicamgetcontactlistv4Resp';
        $request = $this->sxapicamgetcontactlistv4PostRequest($sxapicamgetcontactlistv4);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicamgetcontactlistv4Post'
     *
     * @param  \Swagger\Client\Model\Sxapicamgetcontactlistv4 $sxapicamgetcontactlistv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicamgetcontactlistv4PostRequest($sxapicamgetcontactlistv4)
    {
        // verify the required parameter 'sxapicamgetcontactlistv4' is set
        if ($sxapicamgetcontactlistv4 === null || (is_array($sxapicamgetcontactlistv4) && count($sxapicamgetcontactlistv4) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicamgetcontactlistv4 when calling sxapicamgetcontactlistv4Post'
            );
        }

        $resourcePath = '/sxapicamgetcontactlistv4';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicamgetcontactlistv4)) {
            $_tempBody = $sxapicamgetcontactlistv4;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicmpromoteprospecttocustomerPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicmpromoteprospecttocustomer $sxapicmpromoteprospecttocustomer sxapicmpromoteprospecttocustomer (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapicmpromoteprospecttocustomerResp
     */
    public function sxapicmpromoteprospecttocustomerPost($sxapicmpromoteprospecttocustomer)
    {
        list($response) = $this->sxapicmpromoteprospecttocustomerPostWithHttpInfo($sxapicmpromoteprospecttocustomer);
        return $response;
    }

    /**
     * Operation sxapicmpromoteprospecttocustomerPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicmpromoteprospecttocustomer $sxapicmpromoteprospecttocustomer (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapicmpromoteprospecttocustomerResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicmpromoteprospecttocustomerPostWithHttpInfo($sxapicmpromoteprospecttocustomer)
    {
        $returnType = '\Swagger\Client\Model\SxapicmpromoteprospecttocustomerResp';
        $request = $this->sxapicmpromoteprospecttocustomerPostRequest($sxapicmpromoteprospecttocustomer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapicmpromoteprospecttocustomerResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicmpromoteprospecttocustomerPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicmpromoteprospecttocustomer $sxapicmpromoteprospecttocustomer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicmpromoteprospecttocustomerPostAsync($sxapicmpromoteprospecttocustomer)
    {
        return $this->sxapicmpromoteprospecttocustomerPostAsyncWithHttpInfo($sxapicmpromoteprospecttocustomer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicmpromoteprospecttocustomerPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicmpromoteprospecttocustomer $sxapicmpromoteprospecttocustomer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicmpromoteprospecttocustomerPostAsyncWithHttpInfo($sxapicmpromoteprospecttocustomer)
    {
        $returnType = '\Swagger\Client\Model\SxapicmpromoteprospecttocustomerResp';
        $request = $this->sxapicmpromoteprospecttocustomerPostRequest($sxapicmpromoteprospecttocustomer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicmpromoteprospecttocustomerPost'
     *
     * @param  \Swagger\Client\Model\Sxapicmpromoteprospecttocustomer $sxapicmpromoteprospecttocustomer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicmpromoteprospecttocustomerPostRequest($sxapicmpromoteprospecttocustomer)
    {
        // verify the required parameter 'sxapicmpromoteprospecttocustomer' is set
        if ($sxapicmpromoteprospecttocustomer === null || (is_array($sxapicmpromoteprospecttocustomer) && count($sxapicmpromoteprospecttocustomer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicmpromoteprospecttocustomer when calling sxapicmpromoteprospecttocustomerPost'
            );
        }

        $resourcePath = '/sxapicmpromoteprospecttocustomer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicmpromoteprospecttocustomer)) {
            $_tempBody = $sxapicmpromoteprospecttocustomer;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicmpromoteprospecttocustomerv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicmpromoteprospecttocustomerv2 $sxapicmpromoteprospecttocustomerv2 sxapicmpromoteprospecttocustomerv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapicmpromoteprospecttocustomerv2Resp
     */
    public function sxapicmpromoteprospecttocustomerv2Post($sxapicmpromoteprospecttocustomerv2)
    {
        list($response) = $this->sxapicmpromoteprospecttocustomerv2PostWithHttpInfo($sxapicmpromoteprospecttocustomerv2);
        return $response;
    }

    /**
     * Operation sxapicmpromoteprospecttocustomerv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicmpromoteprospecttocustomerv2 $sxapicmpromoteprospecttocustomerv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapicmpromoteprospecttocustomerv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicmpromoteprospecttocustomerv2PostWithHttpInfo($sxapicmpromoteprospecttocustomerv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapicmpromoteprospecttocustomerv2Resp';
        $request = $this->sxapicmpromoteprospecttocustomerv2PostRequest($sxapicmpromoteprospecttocustomerv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapicmpromoteprospecttocustomerv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicmpromoteprospecttocustomerv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicmpromoteprospecttocustomerv2 $sxapicmpromoteprospecttocustomerv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicmpromoteprospecttocustomerv2PostAsync($sxapicmpromoteprospecttocustomerv2)
    {
        return $this->sxapicmpromoteprospecttocustomerv2PostAsyncWithHttpInfo($sxapicmpromoteprospecttocustomerv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicmpromoteprospecttocustomerv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicmpromoteprospecttocustomerv2 $sxapicmpromoteprospecttocustomerv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicmpromoteprospecttocustomerv2PostAsyncWithHttpInfo($sxapicmpromoteprospecttocustomerv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapicmpromoteprospecttocustomerv2Resp';
        $request = $this->sxapicmpromoteprospecttocustomerv2PostRequest($sxapicmpromoteprospecttocustomerv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicmpromoteprospecttocustomerv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapicmpromoteprospecttocustomerv2 $sxapicmpromoteprospecttocustomerv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicmpromoteprospecttocustomerv2PostRequest($sxapicmpromoteprospecttocustomerv2)
    {
        // verify the required parameter 'sxapicmpromoteprospecttocustomerv2' is set
        if ($sxapicmpromoteprospecttocustomerv2 === null || (is_array($sxapicmpromoteprospecttocustomerv2) && count($sxapicmpromoteprospecttocustomerv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicmpromoteprospecttocustomerv2 when calling sxapicmpromoteprospecttocustomerv2Post'
            );
        }

        $resourcePath = '/sxapicmpromoteprospecttocustomerv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicmpromoteprospecttocustomerv2)) {
            $_tempBody = $sxapicmpromoteprospecttocustomerv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicmprospectmntPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicmprospectmnt $sxapicmprospectmnt sxapicmprospectmnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapicmprospectmntResp
     */
    public function sxapicmprospectmntPost($sxapicmprospectmnt)
    {
        list($response) = $this->sxapicmprospectmntPostWithHttpInfo($sxapicmprospectmnt);
        return $response;
    }

    /**
     * Operation sxapicmprospectmntPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicmprospectmnt $sxapicmprospectmnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapicmprospectmntResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicmprospectmntPostWithHttpInfo($sxapicmprospectmnt)
    {
        $returnType = '\Swagger\Client\Model\SxapicmprospectmntResp';
        $request = $this->sxapicmprospectmntPostRequest($sxapicmprospectmnt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapicmprospectmntResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicmprospectmntPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicmprospectmnt $sxapicmprospectmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicmprospectmntPostAsync($sxapicmprospectmnt)
    {
        return $this->sxapicmprospectmntPostAsyncWithHttpInfo($sxapicmprospectmnt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicmprospectmntPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicmprospectmnt $sxapicmprospectmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicmprospectmntPostAsyncWithHttpInfo($sxapicmprospectmnt)
    {
        $returnType = '\Swagger\Client\Model\SxapicmprospectmntResp';
        $request = $this->sxapicmprospectmntPostRequest($sxapicmprospectmnt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicmprospectmntPost'
     *
     * @param  \Swagger\Client\Model\Sxapicmprospectmnt $sxapicmprospectmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicmprospectmntPostRequest($sxapicmprospectmnt)
    {
        // verify the required parameter 'sxapicmprospectmnt' is set
        if ($sxapicmprospectmnt === null || (is_array($sxapicmprospectmnt) && count($sxapicmprospectmnt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicmprospectmnt when calling sxapicmprospectmntPost'
            );
        }

        $resourcePath = '/sxapicmprospectmnt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicmprospectmnt)) {
            $_tempBody = $sxapicmprospectmnt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicmprospectmntv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicmprospectmntv2 $sxapicmprospectmntv2 sxapicmprospectmntv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapicmprospectmntv2Resp
     */
    public function sxapicmprospectmntv2Post($sxapicmprospectmntv2)
    {
        list($response) = $this->sxapicmprospectmntv2PostWithHttpInfo($sxapicmprospectmntv2);
        return $response;
    }

    /**
     * Operation sxapicmprospectmntv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicmprospectmntv2 $sxapicmprospectmntv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapicmprospectmntv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicmprospectmntv2PostWithHttpInfo($sxapicmprospectmntv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapicmprospectmntv2Resp';
        $request = $this->sxapicmprospectmntv2PostRequest($sxapicmprospectmntv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapicmprospectmntv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicmprospectmntv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicmprospectmntv2 $sxapicmprospectmntv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicmprospectmntv2PostAsync($sxapicmprospectmntv2)
    {
        return $this->sxapicmprospectmntv2PostAsyncWithHttpInfo($sxapicmprospectmntv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicmprospectmntv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicmprospectmntv2 $sxapicmprospectmntv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicmprospectmntv2PostAsyncWithHttpInfo($sxapicmprospectmntv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapicmprospectmntv2Resp';
        $request = $this->sxapicmprospectmntv2PostRequest($sxapicmprospectmntv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicmprospectmntv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapicmprospectmntv2 $sxapicmprospectmntv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicmprospectmntv2PostRequest($sxapicmprospectmntv2)
    {
        // verify the required parameter 'sxapicmprospectmntv2' is set
        if ($sxapicmprospectmntv2 === null || (is_array($sxapicmprospectmntv2) && count($sxapicmprospectmntv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicmprospectmntv2 when calling sxapicmprospectmntv2Post'
            );
        }

        $resourcePath = '/sxapicmprospectmntv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicmprospectmntv2)) {
            $_tempBody = $sxapicmprospectmntv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicustgenericcallPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustgenericcall $sxapicustgenericcall sxapicustgenericcall (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapicustgenericcallResp
     */
    public function sxapicustgenericcallPost($sxapicustgenericcall)
    {
        list($response) = $this->sxapicustgenericcallPostWithHttpInfo($sxapicustgenericcall);
        return $response;
    }

    /**
     * Operation sxapicustgenericcallPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustgenericcall $sxapicustgenericcall (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapicustgenericcallResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicustgenericcallPostWithHttpInfo($sxapicustgenericcall)
    {
        $returnType = '\Swagger\Client\Model\SxapicustgenericcallResp';
        $request = $this->sxapicustgenericcallPostRequest($sxapicustgenericcall);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapicustgenericcallResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicustgenericcallPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustgenericcall $sxapicustgenericcall (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicustgenericcallPostAsync($sxapicustgenericcall)
    {
        return $this->sxapicustgenericcallPostAsyncWithHttpInfo($sxapicustgenericcall)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicustgenericcallPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustgenericcall $sxapicustgenericcall (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicustgenericcallPostAsyncWithHttpInfo($sxapicustgenericcall)
    {
        $returnType = '\Swagger\Client\Model\SxapicustgenericcallResp';
        $request = $this->sxapicustgenericcallPostRequest($sxapicustgenericcall);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicustgenericcallPost'
     *
     * @param  \Swagger\Client\Model\Sxapicustgenericcall $sxapicustgenericcall (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicustgenericcallPostRequest($sxapicustgenericcall)
    {
        // verify the required parameter 'sxapicustgenericcall' is set
        if ($sxapicustgenericcall === null || (is_array($sxapicustgenericcall) && count($sxapicustgenericcall) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicustgenericcall when calling sxapicustgenericcallPost'
            );
        }

        $resourcePath = '/sxapicustgenericcall';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicustgenericcall)) {
            $_tempBody = $sxapicustgenericcall;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicustoegetlistofordersv4Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustoegetlistofordersv4 $sxapicustoegetlistofordersv4 sxapicustoegetlistofordersv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapicustoegetlistofordersv4Resp
     */
    public function sxapicustoegetlistofordersv4Post($sxapicustoegetlistofordersv4)
    {
        list($response) = $this->sxapicustoegetlistofordersv4PostWithHttpInfo($sxapicustoegetlistofordersv4);
        return $response;
    }

    /**
     * Operation sxapicustoegetlistofordersv4PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustoegetlistofordersv4 $sxapicustoegetlistofordersv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapicustoegetlistofordersv4Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicustoegetlistofordersv4PostWithHttpInfo($sxapicustoegetlistofordersv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapicustoegetlistofordersv4Resp';
        $request = $this->sxapicustoegetlistofordersv4PostRequest($sxapicustoegetlistofordersv4);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapicustoegetlistofordersv4Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicustoegetlistofordersv4PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustoegetlistofordersv4 $sxapicustoegetlistofordersv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicustoegetlistofordersv4PostAsync($sxapicustoegetlistofordersv4)
    {
        return $this->sxapicustoegetlistofordersv4PostAsyncWithHttpInfo($sxapicustoegetlistofordersv4)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicustoegetlistofordersv4PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustoegetlistofordersv4 $sxapicustoegetlistofordersv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicustoegetlistofordersv4PostAsyncWithHttpInfo($sxapicustoegetlistofordersv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapicustoegetlistofordersv4Resp';
        $request = $this->sxapicustoegetlistofordersv4PostRequest($sxapicustoegetlistofordersv4);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicustoegetlistofordersv4Post'
     *
     * @param  \Swagger\Client\Model\Sxapicustoegetlistofordersv4 $sxapicustoegetlistofordersv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicustoegetlistofordersv4PostRequest($sxapicustoegetlistofordersv4)
    {
        // verify the required parameter 'sxapicustoegetlistofordersv4' is set
        if ($sxapicustoegetlistofordersv4 === null || (is_array($sxapicustoegetlistofordersv4) && count($sxapicustoegetlistofordersv4) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicustoegetlistofordersv4 when calling sxapicustoegetlistofordersv4Post'
            );
        }

        $resourcePath = '/sxapicustoegetlistofordersv4';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicustoegetlistofordersv4)) {
            $_tempBody = $sxapicustoegetlistofordersv4;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicustoereceiveonaccountPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustoereceiveonaccount $sxapicustoereceiveonaccount sxapicustoereceiveonaccount (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapicustoereceiveonaccountResp
     */
    public function sxapicustoereceiveonaccountPost($sxapicustoereceiveonaccount)
    {
        list($response) = $this->sxapicustoereceiveonaccountPostWithHttpInfo($sxapicustoereceiveonaccount);
        return $response;
    }

    /**
     * Operation sxapicustoereceiveonaccountPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustoereceiveonaccount $sxapicustoereceiveonaccount (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapicustoereceiveonaccountResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicustoereceiveonaccountPostWithHttpInfo($sxapicustoereceiveonaccount)
    {
        $returnType = '\Swagger\Client\Model\SxapicustoereceiveonaccountResp';
        $request = $this->sxapicustoereceiveonaccountPostRequest($sxapicustoereceiveonaccount);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapicustoereceiveonaccountResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicustoereceiveonaccountPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustoereceiveonaccount $sxapicustoereceiveonaccount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicustoereceiveonaccountPostAsync($sxapicustoereceiveonaccount)
    {
        return $this->sxapicustoereceiveonaccountPostAsyncWithHttpInfo($sxapicustoereceiveonaccount)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicustoereceiveonaccountPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustoereceiveonaccount $sxapicustoereceiveonaccount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicustoereceiveonaccountPostAsyncWithHttpInfo($sxapicustoereceiveonaccount)
    {
        $returnType = '\Swagger\Client\Model\SxapicustoereceiveonaccountResp';
        $request = $this->sxapicustoereceiveonaccountPostRequest($sxapicustoereceiveonaccount);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicustoereceiveonaccountPost'
     *
     * @param  \Swagger\Client\Model\Sxapicustoereceiveonaccount $sxapicustoereceiveonaccount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicustoereceiveonaccountPostRequest($sxapicustoereceiveonaccount)
    {
        // verify the required parameter 'sxapicustoereceiveonaccount' is set
        if ($sxapicustoereceiveonaccount === null || (is_array($sxapicustoereceiveonaccount) && count($sxapicustoereceiveonaccount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicustoereceiveonaccount when calling sxapicustoereceiveonaccountPost'
            );
        }

        $resourcePath = '/sxapicustoereceiveonaccount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicustoereceiveonaccount)) {
            $_tempBody = $sxapicustoereceiveonaccount;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicustomcallPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustomcall $sxapicustomcall sxapicustomcall (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapicustomcallResp
     */
    public function sxapicustomcallPost($sxapicustomcall)
    {
        list($response) = $this->sxapicustomcallPostWithHttpInfo($sxapicustomcall);
        return $response;
    }

    /**
     * Operation sxapicustomcallPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustomcall $sxapicustomcall (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapicustomcallResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicustomcallPostWithHttpInfo($sxapicustomcall)
    {
        $returnType = '\Swagger\Client\Model\SxapicustomcallResp';
        $request = $this->sxapicustomcallPostRequest($sxapicustomcall);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapicustomcallResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicustomcallPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustomcall $sxapicustomcall (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicustomcallPostAsync($sxapicustomcall)
    {
        return $this->sxapicustomcallPostAsyncWithHttpInfo($sxapicustomcall)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicustomcallPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustomcall $sxapicustomcall (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicustomcallPostAsyncWithHttpInfo($sxapicustomcall)
    {
        $returnType = '\Swagger\Client\Model\SxapicustomcallResp';
        $request = $this->sxapicustomcallPostRequest($sxapicustomcall);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicustomcallPost'
     *
     * @param  \Swagger\Client\Model\Sxapicustomcall $sxapicustomcall (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicustomcallPostRequest($sxapicustomcall)
    {
        // verify the required parameter 'sxapicustomcall' is set
        if ($sxapicustomcall === null || (is_array($sxapicustomcall) && count($sxapicustomcall) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicustomcall when calling sxapicustomcallPost'
            );
        }

        $resourcePath = '/sxapicustomcall';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicustomcall)) {
            $_tempBody = $sxapicustomcall;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicustomcallv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustomcallv2 $sxapicustomcallv2 sxapicustomcallv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapicustomcallv2Resp
     */
    public function sxapicustomcallv2Post($sxapicustomcallv2)
    {
        list($response) = $this->sxapicustomcallv2PostWithHttpInfo($sxapicustomcallv2);
        return $response;
    }

    /**
     * Operation sxapicustomcallv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustomcallv2 $sxapicustomcallv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapicustomcallv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicustomcallv2PostWithHttpInfo($sxapicustomcallv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapicustomcallv2Resp';
        $request = $this->sxapicustomcallv2PostRequest($sxapicustomcallv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapicustomcallv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicustomcallv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustomcallv2 $sxapicustomcallv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicustomcallv2PostAsync($sxapicustomcallv2)
    {
        return $this->sxapicustomcallv2PostAsyncWithHttpInfo($sxapicustomcallv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicustomcallv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustomcallv2 $sxapicustomcallv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicustomcallv2PostAsyncWithHttpInfo($sxapicustomcallv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapicustomcallv2Resp';
        $request = $this->sxapicustomcallv2PostRequest($sxapicustomcallv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicustomcallv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapicustomcallv2 $sxapicustomcallv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicustomcallv2PostRequest($sxapicustomcallv2)
    {
        // verify the required parameter 'sxapicustomcallv2' is set
        if ($sxapicustomcallv2 === null || (is_array($sxapicustomcallv2) && count($sxapicustomcallv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicustomcallv2 when calling sxapicustomcallv2Post'
            );
        }

        $resourcePath = '/sxapicustomcallv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicustomcallv2)) {
            $_tempBody = $sxapicustomcallv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicustsfgetoeorderdatav3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustsfgetoeorderdatav3 $sxapicustsfgetoeorderdatav3 sxapicustsfgetoeorderdatav3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapicustsfgetoeorderdatav3Resp
     */
    public function sxapicustsfgetoeorderdatav3Post($sxapicustsfgetoeorderdatav3)
    {
        list($response) = $this->sxapicustsfgetoeorderdatav3PostWithHttpInfo($sxapicustsfgetoeorderdatav3);
        return $response;
    }

    /**
     * Operation sxapicustsfgetoeorderdatav3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustsfgetoeorderdatav3 $sxapicustsfgetoeorderdatav3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapicustsfgetoeorderdatav3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicustsfgetoeorderdatav3PostWithHttpInfo($sxapicustsfgetoeorderdatav3)
    {
        $returnType = '\Swagger\Client\Model\Sxapicustsfgetoeorderdatav3Resp';
        $request = $this->sxapicustsfgetoeorderdatav3PostRequest($sxapicustsfgetoeorderdatav3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapicustsfgetoeorderdatav3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicustsfgetoeorderdatav3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustsfgetoeorderdatav3 $sxapicustsfgetoeorderdatav3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicustsfgetoeorderdatav3PostAsync($sxapicustsfgetoeorderdatav3)
    {
        return $this->sxapicustsfgetoeorderdatav3PostAsyncWithHttpInfo($sxapicustsfgetoeorderdatav3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicustsfgetoeorderdatav3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustsfgetoeorderdatav3 $sxapicustsfgetoeorderdatav3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicustsfgetoeorderdatav3PostAsyncWithHttpInfo($sxapicustsfgetoeorderdatav3)
    {
        $returnType = '\Swagger\Client\Model\Sxapicustsfgetoeorderdatav3Resp';
        $request = $this->sxapicustsfgetoeorderdatav3PostRequest($sxapicustsfgetoeorderdatav3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicustsfgetoeorderdatav3Post'
     *
     * @param  \Swagger\Client\Model\Sxapicustsfgetoeorderdatav3 $sxapicustsfgetoeorderdatav3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicustsfgetoeorderdatav3PostRequest($sxapicustsfgetoeorderdatav3)
    {
        // verify the required parameter 'sxapicustsfgetoeorderdatav3' is set
        if ($sxapicustsfgetoeorderdatav3 === null || (is_array($sxapicustsfgetoeorderdatav3) && count($sxapicustsfgetoeorderdatav3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicustsfgetoeorderdatav3 when calling sxapicustsfgetoeorderdatav3Post'
            );
        }

        $resourcePath = '/sxapicustsfgetoeorderdatav3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicustsfgetoeorderdatav3)) {
            $_tempBody = $sxapicustsfgetoeorderdatav3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicustsfgetpaidinvoicePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustsfgetpaidinvoice $sxapicustsfgetpaidinvoice sxapicustsfgetpaidinvoice (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapicustsfgetpaidinvoiceResp
     */
    public function sxapicustsfgetpaidinvoicePost($sxapicustsfgetpaidinvoice)
    {
        list($response) = $this->sxapicustsfgetpaidinvoicePostWithHttpInfo($sxapicustsfgetpaidinvoice);
        return $response;
    }

    /**
     * Operation sxapicustsfgetpaidinvoicePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustsfgetpaidinvoice $sxapicustsfgetpaidinvoice (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapicustsfgetpaidinvoiceResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicustsfgetpaidinvoicePostWithHttpInfo($sxapicustsfgetpaidinvoice)
    {
        $returnType = '\Swagger\Client\Model\SxapicustsfgetpaidinvoiceResp';
        $request = $this->sxapicustsfgetpaidinvoicePostRequest($sxapicustsfgetpaidinvoice);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapicustsfgetpaidinvoiceResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicustsfgetpaidinvoicePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustsfgetpaidinvoice $sxapicustsfgetpaidinvoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicustsfgetpaidinvoicePostAsync($sxapicustsfgetpaidinvoice)
    {
        return $this->sxapicustsfgetpaidinvoicePostAsyncWithHttpInfo($sxapicustsfgetpaidinvoice)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicustsfgetpaidinvoicePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustsfgetpaidinvoice $sxapicustsfgetpaidinvoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicustsfgetpaidinvoicePostAsyncWithHttpInfo($sxapicustsfgetpaidinvoice)
    {
        $returnType = '\Swagger\Client\Model\SxapicustsfgetpaidinvoiceResp';
        $request = $this->sxapicustsfgetpaidinvoicePostRequest($sxapicustsfgetpaidinvoice);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicustsfgetpaidinvoicePost'
     *
     * @param  \Swagger\Client\Model\Sxapicustsfgetpaidinvoice $sxapicustsfgetpaidinvoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicustsfgetpaidinvoicePostRequest($sxapicustsfgetpaidinvoice)
    {
        // verify the required parameter 'sxapicustsfgetpaidinvoice' is set
        if ($sxapicustsfgetpaidinvoice === null || (is_array($sxapicustsfgetpaidinvoice) && count($sxapicustsfgetpaidinvoice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicustsfgetpaidinvoice when calling sxapicustsfgetpaidinvoicePost'
            );
        }

        $resourcePath = '/sxapicustsfgetpaidinvoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicustsfgetpaidinvoice)) {
            $_tempBody = $sxapicustsfgetpaidinvoice;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicustwtgetlistoftransferordersPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustwtgetlistoftransferorders $sxapicustwtgetlistoftransferorders sxapicustwtgetlistoftransferorders (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapicustwtgetlistoftransferordersResp
     */
    public function sxapicustwtgetlistoftransferordersPost($sxapicustwtgetlistoftransferorders)
    {
        list($response) = $this->sxapicustwtgetlistoftransferordersPostWithHttpInfo($sxapicustwtgetlistoftransferorders);
        return $response;
    }

    /**
     * Operation sxapicustwtgetlistoftransferordersPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustwtgetlistoftransferorders $sxapicustwtgetlistoftransferorders (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapicustwtgetlistoftransferordersResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicustwtgetlistoftransferordersPostWithHttpInfo($sxapicustwtgetlistoftransferorders)
    {
        $returnType = '\Swagger\Client\Model\SxapicustwtgetlistoftransferordersResp';
        $request = $this->sxapicustwtgetlistoftransferordersPostRequest($sxapicustwtgetlistoftransferorders);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapicustwtgetlistoftransferordersResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicustwtgetlistoftransferordersPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustwtgetlistoftransferorders $sxapicustwtgetlistoftransferorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicustwtgetlistoftransferordersPostAsync($sxapicustwtgetlistoftransferorders)
    {
        return $this->sxapicustwtgetlistoftransferordersPostAsyncWithHttpInfo($sxapicustwtgetlistoftransferorders)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicustwtgetlistoftransferordersPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustwtgetlistoftransferorders $sxapicustwtgetlistoftransferorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicustwtgetlistoftransferordersPostAsyncWithHttpInfo($sxapicustwtgetlistoftransferorders)
    {
        $returnType = '\Swagger\Client\Model\SxapicustwtgetlistoftransferordersResp';
        $request = $this->sxapicustwtgetlistoftransferordersPostRequest($sxapicustwtgetlistoftransferorders);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicustwtgetlistoftransferordersPost'
     *
     * @param  \Swagger\Client\Model\Sxapicustwtgetlistoftransferorders $sxapicustwtgetlistoftransferorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicustwtgetlistoftransferordersPostRequest($sxapicustwtgetlistoftransferorders)
    {
        // verify the required parameter 'sxapicustwtgetlistoftransferorders' is set
        if ($sxapicustwtgetlistoftransferorders === null || (is_array($sxapicustwtgetlistoftransferorders) && count($sxapicustwtgetlistoftransferorders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicustwtgetlistoftransferorders when calling sxapicustwtgetlistoftransferordersPost'
            );
        }

        $resourcePath = '/sxapicustwtgetlistoftransferorders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicustwtgetlistoftransferorders)) {
            $_tempBody = $sxapicustwtgetlistoftransferorders;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicustwtgetsingletransferorderPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustwtgetsingletransferorder $sxapicustwtgetsingletransferorder sxapicustwtgetsingletransferorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapicustwtgetsingletransferorderResp
     */
    public function sxapicustwtgetsingletransferorderPost($sxapicustwtgetsingletransferorder)
    {
        list($response) = $this->sxapicustwtgetsingletransferorderPostWithHttpInfo($sxapicustwtgetsingletransferorder);
        return $response;
    }

    /**
     * Operation sxapicustwtgetsingletransferorderPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustwtgetsingletransferorder $sxapicustwtgetsingletransferorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapicustwtgetsingletransferorderResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicustwtgetsingletransferorderPostWithHttpInfo($sxapicustwtgetsingletransferorder)
    {
        $returnType = '\Swagger\Client\Model\SxapicustwtgetsingletransferorderResp';
        $request = $this->sxapicustwtgetsingletransferorderPostRequest($sxapicustwtgetsingletransferorder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapicustwtgetsingletransferorderResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicustwtgetsingletransferorderPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustwtgetsingletransferorder $sxapicustwtgetsingletransferorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicustwtgetsingletransferorderPostAsync($sxapicustwtgetsingletransferorder)
    {
        return $this->sxapicustwtgetsingletransferorderPostAsyncWithHttpInfo($sxapicustwtgetsingletransferorder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicustwtgetsingletransferorderPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustwtgetsingletransferorder $sxapicustwtgetsingletransferorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicustwtgetsingletransferorderPostAsyncWithHttpInfo($sxapicustwtgetsingletransferorder)
    {
        $returnType = '\Swagger\Client\Model\SxapicustwtgetsingletransferorderResp';
        $request = $this->sxapicustwtgetsingletransferorderPostRequest($sxapicustwtgetsingletransferorder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicustwtgetsingletransferorderPost'
     *
     * @param  \Swagger\Client\Model\Sxapicustwtgetsingletransferorder $sxapicustwtgetsingletransferorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicustwtgetsingletransferorderPostRequest($sxapicustwtgetsingletransferorder)
    {
        // verify the required parameter 'sxapicustwtgetsingletransferorder' is set
        if ($sxapicustwtgetsingletransferorder === null || (is_array($sxapicustwtgetsingletransferorder) && count($sxapicustwtgetsingletransferorder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicustwtgetsingletransferorder when calling sxapicustwtgetsingletransferorderPost'
            );
        }

        $resourcePath = '/sxapicustwtgetsingletransferorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicustwtgetsingletransferorder)) {
            $_tempBody = $sxapicustwtgetsingletransferorder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapicustwtserlotupdPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustwtserlotupd $sxapicustwtserlotupd sxapicustwtserlotupd (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapicustwtserlotupdResp
     */
    public function sxapicustwtserlotupdPost($sxapicustwtserlotupd)
    {
        list($response) = $this->sxapicustwtserlotupdPostWithHttpInfo($sxapicustwtserlotupd);
        return $response;
    }

    /**
     * Operation sxapicustwtserlotupdPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustwtserlotupd $sxapicustwtserlotupd (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapicustwtserlotupdResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapicustwtserlotupdPostWithHttpInfo($sxapicustwtserlotupd)
    {
        $returnType = '\Swagger\Client\Model\SxapicustwtserlotupdResp';
        $request = $this->sxapicustwtserlotupdPostRequest($sxapicustwtserlotupd);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapicustwtserlotupdResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapicustwtserlotupdPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustwtserlotupd $sxapicustwtserlotupd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicustwtserlotupdPostAsync($sxapicustwtserlotupd)
    {
        return $this->sxapicustwtserlotupdPostAsyncWithHttpInfo($sxapicustwtserlotupd)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapicustwtserlotupdPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapicustwtserlotupd $sxapicustwtserlotupd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapicustwtserlotupdPostAsyncWithHttpInfo($sxapicustwtserlotupd)
    {
        $returnType = '\Swagger\Client\Model\SxapicustwtserlotupdResp';
        $request = $this->sxapicustwtserlotupdPostRequest($sxapicustwtserlotupd);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapicustwtserlotupdPost'
     *
     * @param  \Swagger\Client\Model\Sxapicustwtserlotupd $sxapicustwtserlotupd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapicustwtserlotupdPostRequest($sxapicustwtserlotupd)
    {
        // verify the required parameter 'sxapicustwtserlotupd' is set
        if ($sxapicustwtserlotupd === null || (is_array($sxapicustwtserlotupd) && count($sxapicustwtserlotupd) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapicustwtserlotupd when calling sxapicustwtserlotupdPost'
            );
        }

        $resourcePath = '/sxapicustwtserlotupd';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapicustwtserlotupd)) {
            $_tempBody = $sxapicustwtserlotupd;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapietccpoacknowledgementPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapietccpoacknowledgement $sxapietccpoacknowledgement sxapietccpoacknowledgement (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapietccpoacknowledgementResp
     */
    public function sxapietccpoacknowledgementPost($sxapietccpoacknowledgement)
    {
        list($response) = $this->sxapietccpoacknowledgementPostWithHttpInfo($sxapietccpoacknowledgement);
        return $response;
    }

    /**
     * Operation sxapietccpoacknowledgementPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapietccpoacknowledgement $sxapietccpoacknowledgement (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapietccpoacknowledgementResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapietccpoacknowledgementPostWithHttpInfo($sxapietccpoacknowledgement)
    {
        $returnType = '\Swagger\Client\Model\SxapietccpoacknowledgementResp';
        $request = $this->sxapietccpoacknowledgementPostRequest($sxapietccpoacknowledgement);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapietccpoacknowledgementResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapietccpoacknowledgementPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapietccpoacknowledgement $sxapietccpoacknowledgement (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapietccpoacknowledgementPostAsync($sxapietccpoacknowledgement)
    {
        return $this->sxapietccpoacknowledgementPostAsyncWithHttpInfo($sxapietccpoacknowledgement)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapietccpoacknowledgementPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapietccpoacknowledgement $sxapietccpoacknowledgement (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapietccpoacknowledgementPostAsyncWithHttpInfo($sxapietccpoacknowledgement)
    {
        $returnType = '\Swagger\Client\Model\SxapietccpoacknowledgementResp';
        $request = $this->sxapietccpoacknowledgementPostRequest($sxapietccpoacknowledgement);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapietccpoacknowledgementPost'
     *
     * @param  \Swagger\Client\Model\Sxapietccpoacknowledgement $sxapietccpoacknowledgement (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapietccpoacknowledgementPostRequest($sxapietccpoacknowledgement)
    {
        // verify the required parameter 'sxapietccpoacknowledgement' is set
        if ($sxapietccpoacknowledgement === null || (is_array($sxapietccpoacknowledgement) && count($sxapietccpoacknowledgement) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapietccpoacknowledgement when calling sxapietccpoacknowledgementPost'
            );
        }

        $resourcePath = '/sxapietccpoacknowledgement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapietccpoacknowledgement)) {
            $_tempBody = $sxapietccpoacknowledgement;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicbinlocationmntPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicbinlocationmnt $sxapiicbinlocationmnt sxapiicbinlocationmnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicbinlocationmntResp
     */
    public function sxapiicbinlocationmntPost($sxapiicbinlocationmnt)
    {
        list($response) = $this->sxapiicbinlocationmntPostWithHttpInfo($sxapiicbinlocationmnt);
        return $response;
    }

    /**
     * Operation sxapiicbinlocationmntPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicbinlocationmnt $sxapiicbinlocationmnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicbinlocationmntResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicbinlocationmntPostWithHttpInfo($sxapiicbinlocationmnt)
    {
        $returnType = '\Swagger\Client\Model\SxapiicbinlocationmntResp';
        $request = $this->sxapiicbinlocationmntPostRequest($sxapiicbinlocationmnt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicbinlocationmntResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicbinlocationmntPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicbinlocationmnt $sxapiicbinlocationmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicbinlocationmntPostAsync($sxapiicbinlocationmnt)
    {
        return $this->sxapiicbinlocationmntPostAsyncWithHttpInfo($sxapiicbinlocationmnt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicbinlocationmntPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicbinlocationmnt $sxapiicbinlocationmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicbinlocationmntPostAsyncWithHttpInfo($sxapiicbinlocationmnt)
    {
        $returnType = '\Swagger\Client\Model\SxapiicbinlocationmntResp';
        $request = $this->sxapiicbinlocationmntPostRequest($sxapiicbinlocationmnt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicbinlocationmntPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicbinlocationmnt $sxapiicbinlocationmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicbinlocationmntPostRequest($sxapiicbinlocationmnt)
    {
        // verify the required parameter 'sxapiicbinlocationmnt' is set
        if ($sxapiicbinlocationmnt === null || (is_array($sxapiicbinlocationmnt) && count($sxapiicbinlocationmnt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicbinlocationmnt when calling sxapiicbinlocationmntPost'
            );
        }

        $resourcePath = '/sxapiicbinlocationmnt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicbinlocationmnt)) {
            $_tempBody = $sxapiicbinlocationmnt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiiccustprodmntPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiiccustprodmnt $sxapiiccustprodmnt sxapiiccustprodmnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiiccustprodmntResp
     */
    public function sxapiiccustprodmntPost($sxapiiccustprodmnt)
    {
        list($response) = $this->sxapiiccustprodmntPostWithHttpInfo($sxapiiccustprodmnt);
        return $response;
    }

    /**
     * Operation sxapiiccustprodmntPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiiccustprodmnt $sxapiiccustprodmnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiiccustprodmntResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiiccustprodmntPostWithHttpInfo($sxapiiccustprodmnt)
    {
        $returnType = '\Swagger\Client\Model\SxapiiccustprodmntResp';
        $request = $this->sxapiiccustprodmntPostRequest($sxapiiccustprodmnt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiiccustprodmntResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiiccustprodmntPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiiccustprodmnt $sxapiiccustprodmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiiccustprodmntPostAsync($sxapiiccustprodmnt)
    {
        return $this->sxapiiccustprodmntPostAsyncWithHttpInfo($sxapiiccustprodmnt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiiccustprodmntPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiiccustprodmnt $sxapiiccustprodmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiiccustprodmntPostAsyncWithHttpInfo($sxapiiccustprodmnt)
    {
        $returnType = '\Swagger\Client\Model\SxapiiccustprodmntResp';
        $request = $this->sxapiiccustprodmntPostRequest($sxapiiccustprodmnt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiiccustprodmntPost'
     *
     * @param  \Swagger\Client\Model\Sxapiiccustprodmnt $sxapiiccustprodmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiiccustprodmntPostRequest($sxapiiccustprodmnt)
    {
        // verify the required parameter 'sxapiiccustprodmnt' is set
        if ($sxapiiccustprodmnt === null || (is_array($sxapiiccustprodmnt) && count($sxapiiccustprodmnt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiiccustprodmnt when calling sxapiiccustprodmntPost'
            );
        }

        $resourcePath = '/sxapiiccustprodmnt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiiccustprodmnt)) {
            $_tempBody = $sxapiiccustprodmnt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicecatalogbillmaterialsPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogbillmaterials $sxapiicecatalogbillmaterials sxapiicecatalogbillmaterials (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicecatalogbillmaterialsResp
     */
    public function sxapiicecatalogbillmaterialsPost($sxapiicecatalogbillmaterials)
    {
        list($response) = $this->sxapiicecatalogbillmaterialsPostWithHttpInfo($sxapiicecatalogbillmaterials);
        return $response;
    }

    /**
     * Operation sxapiicecatalogbillmaterialsPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogbillmaterials $sxapiicecatalogbillmaterials (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicecatalogbillmaterialsResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicecatalogbillmaterialsPostWithHttpInfo($sxapiicecatalogbillmaterials)
    {
        $returnType = '\Swagger\Client\Model\SxapiicecatalogbillmaterialsResp';
        $request = $this->sxapiicecatalogbillmaterialsPostRequest($sxapiicecatalogbillmaterials);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicecatalogbillmaterialsResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicecatalogbillmaterialsPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogbillmaterials $sxapiicecatalogbillmaterials (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogbillmaterialsPostAsync($sxapiicecatalogbillmaterials)
    {
        return $this->sxapiicecatalogbillmaterialsPostAsyncWithHttpInfo($sxapiicecatalogbillmaterials)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicecatalogbillmaterialsPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogbillmaterials $sxapiicecatalogbillmaterials (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogbillmaterialsPostAsyncWithHttpInfo($sxapiicecatalogbillmaterials)
    {
        $returnType = '\Swagger\Client\Model\SxapiicecatalogbillmaterialsResp';
        $request = $this->sxapiicecatalogbillmaterialsPostRequest($sxapiicecatalogbillmaterials);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicecatalogbillmaterialsPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogbillmaterials $sxapiicecatalogbillmaterials (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicecatalogbillmaterialsPostRequest($sxapiicecatalogbillmaterials)
    {
        // verify the required parameter 'sxapiicecatalogbillmaterials' is set
        if ($sxapiicecatalogbillmaterials === null || (is_array($sxapiicecatalogbillmaterials) && count($sxapiicecatalogbillmaterials) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicecatalogbillmaterials when calling sxapiicecatalogbillmaterialsPost'
            );
        }

        $resourcePath = '/sxapiicecatalogbillmaterials';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicecatalogbillmaterials)) {
            $_tempBody = $sxapiicecatalogbillmaterials;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicecatalogcustitemnumberPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogcustitemnumber $sxapiicecatalogcustitemnumber sxapiicecatalogcustitemnumber (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicecatalogcustitemnumberResp
     */
    public function sxapiicecatalogcustitemnumberPost($sxapiicecatalogcustitemnumber)
    {
        list($response) = $this->sxapiicecatalogcustitemnumberPostWithHttpInfo($sxapiicecatalogcustitemnumber);
        return $response;
    }

    /**
     * Operation sxapiicecatalogcustitemnumberPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogcustitemnumber $sxapiicecatalogcustitemnumber (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicecatalogcustitemnumberResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicecatalogcustitemnumberPostWithHttpInfo($sxapiicecatalogcustitemnumber)
    {
        $returnType = '\Swagger\Client\Model\SxapiicecatalogcustitemnumberResp';
        $request = $this->sxapiicecatalogcustitemnumberPostRequest($sxapiicecatalogcustitemnumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicecatalogcustitemnumberResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicecatalogcustitemnumberPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogcustitemnumber $sxapiicecatalogcustitemnumber (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogcustitemnumberPostAsync($sxapiicecatalogcustitemnumber)
    {
        return $this->sxapiicecatalogcustitemnumberPostAsyncWithHttpInfo($sxapiicecatalogcustitemnumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicecatalogcustitemnumberPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogcustitemnumber $sxapiicecatalogcustitemnumber (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogcustitemnumberPostAsyncWithHttpInfo($sxapiicecatalogcustitemnumber)
    {
        $returnType = '\Swagger\Client\Model\SxapiicecatalogcustitemnumberResp';
        $request = $this->sxapiicecatalogcustitemnumberPostRequest($sxapiicecatalogcustitemnumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicecatalogcustitemnumberPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogcustitemnumber $sxapiicecatalogcustitemnumber (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicecatalogcustitemnumberPostRequest($sxapiicecatalogcustitemnumber)
    {
        // verify the required parameter 'sxapiicecatalogcustitemnumber' is set
        if ($sxapiicecatalogcustitemnumber === null || (is_array($sxapiicecatalogcustitemnumber) && count($sxapiicecatalogcustitemnumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicecatalogcustitemnumber when calling sxapiicecatalogcustitemnumberPost'
            );
        }

        $resourcePath = '/sxapiicecatalogcustitemnumber';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicecatalogcustitemnumber)) {
            $_tempBody = $sxapiicecatalogcustitemnumber;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicecatalogcustitemnumberv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogcustitemnumberv2 $sxapiicecatalogcustitemnumberv2 sxapiicecatalogcustitemnumberv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicecatalogcustitemnumberv2Resp
     */
    public function sxapiicecatalogcustitemnumberv2Post($sxapiicecatalogcustitemnumberv2)
    {
        list($response) = $this->sxapiicecatalogcustitemnumberv2PostWithHttpInfo($sxapiicecatalogcustitemnumberv2);
        return $response;
    }

    /**
     * Operation sxapiicecatalogcustitemnumberv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogcustitemnumberv2 $sxapiicecatalogcustitemnumberv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicecatalogcustitemnumberv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicecatalogcustitemnumberv2PostWithHttpInfo($sxapiicecatalogcustitemnumberv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicecatalogcustitemnumberv2Resp';
        $request = $this->sxapiicecatalogcustitemnumberv2PostRequest($sxapiicecatalogcustitemnumberv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicecatalogcustitemnumberv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicecatalogcustitemnumberv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogcustitemnumberv2 $sxapiicecatalogcustitemnumberv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogcustitemnumberv2PostAsync($sxapiicecatalogcustitemnumberv2)
    {
        return $this->sxapiicecatalogcustitemnumberv2PostAsyncWithHttpInfo($sxapiicecatalogcustitemnumberv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicecatalogcustitemnumberv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogcustitemnumberv2 $sxapiicecatalogcustitemnumberv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogcustitemnumberv2PostAsyncWithHttpInfo($sxapiicecatalogcustitemnumberv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicecatalogcustitemnumberv2Resp';
        $request = $this->sxapiicecatalogcustitemnumberv2PostRequest($sxapiicecatalogcustitemnumberv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicecatalogcustitemnumberv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogcustitemnumberv2 $sxapiicecatalogcustitemnumberv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicecatalogcustitemnumberv2PostRequest($sxapiicecatalogcustitemnumberv2)
    {
        // verify the required parameter 'sxapiicecatalogcustitemnumberv2' is set
        if ($sxapiicecatalogcustitemnumberv2 === null || (is_array($sxapiicecatalogcustitemnumberv2) && count($sxapiicecatalogcustitemnumberv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicecatalogcustitemnumberv2 when calling sxapiicecatalogcustitemnumberv2Post'
            );
        }

        $resourcePath = '/sxapiicecatalogcustitemnumberv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicecatalogcustitemnumberv2)) {
            $_tempBody = $sxapiicecatalogcustitemnumberv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicecatalogitembalancePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitembalance $sxapiicecatalogitembalance sxapiicecatalogitembalance (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicecatalogitembalanceResp
     */
    public function sxapiicecatalogitembalancePost($sxapiicecatalogitembalance)
    {
        list($response) = $this->sxapiicecatalogitembalancePostWithHttpInfo($sxapiicecatalogitembalance);
        return $response;
    }

    /**
     * Operation sxapiicecatalogitembalancePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitembalance $sxapiicecatalogitembalance (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicecatalogitembalanceResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicecatalogitembalancePostWithHttpInfo($sxapiicecatalogitembalance)
    {
        $returnType = '\Swagger\Client\Model\SxapiicecatalogitembalanceResp';
        $request = $this->sxapiicecatalogitembalancePostRequest($sxapiicecatalogitembalance);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicecatalogitembalanceResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicecatalogitembalancePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitembalance $sxapiicecatalogitembalance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogitembalancePostAsync($sxapiicecatalogitembalance)
    {
        return $this->sxapiicecatalogitembalancePostAsyncWithHttpInfo($sxapiicecatalogitembalance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicecatalogitembalancePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitembalance $sxapiicecatalogitembalance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogitembalancePostAsyncWithHttpInfo($sxapiicecatalogitembalance)
    {
        $returnType = '\Swagger\Client\Model\SxapiicecatalogitembalanceResp';
        $request = $this->sxapiicecatalogitembalancePostRequest($sxapiicecatalogitembalance);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicecatalogitembalancePost'
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitembalance $sxapiicecatalogitembalance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicecatalogitembalancePostRequest($sxapiicecatalogitembalance)
    {
        // verify the required parameter 'sxapiicecatalogitembalance' is set
        if ($sxapiicecatalogitembalance === null || (is_array($sxapiicecatalogitembalance) && count($sxapiicecatalogitembalance) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicecatalogitembalance when calling sxapiicecatalogitembalancePost'
            );
        }

        $resourcePath = '/sxapiicecatalogitembalance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicecatalogitembalance)) {
            $_tempBody = $sxapiicecatalogitembalance;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicecatalogitembalancev2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitembalancev2 $sxapiicecatalogitembalancev2 sxapiicecatalogitembalancev2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicecatalogitembalancev2Resp
     */
    public function sxapiicecatalogitembalancev2Post($sxapiicecatalogitembalancev2)
    {
        list($response) = $this->sxapiicecatalogitembalancev2PostWithHttpInfo($sxapiicecatalogitembalancev2);
        return $response;
    }

    /**
     * Operation sxapiicecatalogitembalancev2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitembalancev2 $sxapiicecatalogitembalancev2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicecatalogitembalancev2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicecatalogitembalancev2PostWithHttpInfo($sxapiicecatalogitembalancev2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicecatalogitembalancev2Resp';
        $request = $this->sxapiicecatalogitembalancev2PostRequest($sxapiicecatalogitembalancev2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicecatalogitembalancev2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicecatalogitembalancev2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitembalancev2 $sxapiicecatalogitembalancev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogitembalancev2PostAsync($sxapiicecatalogitembalancev2)
    {
        return $this->sxapiicecatalogitembalancev2PostAsyncWithHttpInfo($sxapiicecatalogitembalancev2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicecatalogitembalancev2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitembalancev2 $sxapiicecatalogitembalancev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogitembalancev2PostAsyncWithHttpInfo($sxapiicecatalogitembalancev2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicecatalogitembalancev2Resp';
        $request = $this->sxapiicecatalogitembalancev2PostRequest($sxapiicecatalogitembalancev2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicecatalogitembalancev2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitembalancev2 $sxapiicecatalogitembalancev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicecatalogitembalancev2PostRequest($sxapiicecatalogitembalancev2)
    {
        // verify the required parameter 'sxapiicecatalogitembalancev2' is set
        if ($sxapiicecatalogitembalancev2 === null || (is_array($sxapiicecatalogitembalancev2) && count($sxapiicecatalogitembalancev2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicecatalogitembalancev2 when calling sxapiicecatalogitembalancev2Post'
            );
        }

        $resourcePath = '/sxapiicecatalogitembalancev2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicecatalogitembalancev2)) {
            $_tempBody = $sxapiicecatalogitembalancev2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicecatalogitembaldeltPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitembaldelt $sxapiicecatalogitembaldelt sxapiicecatalogitembaldelt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicecatalogitembaldeltResp
     */
    public function sxapiicecatalogitembaldeltPost($sxapiicecatalogitembaldelt)
    {
        list($response) = $this->sxapiicecatalogitembaldeltPostWithHttpInfo($sxapiicecatalogitembaldelt);
        return $response;
    }

    /**
     * Operation sxapiicecatalogitembaldeltPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitembaldelt $sxapiicecatalogitembaldelt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicecatalogitembaldeltResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicecatalogitembaldeltPostWithHttpInfo($sxapiicecatalogitembaldelt)
    {
        $returnType = '\Swagger\Client\Model\SxapiicecatalogitembaldeltResp';
        $request = $this->sxapiicecatalogitembaldeltPostRequest($sxapiicecatalogitembaldelt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicecatalogitembaldeltResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicecatalogitembaldeltPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitembaldelt $sxapiicecatalogitembaldelt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogitembaldeltPostAsync($sxapiicecatalogitembaldelt)
    {
        return $this->sxapiicecatalogitembaldeltPostAsyncWithHttpInfo($sxapiicecatalogitembaldelt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicecatalogitembaldeltPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitembaldelt $sxapiicecatalogitembaldelt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogitembaldeltPostAsyncWithHttpInfo($sxapiicecatalogitembaldelt)
    {
        $returnType = '\Swagger\Client\Model\SxapiicecatalogitembaldeltResp';
        $request = $this->sxapiicecatalogitembaldeltPostRequest($sxapiicecatalogitembaldelt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicecatalogitembaldeltPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitembaldelt $sxapiicecatalogitembaldelt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicecatalogitembaldeltPostRequest($sxapiicecatalogitembaldelt)
    {
        // verify the required parameter 'sxapiicecatalogitembaldelt' is set
        if ($sxapiicecatalogitembaldelt === null || (is_array($sxapiicecatalogitembaldelt) && count($sxapiicecatalogitembaldelt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicecatalogitembaldelt when calling sxapiicecatalogitembaldeltPost'
            );
        }

        $resourcePath = '/sxapiicecatalogitembaldelt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicecatalogitembaldelt)) {
            $_tempBody = $sxapiicecatalogitembaldelt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicecatalogitemcommentsPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemcomments $sxapiicecatalogitemcomments sxapiicecatalogitemcomments (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicecatalogitemcommentsResp
     */
    public function sxapiicecatalogitemcommentsPost($sxapiicecatalogitemcomments)
    {
        list($response) = $this->sxapiicecatalogitemcommentsPostWithHttpInfo($sxapiicecatalogitemcomments);
        return $response;
    }

    /**
     * Operation sxapiicecatalogitemcommentsPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemcomments $sxapiicecatalogitemcomments (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicecatalogitemcommentsResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicecatalogitemcommentsPostWithHttpInfo($sxapiicecatalogitemcomments)
    {
        $returnType = '\Swagger\Client\Model\SxapiicecatalogitemcommentsResp';
        $request = $this->sxapiicecatalogitemcommentsPostRequest($sxapiicecatalogitemcomments);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicecatalogitemcommentsResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicecatalogitemcommentsPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemcomments $sxapiicecatalogitemcomments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogitemcommentsPostAsync($sxapiicecatalogitemcomments)
    {
        return $this->sxapiicecatalogitemcommentsPostAsyncWithHttpInfo($sxapiicecatalogitemcomments)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicecatalogitemcommentsPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemcomments $sxapiicecatalogitemcomments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogitemcommentsPostAsyncWithHttpInfo($sxapiicecatalogitemcomments)
    {
        $returnType = '\Swagger\Client\Model\SxapiicecatalogitemcommentsResp';
        $request = $this->sxapiicecatalogitemcommentsPostRequest($sxapiicecatalogitemcomments);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicecatalogitemcommentsPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemcomments $sxapiicecatalogitemcomments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicecatalogitemcommentsPostRequest($sxapiicecatalogitemcomments)
    {
        // verify the required parameter 'sxapiicecatalogitemcomments' is set
        if ($sxapiicecatalogitemcomments === null || (is_array($sxapiicecatalogitemcomments) && count($sxapiicecatalogitemcomments) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicecatalogitemcomments when calling sxapiicecatalogitemcommentsPost'
            );
        }

        $resourcePath = '/sxapiicecatalogitemcomments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicecatalogitemcomments)) {
            $_tempBody = $sxapiicecatalogitemcomments;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicecatalogitemmastdeltPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemmastdelt $sxapiicecatalogitemmastdelt sxapiicecatalogitemmastdelt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicecatalogitemmastdeltResp
     */
    public function sxapiicecatalogitemmastdeltPost($sxapiicecatalogitemmastdelt)
    {
        list($response) = $this->sxapiicecatalogitemmastdeltPostWithHttpInfo($sxapiicecatalogitemmastdelt);
        return $response;
    }

    /**
     * Operation sxapiicecatalogitemmastdeltPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemmastdelt $sxapiicecatalogitemmastdelt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicecatalogitemmastdeltResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicecatalogitemmastdeltPostWithHttpInfo($sxapiicecatalogitemmastdelt)
    {
        $returnType = '\Swagger\Client\Model\SxapiicecatalogitemmastdeltResp';
        $request = $this->sxapiicecatalogitemmastdeltPostRequest($sxapiicecatalogitemmastdelt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicecatalogitemmastdeltResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicecatalogitemmastdeltPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemmastdelt $sxapiicecatalogitemmastdelt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogitemmastdeltPostAsync($sxapiicecatalogitemmastdelt)
    {
        return $this->sxapiicecatalogitemmastdeltPostAsyncWithHttpInfo($sxapiicecatalogitemmastdelt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicecatalogitemmastdeltPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemmastdelt $sxapiicecatalogitemmastdelt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogitemmastdeltPostAsyncWithHttpInfo($sxapiicecatalogitemmastdelt)
    {
        $returnType = '\Swagger\Client\Model\SxapiicecatalogitemmastdeltResp';
        $request = $this->sxapiicecatalogitemmastdeltPostRequest($sxapiicecatalogitemmastdelt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicecatalogitemmastdeltPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemmastdelt $sxapiicecatalogitemmastdelt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicecatalogitemmastdeltPostRequest($sxapiicecatalogitemmastdelt)
    {
        // verify the required parameter 'sxapiicecatalogitemmastdelt' is set
        if ($sxapiicecatalogitemmastdelt === null || (is_array($sxapiicecatalogitemmastdelt) && count($sxapiicecatalogitemmastdelt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicecatalogitemmastdelt when calling sxapiicecatalogitemmastdeltPost'
            );
        }

        $resourcePath = '/sxapiicecatalogitemmastdelt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicecatalogitemmastdelt)) {
            $_tempBody = $sxapiicecatalogitemmastdelt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicecatalogitemmasterPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemmaster $sxapiicecatalogitemmaster sxapiicecatalogitemmaster (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicecatalogitemmasterResp
     */
    public function sxapiicecatalogitemmasterPost($sxapiicecatalogitemmaster)
    {
        list($response) = $this->sxapiicecatalogitemmasterPostWithHttpInfo($sxapiicecatalogitemmaster);
        return $response;
    }

    /**
     * Operation sxapiicecatalogitemmasterPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemmaster $sxapiicecatalogitemmaster (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicecatalogitemmasterResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicecatalogitemmasterPostWithHttpInfo($sxapiicecatalogitemmaster)
    {
        $returnType = '\Swagger\Client\Model\SxapiicecatalogitemmasterResp';
        $request = $this->sxapiicecatalogitemmasterPostRequest($sxapiicecatalogitemmaster);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicecatalogitemmasterResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicecatalogitemmasterPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemmaster $sxapiicecatalogitemmaster (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogitemmasterPostAsync($sxapiicecatalogitemmaster)
    {
        return $this->sxapiicecatalogitemmasterPostAsyncWithHttpInfo($sxapiicecatalogitemmaster)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicecatalogitemmasterPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemmaster $sxapiicecatalogitemmaster (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogitemmasterPostAsyncWithHttpInfo($sxapiicecatalogitemmaster)
    {
        $returnType = '\Swagger\Client\Model\SxapiicecatalogitemmasterResp';
        $request = $this->sxapiicecatalogitemmasterPostRequest($sxapiicecatalogitemmaster);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicecatalogitemmasterPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemmaster $sxapiicecatalogitemmaster (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicecatalogitemmasterPostRequest($sxapiicecatalogitemmaster)
    {
        // verify the required parameter 'sxapiicecatalogitemmaster' is set
        if ($sxapiicecatalogitemmaster === null || (is_array($sxapiicecatalogitemmaster) && count($sxapiicecatalogitemmaster) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicecatalogitemmaster when calling sxapiicecatalogitemmasterPost'
            );
        }

        $resourcePath = '/sxapiicecatalogitemmaster';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicecatalogitemmaster)) {
            $_tempBody = $sxapiicecatalogitemmaster;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicecatalogitemmasterv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemmasterv2 $sxapiicecatalogitemmasterv2 sxapiicecatalogitemmasterv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicecatalogitemmasterv2Resp
     */
    public function sxapiicecatalogitemmasterv2Post($sxapiicecatalogitemmasterv2)
    {
        list($response) = $this->sxapiicecatalogitemmasterv2PostWithHttpInfo($sxapiicecatalogitemmasterv2);
        return $response;
    }

    /**
     * Operation sxapiicecatalogitemmasterv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemmasterv2 $sxapiicecatalogitemmasterv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicecatalogitemmasterv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicecatalogitemmasterv2PostWithHttpInfo($sxapiicecatalogitemmasterv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicecatalogitemmasterv2Resp';
        $request = $this->sxapiicecatalogitemmasterv2PostRequest($sxapiicecatalogitemmasterv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicecatalogitemmasterv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicecatalogitemmasterv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemmasterv2 $sxapiicecatalogitemmasterv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogitemmasterv2PostAsync($sxapiicecatalogitemmasterv2)
    {
        return $this->sxapiicecatalogitemmasterv2PostAsyncWithHttpInfo($sxapiicecatalogitemmasterv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicecatalogitemmasterv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemmasterv2 $sxapiicecatalogitemmasterv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogitemmasterv2PostAsyncWithHttpInfo($sxapiicecatalogitemmasterv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicecatalogitemmasterv2Resp';
        $request = $this->sxapiicecatalogitemmasterv2PostRequest($sxapiicecatalogitemmasterv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicecatalogitemmasterv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemmasterv2 $sxapiicecatalogitemmasterv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicecatalogitemmasterv2PostRequest($sxapiicecatalogitemmasterv2)
    {
        // verify the required parameter 'sxapiicecatalogitemmasterv2' is set
        if ($sxapiicecatalogitemmasterv2 === null || (is_array($sxapiicecatalogitemmasterv2) && count($sxapiicecatalogitemmasterv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicecatalogitemmasterv2 when calling sxapiicecatalogitemmasterv2Post'
            );
        }

        $resourcePath = '/sxapiicecatalogitemmasterv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicecatalogitemmasterv2)) {
            $_tempBody = $sxapiicecatalogitemmasterv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicecatalogitemmasterv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemmasterv3 $sxapiicecatalogitemmasterv3 sxapiicecatalogitemmasterv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicecatalogitemmasterv3Resp
     */
    public function sxapiicecatalogitemmasterv3Post($sxapiicecatalogitemmasterv3)
    {
        list($response) = $this->sxapiicecatalogitemmasterv3PostWithHttpInfo($sxapiicecatalogitemmasterv3);
        return $response;
    }

    /**
     * Operation sxapiicecatalogitemmasterv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemmasterv3 $sxapiicecatalogitemmasterv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicecatalogitemmasterv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicecatalogitemmasterv3PostWithHttpInfo($sxapiicecatalogitemmasterv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicecatalogitemmasterv3Resp';
        $request = $this->sxapiicecatalogitemmasterv3PostRequest($sxapiicecatalogitemmasterv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicecatalogitemmasterv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicecatalogitemmasterv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemmasterv3 $sxapiicecatalogitemmasterv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogitemmasterv3PostAsync($sxapiicecatalogitemmasterv3)
    {
        return $this->sxapiicecatalogitemmasterv3PostAsyncWithHttpInfo($sxapiicecatalogitemmasterv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicecatalogitemmasterv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemmasterv3 $sxapiicecatalogitemmasterv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogitemmasterv3PostAsyncWithHttpInfo($sxapiicecatalogitemmasterv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicecatalogitemmasterv3Resp';
        $request = $this->sxapiicecatalogitemmasterv3PostRequest($sxapiicecatalogitemmasterv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicecatalogitemmasterv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemmasterv3 $sxapiicecatalogitemmasterv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicecatalogitemmasterv3PostRequest($sxapiicecatalogitemmasterv3)
    {
        // verify the required parameter 'sxapiicecatalogitemmasterv3' is set
        if ($sxapiicecatalogitemmasterv3 === null || (is_array($sxapiicecatalogitemmasterv3) && count($sxapiicecatalogitemmasterv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicecatalogitemmasterv3 when calling sxapiicecatalogitemmasterv3Post'
            );
        }

        $resourcePath = '/sxapiicecatalogitemmasterv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicecatalogitemmasterv3)) {
            $_tempBody = $sxapiicecatalogitemmasterv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicecatalogitemreplacementsPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemreplacements $sxapiicecatalogitemreplacements sxapiicecatalogitemreplacements (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicecatalogitemreplacementsResp
     */
    public function sxapiicecatalogitemreplacementsPost($sxapiicecatalogitemreplacements)
    {
        list($response) = $this->sxapiicecatalogitemreplacementsPostWithHttpInfo($sxapiicecatalogitemreplacements);
        return $response;
    }

    /**
     * Operation sxapiicecatalogitemreplacementsPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemreplacements $sxapiicecatalogitemreplacements (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicecatalogitemreplacementsResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicecatalogitemreplacementsPostWithHttpInfo($sxapiicecatalogitemreplacements)
    {
        $returnType = '\Swagger\Client\Model\SxapiicecatalogitemreplacementsResp';
        $request = $this->sxapiicecatalogitemreplacementsPostRequest($sxapiicecatalogitemreplacements);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicecatalogitemreplacementsResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicecatalogitemreplacementsPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemreplacements $sxapiicecatalogitemreplacements (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogitemreplacementsPostAsync($sxapiicecatalogitemreplacements)
    {
        return $this->sxapiicecatalogitemreplacementsPostAsyncWithHttpInfo($sxapiicecatalogitemreplacements)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicecatalogitemreplacementsPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemreplacements $sxapiicecatalogitemreplacements (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogitemreplacementsPostAsyncWithHttpInfo($sxapiicecatalogitemreplacements)
    {
        $returnType = '\Swagger\Client\Model\SxapiicecatalogitemreplacementsResp';
        $request = $this->sxapiicecatalogitemreplacementsPostRequest($sxapiicecatalogitemreplacements);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicecatalogitemreplacementsPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogitemreplacements $sxapiicecatalogitemreplacements (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicecatalogitemreplacementsPostRequest($sxapiicecatalogitemreplacements)
    {
        // verify the required parameter 'sxapiicecatalogitemreplacements' is set
        if ($sxapiicecatalogitemreplacements === null || (is_array($sxapiicecatalogitemreplacements) && count($sxapiicecatalogitemreplacements) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicecatalogitemreplacements when calling sxapiicecatalogitemreplacementsPost'
            );
        }

        $resourcePath = '/sxapiicecatalogitemreplacements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicecatalogitemreplacements)) {
            $_tempBody = $sxapiicecatalogitemreplacements;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicecatalogskuchangesPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogskuchanges $sxapiicecatalogskuchanges sxapiicecatalogskuchanges (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicecatalogskuchangesResp
     */
    public function sxapiicecatalogskuchangesPost($sxapiicecatalogskuchanges)
    {
        list($response) = $this->sxapiicecatalogskuchangesPostWithHttpInfo($sxapiicecatalogskuchanges);
        return $response;
    }

    /**
     * Operation sxapiicecatalogskuchangesPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogskuchanges $sxapiicecatalogskuchanges (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicecatalogskuchangesResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicecatalogskuchangesPostWithHttpInfo($sxapiicecatalogskuchanges)
    {
        $returnType = '\Swagger\Client\Model\SxapiicecatalogskuchangesResp';
        $request = $this->sxapiicecatalogskuchangesPostRequest($sxapiicecatalogskuchanges);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicecatalogskuchangesResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicecatalogskuchangesPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogskuchanges $sxapiicecatalogskuchanges (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogskuchangesPostAsync($sxapiicecatalogskuchanges)
    {
        return $this->sxapiicecatalogskuchangesPostAsyncWithHttpInfo($sxapiicecatalogskuchanges)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicecatalogskuchangesPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogskuchanges $sxapiicecatalogskuchanges (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicecatalogskuchangesPostAsyncWithHttpInfo($sxapiicecatalogskuchanges)
    {
        $returnType = '\Swagger\Client\Model\SxapiicecatalogskuchangesResp';
        $request = $this->sxapiicecatalogskuchangesPostRequest($sxapiicecatalogskuchanges);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicecatalogskuchangesPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicecatalogskuchanges $sxapiicecatalogskuchanges (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicecatalogskuchangesPostRequest($sxapiicecatalogskuchanges)
    {
        // verify the required parameter 'sxapiicecatalogskuchanges' is set
        if ($sxapiicecatalogskuchanges === null || (is_array($sxapiicecatalogskuchanges) && count($sxapiicecatalogskuchanges) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicecatalogskuchanges when calling sxapiicecatalogskuchangesPost'
            );
        }

        $resourcePath = '/sxapiicecatalogskuchanges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicecatalogskuchanges)) {
            $_tempBody = $sxapiicecatalogskuchanges;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiiceditserlotlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiiceditserlotlist $sxapiiceditserlotlist sxapiiceditserlotlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiiceditserlotlistResp
     */
    public function sxapiiceditserlotlistPost($sxapiiceditserlotlist)
    {
        list($response) = $this->sxapiiceditserlotlistPostWithHttpInfo($sxapiiceditserlotlist);
        return $response;
    }

    /**
     * Operation sxapiiceditserlotlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiiceditserlotlist $sxapiiceditserlotlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiiceditserlotlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiiceditserlotlistPostWithHttpInfo($sxapiiceditserlotlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiiceditserlotlistResp';
        $request = $this->sxapiiceditserlotlistPostRequest($sxapiiceditserlotlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiiceditserlotlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiiceditserlotlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiiceditserlotlist $sxapiiceditserlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiiceditserlotlistPostAsync($sxapiiceditserlotlist)
    {
        return $this->sxapiiceditserlotlistPostAsyncWithHttpInfo($sxapiiceditserlotlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiiceditserlotlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiiceditserlotlist $sxapiiceditserlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiiceditserlotlistPostAsyncWithHttpInfo($sxapiiceditserlotlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiiceditserlotlistResp';
        $request = $this->sxapiiceditserlotlistPostRequest($sxapiiceditserlotlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiiceditserlotlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiiceditserlotlist $sxapiiceditserlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiiceditserlotlistPostRequest($sxapiiceditserlotlist)
    {
        // verify the required parameter 'sxapiiceditserlotlist' is set
        if ($sxapiiceditserlotlist === null || (is_array($sxapiiceditserlotlist) && count($sxapiiceditserlotlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiiceditserlotlist when calling sxapiiceditserlotlistPost'
            );
        }

        $resourcePath = '/sxapiiceditserlotlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiiceditserlotlist)) {
            $_tempBody = $sxapiiceditserlotlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetcatalogdataPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetcatalogdata $sxapiicgetcatalogdata sxapiicgetcatalogdata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetcatalogdataResp
     */
    public function sxapiicgetcatalogdataPost($sxapiicgetcatalogdata)
    {
        list($response) = $this->sxapiicgetcatalogdataPostWithHttpInfo($sxapiicgetcatalogdata);
        return $response;
    }

    /**
     * Operation sxapiicgetcatalogdataPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetcatalogdata $sxapiicgetcatalogdata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetcatalogdataResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetcatalogdataPostWithHttpInfo($sxapiicgetcatalogdata)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetcatalogdataResp';
        $request = $this->sxapiicgetcatalogdataPostRequest($sxapiicgetcatalogdata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetcatalogdataResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetcatalogdataPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetcatalogdata $sxapiicgetcatalogdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetcatalogdataPostAsync($sxapiicgetcatalogdata)
    {
        return $this->sxapiicgetcatalogdataPostAsyncWithHttpInfo($sxapiicgetcatalogdata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetcatalogdataPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetcatalogdata $sxapiicgetcatalogdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetcatalogdataPostAsyncWithHttpInfo($sxapiicgetcatalogdata)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetcatalogdataResp';
        $request = $this->sxapiicgetcatalogdataPostRequest($sxapiicgetcatalogdata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetcatalogdataPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetcatalogdata $sxapiicgetcatalogdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetcatalogdataPostRequest($sxapiicgetcatalogdata)
    {
        // verify the required parameter 'sxapiicgetcatalogdata' is set
        if ($sxapiicgetcatalogdata === null || (is_array($sxapiicgetcatalogdata) && count($sxapiicgetcatalogdata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetcatalogdata when calling sxapiicgetcatalogdataPost'
            );
        }

        $resourcePath = '/sxapiicgetcatalogdata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetcatalogdata)) {
            $_tempBody = $sxapiicgetcatalogdata;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetcataloglistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetcataloglist $sxapiicgetcataloglist sxapiicgetcataloglist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetcataloglistResp
     */
    public function sxapiicgetcataloglistPost($sxapiicgetcataloglist)
    {
        list($response) = $this->sxapiicgetcataloglistPostWithHttpInfo($sxapiicgetcataloglist);
        return $response;
    }

    /**
     * Operation sxapiicgetcataloglistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetcataloglist $sxapiicgetcataloglist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetcataloglistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetcataloglistPostWithHttpInfo($sxapiicgetcataloglist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetcataloglistResp';
        $request = $this->sxapiicgetcataloglistPostRequest($sxapiicgetcataloglist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetcataloglistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetcataloglistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetcataloglist $sxapiicgetcataloglist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetcataloglistPostAsync($sxapiicgetcataloglist)
    {
        return $this->sxapiicgetcataloglistPostAsyncWithHttpInfo($sxapiicgetcataloglist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetcataloglistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetcataloglist $sxapiicgetcataloglist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetcataloglistPostAsyncWithHttpInfo($sxapiicgetcataloglist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetcataloglistResp';
        $request = $this->sxapiicgetcataloglistPostRequest($sxapiicgetcataloglist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetcataloglistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetcataloglist $sxapiicgetcataloglist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetcataloglistPostRequest($sxapiicgetcataloglist)
    {
        // verify the required parameter 'sxapiicgetcataloglist' is set
        if ($sxapiicgetcataloglist === null || (is_array($sxapiicgetcataloglist) && count($sxapiicgetcataloglist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetcataloglist when calling sxapiicgetcataloglistPost'
            );
        }

        $resourcePath = '/sxapiicgetcataloglist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetcataloglist)) {
            $_tempBody = $sxapiicgetcataloglist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetcataloglistv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetcataloglistv2 $sxapiicgetcataloglistv2 sxapiicgetcataloglistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetcataloglistv2Resp
     */
    public function sxapiicgetcataloglistv2Post($sxapiicgetcataloglistv2)
    {
        list($response) = $this->sxapiicgetcataloglistv2PostWithHttpInfo($sxapiicgetcataloglistv2);
        return $response;
    }

    /**
     * Operation sxapiicgetcataloglistv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetcataloglistv2 $sxapiicgetcataloglistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetcataloglistv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetcataloglistv2PostWithHttpInfo($sxapiicgetcataloglistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetcataloglistv2Resp';
        $request = $this->sxapiicgetcataloglistv2PostRequest($sxapiicgetcataloglistv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetcataloglistv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetcataloglistv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetcataloglistv2 $sxapiicgetcataloglistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetcataloglistv2PostAsync($sxapiicgetcataloglistv2)
    {
        return $this->sxapiicgetcataloglistv2PostAsyncWithHttpInfo($sxapiicgetcataloglistv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetcataloglistv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetcataloglistv2 $sxapiicgetcataloglistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetcataloglistv2PostAsyncWithHttpInfo($sxapiicgetcataloglistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetcataloglistv2Resp';
        $request = $this->sxapiicgetcataloglistv2PostRequest($sxapiicgetcataloglistv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetcataloglistv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetcataloglistv2 $sxapiicgetcataloglistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetcataloglistv2PostRequest($sxapiicgetcataloglistv2)
    {
        // verify the required parameter 'sxapiicgetcataloglistv2' is set
        if ($sxapiicgetcataloglistv2 === null || (is_array($sxapiicgetcataloglistv2) && count($sxapiicgetcataloglistv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetcataloglistv2 when calling sxapiicgetcataloglistv2Post'
            );
        }

        $resourcePath = '/sxapiicgetcataloglistv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetcataloglistv2)) {
            $_tempBody = $sxapiicgetcataloglistv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetcataloglistv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetcataloglistv3 $sxapiicgetcataloglistv3 sxapiicgetcataloglistv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetcataloglistv3Resp
     */
    public function sxapiicgetcataloglistv3Post($sxapiicgetcataloglistv3)
    {
        list($response) = $this->sxapiicgetcataloglistv3PostWithHttpInfo($sxapiicgetcataloglistv3);
        return $response;
    }

    /**
     * Operation sxapiicgetcataloglistv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetcataloglistv3 $sxapiicgetcataloglistv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetcataloglistv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetcataloglistv3PostWithHttpInfo($sxapiicgetcataloglistv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetcataloglistv3Resp';
        $request = $this->sxapiicgetcataloglistv3PostRequest($sxapiicgetcataloglistv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetcataloglistv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetcataloglistv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetcataloglistv3 $sxapiicgetcataloglistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetcataloglistv3PostAsync($sxapiicgetcataloglistv3)
    {
        return $this->sxapiicgetcataloglistv3PostAsyncWithHttpInfo($sxapiicgetcataloglistv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetcataloglistv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetcataloglistv3 $sxapiicgetcataloglistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetcataloglistv3PostAsyncWithHttpInfo($sxapiicgetcataloglistv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetcataloglistv3Resp';
        $request = $this->sxapiicgetcataloglistv3PostRequest($sxapiicgetcataloglistv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetcataloglistv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetcataloglistv3 $sxapiicgetcataloglistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetcataloglistv3PostRequest($sxapiicgetcataloglistv3)
    {
        // verify the required parameter 'sxapiicgetcataloglistv3' is set
        if ($sxapiicgetcataloglistv3 === null || (is_array($sxapiicgetcataloglistv3) && count($sxapiicgetcataloglistv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetcataloglistv3 when calling sxapiicgetcataloglistv3Post'
            );
        }

        $resourcePath = '/sxapiicgetcataloglistv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetcataloglistv3)) {
            $_tempBody = $sxapiicgetcataloglistv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetlotlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetlotlist $sxapiicgetlotlist sxapiicgetlotlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetlotlistResp
     */
    public function sxapiicgetlotlistPost($sxapiicgetlotlist)
    {
        list($response) = $this->sxapiicgetlotlistPostWithHttpInfo($sxapiicgetlotlist);
        return $response;
    }

    /**
     * Operation sxapiicgetlotlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetlotlist $sxapiicgetlotlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetlotlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetlotlistPostWithHttpInfo($sxapiicgetlotlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetlotlistResp';
        $request = $this->sxapiicgetlotlistPostRequest($sxapiicgetlotlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetlotlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetlotlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetlotlist $sxapiicgetlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetlotlistPostAsync($sxapiicgetlotlist)
    {
        return $this->sxapiicgetlotlistPostAsyncWithHttpInfo($sxapiicgetlotlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetlotlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetlotlist $sxapiicgetlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetlotlistPostAsyncWithHttpInfo($sxapiicgetlotlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetlotlistResp';
        $request = $this->sxapiicgetlotlistPostRequest($sxapiicgetlotlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetlotlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetlotlist $sxapiicgetlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetlotlistPostRequest($sxapiicgetlotlist)
    {
        // verify the required parameter 'sxapiicgetlotlist' is set
        if ($sxapiicgetlotlist === null || (is_array($sxapiicgetlotlist) && count($sxapiicgetlotlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetlotlist when calling sxapiicgetlotlistPost'
            );
        }

        $resourcePath = '/sxapiicgetlotlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetlotlist)) {
            $_tempBody = $sxapiicgetlotlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetnonstockinventorylistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetnonstockinventorylist $sxapiicgetnonstockinventorylist sxapiicgetnonstockinventorylist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetnonstockinventorylistResp
     */
    public function sxapiicgetnonstockinventorylistPost($sxapiicgetnonstockinventorylist)
    {
        list($response) = $this->sxapiicgetnonstockinventorylistPostWithHttpInfo($sxapiicgetnonstockinventorylist);
        return $response;
    }

    /**
     * Operation sxapiicgetnonstockinventorylistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetnonstockinventorylist $sxapiicgetnonstockinventorylist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetnonstockinventorylistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetnonstockinventorylistPostWithHttpInfo($sxapiicgetnonstockinventorylist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetnonstockinventorylistResp';
        $request = $this->sxapiicgetnonstockinventorylistPostRequest($sxapiicgetnonstockinventorylist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetnonstockinventorylistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetnonstockinventorylistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetnonstockinventorylist $sxapiicgetnonstockinventorylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetnonstockinventorylistPostAsync($sxapiicgetnonstockinventorylist)
    {
        return $this->sxapiicgetnonstockinventorylistPostAsyncWithHttpInfo($sxapiicgetnonstockinventorylist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetnonstockinventorylistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetnonstockinventorylist $sxapiicgetnonstockinventorylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetnonstockinventorylistPostAsyncWithHttpInfo($sxapiicgetnonstockinventorylist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetnonstockinventorylistResp';
        $request = $this->sxapiicgetnonstockinventorylistPostRequest($sxapiicgetnonstockinventorylist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetnonstockinventorylistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetnonstockinventorylist $sxapiicgetnonstockinventorylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetnonstockinventorylistPostRequest($sxapiicgetnonstockinventorylist)
    {
        // verify the required parameter 'sxapiicgetnonstockinventorylist' is set
        if ($sxapiicgetnonstockinventorylist === null || (is_array($sxapiicgetnonstockinventorylist) && count($sxapiicgetnonstockinventorylist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetnonstockinventorylist when calling sxapiicgetnonstockinventorylistPost'
            );
        }

        $resourcePath = '/sxapiicgetnonstockinventorylist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetnonstockinventorylist)) {
            $_tempBody = $sxapiicgetnonstockinventorylist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetoptionalproductlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetoptionalproductlist $sxapiicgetoptionalproductlist sxapiicgetoptionalproductlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetoptionalproductlistResp
     */
    public function sxapiicgetoptionalproductlistPost($sxapiicgetoptionalproductlist)
    {
        list($response) = $this->sxapiicgetoptionalproductlistPostWithHttpInfo($sxapiicgetoptionalproductlist);
        return $response;
    }

    /**
     * Operation sxapiicgetoptionalproductlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetoptionalproductlist $sxapiicgetoptionalproductlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetoptionalproductlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetoptionalproductlistPostWithHttpInfo($sxapiicgetoptionalproductlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetoptionalproductlistResp';
        $request = $this->sxapiicgetoptionalproductlistPostRequest($sxapiicgetoptionalproductlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetoptionalproductlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetoptionalproductlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetoptionalproductlist $sxapiicgetoptionalproductlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetoptionalproductlistPostAsync($sxapiicgetoptionalproductlist)
    {
        return $this->sxapiicgetoptionalproductlistPostAsyncWithHttpInfo($sxapiicgetoptionalproductlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetoptionalproductlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetoptionalproductlist $sxapiicgetoptionalproductlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetoptionalproductlistPostAsyncWithHttpInfo($sxapiicgetoptionalproductlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetoptionalproductlistResp';
        $request = $this->sxapiicgetoptionalproductlistPostRequest($sxapiicgetoptionalproductlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetoptionalproductlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetoptionalproductlist $sxapiicgetoptionalproductlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetoptionalproductlistPostRequest($sxapiicgetoptionalproductlist)
    {
        // verify the required parameter 'sxapiicgetoptionalproductlist' is set
        if ($sxapiicgetoptionalproductlist === null || (is_array($sxapiicgetoptionalproductlist) && count($sxapiicgetoptionalproductlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetoptionalproductlist when calling sxapiicgetoptionalproductlistPost'
            );
        }

        $resourcePath = '/sxapiicgetoptionalproductlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetoptionalproductlist)) {
            $_tempBody = $sxapiicgetoptionalproductlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetprodcrossreferencelistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetprodcrossreferencelist $sxapiicgetprodcrossreferencelist sxapiicgetprodcrossreferencelist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetprodcrossreferencelistResp
     */
    public function sxapiicgetprodcrossreferencelistPost($sxapiicgetprodcrossreferencelist)
    {
        list($response) = $this->sxapiicgetprodcrossreferencelistPostWithHttpInfo($sxapiicgetprodcrossreferencelist);
        return $response;
    }

    /**
     * Operation sxapiicgetprodcrossreferencelistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetprodcrossreferencelist $sxapiicgetprodcrossreferencelist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetprodcrossreferencelistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetprodcrossreferencelistPostWithHttpInfo($sxapiicgetprodcrossreferencelist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetprodcrossreferencelistResp';
        $request = $this->sxapiicgetprodcrossreferencelistPostRequest($sxapiicgetprodcrossreferencelist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetprodcrossreferencelistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetprodcrossreferencelistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetprodcrossreferencelist $sxapiicgetprodcrossreferencelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetprodcrossreferencelistPostAsync($sxapiicgetprodcrossreferencelist)
    {
        return $this->sxapiicgetprodcrossreferencelistPostAsyncWithHttpInfo($sxapiicgetprodcrossreferencelist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetprodcrossreferencelistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetprodcrossreferencelist $sxapiicgetprodcrossreferencelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetprodcrossreferencelistPostAsyncWithHttpInfo($sxapiicgetprodcrossreferencelist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetprodcrossreferencelistResp';
        $request = $this->sxapiicgetprodcrossreferencelistPostRequest($sxapiicgetprodcrossreferencelist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetprodcrossreferencelistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetprodcrossreferencelist $sxapiicgetprodcrossreferencelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetprodcrossreferencelistPostRequest($sxapiicgetprodcrossreferencelist)
    {
        // verify the required parameter 'sxapiicgetprodcrossreferencelist' is set
        if ($sxapiicgetprodcrossreferencelist === null || (is_array($sxapiicgetprodcrossreferencelist) && count($sxapiicgetprodcrossreferencelist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetprodcrossreferencelist when calling sxapiicgetprodcrossreferencelistPost'
            );
        }

        $resourcePath = '/sxapiicgetprodcrossreferencelist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetprodcrossreferencelist)) {
            $_tempBody = $sxapiicgetprodcrossreferencelist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetprodcrossreferencelistv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetprodcrossreferencelistv2 $sxapiicgetprodcrossreferencelistv2 sxapiicgetprodcrossreferencelistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetprodcrossreferencelistv2Resp
     */
    public function sxapiicgetprodcrossreferencelistv2Post($sxapiicgetprodcrossreferencelistv2)
    {
        list($response) = $this->sxapiicgetprodcrossreferencelistv2PostWithHttpInfo($sxapiicgetprodcrossreferencelistv2);
        return $response;
    }

    /**
     * Operation sxapiicgetprodcrossreferencelistv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetprodcrossreferencelistv2 $sxapiicgetprodcrossreferencelistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetprodcrossreferencelistv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetprodcrossreferencelistv2PostWithHttpInfo($sxapiicgetprodcrossreferencelistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetprodcrossreferencelistv2Resp';
        $request = $this->sxapiicgetprodcrossreferencelistv2PostRequest($sxapiicgetprodcrossreferencelistv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetprodcrossreferencelistv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetprodcrossreferencelistv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetprodcrossreferencelistv2 $sxapiicgetprodcrossreferencelistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetprodcrossreferencelistv2PostAsync($sxapiicgetprodcrossreferencelistv2)
    {
        return $this->sxapiicgetprodcrossreferencelistv2PostAsyncWithHttpInfo($sxapiicgetprodcrossreferencelistv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetprodcrossreferencelistv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetprodcrossreferencelistv2 $sxapiicgetprodcrossreferencelistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetprodcrossreferencelistv2PostAsyncWithHttpInfo($sxapiicgetprodcrossreferencelistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetprodcrossreferencelistv2Resp';
        $request = $this->sxapiicgetprodcrossreferencelistv2PostRequest($sxapiicgetprodcrossreferencelistv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetprodcrossreferencelistv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetprodcrossreferencelistv2 $sxapiicgetprodcrossreferencelistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetprodcrossreferencelistv2PostRequest($sxapiicgetprodcrossreferencelistv2)
    {
        // verify the required parameter 'sxapiicgetprodcrossreferencelistv2' is set
        if ($sxapiicgetprodcrossreferencelistv2 === null || (is_array($sxapiicgetprodcrossreferencelistv2) && count($sxapiicgetprodcrossreferencelistv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetprodcrossreferencelistv2 when calling sxapiicgetprodcrossreferencelistv2Post'
            );
        }

        $resourcePath = '/sxapiicgetprodcrossreferencelistv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetprodcrossreferencelistv2)) {
            $_tempBody = $sxapiicgetprodcrossreferencelistv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetprodpricetypelistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetprodpricetypelist $sxapiicgetprodpricetypelist sxapiicgetprodpricetypelist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetprodpricetypelistResp
     */
    public function sxapiicgetprodpricetypelistPost($sxapiicgetprodpricetypelist)
    {
        list($response) = $this->sxapiicgetprodpricetypelistPostWithHttpInfo($sxapiicgetprodpricetypelist);
        return $response;
    }

    /**
     * Operation sxapiicgetprodpricetypelistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetprodpricetypelist $sxapiicgetprodpricetypelist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetprodpricetypelistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetprodpricetypelistPostWithHttpInfo($sxapiicgetprodpricetypelist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetprodpricetypelistResp';
        $request = $this->sxapiicgetprodpricetypelistPostRequest($sxapiicgetprodpricetypelist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetprodpricetypelistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetprodpricetypelistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetprodpricetypelist $sxapiicgetprodpricetypelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetprodpricetypelistPostAsync($sxapiicgetprodpricetypelist)
    {
        return $this->sxapiicgetprodpricetypelistPostAsyncWithHttpInfo($sxapiicgetprodpricetypelist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetprodpricetypelistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetprodpricetypelist $sxapiicgetprodpricetypelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetprodpricetypelistPostAsyncWithHttpInfo($sxapiicgetprodpricetypelist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetprodpricetypelistResp';
        $request = $this->sxapiicgetprodpricetypelistPostRequest($sxapiicgetprodpricetypelist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetprodpricetypelistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetprodpricetypelist $sxapiicgetprodpricetypelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetprodpricetypelistPostRequest($sxapiicgetprodpricetypelist)
    {
        // verify the required parameter 'sxapiicgetprodpricetypelist' is set
        if ($sxapiicgetprodpricetypelist === null || (is_array($sxapiicgetprodpricetypelist) && count($sxapiicgetprodpricetypelist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetprodpricetypelist when calling sxapiicgetprodpricetypelistPost'
            );
        }

        $resourcePath = '/sxapiicgetprodpricetypelist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetprodpricetypelist)) {
            $_tempBody = $sxapiicgetprodpricetypelist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetproductavailabledatePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductavailabledate $sxapiicgetproductavailabledate sxapiicgetproductavailabledate (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetproductavailabledateResp
     */
    public function sxapiicgetproductavailabledatePost($sxapiicgetproductavailabledate)
    {
        list($response) = $this->sxapiicgetproductavailabledatePostWithHttpInfo($sxapiicgetproductavailabledate);
        return $response;
    }

    /**
     * Operation sxapiicgetproductavailabledatePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductavailabledate $sxapiicgetproductavailabledate (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetproductavailabledateResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetproductavailabledatePostWithHttpInfo($sxapiicgetproductavailabledate)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetproductavailabledateResp';
        $request = $this->sxapiicgetproductavailabledatePostRequest($sxapiicgetproductavailabledate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetproductavailabledateResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetproductavailabledatePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductavailabledate $sxapiicgetproductavailabledate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductavailabledatePostAsync($sxapiicgetproductavailabledate)
    {
        return $this->sxapiicgetproductavailabledatePostAsyncWithHttpInfo($sxapiicgetproductavailabledate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetproductavailabledatePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductavailabledate $sxapiicgetproductavailabledate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductavailabledatePostAsyncWithHttpInfo($sxapiicgetproductavailabledate)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetproductavailabledateResp';
        $request = $this->sxapiicgetproductavailabledatePostRequest($sxapiicgetproductavailabledate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetproductavailabledatePost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductavailabledate $sxapiicgetproductavailabledate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetproductavailabledatePostRequest($sxapiicgetproductavailabledate)
    {
        // verify the required parameter 'sxapiicgetproductavailabledate' is set
        if ($sxapiicgetproductavailabledate === null || (is_array($sxapiicgetproductavailabledate) && count($sxapiicgetproductavailabledate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetproductavailabledate when calling sxapiicgetproductavailabledatePost'
            );
        }

        $resourcePath = '/sxapiicgetproductavailabledate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetproductavailabledate)) {
            $_tempBody = $sxapiicgetproductavailabledate;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetproductcategorylistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductcategorylist $sxapiicgetproductcategorylist sxapiicgetproductcategorylist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetproductcategorylistResp
     */
    public function sxapiicgetproductcategorylistPost($sxapiicgetproductcategorylist)
    {
        list($response) = $this->sxapiicgetproductcategorylistPostWithHttpInfo($sxapiicgetproductcategorylist);
        return $response;
    }

    /**
     * Operation sxapiicgetproductcategorylistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductcategorylist $sxapiicgetproductcategorylist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetproductcategorylistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetproductcategorylistPostWithHttpInfo($sxapiicgetproductcategorylist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetproductcategorylistResp';
        $request = $this->sxapiicgetproductcategorylistPostRequest($sxapiicgetproductcategorylist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetproductcategorylistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetproductcategorylistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductcategorylist $sxapiicgetproductcategorylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductcategorylistPostAsync($sxapiicgetproductcategorylist)
    {
        return $this->sxapiicgetproductcategorylistPostAsyncWithHttpInfo($sxapiicgetproductcategorylist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetproductcategorylistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductcategorylist $sxapiicgetproductcategorylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductcategorylistPostAsyncWithHttpInfo($sxapiicgetproductcategorylist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetproductcategorylistResp';
        $request = $this->sxapiicgetproductcategorylistPostRequest($sxapiicgetproductcategorylist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetproductcategorylistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductcategorylist $sxapiicgetproductcategorylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetproductcategorylistPostRequest($sxapiicgetproductcategorylist)
    {
        // verify the required parameter 'sxapiicgetproductcategorylist' is set
        if ($sxapiicgetproductcategorylist === null || (is_array($sxapiicgetproductcategorylist) && count($sxapiicgetproductcategorylist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetproductcategorylist when calling sxapiicgetproductcategorylistPost'
            );
        }

        $resourcePath = '/sxapiicgetproductcategorylist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetproductcategorylist)) {
            $_tempBody = $sxapiicgetproductcategorylist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetproductcrossreferencePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductcrossreference $sxapiicgetproductcrossreference sxapiicgetproductcrossreference (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetproductcrossreferenceResp
     */
    public function sxapiicgetproductcrossreferencePost($sxapiicgetproductcrossreference)
    {
        list($response) = $this->sxapiicgetproductcrossreferencePostWithHttpInfo($sxapiicgetproductcrossreference);
        return $response;
    }

    /**
     * Operation sxapiicgetproductcrossreferencePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductcrossreference $sxapiicgetproductcrossreference (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetproductcrossreferenceResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetproductcrossreferencePostWithHttpInfo($sxapiicgetproductcrossreference)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetproductcrossreferenceResp';
        $request = $this->sxapiicgetproductcrossreferencePostRequest($sxapiicgetproductcrossreference);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetproductcrossreferenceResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetproductcrossreferencePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductcrossreference $sxapiicgetproductcrossreference (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductcrossreferencePostAsync($sxapiicgetproductcrossreference)
    {
        return $this->sxapiicgetproductcrossreferencePostAsyncWithHttpInfo($sxapiicgetproductcrossreference)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetproductcrossreferencePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductcrossreference $sxapiicgetproductcrossreference (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductcrossreferencePostAsyncWithHttpInfo($sxapiicgetproductcrossreference)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetproductcrossreferenceResp';
        $request = $this->sxapiicgetproductcrossreferencePostRequest($sxapiicgetproductcrossreference);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetproductcrossreferencePost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductcrossreference $sxapiicgetproductcrossreference (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetproductcrossreferencePostRequest($sxapiicgetproductcrossreference)
    {
        // verify the required parameter 'sxapiicgetproductcrossreference' is set
        if ($sxapiicgetproductcrossreference === null || (is_array($sxapiicgetproductcrossreference) && count($sxapiicgetproductcrossreference) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetproductcrossreference when calling sxapiicgetproductcrossreferencePost'
            );
        }

        $resourcePath = '/sxapiicgetproductcrossreference';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetproductcrossreference)) {
            $_tempBody = $sxapiicgetproductcrossreference;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetproductcrossreferencev2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductcrossreferencev2 $sxapiicgetproductcrossreferencev2 sxapiicgetproductcrossreferencev2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetproductcrossreferencev2Resp
     */
    public function sxapiicgetproductcrossreferencev2Post($sxapiicgetproductcrossreferencev2)
    {
        list($response) = $this->sxapiicgetproductcrossreferencev2PostWithHttpInfo($sxapiicgetproductcrossreferencev2);
        return $response;
    }

    /**
     * Operation sxapiicgetproductcrossreferencev2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductcrossreferencev2 $sxapiicgetproductcrossreferencev2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetproductcrossreferencev2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetproductcrossreferencev2PostWithHttpInfo($sxapiicgetproductcrossreferencev2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetproductcrossreferencev2Resp';
        $request = $this->sxapiicgetproductcrossreferencev2PostRequest($sxapiicgetproductcrossreferencev2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetproductcrossreferencev2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetproductcrossreferencev2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductcrossreferencev2 $sxapiicgetproductcrossreferencev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductcrossreferencev2PostAsync($sxapiicgetproductcrossreferencev2)
    {
        return $this->sxapiicgetproductcrossreferencev2PostAsyncWithHttpInfo($sxapiicgetproductcrossreferencev2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetproductcrossreferencev2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductcrossreferencev2 $sxapiicgetproductcrossreferencev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductcrossreferencev2PostAsyncWithHttpInfo($sxapiicgetproductcrossreferencev2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetproductcrossreferencev2Resp';
        $request = $this->sxapiicgetproductcrossreferencev2PostRequest($sxapiicgetproductcrossreferencev2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetproductcrossreferencev2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductcrossreferencev2 $sxapiicgetproductcrossreferencev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetproductcrossreferencev2PostRequest($sxapiicgetproductcrossreferencev2)
    {
        // verify the required parameter 'sxapiicgetproductcrossreferencev2' is set
        if ($sxapiicgetproductcrossreferencev2 === null || (is_array($sxapiicgetproductcrossreferencev2) && count($sxapiicgetproductcrossreferencev2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetproductcrossreferencev2 when calling sxapiicgetproductcrossreferencev2Post'
            );
        }

        $resourcePath = '/sxapiicgetproductcrossreferencev2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetproductcrossreferencev2)) {
            $_tempBody = $sxapiicgetproductcrossreferencev2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetproductdatageneralPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneral $sxapiicgetproductdatageneral sxapiicgetproductdatageneral (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetproductdatageneralResp
     */
    public function sxapiicgetproductdatageneralPost($sxapiicgetproductdatageneral)
    {
        list($response) = $this->sxapiicgetproductdatageneralPostWithHttpInfo($sxapiicgetproductdatageneral);
        return $response;
    }

    /**
     * Operation sxapiicgetproductdatageneralPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneral $sxapiicgetproductdatageneral (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetproductdatageneralResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetproductdatageneralPostWithHttpInfo($sxapiicgetproductdatageneral)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetproductdatageneralResp';
        $request = $this->sxapiicgetproductdatageneralPostRequest($sxapiicgetproductdatageneral);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetproductdatageneralResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetproductdatageneralPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneral $sxapiicgetproductdatageneral (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductdatageneralPostAsync($sxapiicgetproductdatageneral)
    {
        return $this->sxapiicgetproductdatageneralPostAsyncWithHttpInfo($sxapiicgetproductdatageneral)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetproductdatageneralPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneral $sxapiicgetproductdatageneral (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductdatageneralPostAsyncWithHttpInfo($sxapiicgetproductdatageneral)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetproductdatageneralResp';
        $request = $this->sxapiicgetproductdatageneralPostRequest($sxapiicgetproductdatageneral);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetproductdatageneralPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneral $sxapiicgetproductdatageneral (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetproductdatageneralPostRequest($sxapiicgetproductdatageneral)
    {
        // verify the required parameter 'sxapiicgetproductdatageneral' is set
        if ($sxapiicgetproductdatageneral === null || (is_array($sxapiicgetproductdatageneral) && count($sxapiicgetproductdatageneral) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetproductdatageneral when calling sxapiicgetproductdatageneralPost'
            );
        }

        $resourcePath = '/sxapiicgetproductdatageneral';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetproductdatageneral)) {
            $_tempBody = $sxapiicgetproductdatageneral;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetproductdatageneralv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv2 $sxapiicgetproductdatageneralv2 sxapiicgetproductdatageneralv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetproductdatageneralv2Resp
     */
    public function sxapiicgetproductdatageneralv2Post($sxapiicgetproductdatageneralv2)
    {
        list($response) = $this->sxapiicgetproductdatageneralv2PostWithHttpInfo($sxapiicgetproductdatageneralv2);
        return $response;
    }

    /**
     * Operation sxapiicgetproductdatageneralv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv2 $sxapiicgetproductdatageneralv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetproductdatageneralv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetproductdatageneralv2PostWithHttpInfo($sxapiicgetproductdatageneralv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetproductdatageneralv2Resp';
        $request = $this->sxapiicgetproductdatageneralv2PostRequest($sxapiicgetproductdatageneralv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetproductdatageneralv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetproductdatageneralv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv2 $sxapiicgetproductdatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductdatageneralv2PostAsync($sxapiicgetproductdatageneralv2)
    {
        return $this->sxapiicgetproductdatageneralv2PostAsyncWithHttpInfo($sxapiicgetproductdatageneralv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetproductdatageneralv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv2 $sxapiicgetproductdatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductdatageneralv2PostAsyncWithHttpInfo($sxapiicgetproductdatageneralv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetproductdatageneralv2Resp';
        $request = $this->sxapiicgetproductdatageneralv2PostRequest($sxapiicgetproductdatageneralv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetproductdatageneralv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv2 $sxapiicgetproductdatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetproductdatageneralv2PostRequest($sxapiicgetproductdatageneralv2)
    {
        // verify the required parameter 'sxapiicgetproductdatageneralv2' is set
        if ($sxapiicgetproductdatageneralv2 === null || (is_array($sxapiicgetproductdatageneralv2) && count($sxapiicgetproductdatageneralv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetproductdatageneralv2 when calling sxapiicgetproductdatageneralv2Post'
            );
        }

        $resourcePath = '/sxapiicgetproductdatageneralv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetproductdatageneralv2)) {
            $_tempBody = $sxapiicgetproductdatageneralv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetproductdatageneralv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv3 $sxapiicgetproductdatageneralv3 sxapiicgetproductdatageneralv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetproductdatageneralv3Resp
     */
    public function sxapiicgetproductdatageneralv3Post($sxapiicgetproductdatageneralv3)
    {
        list($response) = $this->sxapiicgetproductdatageneralv3PostWithHttpInfo($sxapiicgetproductdatageneralv3);
        return $response;
    }

    /**
     * Operation sxapiicgetproductdatageneralv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv3 $sxapiicgetproductdatageneralv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetproductdatageneralv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetproductdatageneralv3PostWithHttpInfo($sxapiicgetproductdatageneralv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetproductdatageneralv3Resp';
        $request = $this->sxapiicgetproductdatageneralv3PostRequest($sxapiicgetproductdatageneralv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetproductdatageneralv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetproductdatageneralv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv3 $sxapiicgetproductdatageneralv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductdatageneralv3PostAsync($sxapiicgetproductdatageneralv3)
    {
        return $this->sxapiicgetproductdatageneralv3PostAsyncWithHttpInfo($sxapiicgetproductdatageneralv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetproductdatageneralv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv3 $sxapiicgetproductdatageneralv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductdatageneralv3PostAsyncWithHttpInfo($sxapiicgetproductdatageneralv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetproductdatageneralv3Resp';
        $request = $this->sxapiicgetproductdatageneralv3PostRequest($sxapiicgetproductdatageneralv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetproductdatageneralv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv3 $sxapiicgetproductdatageneralv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetproductdatageneralv3PostRequest($sxapiicgetproductdatageneralv3)
    {
        // verify the required parameter 'sxapiicgetproductdatageneralv3' is set
        if ($sxapiicgetproductdatageneralv3 === null || (is_array($sxapiicgetproductdatageneralv3) && count($sxapiicgetproductdatageneralv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetproductdatageneralv3 when calling sxapiicgetproductdatageneralv3Post'
            );
        }

        $resourcePath = '/sxapiicgetproductdatageneralv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetproductdatageneralv3)) {
            $_tempBody = $sxapiicgetproductdatageneralv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetproductdatageneralv4Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv4 $sxapiicgetproductdatageneralv4 sxapiicgetproductdatageneralv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetproductdatageneralv4Resp
     */
    public function sxapiicgetproductdatageneralv4Post($sxapiicgetproductdatageneralv4)
    {
        list($response) = $this->sxapiicgetproductdatageneralv4PostWithHttpInfo($sxapiicgetproductdatageneralv4);
        return $response;
    }

    /**
     * Operation sxapiicgetproductdatageneralv4PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv4 $sxapiicgetproductdatageneralv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetproductdatageneralv4Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetproductdatageneralv4PostWithHttpInfo($sxapiicgetproductdatageneralv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetproductdatageneralv4Resp';
        $request = $this->sxapiicgetproductdatageneralv4PostRequest($sxapiicgetproductdatageneralv4);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetproductdatageneralv4Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetproductdatageneralv4PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv4 $sxapiicgetproductdatageneralv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductdatageneralv4PostAsync($sxapiicgetproductdatageneralv4)
    {
        return $this->sxapiicgetproductdatageneralv4PostAsyncWithHttpInfo($sxapiicgetproductdatageneralv4)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetproductdatageneralv4PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv4 $sxapiicgetproductdatageneralv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductdatageneralv4PostAsyncWithHttpInfo($sxapiicgetproductdatageneralv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetproductdatageneralv4Resp';
        $request = $this->sxapiicgetproductdatageneralv4PostRequest($sxapiicgetproductdatageneralv4);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetproductdatageneralv4Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductdatageneralv4 $sxapiicgetproductdatageneralv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetproductdatageneralv4PostRequest($sxapiicgetproductdatageneralv4)
    {
        // verify the required parameter 'sxapiicgetproductdatageneralv4' is set
        if ($sxapiicgetproductdatageneralv4 === null || (is_array($sxapiicgetproductdatageneralv4) && count($sxapiicgetproductdatageneralv4) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetproductdatageneralv4 when calling sxapiicgetproductdatageneralv4Post'
            );
        }

        $resourcePath = '/sxapiicgetproductdatageneralv4';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetproductdatageneralv4)) {
            $_tempBody = $sxapiicgetproductdatageneralv4;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetproductfutureavailabilitylistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductfutureavailabilitylist $sxapiicgetproductfutureavailabilitylist sxapiicgetproductfutureavailabilitylist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetproductfutureavailabilitylistResp
     */
    public function sxapiicgetproductfutureavailabilitylistPost($sxapiicgetproductfutureavailabilitylist)
    {
        list($response) = $this->sxapiicgetproductfutureavailabilitylistPostWithHttpInfo($sxapiicgetproductfutureavailabilitylist);
        return $response;
    }

    /**
     * Operation sxapiicgetproductfutureavailabilitylistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductfutureavailabilitylist $sxapiicgetproductfutureavailabilitylist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetproductfutureavailabilitylistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetproductfutureavailabilitylistPostWithHttpInfo($sxapiicgetproductfutureavailabilitylist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetproductfutureavailabilitylistResp';
        $request = $this->sxapiicgetproductfutureavailabilitylistPostRequest($sxapiicgetproductfutureavailabilitylist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetproductfutureavailabilitylistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetproductfutureavailabilitylistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductfutureavailabilitylist $sxapiicgetproductfutureavailabilitylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductfutureavailabilitylistPostAsync($sxapiicgetproductfutureavailabilitylist)
    {
        return $this->sxapiicgetproductfutureavailabilitylistPostAsyncWithHttpInfo($sxapiicgetproductfutureavailabilitylist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetproductfutureavailabilitylistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductfutureavailabilitylist $sxapiicgetproductfutureavailabilitylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductfutureavailabilitylistPostAsyncWithHttpInfo($sxapiicgetproductfutureavailabilitylist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetproductfutureavailabilitylistResp';
        $request = $this->sxapiicgetproductfutureavailabilitylistPostRequest($sxapiicgetproductfutureavailabilitylist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetproductfutureavailabilitylistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductfutureavailabilitylist $sxapiicgetproductfutureavailabilitylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetproductfutureavailabilitylistPostRequest($sxapiicgetproductfutureavailabilitylist)
    {
        // verify the required parameter 'sxapiicgetproductfutureavailabilitylist' is set
        if ($sxapiicgetproductfutureavailabilitylist === null || (is_array($sxapiicgetproductfutureavailabilitylist) && count($sxapiicgetproductfutureavailabilitylist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetproductfutureavailabilitylist when calling sxapiicgetproductfutureavailabilitylistPost'
            );
        }

        $resourcePath = '/sxapiicgetproductfutureavailabilitylist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetproductfutureavailabilitylist)) {
            $_tempBody = $sxapiicgetproductfutureavailabilitylist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetproductlinelistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductlinelist $sxapiicgetproductlinelist sxapiicgetproductlinelist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetproductlinelistResp
     */
    public function sxapiicgetproductlinelistPost($sxapiicgetproductlinelist)
    {
        list($response) = $this->sxapiicgetproductlinelistPostWithHttpInfo($sxapiicgetproductlinelist);
        return $response;
    }

    /**
     * Operation sxapiicgetproductlinelistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductlinelist $sxapiicgetproductlinelist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetproductlinelistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetproductlinelistPostWithHttpInfo($sxapiicgetproductlinelist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetproductlinelistResp';
        $request = $this->sxapiicgetproductlinelistPostRequest($sxapiicgetproductlinelist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetproductlinelistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetproductlinelistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductlinelist $sxapiicgetproductlinelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductlinelistPostAsync($sxapiicgetproductlinelist)
    {
        return $this->sxapiicgetproductlinelistPostAsyncWithHttpInfo($sxapiicgetproductlinelist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetproductlinelistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductlinelist $sxapiicgetproductlinelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductlinelistPostAsyncWithHttpInfo($sxapiicgetproductlinelist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetproductlinelistResp';
        $request = $this->sxapiicgetproductlinelistPostRequest($sxapiicgetproductlinelist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetproductlinelistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductlinelist $sxapiicgetproductlinelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetproductlinelistPostRequest($sxapiicgetproductlinelist)
    {
        // verify the required parameter 'sxapiicgetproductlinelist' is set
        if ($sxapiicgetproductlinelist === null || (is_array($sxapiicgetproductlinelist) && count($sxapiicgetproductlinelist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetproductlinelist when calling sxapiicgetproductlinelistPost'
            );
        }

        $resourcePath = '/sxapiicgetproductlinelist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetproductlinelist)) {
            $_tempBody = $sxapiicgetproductlinelist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetproductlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductlist $sxapiicgetproductlist sxapiicgetproductlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetproductlistResp
     */
    public function sxapiicgetproductlistPost($sxapiicgetproductlist)
    {
        list($response) = $this->sxapiicgetproductlistPostWithHttpInfo($sxapiicgetproductlist);
        return $response;
    }

    /**
     * Operation sxapiicgetproductlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductlist $sxapiicgetproductlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetproductlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetproductlistPostWithHttpInfo($sxapiicgetproductlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetproductlistResp';
        $request = $this->sxapiicgetproductlistPostRequest($sxapiicgetproductlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetproductlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetproductlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductlist $sxapiicgetproductlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductlistPostAsync($sxapiicgetproductlist)
    {
        return $this->sxapiicgetproductlistPostAsyncWithHttpInfo($sxapiicgetproductlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetproductlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductlist $sxapiicgetproductlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductlistPostAsyncWithHttpInfo($sxapiicgetproductlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetproductlistResp';
        $request = $this->sxapiicgetproductlistPostRequest($sxapiicgetproductlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetproductlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductlist $sxapiicgetproductlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetproductlistPostRequest($sxapiicgetproductlist)
    {
        // verify the required parameter 'sxapiicgetproductlist' is set
        if ($sxapiicgetproductlist === null || (is_array($sxapiicgetproductlist) && count($sxapiicgetproductlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetproductlist when calling sxapiicgetproductlistPost'
            );
        }

        $resourcePath = '/sxapiicgetproductlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetproductlist)) {
            $_tempBody = $sxapiicgetproductlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetproductlistv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductlistv2 $sxapiicgetproductlistv2 sxapiicgetproductlistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetproductlistv2Resp
     */
    public function sxapiicgetproductlistv2Post($sxapiicgetproductlistv2)
    {
        list($response) = $this->sxapiicgetproductlistv2PostWithHttpInfo($sxapiicgetproductlistv2);
        return $response;
    }

    /**
     * Operation sxapiicgetproductlistv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductlistv2 $sxapiicgetproductlistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetproductlistv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetproductlistv2PostWithHttpInfo($sxapiicgetproductlistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetproductlistv2Resp';
        $request = $this->sxapiicgetproductlistv2PostRequest($sxapiicgetproductlistv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetproductlistv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetproductlistv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductlistv2 $sxapiicgetproductlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductlistv2PostAsync($sxapiicgetproductlistv2)
    {
        return $this->sxapiicgetproductlistv2PostAsyncWithHttpInfo($sxapiicgetproductlistv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetproductlistv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductlistv2 $sxapiicgetproductlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductlistv2PostAsyncWithHttpInfo($sxapiicgetproductlistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetproductlistv2Resp';
        $request = $this->sxapiicgetproductlistv2PostRequest($sxapiicgetproductlistv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetproductlistv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductlistv2 $sxapiicgetproductlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetproductlistv2PostRequest($sxapiicgetproductlistv2)
    {
        // verify the required parameter 'sxapiicgetproductlistv2' is set
        if ($sxapiicgetproductlistv2 === null || (is_array($sxapiicgetproductlistv2) && count($sxapiicgetproductlistv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetproductlistv2 when calling sxapiicgetproductlistv2Post'
            );
        }

        $resourcePath = '/sxapiicgetproductlistv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetproductlistv2)) {
            $_tempBody = $sxapiicgetproductlistv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetproductlistv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductlistv3 $sxapiicgetproductlistv3 sxapiicgetproductlistv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetproductlistv3Resp
     */
    public function sxapiicgetproductlistv3Post($sxapiicgetproductlistv3)
    {
        list($response) = $this->sxapiicgetproductlistv3PostWithHttpInfo($sxapiicgetproductlistv3);
        return $response;
    }

    /**
     * Operation sxapiicgetproductlistv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductlistv3 $sxapiicgetproductlistv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetproductlistv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetproductlistv3PostWithHttpInfo($sxapiicgetproductlistv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetproductlistv3Resp';
        $request = $this->sxapiicgetproductlistv3PostRequest($sxapiicgetproductlistv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetproductlistv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetproductlistv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductlistv3 $sxapiicgetproductlistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductlistv3PostAsync($sxapiicgetproductlistv3)
    {
        return $this->sxapiicgetproductlistv3PostAsyncWithHttpInfo($sxapiicgetproductlistv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetproductlistv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductlistv3 $sxapiicgetproductlistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductlistv3PostAsyncWithHttpInfo($sxapiicgetproductlistv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetproductlistv3Resp';
        $request = $this->sxapiicgetproductlistv3PostRequest($sxapiicgetproductlistv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetproductlistv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductlistv3 $sxapiicgetproductlistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetproductlistv3PostRequest($sxapiicgetproductlistv3)
    {
        // verify the required parameter 'sxapiicgetproductlistv3' is set
        if ($sxapiicgetproductlistv3 === null || (is_array($sxapiicgetproductlistv3) && count($sxapiicgetproductlistv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetproductlistv3 when calling sxapiicgetproductlistv3Post'
            );
        }

        $resourcePath = '/sxapiicgetproductlistv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetproductlistv3)) {
            $_tempBody = $sxapiicgetproductlistv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetproductnoteslistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductnoteslist $sxapiicgetproductnoteslist sxapiicgetproductnoteslist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetproductnoteslistResp
     */
    public function sxapiicgetproductnoteslistPost($sxapiicgetproductnoteslist)
    {
        list($response) = $this->sxapiicgetproductnoteslistPostWithHttpInfo($sxapiicgetproductnoteslist);
        return $response;
    }

    /**
     * Operation sxapiicgetproductnoteslistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductnoteslist $sxapiicgetproductnoteslist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetproductnoteslistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetproductnoteslistPostWithHttpInfo($sxapiicgetproductnoteslist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetproductnoteslistResp';
        $request = $this->sxapiicgetproductnoteslistPostRequest($sxapiicgetproductnoteslist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetproductnoteslistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetproductnoteslistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductnoteslist $sxapiicgetproductnoteslist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductnoteslistPostAsync($sxapiicgetproductnoteslist)
    {
        return $this->sxapiicgetproductnoteslistPostAsyncWithHttpInfo($sxapiicgetproductnoteslist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetproductnoteslistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductnoteslist $sxapiicgetproductnoteslist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductnoteslistPostAsyncWithHttpInfo($sxapiicgetproductnoteslist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetproductnoteslistResp';
        $request = $this->sxapiicgetproductnoteslistPostRequest($sxapiicgetproductnoteslist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetproductnoteslistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductnoteslist $sxapiicgetproductnoteslist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetproductnoteslistPostRequest($sxapiicgetproductnoteslist)
    {
        // verify the required parameter 'sxapiicgetproductnoteslist' is set
        if ($sxapiicgetproductnoteslist === null || (is_array($sxapiicgetproductnoteslist) && count($sxapiicgetproductnoteslist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetproductnoteslist when calling sxapiicgetproductnoteslistPost'
            );
        }

        $resourcePath = '/sxapiicgetproductnoteslist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetproductnoteslist)) {
            $_tempBody = $sxapiicgetproductnoteslist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetproductnoteslistv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductnoteslistv2 $sxapiicgetproductnoteslistv2 sxapiicgetproductnoteslistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetproductnoteslistv2Resp
     */
    public function sxapiicgetproductnoteslistv2Post($sxapiicgetproductnoteslistv2)
    {
        list($response) = $this->sxapiicgetproductnoteslistv2PostWithHttpInfo($sxapiicgetproductnoteslistv2);
        return $response;
    }

    /**
     * Operation sxapiicgetproductnoteslistv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductnoteslistv2 $sxapiicgetproductnoteslistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetproductnoteslistv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetproductnoteslistv2PostWithHttpInfo($sxapiicgetproductnoteslistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetproductnoteslistv2Resp';
        $request = $this->sxapiicgetproductnoteslistv2PostRequest($sxapiicgetproductnoteslistv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetproductnoteslistv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetproductnoteslistv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductnoteslistv2 $sxapiicgetproductnoteslistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductnoteslistv2PostAsync($sxapiicgetproductnoteslistv2)
    {
        return $this->sxapiicgetproductnoteslistv2PostAsyncWithHttpInfo($sxapiicgetproductnoteslistv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetproductnoteslistv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductnoteslistv2 $sxapiicgetproductnoteslistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductnoteslistv2PostAsyncWithHttpInfo($sxapiicgetproductnoteslistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetproductnoteslistv2Resp';
        $request = $this->sxapiicgetproductnoteslistv2PostRequest($sxapiicgetproductnoteslistv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetproductnoteslistv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductnoteslistv2 $sxapiicgetproductnoteslistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetproductnoteslistv2PostRequest($sxapiicgetproductnoteslistv2)
    {
        // verify the required parameter 'sxapiicgetproductnoteslistv2' is set
        if ($sxapiicgetproductnoteslistv2 === null || (is_array($sxapiicgetproductnoteslistv2) && count($sxapiicgetproductnoteslistv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetproductnoteslistv2 when calling sxapiicgetproductnoteslistv2Post'
            );
        }

        $resourcePath = '/sxapiicgetproductnoteslistv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetproductnoteslistv2)) {
            $_tempBody = $sxapiicgetproductnoteslistv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetproductunitofmeasurelistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductunitofmeasurelist $sxapiicgetproductunitofmeasurelist sxapiicgetproductunitofmeasurelist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetproductunitofmeasurelistResp
     */
    public function sxapiicgetproductunitofmeasurelistPost($sxapiicgetproductunitofmeasurelist)
    {
        list($response) = $this->sxapiicgetproductunitofmeasurelistPostWithHttpInfo($sxapiicgetproductunitofmeasurelist);
        return $response;
    }

    /**
     * Operation sxapiicgetproductunitofmeasurelistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductunitofmeasurelist $sxapiicgetproductunitofmeasurelist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetproductunitofmeasurelistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetproductunitofmeasurelistPostWithHttpInfo($sxapiicgetproductunitofmeasurelist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetproductunitofmeasurelistResp';
        $request = $this->sxapiicgetproductunitofmeasurelistPostRequest($sxapiicgetproductunitofmeasurelist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetproductunitofmeasurelistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetproductunitofmeasurelistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductunitofmeasurelist $sxapiicgetproductunitofmeasurelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductunitofmeasurelistPostAsync($sxapiicgetproductunitofmeasurelist)
    {
        return $this->sxapiicgetproductunitofmeasurelistPostAsyncWithHttpInfo($sxapiicgetproductunitofmeasurelist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetproductunitofmeasurelistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductunitofmeasurelist $sxapiicgetproductunitofmeasurelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetproductunitofmeasurelistPostAsyncWithHttpInfo($sxapiicgetproductunitofmeasurelist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetproductunitofmeasurelistResp';
        $request = $this->sxapiicgetproductunitofmeasurelistPostRequest($sxapiicgetproductunitofmeasurelist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetproductunitofmeasurelistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetproductunitofmeasurelist $sxapiicgetproductunitofmeasurelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetproductunitofmeasurelistPostRequest($sxapiicgetproductunitofmeasurelist)
    {
        // verify the required parameter 'sxapiicgetproductunitofmeasurelist' is set
        if ($sxapiicgetproductunitofmeasurelist === null || (is_array($sxapiicgetproductunitofmeasurelist) && count($sxapiicgetproductunitofmeasurelist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetproductunitofmeasurelist when calling sxapiicgetproductunitofmeasurelistPost'
            );
        }

        $resourcePath = '/sxapiicgetproductunitofmeasurelist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetproductunitofmeasurelist)) {
            $_tempBody = $sxapiicgetproductunitofmeasurelist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetreservedprodlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetreservedprodlist $sxapiicgetreservedprodlist sxapiicgetreservedprodlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetreservedprodlistResp
     */
    public function sxapiicgetreservedprodlistPost($sxapiicgetreservedprodlist)
    {
        list($response) = $this->sxapiicgetreservedprodlistPostWithHttpInfo($sxapiicgetreservedprodlist);
        return $response;
    }

    /**
     * Operation sxapiicgetreservedprodlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetreservedprodlist $sxapiicgetreservedprodlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetreservedprodlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetreservedprodlistPostWithHttpInfo($sxapiicgetreservedprodlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetreservedprodlistResp';
        $request = $this->sxapiicgetreservedprodlistPostRequest($sxapiicgetreservedprodlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetreservedprodlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetreservedprodlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetreservedprodlist $sxapiicgetreservedprodlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetreservedprodlistPostAsync($sxapiicgetreservedprodlist)
    {
        return $this->sxapiicgetreservedprodlistPostAsyncWithHttpInfo($sxapiicgetreservedprodlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetreservedprodlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetreservedprodlist $sxapiicgetreservedprodlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetreservedprodlistPostAsyncWithHttpInfo($sxapiicgetreservedprodlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetreservedprodlistResp';
        $request = $this->sxapiicgetreservedprodlistPostRequest($sxapiicgetreservedprodlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetreservedprodlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetreservedprodlist $sxapiicgetreservedprodlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetreservedprodlistPostRequest($sxapiicgetreservedprodlist)
    {
        // verify the required parameter 'sxapiicgetreservedprodlist' is set
        if ($sxapiicgetreservedprodlist === null || (is_array($sxapiicgetreservedprodlist) && count($sxapiicgetreservedprodlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetreservedprodlist when calling sxapiicgetreservedprodlistPost'
            );
        }

        $resourcePath = '/sxapiicgetreservedprodlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetreservedprodlist)) {
            $_tempBody = $sxapiicgetreservedprodlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetseriallistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetseriallist $sxapiicgetseriallist sxapiicgetseriallist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetseriallistResp
     */
    public function sxapiicgetseriallistPost($sxapiicgetseriallist)
    {
        list($response) = $this->sxapiicgetseriallistPostWithHttpInfo($sxapiicgetseriallist);
        return $response;
    }

    /**
     * Operation sxapiicgetseriallistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetseriallist $sxapiicgetseriallist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetseriallistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetseriallistPostWithHttpInfo($sxapiicgetseriallist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetseriallistResp';
        $request = $this->sxapiicgetseriallistPostRequest($sxapiicgetseriallist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetseriallistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetseriallistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetseriallist $sxapiicgetseriallist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetseriallistPostAsync($sxapiicgetseriallist)
    {
        return $this->sxapiicgetseriallistPostAsyncWithHttpInfo($sxapiicgetseriallist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetseriallistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetseriallist $sxapiicgetseriallist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetseriallistPostAsyncWithHttpInfo($sxapiicgetseriallist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetseriallistResp';
        $request = $this->sxapiicgetseriallistPostRequest($sxapiicgetseriallist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetseriallistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetseriallist $sxapiicgetseriallist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetseriallistPostRequest($sxapiicgetseriallist)
    {
        // verify the required parameter 'sxapiicgetseriallist' is set
        if ($sxapiicgetseriallist === null || (is_array($sxapiicgetseriallist) && count($sxapiicgetseriallist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetseriallist when calling sxapiicgetseriallistPost'
            );
        }

        $resourcePath = '/sxapiicgetseriallist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetseriallist)) {
            $_tempBody = $sxapiicgetseriallist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwarehousedatageneralPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwarehousedatageneral $sxapiicgetwarehousedatageneral sxapiicgetwarehousedatageneral (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetwarehousedatageneralResp
     */
    public function sxapiicgetwarehousedatageneralPost($sxapiicgetwarehousedatageneral)
    {
        list($response) = $this->sxapiicgetwarehousedatageneralPostWithHttpInfo($sxapiicgetwarehousedatageneral);
        return $response;
    }

    /**
     * Operation sxapiicgetwarehousedatageneralPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwarehousedatageneral $sxapiicgetwarehousedatageneral (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetwarehousedatageneralResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwarehousedatageneralPostWithHttpInfo($sxapiicgetwarehousedatageneral)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwarehousedatageneralResp';
        $request = $this->sxapiicgetwarehousedatageneralPostRequest($sxapiicgetwarehousedatageneral);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetwarehousedatageneralResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwarehousedatageneralPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwarehousedatageneral $sxapiicgetwarehousedatageneral (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwarehousedatageneralPostAsync($sxapiicgetwarehousedatageneral)
    {
        return $this->sxapiicgetwarehousedatageneralPostAsyncWithHttpInfo($sxapiicgetwarehousedatageneral)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwarehousedatageneralPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwarehousedatageneral $sxapiicgetwarehousedatageneral (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwarehousedatageneralPostAsyncWithHttpInfo($sxapiicgetwarehousedatageneral)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwarehousedatageneralResp';
        $request = $this->sxapiicgetwarehousedatageneralPostRequest($sxapiicgetwarehousedatageneral);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwarehousedatageneralPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwarehousedatageneral $sxapiicgetwarehousedatageneral (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwarehousedatageneralPostRequest($sxapiicgetwarehousedatageneral)
    {
        // verify the required parameter 'sxapiicgetwarehousedatageneral' is set
        if ($sxapiicgetwarehousedatageneral === null || (is_array($sxapiicgetwarehousedatageneral) && count($sxapiicgetwarehousedatageneral) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwarehousedatageneral when calling sxapiicgetwarehousedatageneralPost'
            );
        }

        $resourcePath = '/sxapiicgetwarehousedatageneral';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwarehousedatageneral)) {
            $_tempBody = $sxapiicgetwarehousedatageneral;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwarehousedatageneralv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwarehousedatageneralv2 $sxapiicgetwarehousedatageneralv2 sxapiicgetwarehousedatageneralv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetwarehousedatageneralv2Resp
     */
    public function sxapiicgetwarehousedatageneralv2Post($sxapiicgetwarehousedatageneralv2)
    {
        list($response) = $this->sxapiicgetwarehousedatageneralv2PostWithHttpInfo($sxapiicgetwarehousedatageneralv2);
        return $response;
    }

    /**
     * Operation sxapiicgetwarehousedatageneralv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwarehousedatageneralv2 $sxapiicgetwarehousedatageneralv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetwarehousedatageneralv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwarehousedatageneralv2PostWithHttpInfo($sxapiicgetwarehousedatageneralv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwarehousedatageneralv2Resp';
        $request = $this->sxapiicgetwarehousedatageneralv2PostRequest($sxapiicgetwarehousedatageneralv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetwarehousedatageneralv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwarehousedatageneralv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwarehousedatageneralv2 $sxapiicgetwarehousedatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwarehousedatageneralv2PostAsync($sxapiicgetwarehousedatageneralv2)
    {
        return $this->sxapiicgetwarehousedatageneralv2PostAsyncWithHttpInfo($sxapiicgetwarehousedatageneralv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwarehousedatageneralv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwarehousedatageneralv2 $sxapiicgetwarehousedatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwarehousedatageneralv2PostAsyncWithHttpInfo($sxapiicgetwarehousedatageneralv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwarehousedatageneralv2Resp';
        $request = $this->sxapiicgetwarehousedatageneralv2PostRequest($sxapiicgetwarehousedatageneralv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwarehousedatageneralv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwarehousedatageneralv2 $sxapiicgetwarehousedatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwarehousedatageneralv2PostRequest($sxapiicgetwarehousedatageneralv2)
    {
        // verify the required parameter 'sxapiicgetwarehousedatageneralv2' is set
        if ($sxapiicgetwarehousedatageneralv2 === null || (is_array($sxapiicgetwarehousedatageneralv2) && count($sxapiicgetwarehousedatageneralv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwarehousedatageneralv2 when calling sxapiicgetwarehousedatageneralv2Post'
            );
        }

        $resourcePath = '/sxapiicgetwarehousedatageneralv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwarehousedatageneralv2)) {
            $_tempBody = $sxapiicgetwarehousedatageneralv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwarehouselistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwarehouselist $sxapiicgetwarehouselist sxapiicgetwarehouselist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetwarehouselistResp
     */
    public function sxapiicgetwarehouselistPost($sxapiicgetwarehouselist)
    {
        list($response) = $this->sxapiicgetwarehouselistPostWithHttpInfo($sxapiicgetwarehouselist);
        return $response;
    }

    /**
     * Operation sxapiicgetwarehouselistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwarehouselist $sxapiicgetwarehouselist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetwarehouselistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwarehouselistPostWithHttpInfo($sxapiicgetwarehouselist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwarehouselistResp';
        $request = $this->sxapiicgetwarehouselistPostRequest($sxapiicgetwarehouselist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetwarehouselistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwarehouselistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwarehouselist $sxapiicgetwarehouselist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwarehouselistPostAsync($sxapiicgetwarehouselist)
    {
        return $this->sxapiicgetwarehouselistPostAsyncWithHttpInfo($sxapiicgetwarehouselist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwarehouselistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwarehouselist $sxapiicgetwarehouselist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwarehouselistPostAsyncWithHttpInfo($sxapiicgetwarehouselist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwarehouselistResp';
        $request = $this->sxapiicgetwarehouselistPostRequest($sxapiicgetwarehouselist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwarehouselistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwarehouselist $sxapiicgetwarehouselist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwarehouselistPostRequest($sxapiicgetwarehouselist)
    {
        // verify the required parameter 'sxapiicgetwarehouselist' is set
        if ($sxapiicgetwarehouselist === null || (is_array($sxapiicgetwarehouselist) && count($sxapiicgetwarehouselist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwarehouselist when calling sxapiicgetwarehouselistPost'
            );
        }

        $resourcePath = '/sxapiicgetwarehouselist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwarehouselist)) {
            $_tempBody = $sxapiicgetwarehouselist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwarehouselistv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwarehouselistv2 $sxapiicgetwarehouselistv2 sxapiicgetwarehouselistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetwarehouselistv2Resp
     */
    public function sxapiicgetwarehouselistv2Post($sxapiicgetwarehouselistv2)
    {
        list($response) = $this->sxapiicgetwarehouselistv2PostWithHttpInfo($sxapiicgetwarehouselistv2);
        return $response;
    }

    /**
     * Operation sxapiicgetwarehouselistv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwarehouselistv2 $sxapiicgetwarehouselistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetwarehouselistv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwarehouselistv2PostWithHttpInfo($sxapiicgetwarehouselistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwarehouselistv2Resp';
        $request = $this->sxapiicgetwarehouselistv2PostRequest($sxapiicgetwarehouselistv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetwarehouselistv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwarehouselistv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwarehouselistv2 $sxapiicgetwarehouselistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwarehouselistv2PostAsync($sxapiicgetwarehouselistv2)
    {
        return $this->sxapiicgetwarehouselistv2PostAsyncWithHttpInfo($sxapiicgetwarehouselistv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwarehouselistv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwarehouselistv2 $sxapiicgetwarehouselistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwarehouselistv2PostAsyncWithHttpInfo($sxapiicgetwarehouselistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwarehouselistv2Resp';
        $request = $this->sxapiicgetwarehouselistv2PostRequest($sxapiicgetwarehouselistv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwarehouselistv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwarehouselistv2 $sxapiicgetwarehouselistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwarehouselistv2PostRequest($sxapiicgetwarehouselistv2)
    {
        // verify the required parameter 'sxapiicgetwarehouselistv2' is set
        if ($sxapiicgetwarehouselistv2 === null || (is_array($sxapiicgetwarehouselistv2) && count($sxapiicgetwarehouselistv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwarehouselistv2 when calling sxapiicgetwarehouselistv2Post'
            );
        }

        $resourcePath = '/sxapiicgetwarehouselistv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwarehouselistv2)) {
            $_tempBody = $sxapiicgetwarehouselistv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwhseproductdatacostsPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatacosts $sxapiicgetwhseproductdatacosts sxapiicgetwhseproductdatacosts (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetwhseproductdatacostsResp
     */
    public function sxapiicgetwhseproductdatacostsPost($sxapiicgetwhseproductdatacosts)
    {
        list($response) = $this->sxapiicgetwhseproductdatacostsPostWithHttpInfo($sxapiicgetwhseproductdatacosts);
        return $response;
    }

    /**
     * Operation sxapiicgetwhseproductdatacostsPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatacosts $sxapiicgetwhseproductdatacosts (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetwhseproductdatacostsResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwhseproductdatacostsPostWithHttpInfo($sxapiicgetwhseproductdatacosts)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwhseproductdatacostsResp';
        $request = $this->sxapiicgetwhseproductdatacostsPostRequest($sxapiicgetwhseproductdatacosts);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetwhseproductdatacostsResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwhseproductdatacostsPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatacosts $sxapiicgetwhseproductdatacosts (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdatacostsPostAsync($sxapiicgetwhseproductdatacosts)
    {
        return $this->sxapiicgetwhseproductdatacostsPostAsyncWithHttpInfo($sxapiicgetwhseproductdatacosts)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwhseproductdatacostsPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatacosts $sxapiicgetwhseproductdatacosts (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdatacostsPostAsyncWithHttpInfo($sxapiicgetwhseproductdatacosts)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwhseproductdatacostsResp';
        $request = $this->sxapiicgetwhseproductdatacostsPostRequest($sxapiicgetwhseproductdatacosts);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwhseproductdatacostsPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatacosts $sxapiicgetwhseproductdatacosts (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwhseproductdatacostsPostRequest($sxapiicgetwhseproductdatacosts)
    {
        // verify the required parameter 'sxapiicgetwhseproductdatacosts' is set
        if ($sxapiicgetwhseproductdatacosts === null || (is_array($sxapiicgetwhseproductdatacosts) && count($sxapiicgetwhseproductdatacosts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwhseproductdatacosts when calling sxapiicgetwhseproductdatacostsPost'
            );
        }

        $resourcePath = '/sxapiicgetwhseproductdatacosts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwhseproductdatacosts)) {
            $_tempBody = $sxapiicgetwhseproductdatacosts;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwhseproductdatacostsv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatacostsv2 $sxapiicgetwhseproductdatacostsv2 sxapiicgetwhseproductdatacostsv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetwhseproductdatacostsv2Resp
     */
    public function sxapiicgetwhseproductdatacostsv2Post($sxapiicgetwhseproductdatacostsv2)
    {
        list($response) = $this->sxapiicgetwhseproductdatacostsv2PostWithHttpInfo($sxapiicgetwhseproductdatacostsv2);
        return $response;
    }

    /**
     * Operation sxapiicgetwhseproductdatacostsv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatacostsv2 $sxapiicgetwhseproductdatacostsv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetwhseproductdatacostsv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwhseproductdatacostsv2PostWithHttpInfo($sxapiicgetwhseproductdatacostsv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductdatacostsv2Resp';
        $request = $this->sxapiicgetwhseproductdatacostsv2PostRequest($sxapiicgetwhseproductdatacostsv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetwhseproductdatacostsv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwhseproductdatacostsv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatacostsv2 $sxapiicgetwhseproductdatacostsv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdatacostsv2PostAsync($sxapiicgetwhseproductdatacostsv2)
    {
        return $this->sxapiicgetwhseproductdatacostsv2PostAsyncWithHttpInfo($sxapiicgetwhseproductdatacostsv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwhseproductdatacostsv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatacostsv2 $sxapiicgetwhseproductdatacostsv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdatacostsv2PostAsyncWithHttpInfo($sxapiicgetwhseproductdatacostsv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductdatacostsv2Resp';
        $request = $this->sxapiicgetwhseproductdatacostsv2PostRequest($sxapiicgetwhseproductdatacostsv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwhseproductdatacostsv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatacostsv2 $sxapiicgetwhseproductdatacostsv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwhseproductdatacostsv2PostRequest($sxapiicgetwhseproductdatacostsv2)
    {
        // verify the required parameter 'sxapiicgetwhseproductdatacostsv2' is set
        if ($sxapiicgetwhseproductdatacostsv2 === null || (is_array($sxapiicgetwhseproductdatacostsv2) && count($sxapiicgetwhseproductdatacostsv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwhseproductdatacostsv2 when calling sxapiicgetwhseproductdatacostsv2Post'
            );
        }

        $resourcePath = '/sxapiicgetwhseproductdatacostsv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwhseproductdatacostsv2)) {
            $_tempBody = $sxapiicgetwhseproductdatacostsv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwhseproductdatageneralPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatageneral $sxapiicgetwhseproductdatageneral sxapiicgetwhseproductdatageneral (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetwhseproductdatageneralResp
     */
    public function sxapiicgetwhseproductdatageneralPost($sxapiicgetwhseproductdatageneral)
    {
        list($response) = $this->sxapiicgetwhseproductdatageneralPostWithHttpInfo($sxapiicgetwhseproductdatageneral);
        return $response;
    }

    /**
     * Operation sxapiicgetwhseproductdatageneralPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatageneral $sxapiicgetwhseproductdatageneral (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetwhseproductdatageneralResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwhseproductdatageneralPostWithHttpInfo($sxapiicgetwhseproductdatageneral)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwhseproductdatageneralResp';
        $request = $this->sxapiicgetwhseproductdatageneralPostRequest($sxapiicgetwhseproductdatageneral);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetwhseproductdatageneralResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwhseproductdatageneralPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatageneral $sxapiicgetwhseproductdatageneral (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdatageneralPostAsync($sxapiicgetwhseproductdatageneral)
    {
        return $this->sxapiicgetwhseproductdatageneralPostAsyncWithHttpInfo($sxapiicgetwhseproductdatageneral)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwhseproductdatageneralPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatageneral $sxapiicgetwhseproductdatageneral (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdatageneralPostAsyncWithHttpInfo($sxapiicgetwhseproductdatageneral)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwhseproductdatageneralResp';
        $request = $this->sxapiicgetwhseproductdatageneralPostRequest($sxapiicgetwhseproductdatageneral);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwhseproductdatageneralPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatageneral $sxapiicgetwhseproductdatageneral (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwhseproductdatageneralPostRequest($sxapiicgetwhseproductdatageneral)
    {
        // verify the required parameter 'sxapiicgetwhseproductdatageneral' is set
        if ($sxapiicgetwhseproductdatageneral === null || (is_array($sxapiicgetwhseproductdatageneral) && count($sxapiicgetwhseproductdatageneral) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwhseproductdatageneral when calling sxapiicgetwhseproductdatageneralPost'
            );
        }

        $resourcePath = '/sxapiicgetwhseproductdatageneral';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwhseproductdatageneral)) {
            $_tempBody = $sxapiicgetwhseproductdatageneral;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwhseproductdatageneralv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatageneralv2 $sxapiicgetwhseproductdatageneralv2 sxapiicgetwhseproductdatageneralv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetwhseproductdatageneralv2Resp
     */
    public function sxapiicgetwhseproductdatageneralv2Post($sxapiicgetwhseproductdatageneralv2)
    {
        list($response) = $this->sxapiicgetwhseproductdatageneralv2PostWithHttpInfo($sxapiicgetwhseproductdatageneralv2);
        return $response;
    }

    /**
     * Operation sxapiicgetwhseproductdatageneralv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatageneralv2 $sxapiicgetwhseproductdatageneralv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetwhseproductdatageneralv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwhseproductdatageneralv2PostWithHttpInfo($sxapiicgetwhseproductdatageneralv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductdatageneralv2Resp';
        $request = $this->sxapiicgetwhseproductdatageneralv2PostRequest($sxapiicgetwhseproductdatageneralv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetwhseproductdatageneralv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwhseproductdatageneralv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatageneralv2 $sxapiicgetwhseproductdatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdatageneralv2PostAsync($sxapiicgetwhseproductdatageneralv2)
    {
        return $this->sxapiicgetwhseproductdatageneralv2PostAsyncWithHttpInfo($sxapiicgetwhseproductdatageneralv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwhseproductdatageneralv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatageneralv2 $sxapiicgetwhseproductdatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdatageneralv2PostAsyncWithHttpInfo($sxapiicgetwhseproductdatageneralv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductdatageneralv2Resp';
        $request = $this->sxapiicgetwhseproductdatageneralv2PostRequest($sxapiicgetwhseproductdatageneralv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwhseproductdatageneralv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatageneralv2 $sxapiicgetwhseproductdatageneralv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwhseproductdatageneralv2PostRequest($sxapiicgetwhseproductdatageneralv2)
    {
        // verify the required parameter 'sxapiicgetwhseproductdatageneralv2' is set
        if ($sxapiicgetwhseproductdatageneralv2 === null || (is_array($sxapiicgetwhseproductdatageneralv2) && count($sxapiicgetwhseproductdatageneralv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwhseproductdatageneralv2 when calling sxapiicgetwhseproductdatageneralv2Post'
            );
        }

        $resourcePath = '/sxapiicgetwhseproductdatageneralv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwhseproductdatageneralv2)) {
            $_tempBody = $sxapiicgetwhseproductdatageneralv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwhseproductdatageneralv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatageneralv3 $sxapiicgetwhseproductdatageneralv3 sxapiicgetwhseproductdatageneralv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetwhseproductdatageneralv3Resp
     */
    public function sxapiicgetwhseproductdatageneralv3Post($sxapiicgetwhseproductdatageneralv3)
    {
        list($response) = $this->sxapiicgetwhseproductdatageneralv3PostWithHttpInfo($sxapiicgetwhseproductdatageneralv3);
        return $response;
    }

    /**
     * Operation sxapiicgetwhseproductdatageneralv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatageneralv3 $sxapiicgetwhseproductdatageneralv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetwhseproductdatageneralv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwhseproductdatageneralv3PostWithHttpInfo($sxapiicgetwhseproductdatageneralv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductdatageneralv3Resp';
        $request = $this->sxapiicgetwhseproductdatageneralv3PostRequest($sxapiicgetwhseproductdatageneralv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetwhseproductdatageneralv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwhseproductdatageneralv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatageneralv3 $sxapiicgetwhseproductdatageneralv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdatageneralv3PostAsync($sxapiicgetwhseproductdatageneralv3)
    {
        return $this->sxapiicgetwhseproductdatageneralv3PostAsyncWithHttpInfo($sxapiicgetwhseproductdatageneralv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwhseproductdatageneralv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatageneralv3 $sxapiicgetwhseproductdatageneralv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdatageneralv3PostAsyncWithHttpInfo($sxapiicgetwhseproductdatageneralv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductdatageneralv3Resp';
        $request = $this->sxapiicgetwhseproductdatageneralv3PostRequest($sxapiicgetwhseproductdatageneralv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwhseproductdatageneralv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatageneralv3 $sxapiicgetwhseproductdatageneralv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwhseproductdatageneralv3PostRequest($sxapiicgetwhseproductdatageneralv3)
    {
        // verify the required parameter 'sxapiicgetwhseproductdatageneralv3' is set
        if ($sxapiicgetwhseproductdatageneralv3 === null || (is_array($sxapiicgetwhseproductdatageneralv3) && count($sxapiicgetwhseproductdatageneralv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwhseproductdatageneralv3 when calling sxapiicgetwhseproductdatageneralv3Post'
            );
        }

        $resourcePath = '/sxapiicgetwhseproductdatageneralv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwhseproductdatageneralv3)) {
            $_tempBody = $sxapiicgetwhseproductdatageneralv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwhseproductdataorderingPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataordering $sxapiicgetwhseproductdataordering sxapiicgetwhseproductdataordering (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetwhseproductdataorderingResp
     */
    public function sxapiicgetwhseproductdataorderingPost($sxapiicgetwhseproductdataordering)
    {
        list($response) = $this->sxapiicgetwhseproductdataorderingPostWithHttpInfo($sxapiicgetwhseproductdataordering);
        return $response;
    }

    /**
     * Operation sxapiicgetwhseproductdataorderingPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataordering $sxapiicgetwhseproductdataordering (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetwhseproductdataorderingResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwhseproductdataorderingPostWithHttpInfo($sxapiicgetwhseproductdataordering)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwhseproductdataorderingResp';
        $request = $this->sxapiicgetwhseproductdataorderingPostRequest($sxapiicgetwhseproductdataordering);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetwhseproductdataorderingResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwhseproductdataorderingPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataordering $sxapiicgetwhseproductdataordering (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdataorderingPostAsync($sxapiicgetwhseproductdataordering)
    {
        return $this->sxapiicgetwhseproductdataorderingPostAsyncWithHttpInfo($sxapiicgetwhseproductdataordering)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwhseproductdataorderingPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataordering $sxapiicgetwhseproductdataordering (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdataorderingPostAsyncWithHttpInfo($sxapiicgetwhseproductdataordering)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwhseproductdataorderingResp';
        $request = $this->sxapiicgetwhseproductdataorderingPostRequest($sxapiicgetwhseproductdataordering);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwhseproductdataorderingPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataordering $sxapiicgetwhseproductdataordering (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwhseproductdataorderingPostRequest($sxapiicgetwhseproductdataordering)
    {
        // verify the required parameter 'sxapiicgetwhseproductdataordering' is set
        if ($sxapiicgetwhseproductdataordering === null || (is_array($sxapiicgetwhseproductdataordering) && count($sxapiicgetwhseproductdataordering) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwhseproductdataordering when calling sxapiicgetwhseproductdataorderingPost'
            );
        }

        $resourcePath = '/sxapiicgetwhseproductdataordering';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwhseproductdataordering)) {
            $_tempBody = $sxapiicgetwhseproductdataordering;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwhseproductdataorderingv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataorderingv2 $sxapiicgetwhseproductdataorderingv2 sxapiicgetwhseproductdataorderingv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetwhseproductdataorderingv2Resp
     */
    public function sxapiicgetwhseproductdataorderingv2Post($sxapiicgetwhseproductdataorderingv2)
    {
        list($response) = $this->sxapiicgetwhseproductdataorderingv2PostWithHttpInfo($sxapiicgetwhseproductdataorderingv2);
        return $response;
    }

    /**
     * Operation sxapiicgetwhseproductdataorderingv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataorderingv2 $sxapiicgetwhseproductdataorderingv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetwhseproductdataorderingv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwhseproductdataorderingv2PostWithHttpInfo($sxapiicgetwhseproductdataorderingv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductdataorderingv2Resp';
        $request = $this->sxapiicgetwhseproductdataorderingv2PostRequest($sxapiicgetwhseproductdataorderingv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetwhseproductdataorderingv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwhseproductdataorderingv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataorderingv2 $sxapiicgetwhseproductdataorderingv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdataorderingv2PostAsync($sxapiicgetwhseproductdataorderingv2)
    {
        return $this->sxapiicgetwhseproductdataorderingv2PostAsyncWithHttpInfo($sxapiicgetwhseproductdataorderingv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwhseproductdataorderingv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataorderingv2 $sxapiicgetwhseproductdataorderingv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdataorderingv2PostAsyncWithHttpInfo($sxapiicgetwhseproductdataorderingv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductdataorderingv2Resp';
        $request = $this->sxapiicgetwhseproductdataorderingv2PostRequest($sxapiicgetwhseproductdataorderingv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwhseproductdataorderingv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataorderingv2 $sxapiicgetwhseproductdataorderingv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwhseproductdataorderingv2PostRequest($sxapiicgetwhseproductdataorderingv2)
    {
        // verify the required parameter 'sxapiicgetwhseproductdataorderingv2' is set
        if ($sxapiicgetwhseproductdataorderingv2 === null || (is_array($sxapiicgetwhseproductdataorderingv2) && count($sxapiicgetwhseproductdataorderingv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwhseproductdataorderingv2 when calling sxapiicgetwhseproductdataorderingv2Post'
            );
        }

        $resourcePath = '/sxapiicgetwhseproductdataorderingv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwhseproductdataorderingv2)) {
            $_tempBody = $sxapiicgetwhseproductdataorderingv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwhseproductdataquantityPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataquantity $sxapiicgetwhseproductdataquantity sxapiicgetwhseproductdataquantity (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetwhseproductdataquantityResp
     */
    public function sxapiicgetwhseproductdataquantityPost($sxapiicgetwhseproductdataquantity)
    {
        list($response) = $this->sxapiicgetwhseproductdataquantityPostWithHttpInfo($sxapiicgetwhseproductdataquantity);
        return $response;
    }

    /**
     * Operation sxapiicgetwhseproductdataquantityPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataquantity $sxapiicgetwhseproductdataquantity (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetwhseproductdataquantityResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwhseproductdataquantityPostWithHttpInfo($sxapiicgetwhseproductdataquantity)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwhseproductdataquantityResp';
        $request = $this->sxapiicgetwhseproductdataquantityPostRequest($sxapiicgetwhseproductdataquantity);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetwhseproductdataquantityResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwhseproductdataquantityPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataquantity $sxapiicgetwhseproductdataquantity (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdataquantityPostAsync($sxapiicgetwhseproductdataquantity)
    {
        return $this->sxapiicgetwhseproductdataquantityPostAsyncWithHttpInfo($sxapiicgetwhseproductdataquantity)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwhseproductdataquantityPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataquantity $sxapiicgetwhseproductdataquantity (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdataquantityPostAsyncWithHttpInfo($sxapiicgetwhseproductdataquantity)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwhseproductdataquantityResp';
        $request = $this->sxapiicgetwhseproductdataquantityPostRequest($sxapiicgetwhseproductdataquantity);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwhseproductdataquantityPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataquantity $sxapiicgetwhseproductdataquantity (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwhseproductdataquantityPostRequest($sxapiicgetwhseproductdataquantity)
    {
        // verify the required parameter 'sxapiicgetwhseproductdataquantity' is set
        if ($sxapiicgetwhseproductdataquantity === null || (is_array($sxapiicgetwhseproductdataquantity) && count($sxapiicgetwhseproductdataquantity) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwhseproductdataquantity when calling sxapiicgetwhseproductdataquantityPost'
            );
        }

        $resourcePath = '/sxapiicgetwhseproductdataquantity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwhseproductdataquantity)) {
            $_tempBody = $sxapiicgetwhseproductdataquantity;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwhseproductdataquantityv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataquantityv2 $sxapiicgetwhseproductdataquantityv2 sxapiicgetwhseproductdataquantityv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetwhseproductdataquantityv2Resp
     */
    public function sxapiicgetwhseproductdataquantityv2Post($sxapiicgetwhseproductdataquantityv2)
    {
        list($response) = $this->sxapiicgetwhseproductdataquantityv2PostWithHttpInfo($sxapiicgetwhseproductdataquantityv2);
        return $response;
    }

    /**
     * Operation sxapiicgetwhseproductdataquantityv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataquantityv2 $sxapiicgetwhseproductdataquantityv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetwhseproductdataquantityv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwhseproductdataquantityv2PostWithHttpInfo($sxapiicgetwhseproductdataquantityv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductdataquantityv2Resp';
        $request = $this->sxapiicgetwhseproductdataquantityv2PostRequest($sxapiicgetwhseproductdataquantityv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetwhseproductdataquantityv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwhseproductdataquantityv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataquantityv2 $sxapiicgetwhseproductdataquantityv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdataquantityv2PostAsync($sxapiicgetwhseproductdataquantityv2)
    {
        return $this->sxapiicgetwhseproductdataquantityv2PostAsyncWithHttpInfo($sxapiicgetwhseproductdataquantityv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwhseproductdataquantityv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataquantityv2 $sxapiicgetwhseproductdataquantityv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdataquantityv2PostAsyncWithHttpInfo($sxapiicgetwhseproductdataquantityv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductdataquantityv2Resp';
        $request = $this->sxapiicgetwhseproductdataquantityv2PostRequest($sxapiicgetwhseproductdataquantityv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwhseproductdataquantityv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataquantityv2 $sxapiicgetwhseproductdataquantityv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwhseproductdataquantityv2PostRequest($sxapiicgetwhseproductdataquantityv2)
    {
        // verify the required parameter 'sxapiicgetwhseproductdataquantityv2' is set
        if ($sxapiicgetwhseproductdataquantityv2 === null || (is_array($sxapiicgetwhseproductdataquantityv2) && count($sxapiicgetwhseproductdataquantityv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwhseproductdataquantityv2 when calling sxapiicgetwhseproductdataquantityv2Post'
            );
        }

        $resourcePath = '/sxapiicgetwhseproductdataquantityv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwhseproductdataquantityv2)) {
            $_tempBody = $sxapiicgetwhseproductdataquantityv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwhseproductdataquantityv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataquantityv3 $sxapiicgetwhseproductdataquantityv3 sxapiicgetwhseproductdataquantityv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetwhseproductdataquantityv3Resp
     */
    public function sxapiicgetwhseproductdataquantityv3Post($sxapiicgetwhseproductdataquantityv3)
    {
        list($response) = $this->sxapiicgetwhseproductdataquantityv3PostWithHttpInfo($sxapiicgetwhseproductdataquantityv3);
        return $response;
    }

    /**
     * Operation sxapiicgetwhseproductdataquantityv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataquantityv3 $sxapiicgetwhseproductdataquantityv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetwhseproductdataquantityv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwhseproductdataquantityv3PostWithHttpInfo($sxapiicgetwhseproductdataquantityv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductdataquantityv3Resp';
        $request = $this->sxapiicgetwhseproductdataquantityv3PostRequest($sxapiicgetwhseproductdataquantityv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetwhseproductdataquantityv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwhseproductdataquantityv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataquantityv3 $sxapiicgetwhseproductdataquantityv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdataquantityv3PostAsync($sxapiicgetwhseproductdataquantityv3)
    {
        return $this->sxapiicgetwhseproductdataquantityv3PostAsyncWithHttpInfo($sxapiicgetwhseproductdataquantityv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwhseproductdataquantityv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataquantityv3 $sxapiicgetwhseproductdataquantityv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdataquantityv3PostAsyncWithHttpInfo($sxapiicgetwhseproductdataquantityv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductdataquantityv3Resp';
        $request = $this->sxapiicgetwhseproductdataquantityv3PostRequest($sxapiicgetwhseproductdataquantityv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwhseproductdataquantityv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataquantityv3 $sxapiicgetwhseproductdataquantityv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwhseproductdataquantityv3PostRequest($sxapiicgetwhseproductdataquantityv3)
    {
        // verify the required parameter 'sxapiicgetwhseproductdataquantityv3' is set
        if ($sxapiicgetwhseproductdataquantityv3 === null || (is_array($sxapiicgetwhseproductdataquantityv3) && count($sxapiicgetwhseproductdataquantityv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwhseproductdataquantityv3 when calling sxapiicgetwhseproductdataquantityv3Post'
            );
        }

        $resourcePath = '/sxapiicgetwhseproductdataquantityv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwhseproductdataquantityv3)) {
            $_tempBody = $sxapiicgetwhseproductdataquantityv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwhseproductdatataxingPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatataxing $sxapiicgetwhseproductdatataxing sxapiicgetwhseproductdatataxing (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetwhseproductdatataxingResp
     */
    public function sxapiicgetwhseproductdatataxingPost($sxapiicgetwhseproductdatataxing)
    {
        list($response) = $this->sxapiicgetwhseproductdatataxingPostWithHttpInfo($sxapiicgetwhseproductdatataxing);
        return $response;
    }

    /**
     * Operation sxapiicgetwhseproductdatataxingPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatataxing $sxapiicgetwhseproductdatataxing (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetwhseproductdatataxingResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwhseproductdatataxingPostWithHttpInfo($sxapiicgetwhseproductdatataxing)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwhseproductdatataxingResp';
        $request = $this->sxapiicgetwhseproductdatataxingPostRequest($sxapiicgetwhseproductdatataxing);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetwhseproductdatataxingResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwhseproductdatataxingPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatataxing $sxapiicgetwhseproductdatataxing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdatataxingPostAsync($sxapiicgetwhseproductdatataxing)
    {
        return $this->sxapiicgetwhseproductdatataxingPostAsyncWithHttpInfo($sxapiicgetwhseproductdatataxing)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwhseproductdatataxingPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatataxing $sxapiicgetwhseproductdatataxing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdatataxingPostAsyncWithHttpInfo($sxapiicgetwhseproductdatataxing)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwhseproductdatataxingResp';
        $request = $this->sxapiicgetwhseproductdatataxingPostRequest($sxapiicgetwhseproductdatataxing);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwhseproductdatataxingPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatataxing $sxapiicgetwhseproductdatataxing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwhseproductdatataxingPostRequest($sxapiicgetwhseproductdatataxing)
    {
        // verify the required parameter 'sxapiicgetwhseproductdatataxing' is set
        if ($sxapiicgetwhseproductdatataxing === null || (is_array($sxapiicgetwhseproductdatataxing) && count($sxapiicgetwhseproductdatataxing) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwhseproductdatataxing when calling sxapiicgetwhseproductdatataxingPost'
            );
        }

        $resourcePath = '/sxapiicgetwhseproductdatataxing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwhseproductdatataxing)) {
            $_tempBody = $sxapiicgetwhseproductdatataxing;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwhseproductdatataxingv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatataxingv2 $sxapiicgetwhseproductdatataxingv2 sxapiicgetwhseproductdatataxingv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetwhseproductdatataxingv2Resp
     */
    public function sxapiicgetwhseproductdatataxingv2Post($sxapiicgetwhseproductdatataxingv2)
    {
        list($response) = $this->sxapiicgetwhseproductdatataxingv2PostWithHttpInfo($sxapiicgetwhseproductdatataxingv2);
        return $response;
    }

    /**
     * Operation sxapiicgetwhseproductdatataxingv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatataxingv2 $sxapiicgetwhseproductdatataxingv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetwhseproductdatataxingv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwhseproductdatataxingv2PostWithHttpInfo($sxapiicgetwhseproductdatataxingv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductdatataxingv2Resp';
        $request = $this->sxapiicgetwhseproductdatataxingv2PostRequest($sxapiicgetwhseproductdatataxingv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetwhseproductdatataxingv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwhseproductdatataxingv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatataxingv2 $sxapiicgetwhseproductdatataxingv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdatataxingv2PostAsync($sxapiicgetwhseproductdatataxingv2)
    {
        return $this->sxapiicgetwhseproductdatataxingv2PostAsyncWithHttpInfo($sxapiicgetwhseproductdatataxingv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwhseproductdatataxingv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatataxingv2 $sxapiicgetwhseproductdatataxingv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdatataxingv2PostAsyncWithHttpInfo($sxapiicgetwhseproductdatataxingv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductdatataxingv2Resp';
        $request = $this->sxapiicgetwhseproductdatataxingv2PostRequest($sxapiicgetwhseproductdatataxingv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwhseproductdatataxingv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatataxingv2 $sxapiicgetwhseproductdatataxingv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwhseproductdatataxingv2PostRequest($sxapiicgetwhseproductdatataxingv2)
    {
        // verify the required parameter 'sxapiicgetwhseproductdatataxingv2' is set
        if ($sxapiicgetwhseproductdatataxingv2 === null || (is_array($sxapiicgetwhseproductdatataxingv2) && count($sxapiicgetwhseproductdatataxingv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwhseproductdatataxingv2 when calling sxapiicgetwhseproductdatataxingv2Post'
            );
        }

        $resourcePath = '/sxapiicgetwhseproductdatataxingv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwhseproductdatataxingv2)) {
            $_tempBody = $sxapiicgetwhseproductdatataxingv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwhseproductdataunitsPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataunits $sxapiicgetwhseproductdataunits sxapiicgetwhseproductdataunits (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetwhseproductdataunitsResp
     */
    public function sxapiicgetwhseproductdataunitsPost($sxapiicgetwhseproductdataunits)
    {
        list($response) = $this->sxapiicgetwhseproductdataunitsPostWithHttpInfo($sxapiicgetwhseproductdataunits);
        return $response;
    }

    /**
     * Operation sxapiicgetwhseproductdataunitsPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataunits $sxapiicgetwhseproductdataunits (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetwhseproductdataunitsResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwhseproductdataunitsPostWithHttpInfo($sxapiicgetwhseproductdataunits)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwhseproductdataunitsResp';
        $request = $this->sxapiicgetwhseproductdataunitsPostRequest($sxapiicgetwhseproductdataunits);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetwhseproductdataunitsResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwhseproductdataunitsPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataunits $sxapiicgetwhseproductdataunits (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdataunitsPostAsync($sxapiicgetwhseproductdataunits)
    {
        return $this->sxapiicgetwhseproductdataunitsPostAsyncWithHttpInfo($sxapiicgetwhseproductdataunits)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwhseproductdataunitsPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataunits $sxapiicgetwhseproductdataunits (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdataunitsPostAsyncWithHttpInfo($sxapiicgetwhseproductdataunits)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwhseproductdataunitsResp';
        $request = $this->sxapiicgetwhseproductdataunitsPostRequest($sxapiicgetwhseproductdataunits);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwhseproductdataunitsPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataunits $sxapiicgetwhseproductdataunits (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwhseproductdataunitsPostRequest($sxapiicgetwhseproductdataunits)
    {
        // verify the required parameter 'sxapiicgetwhseproductdataunits' is set
        if ($sxapiicgetwhseproductdataunits === null || (is_array($sxapiicgetwhseproductdataunits) && count($sxapiicgetwhseproductdataunits) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwhseproductdataunits when calling sxapiicgetwhseproductdataunitsPost'
            );
        }

        $resourcePath = '/sxapiicgetwhseproductdataunits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwhseproductdataunits)) {
            $_tempBody = $sxapiicgetwhseproductdataunits;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwhseproductdataunitsv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataunitsv2 $sxapiicgetwhseproductdataunitsv2 sxapiicgetwhseproductdataunitsv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetwhseproductdataunitsv2Resp
     */
    public function sxapiicgetwhseproductdataunitsv2Post($sxapiicgetwhseproductdataunitsv2)
    {
        list($response) = $this->sxapiicgetwhseproductdataunitsv2PostWithHttpInfo($sxapiicgetwhseproductdataunitsv2);
        return $response;
    }

    /**
     * Operation sxapiicgetwhseproductdataunitsv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataunitsv2 $sxapiicgetwhseproductdataunitsv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetwhseproductdataunitsv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwhseproductdataunitsv2PostWithHttpInfo($sxapiicgetwhseproductdataunitsv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductdataunitsv2Resp';
        $request = $this->sxapiicgetwhseproductdataunitsv2PostRequest($sxapiicgetwhseproductdataunitsv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetwhseproductdataunitsv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwhseproductdataunitsv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataunitsv2 $sxapiicgetwhseproductdataunitsv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdataunitsv2PostAsync($sxapiicgetwhseproductdataunitsv2)
    {
        return $this->sxapiicgetwhseproductdataunitsv2PostAsyncWithHttpInfo($sxapiicgetwhseproductdataunitsv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwhseproductdataunitsv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataunitsv2 $sxapiicgetwhseproductdataunitsv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdataunitsv2PostAsyncWithHttpInfo($sxapiicgetwhseproductdataunitsv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductdataunitsv2Resp';
        $request = $this->sxapiicgetwhseproductdataunitsv2PostRequest($sxapiicgetwhseproductdataunitsv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwhseproductdataunitsv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdataunitsv2 $sxapiicgetwhseproductdataunitsv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwhseproductdataunitsv2PostRequest($sxapiicgetwhseproductdataunitsv2)
    {
        // verify the required parameter 'sxapiicgetwhseproductdataunitsv2' is set
        if ($sxapiicgetwhseproductdataunitsv2 === null || (is_array($sxapiicgetwhseproductdataunitsv2) && count($sxapiicgetwhseproductdataunitsv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwhseproductdataunitsv2 when calling sxapiicgetwhseproductdataunitsv2Post'
            );
        }

        $resourcePath = '/sxapiicgetwhseproductdataunitsv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwhseproductdataunitsv2)) {
            $_tempBody = $sxapiicgetwhseproductdataunitsv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwhseproductdatausagePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatausage $sxapiicgetwhseproductdatausage sxapiicgetwhseproductdatausage (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetwhseproductdatausageResp
     */
    public function sxapiicgetwhseproductdatausagePost($sxapiicgetwhseproductdatausage)
    {
        list($response) = $this->sxapiicgetwhseproductdatausagePostWithHttpInfo($sxapiicgetwhseproductdatausage);
        return $response;
    }

    /**
     * Operation sxapiicgetwhseproductdatausagePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatausage $sxapiicgetwhseproductdatausage (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetwhseproductdatausageResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwhseproductdatausagePostWithHttpInfo($sxapiicgetwhseproductdatausage)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwhseproductdatausageResp';
        $request = $this->sxapiicgetwhseproductdatausagePostRequest($sxapiicgetwhseproductdatausage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetwhseproductdatausageResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwhseproductdatausagePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatausage $sxapiicgetwhseproductdatausage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdatausagePostAsync($sxapiicgetwhseproductdatausage)
    {
        return $this->sxapiicgetwhseproductdatausagePostAsyncWithHttpInfo($sxapiicgetwhseproductdatausage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwhseproductdatausagePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatausage $sxapiicgetwhseproductdatausage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdatausagePostAsyncWithHttpInfo($sxapiicgetwhseproductdatausage)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwhseproductdatausageResp';
        $request = $this->sxapiicgetwhseproductdatausagePostRequest($sxapiicgetwhseproductdatausage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwhseproductdatausagePost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatausage $sxapiicgetwhseproductdatausage (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwhseproductdatausagePostRequest($sxapiicgetwhseproductdatausage)
    {
        // verify the required parameter 'sxapiicgetwhseproductdatausage' is set
        if ($sxapiicgetwhseproductdatausage === null || (is_array($sxapiicgetwhseproductdatausage) && count($sxapiicgetwhseproductdatausage) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwhseproductdatausage when calling sxapiicgetwhseproductdatausagePost'
            );
        }

        $resourcePath = '/sxapiicgetwhseproductdatausage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwhseproductdatausage)) {
            $_tempBody = $sxapiicgetwhseproductdatausage;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwhseproductdatausagev2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatausagev2 $sxapiicgetwhseproductdatausagev2 sxapiicgetwhseproductdatausagev2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetwhseproductdatausagev2Resp
     */
    public function sxapiicgetwhseproductdatausagev2Post($sxapiicgetwhseproductdatausagev2)
    {
        list($response) = $this->sxapiicgetwhseproductdatausagev2PostWithHttpInfo($sxapiicgetwhseproductdatausagev2);
        return $response;
    }

    /**
     * Operation sxapiicgetwhseproductdatausagev2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatausagev2 $sxapiicgetwhseproductdatausagev2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetwhseproductdatausagev2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwhseproductdatausagev2PostWithHttpInfo($sxapiicgetwhseproductdatausagev2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductdatausagev2Resp';
        $request = $this->sxapiicgetwhseproductdatausagev2PostRequest($sxapiicgetwhseproductdatausagev2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetwhseproductdatausagev2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwhseproductdatausagev2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatausagev2 $sxapiicgetwhseproductdatausagev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdatausagev2PostAsync($sxapiicgetwhseproductdatausagev2)
    {
        return $this->sxapiicgetwhseproductdatausagev2PostAsyncWithHttpInfo($sxapiicgetwhseproductdatausagev2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwhseproductdatausagev2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatausagev2 $sxapiicgetwhseproductdatausagev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductdatausagev2PostAsyncWithHttpInfo($sxapiicgetwhseproductdatausagev2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductdatausagev2Resp';
        $request = $this->sxapiicgetwhseproductdatausagev2PostRequest($sxapiicgetwhseproductdatausagev2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwhseproductdatausagev2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductdatausagev2 $sxapiicgetwhseproductdatausagev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwhseproductdatausagev2PostRequest($sxapiicgetwhseproductdatausagev2)
    {
        // verify the required parameter 'sxapiicgetwhseproductdatausagev2' is set
        if ($sxapiicgetwhseproductdatausagev2 === null || (is_array($sxapiicgetwhseproductdatausagev2) && count($sxapiicgetwhseproductdatausagev2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwhseproductdatausagev2 when calling sxapiicgetwhseproductdatausagev2Post'
            );
        }

        $resourcePath = '/sxapiicgetwhseproductdatausagev2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwhseproductdatausagev2)) {
            $_tempBody = $sxapiicgetwhseproductdatausagev2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwhseproductlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductlist $sxapiicgetwhseproductlist sxapiicgetwhseproductlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicgetwhseproductlistResp
     */
    public function sxapiicgetwhseproductlistPost($sxapiicgetwhseproductlist)
    {
        list($response) = $this->sxapiicgetwhseproductlistPostWithHttpInfo($sxapiicgetwhseproductlist);
        return $response;
    }

    /**
     * Operation sxapiicgetwhseproductlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductlist $sxapiicgetwhseproductlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicgetwhseproductlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwhseproductlistPostWithHttpInfo($sxapiicgetwhseproductlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwhseproductlistResp';
        $request = $this->sxapiicgetwhseproductlistPostRequest($sxapiicgetwhseproductlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicgetwhseproductlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwhseproductlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductlist $sxapiicgetwhseproductlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductlistPostAsync($sxapiicgetwhseproductlist)
    {
        return $this->sxapiicgetwhseproductlistPostAsyncWithHttpInfo($sxapiicgetwhseproductlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwhseproductlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductlist $sxapiicgetwhseproductlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductlistPostAsyncWithHttpInfo($sxapiicgetwhseproductlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiicgetwhseproductlistResp';
        $request = $this->sxapiicgetwhseproductlistPostRequest($sxapiicgetwhseproductlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwhseproductlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductlist $sxapiicgetwhseproductlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwhseproductlistPostRequest($sxapiicgetwhseproductlist)
    {
        // verify the required parameter 'sxapiicgetwhseproductlist' is set
        if ($sxapiicgetwhseproductlist === null || (is_array($sxapiicgetwhseproductlist) && count($sxapiicgetwhseproductlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwhseproductlist when calling sxapiicgetwhseproductlistPost'
            );
        }

        $resourcePath = '/sxapiicgetwhseproductlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwhseproductlist)) {
            $_tempBody = $sxapiicgetwhseproductlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwhseproductlistv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductlistv2 $sxapiicgetwhseproductlistv2 sxapiicgetwhseproductlistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetwhseproductlistv2Resp
     */
    public function sxapiicgetwhseproductlistv2Post($sxapiicgetwhseproductlistv2)
    {
        list($response) = $this->sxapiicgetwhseproductlistv2PostWithHttpInfo($sxapiicgetwhseproductlistv2);
        return $response;
    }

    /**
     * Operation sxapiicgetwhseproductlistv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductlistv2 $sxapiicgetwhseproductlistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetwhseproductlistv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwhseproductlistv2PostWithHttpInfo($sxapiicgetwhseproductlistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductlistv2Resp';
        $request = $this->sxapiicgetwhseproductlistv2PostRequest($sxapiicgetwhseproductlistv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetwhseproductlistv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwhseproductlistv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductlistv2 $sxapiicgetwhseproductlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductlistv2PostAsync($sxapiicgetwhseproductlistv2)
    {
        return $this->sxapiicgetwhseproductlistv2PostAsyncWithHttpInfo($sxapiicgetwhseproductlistv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwhseproductlistv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductlistv2 $sxapiicgetwhseproductlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductlistv2PostAsyncWithHttpInfo($sxapiicgetwhseproductlistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductlistv2Resp';
        $request = $this->sxapiicgetwhseproductlistv2PostRequest($sxapiicgetwhseproductlistv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwhseproductlistv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductlistv2 $sxapiicgetwhseproductlistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwhseproductlistv2PostRequest($sxapiicgetwhseproductlistv2)
    {
        // verify the required parameter 'sxapiicgetwhseproductlistv2' is set
        if ($sxapiicgetwhseproductlistv2 === null || (is_array($sxapiicgetwhseproductlistv2) && count($sxapiicgetwhseproductlistv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwhseproductlistv2 when calling sxapiicgetwhseproductlistv2Post'
            );
        }

        $resourcePath = '/sxapiicgetwhseproductlistv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwhseproductlistv2)) {
            $_tempBody = $sxapiicgetwhseproductlistv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicgetwhseproductlistv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductlistv3 $sxapiicgetwhseproductlistv3 sxapiicgetwhseproductlistv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiicgetwhseproductlistv3Resp
     */
    public function sxapiicgetwhseproductlistv3Post($sxapiicgetwhseproductlistv3)
    {
        list($response) = $this->sxapiicgetwhseproductlistv3PostWithHttpInfo($sxapiicgetwhseproductlistv3);
        return $response;
    }

    /**
     * Operation sxapiicgetwhseproductlistv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductlistv3 $sxapiicgetwhseproductlistv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiicgetwhseproductlistv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicgetwhseproductlistv3PostWithHttpInfo($sxapiicgetwhseproductlistv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductlistv3Resp';
        $request = $this->sxapiicgetwhseproductlistv3PostRequest($sxapiicgetwhseproductlistv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiicgetwhseproductlistv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicgetwhseproductlistv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductlistv3 $sxapiicgetwhseproductlistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductlistv3PostAsync($sxapiicgetwhseproductlistv3)
    {
        return $this->sxapiicgetwhseproductlistv3PostAsyncWithHttpInfo($sxapiicgetwhseproductlistv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicgetwhseproductlistv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductlistv3 $sxapiicgetwhseproductlistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicgetwhseproductlistv3PostAsyncWithHttpInfo($sxapiicgetwhseproductlistv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapiicgetwhseproductlistv3Resp';
        $request = $this->sxapiicgetwhseproductlistv3PostRequest($sxapiicgetwhseproductlistv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicgetwhseproductlistv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapiicgetwhseproductlistv3 $sxapiicgetwhseproductlistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicgetwhseproductlistv3PostRequest($sxapiicgetwhseproductlistv3)
    {
        // verify the required parameter 'sxapiicgetwhseproductlistv3' is set
        if ($sxapiicgetwhseproductlistv3 === null || (is_array($sxapiicgetwhseproductlistv3) && count($sxapiicgetwhseproductlistv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicgetwhseproductlistv3 when calling sxapiicgetwhseproductlistv3Post'
            );
        }

        $resourcePath = '/sxapiicgetwhseproductlistv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicgetwhseproductlistv3)) {
            $_tempBody = $sxapiicgetwhseproductlistv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicproductactivitybywhsePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicproductactivitybywhse $sxapiicproductactivitybywhse sxapiicproductactivitybywhse (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicproductactivitybywhseResp
     */
    public function sxapiicproductactivitybywhsePost($sxapiicproductactivitybywhse)
    {
        list($response) = $this->sxapiicproductactivitybywhsePostWithHttpInfo($sxapiicproductactivitybywhse);
        return $response;
    }

    /**
     * Operation sxapiicproductactivitybywhsePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicproductactivitybywhse $sxapiicproductactivitybywhse (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicproductactivitybywhseResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicproductactivitybywhsePostWithHttpInfo($sxapiicproductactivitybywhse)
    {
        $returnType = '\Swagger\Client\Model\SxapiicproductactivitybywhseResp';
        $request = $this->sxapiicproductactivitybywhsePostRequest($sxapiicproductactivitybywhse);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicproductactivitybywhseResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicproductactivitybywhsePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicproductactivitybywhse $sxapiicproductactivitybywhse (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicproductactivitybywhsePostAsync($sxapiicproductactivitybywhse)
    {
        return $this->sxapiicproductactivitybywhsePostAsyncWithHttpInfo($sxapiicproductactivitybywhse)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicproductactivitybywhsePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicproductactivitybywhse $sxapiicproductactivitybywhse (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicproductactivitybywhsePostAsyncWithHttpInfo($sxapiicproductactivitybywhse)
    {
        $returnType = '\Swagger\Client\Model\SxapiicproductactivitybywhseResp';
        $request = $this->sxapiicproductactivitybywhsePostRequest($sxapiicproductactivitybywhse);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicproductactivitybywhsePost'
     *
     * @param  \Swagger\Client\Model\Sxapiicproductactivitybywhse $sxapiicproductactivitybywhse (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicproductactivitybywhsePostRequest($sxapiicproductactivitybywhse)
    {
        // verify the required parameter 'sxapiicproductactivitybywhse' is set
        if ($sxapiicproductactivitybywhse === null || (is_array($sxapiicproductactivitybywhse) && count($sxapiicproductactivitybywhse) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicproductactivitybywhse when calling sxapiicproductactivitybywhsePost'
            );
        }

        $resourcePath = '/sxapiicproductactivitybywhse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicproductactivitybywhse)) {
            $_tempBody = $sxapiicproductactivitybywhse;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicproductavailbywhsePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicproductavailbywhse $sxapiicproductavailbywhse sxapiicproductavailbywhse (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicproductavailbywhseResp
     */
    public function sxapiicproductavailbywhsePost($sxapiicproductavailbywhse)
    {
        list($response) = $this->sxapiicproductavailbywhsePostWithHttpInfo($sxapiicproductavailbywhse);
        return $response;
    }

    /**
     * Operation sxapiicproductavailbywhsePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicproductavailbywhse $sxapiicproductavailbywhse (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicproductavailbywhseResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicproductavailbywhsePostWithHttpInfo($sxapiicproductavailbywhse)
    {
        $returnType = '\Swagger\Client\Model\SxapiicproductavailbywhseResp';
        $request = $this->sxapiicproductavailbywhsePostRequest($sxapiicproductavailbywhse);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicproductavailbywhseResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicproductavailbywhsePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicproductavailbywhse $sxapiicproductavailbywhse (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicproductavailbywhsePostAsync($sxapiicproductavailbywhse)
    {
        return $this->sxapiicproductavailbywhsePostAsyncWithHttpInfo($sxapiicproductavailbywhse)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicproductavailbywhsePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicproductavailbywhse $sxapiicproductavailbywhse (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicproductavailbywhsePostAsyncWithHttpInfo($sxapiicproductavailbywhse)
    {
        $returnType = '\Swagger\Client\Model\SxapiicproductavailbywhseResp';
        $request = $this->sxapiicproductavailbywhsePostRequest($sxapiicproductavailbywhse);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicproductavailbywhsePost'
     *
     * @param  \Swagger\Client\Model\Sxapiicproductavailbywhse $sxapiicproductavailbywhse (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicproductavailbywhsePostRequest($sxapiicproductavailbywhse)
    {
        // verify the required parameter 'sxapiicproductavailbywhse' is set
        if ($sxapiicproductavailbywhse === null || (is_array($sxapiicproductavailbywhse) && count($sxapiicproductavailbywhse) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicproductavailbywhse when calling sxapiicproductavailbywhsePost'
            );
        }

        $resourcePath = '/sxapiicproductavailbywhse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicproductavailbywhse)) {
            $_tempBody = $sxapiicproductavailbywhse;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicproductmntPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicproductmnt $sxapiicproductmnt sxapiicproductmnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicproductmntResp
     */
    public function sxapiicproductmntPost($sxapiicproductmnt)
    {
        list($response) = $this->sxapiicproductmntPostWithHttpInfo($sxapiicproductmnt);
        return $response;
    }

    /**
     * Operation sxapiicproductmntPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicproductmnt $sxapiicproductmnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicproductmntResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicproductmntPostWithHttpInfo($sxapiicproductmnt)
    {
        $returnType = '\Swagger\Client\Model\SxapiicproductmntResp';
        $request = $this->sxapiicproductmntPostRequest($sxapiicproductmnt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicproductmntResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicproductmntPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicproductmnt $sxapiicproductmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicproductmntPostAsync($sxapiicproductmnt)
    {
        return $this->sxapiicproductmntPostAsyncWithHttpInfo($sxapiicproductmnt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicproductmntPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicproductmnt $sxapiicproductmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicproductmntPostAsyncWithHttpInfo($sxapiicproductmnt)
    {
        $returnType = '\Swagger\Client\Model\SxapiicproductmntResp';
        $request = $this->sxapiicproductmntPostRequest($sxapiicproductmnt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicproductmntPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicproductmnt $sxapiicproductmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicproductmntPostRequest($sxapiicproductmnt)
    {
        // verify the required parameter 'sxapiicproductmnt' is set
        if ($sxapiicproductmnt === null || (is_array($sxapiicproductmnt) && count($sxapiicproductmnt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicproductmnt when calling sxapiicproductmntPost'
            );
        }

        $resourcePath = '/sxapiicproductmnt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicproductmnt)) {
            $_tempBody = $sxapiicproductmnt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicprodwhsetransferPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicprodwhsetransfer $sxapiicprodwhsetransfer sxapiicprodwhsetransfer (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicprodwhsetransferResp
     */
    public function sxapiicprodwhsetransferPost($sxapiicprodwhsetransfer)
    {
        list($response) = $this->sxapiicprodwhsetransferPostWithHttpInfo($sxapiicprodwhsetransfer);
        return $response;
    }

    /**
     * Operation sxapiicprodwhsetransferPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicprodwhsetransfer $sxapiicprodwhsetransfer (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicprodwhsetransferResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicprodwhsetransferPostWithHttpInfo($sxapiicprodwhsetransfer)
    {
        $returnType = '\Swagger\Client\Model\SxapiicprodwhsetransferResp';
        $request = $this->sxapiicprodwhsetransferPostRequest($sxapiicprodwhsetransfer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicprodwhsetransferResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicprodwhsetransferPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicprodwhsetransfer $sxapiicprodwhsetransfer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicprodwhsetransferPostAsync($sxapiicprodwhsetransfer)
    {
        return $this->sxapiicprodwhsetransferPostAsyncWithHttpInfo($sxapiicprodwhsetransfer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicprodwhsetransferPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicprodwhsetransfer $sxapiicprodwhsetransfer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicprodwhsetransferPostAsyncWithHttpInfo($sxapiicprodwhsetransfer)
    {
        $returnType = '\Swagger\Client\Model\SxapiicprodwhsetransferResp';
        $request = $this->sxapiicprodwhsetransferPostRequest($sxapiicprodwhsetransfer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicprodwhsetransferPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicprodwhsetransfer $sxapiicprodwhsetransfer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicprodwhsetransferPostRequest($sxapiicprodwhsetransfer)
    {
        // verify the required parameter 'sxapiicprodwhsetransfer' is set
        if ($sxapiicprodwhsetransfer === null || (is_array($sxapiicprodwhsetransfer) && count($sxapiicprodwhsetransfer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicprodwhsetransfer when calling sxapiicprodwhsetransferPost'
            );
        }

        $resourcePath = '/sxapiicprodwhsetransfer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicprodwhsetransfer)) {
            $_tempBody = $sxapiicprodwhsetransfer;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicreallocateproductPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicreallocateproduct $sxapiicreallocateproduct sxapiicreallocateproduct (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicreallocateproductResp
     */
    public function sxapiicreallocateproductPost($sxapiicreallocateproduct)
    {
        list($response) = $this->sxapiicreallocateproductPostWithHttpInfo($sxapiicreallocateproduct);
        return $response;
    }

    /**
     * Operation sxapiicreallocateproductPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicreallocateproduct $sxapiicreallocateproduct (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicreallocateproductResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicreallocateproductPostWithHttpInfo($sxapiicreallocateproduct)
    {
        $returnType = '\Swagger\Client\Model\SxapiicreallocateproductResp';
        $request = $this->sxapiicreallocateproductPostRequest($sxapiicreallocateproduct);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicreallocateproductResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicreallocateproductPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicreallocateproduct $sxapiicreallocateproduct (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicreallocateproductPostAsync($sxapiicreallocateproduct)
    {
        return $this->sxapiicreallocateproductPostAsyncWithHttpInfo($sxapiicreallocateproduct)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicreallocateproductPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicreallocateproduct $sxapiicreallocateproduct (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicreallocateproductPostAsyncWithHttpInfo($sxapiicreallocateproduct)
    {
        $returnType = '\Swagger\Client\Model\SxapiicreallocateproductResp';
        $request = $this->sxapiicreallocateproductPostRequest($sxapiicreallocateproduct);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicreallocateproductPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicreallocateproduct $sxapiicreallocateproduct (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicreallocateproductPostRequest($sxapiicreallocateproduct)
    {
        // verify the required parameter 'sxapiicreallocateproduct' is set
        if ($sxapiicreallocateproduct === null || (is_array($sxapiicreallocateproduct) && count($sxapiicreallocateproduct) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicreallocateproduct when calling sxapiicreallocateproductPost'
            );
        }

        $resourcePath = '/sxapiicreallocateproduct';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicreallocateproduct)) {
            $_tempBody = $sxapiicreallocateproduct;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiicwarehousemntPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicwarehousemnt $sxapiicwarehousemnt sxapiicwarehousemnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiicwarehousemntResp
     */
    public function sxapiicwarehousemntPost($sxapiicwarehousemnt)
    {
        list($response) = $this->sxapiicwarehousemntPostWithHttpInfo($sxapiicwarehousemnt);
        return $response;
    }

    /**
     * Operation sxapiicwarehousemntPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicwarehousemnt $sxapiicwarehousemnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiicwarehousemntResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiicwarehousemntPostWithHttpInfo($sxapiicwarehousemnt)
    {
        $returnType = '\Swagger\Client\Model\SxapiicwarehousemntResp';
        $request = $this->sxapiicwarehousemntPostRequest($sxapiicwarehousemnt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiicwarehousemntResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiicwarehousemntPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicwarehousemnt $sxapiicwarehousemnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicwarehousemntPostAsync($sxapiicwarehousemnt)
    {
        return $this->sxapiicwarehousemntPostAsyncWithHttpInfo($sxapiicwarehousemnt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiicwarehousemntPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiicwarehousemnt $sxapiicwarehousemnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiicwarehousemntPostAsyncWithHttpInfo($sxapiicwarehousemnt)
    {
        $returnType = '\Swagger\Client\Model\SxapiicwarehousemntResp';
        $request = $this->sxapiicwarehousemntPostRequest($sxapiicwarehousemnt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiicwarehousemntPost'
     *
     * @param  \Swagger\Client\Model\Sxapiicwarehousemnt $sxapiicwarehousemnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiicwarehousemntPostRequest($sxapiicwarehousemnt)
    {
        // verify the required parameter 'sxapiicwarehousemnt' is set
        if ($sxapiicwarehousemnt === null || (is_array($sxapiicwarehousemnt) && count($sxapiicwarehousemnt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiicwarehousemnt when calling sxapiicwarehousemntPost'
            );
        }

        $resourcePath = '/sxapiicwarehousemnt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiicwarehousemnt)) {
            $_tempBody = $sxapiicwarehousemnt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapikpeditserlotlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapikpeditserlotlist $sxapikpeditserlotlist sxapikpeditserlotlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapikpeditserlotlistResp
     */
    public function sxapikpeditserlotlistPost($sxapikpeditserlotlist)
    {
        list($response) = $this->sxapikpeditserlotlistPostWithHttpInfo($sxapikpeditserlotlist);
        return $response;
    }

    /**
     * Operation sxapikpeditserlotlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapikpeditserlotlist $sxapikpeditserlotlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapikpeditserlotlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapikpeditserlotlistPostWithHttpInfo($sxapikpeditserlotlist)
    {
        $returnType = '\Swagger\Client\Model\SxapikpeditserlotlistResp';
        $request = $this->sxapikpeditserlotlistPostRequest($sxapikpeditserlotlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapikpeditserlotlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapikpeditserlotlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapikpeditserlotlist $sxapikpeditserlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapikpeditserlotlistPostAsync($sxapikpeditserlotlist)
    {
        return $this->sxapikpeditserlotlistPostAsyncWithHttpInfo($sxapikpeditserlotlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapikpeditserlotlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapikpeditserlotlist $sxapikpeditserlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapikpeditserlotlistPostAsyncWithHttpInfo($sxapikpeditserlotlist)
    {
        $returnType = '\Swagger\Client\Model\SxapikpeditserlotlistResp';
        $request = $this->sxapikpeditserlotlistPostRequest($sxapikpeditserlotlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapikpeditserlotlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapikpeditserlotlist $sxapikpeditserlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapikpeditserlotlistPostRequest($sxapikpeditserlotlist)
    {
        // verify the required parameter 'sxapikpeditserlotlist' is set
        if ($sxapikpeditserlotlist === null || (is_array($sxapikpeditserlotlist) && count($sxapikpeditserlotlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapikpeditserlotlist when calling sxapikpeditserlotlistPost'
            );
        }

        $resourcePath = '/sxapikpeditserlotlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapikpeditserlotlist)) {
            $_tempBody = $sxapikpeditserlotlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapikpgetlistofworkordersPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapikpgetlistofworkorders $sxapikpgetlistofworkorders sxapikpgetlistofworkorders (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapikpgetlistofworkordersResp
     */
    public function sxapikpgetlistofworkordersPost($sxapikpgetlistofworkorders)
    {
        list($response) = $this->sxapikpgetlistofworkordersPostWithHttpInfo($sxapikpgetlistofworkorders);
        return $response;
    }

    /**
     * Operation sxapikpgetlistofworkordersPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapikpgetlistofworkorders $sxapikpgetlistofworkorders (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapikpgetlistofworkordersResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapikpgetlistofworkordersPostWithHttpInfo($sxapikpgetlistofworkorders)
    {
        $returnType = '\Swagger\Client\Model\SxapikpgetlistofworkordersResp';
        $request = $this->sxapikpgetlistofworkordersPostRequest($sxapikpgetlistofworkorders);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapikpgetlistofworkordersResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapikpgetlistofworkordersPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapikpgetlistofworkorders $sxapikpgetlistofworkorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapikpgetlistofworkordersPostAsync($sxapikpgetlistofworkorders)
    {
        return $this->sxapikpgetlistofworkordersPostAsyncWithHttpInfo($sxapikpgetlistofworkorders)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapikpgetlistofworkordersPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapikpgetlistofworkorders $sxapikpgetlistofworkorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapikpgetlistofworkordersPostAsyncWithHttpInfo($sxapikpgetlistofworkorders)
    {
        $returnType = '\Swagger\Client\Model\SxapikpgetlistofworkordersResp';
        $request = $this->sxapikpgetlistofworkordersPostRequest($sxapikpgetlistofworkorders);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapikpgetlistofworkordersPost'
     *
     * @param  \Swagger\Client\Model\Sxapikpgetlistofworkorders $sxapikpgetlistofworkorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapikpgetlistofworkordersPostRequest($sxapikpgetlistofworkorders)
    {
        // verify the required parameter 'sxapikpgetlistofworkorders' is set
        if ($sxapikpgetlistofworkorders === null || (is_array($sxapikpgetlistofworkorders) && count($sxapikpgetlistofworkorders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapikpgetlistofworkorders when calling sxapikpgetlistofworkordersPost'
            );
        }

        $resourcePath = '/sxapikpgetlistofworkorders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapikpgetlistofworkorders)) {
            $_tempBody = $sxapikpgetlistofworkorders;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapikpgetsingleworkorderPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapikpgetsingleworkorder $sxapikpgetsingleworkorder sxapikpgetsingleworkorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapikpgetsingleworkorderResp
     */
    public function sxapikpgetsingleworkorderPost($sxapikpgetsingleworkorder)
    {
        list($response) = $this->sxapikpgetsingleworkorderPostWithHttpInfo($sxapikpgetsingleworkorder);
        return $response;
    }

    /**
     * Operation sxapikpgetsingleworkorderPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapikpgetsingleworkorder $sxapikpgetsingleworkorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapikpgetsingleworkorderResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapikpgetsingleworkorderPostWithHttpInfo($sxapikpgetsingleworkorder)
    {
        $returnType = '\Swagger\Client\Model\SxapikpgetsingleworkorderResp';
        $request = $this->sxapikpgetsingleworkorderPostRequest($sxapikpgetsingleworkorder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapikpgetsingleworkorderResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapikpgetsingleworkorderPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapikpgetsingleworkorder $sxapikpgetsingleworkorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapikpgetsingleworkorderPostAsync($sxapikpgetsingleworkorder)
    {
        return $this->sxapikpgetsingleworkorderPostAsyncWithHttpInfo($sxapikpgetsingleworkorder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapikpgetsingleworkorderPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapikpgetsingleworkorder $sxapikpgetsingleworkorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapikpgetsingleworkorderPostAsyncWithHttpInfo($sxapikpgetsingleworkorder)
    {
        $returnType = '\Swagger\Client\Model\SxapikpgetsingleworkorderResp';
        $request = $this->sxapikpgetsingleworkorderPostRequest($sxapikpgetsingleworkorder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapikpgetsingleworkorderPost'
     *
     * @param  \Swagger\Client\Model\Sxapikpgetsingleworkorder $sxapikpgetsingleworkorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapikpgetsingleworkorderPostRequest($sxapikpgetsingleworkorder)
    {
        // verify the required parameter 'sxapikpgetsingleworkorder' is set
        if ($sxapikpgetsingleworkorder === null || (is_array($sxapikpgetsingleworkorder) && count($sxapikpgetsingleworkorder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapikpgetsingleworkorder when calling sxapikpgetsingleworkorderPost'
            );
        }

        $resourcePath = '/sxapikpgetsingleworkorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapikpgetsingleworkorder)) {
            $_tempBody = $sxapikpgetsingleworkorder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapinpcreateclaimPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapinpcreateclaim $sxapinpcreateclaim sxapinpcreateclaim (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapinpcreateclaimResp
     */
    public function sxapinpcreateclaimPost($sxapinpcreateclaim)
    {
        list($response) = $this->sxapinpcreateclaimPostWithHttpInfo($sxapinpcreateclaim);
        return $response;
    }

    /**
     * Operation sxapinpcreateclaimPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapinpcreateclaim $sxapinpcreateclaim (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapinpcreateclaimResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapinpcreateclaimPostWithHttpInfo($sxapinpcreateclaim)
    {
        $returnType = '\Swagger\Client\Model\SxapinpcreateclaimResp';
        $request = $this->sxapinpcreateclaimPostRequest($sxapinpcreateclaim);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapinpcreateclaimResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapinpcreateclaimPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapinpcreateclaim $sxapinpcreateclaim (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapinpcreateclaimPostAsync($sxapinpcreateclaim)
    {
        return $this->sxapinpcreateclaimPostAsyncWithHttpInfo($sxapinpcreateclaim)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapinpcreateclaimPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapinpcreateclaim $sxapinpcreateclaim (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapinpcreateclaimPostAsyncWithHttpInfo($sxapinpcreateclaim)
    {
        $returnType = '\Swagger\Client\Model\SxapinpcreateclaimResp';
        $request = $this->sxapinpcreateclaimPostRequest($sxapinpcreateclaim);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapinpcreateclaimPost'
     *
     * @param  \Swagger\Client\Model\Sxapinpcreateclaim $sxapinpcreateclaim (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapinpcreateclaimPostRequest($sxapinpcreateclaim)
    {
        // verify the required parameter 'sxapinpcreateclaim' is set
        if ($sxapinpcreateclaim === null || (is_array($sxapinpcreateclaim) && count($sxapinpcreateclaim) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapinpcreateclaim when calling sxapinpcreateclaimPost'
            );
        }

        $resourcePath = '/sxapinpcreateclaim';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapinpcreateclaim)) {
            $_tempBody = $sxapinpcreateclaim;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioebatchheadercreatePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioebatchheadercreate $sxapioebatchheadercreate sxapioebatchheadercreate (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioebatchheadercreateResp
     */
    public function sxapioebatchheadercreatePost($sxapioebatchheadercreate)
    {
        list($response) = $this->sxapioebatchheadercreatePostWithHttpInfo($sxapioebatchheadercreate);
        return $response;
    }

    /**
     * Operation sxapioebatchheadercreatePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioebatchheadercreate $sxapioebatchheadercreate (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioebatchheadercreateResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioebatchheadercreatePostWithHttpInfo($sxapioebatchheadercreate)
    {
        $returnType = '\Swagger\Client\Model\SxapioebatchheadercreateResp';
        $request = $this->sxapioebatchheadercreatePostRequest($sxapioebatchheadercreate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioebatchheadercreateResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioebatchheadercreatePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioebatchheadercreate $sxapioebatchheadercreate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioebatchheadercreatePostAsync($sxapioebatchheadercreate)
    {
        return $this->sxapioebatchheadercreatePostAsyncWithHttpInfo($sxapioebatchheadercreate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioebatchheadercreatePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioebatchheadercreate $sxapioebatchheadercreate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioebatchheadercreatePostAsyncWithHttpInfo($sxapioebatchheadercreate)
    {
        $returnType = '\Swagger\Client\Model\SxapioebatchheadercreateResp';
        $request = $this->sxapioebatchheadercreatePostRequest($sxapioebatchheadercreate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioebatchheadercreatePost'
     *
     * @param  \Swagger\Client\Model\Sxapioebatchheadercreate $sxapioebatchheadercreate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioebatchheadercreatePostRequest($sxapioebatchheadercreate)
    {
        // verify the required parameter 'sxapioebatchheadercreate' is set
        if ($sxapioebatchheadercreate === null || (is_array($sxapioebatchheadercreate) && count($sxapioebatchheadercreate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioebatchheadercreate when calling sxapioebatchheadercreatePost'
            );
        }

        $resourcePath = '/sxapioebatchheadercreate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioebatchheadercreate)) {
            $_tempBody = $sxapioebatchheadercreate;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioebatchheaderupdatePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioebatchheaderupdate $sxapioebatchheaderupdate sxapioebatchheaderupdate (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioebatchheaderupdateResp
     */
    public function sxapioebatchheaderupdatePost($sxapioebatchheaderupdate)
    {
        list($response) = $this->sxapioebatchheaderupdatePostWithHttpInfo($sxapioebatchheaderupdate);
        return $response;
    }

    /**
     * Operation sxapioebatchheaderupdatePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioebatchheaderupdate $sxapioebatchheaderupdate (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioebatchheaderupdateResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioebatchheaderupdatePostWithHttpInfo($sxapioebatchheaderupdate)
    {
        $returnType = '\Swagger\Client\Model\SxapioebatchheaderupdateResp';
        $request = $this->sxapioebatchheaderupdatePostRequest($sxapioebatchheaderupdate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioebatchheaderupdateResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioebatchheaderupdatePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioebatchheaderupdate $sxapioebatchheaderupdate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioebatchheaderupdatePostAsync($sxapioebatchheaderupdate)
    {
        return $this->sxapioebatchheaderupdatePostAsyncWithHttpInfo($sxapioebatchheaderupdate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioebatchheaderupdatePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioebatchheaderupdate $sxapioebatchheaderupdate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioebatchheaderupdatePostAsyncWithHttpInfo($sxapioebatchheaderupdate)
    {
        $returnType = '\Swagger\Client\Model\SxapioebatchheaderupdateResp';
        $request = $this->sxapioebatchheaderupdatePostRequest($sxapioebatchheaderupdate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioebatchheaderupdatePost'
     *
     * @param  \Swagger\Client\Model\Sxapioebatchheaderupdate $sxapioebatchheaderupdate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioebatchheaderupdatePostRequest($sxapioebatchheaderupdate)
    {
        // verify the required parameter 'sxapioebatchheaderupdate' is set
        if ($sxapioebatchheaderupdate === null || (is_array($sxapioebatchheaderupdate) && count($sxapioebatchheaderupdate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioebatchheaderupdate when calling sxapioebatchheaderupdatePost'
            );
        }

        $resourcePath = '/sxapioebatchheaderupdate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioebatchheaderupdate)) {
            $_tempBody = $sxapioebatchheaderupdate;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioebatchlineprocessPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioebatchlineprocess $sxapioebatchlineprocess sxapioebatchlineprocess (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioebatchlineprocessResp
     */
    public function sxapioebatchlineprocessPost($sxapioebatchlineprocess)
    {
        list($response) = $this->sxapioebatchlineprocessPostWithHttpInfo($sxapioebatchlineprocess);
        return $response;
    }

    /**
     * Operation sxapioebatchlineprocessPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioebatchlineprocess $sxapioebatchlineprocess (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioebatchlineprocessResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioebatchlineprocessPostWithHttpInfo($sxapioebatchlineprocess)
    {
        $returnType = '\Swagger\Client\Model\SxapioebatchlineprocessResp';
        $request = $this->sxapioebatchlineprocessPostRequest($sxapioebatchlineprocess);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioebatchlineprocessResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioebatchlineprocessPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioebatchlineprocess $sxapioebatchlineprocess (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioebatchlineprocessPostAsync($sxapioebatchlineprocess)
    {
        return $this->sxapioebatchlineprocessPostAsyncWithHttpInfo($sxapioebatchlineprocess)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioebatchlineprocessPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioebatchlineprocess $sxapioebatchlineprocess (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioebatchlineprocessPostAsyncWithHttpInfo($sxapioebatchlineprocess)
    {
        $returnType = '\Swagger\Client\Model\SxapioebatchlineprocessResp';
        $request = $this->sxapioebatchlineprocessPostRequest($sxapioebatchlineprocess);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioebatchlineprocessPost'
     *
     * @param  \Swagger\Client\Model\Sxapioebatchlineprocess $sxapioebatchlineprocess (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioebatchlineprocessPostRequest($sxapioebatchlineprocess)
    {
        // verify the required parameter 'sxapioebatchlineprocess' is set
        if ($sxapioebatchlineprocess === null || (is_array($sxapioebatchlineprocess) && count($sxapioebatchlineprocess) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioebatchlineprocess when calling sxapioebatchlineprocessPost'
            );
        }

        $resourcePath = '/sxapioebatchlineprocess';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioebatchlineprocess)) {
            $_tempBody = $sxapioebatchlineprocess;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioebillwtorderPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioebillwtorder $sxapioebillwtorder sxapioebillwtorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioebillwtorderResp
     */
    public function sxapioebillwtorderPost($sxapioebillwtorder)
    {
        list($response) = $this->sxapioebillwtorderPostWithHttpInfo($sxapioebillwtorder);
        return $response;
    }

    /**
     * Operation sxapioebillwtorderPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioebillwtorder $sxapioebillwtorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioebillwtorderResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioebillwtorderPostWithHttpInfo($sxapioebillwtorder)
    {
        $returnType = '\Swagger\Client\Model\SxapioebillwtorderResp';
        $request = $this->sxapioebillwtorderPostRequest($sxapioebillwtorder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioebillwtorderResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioebillwtorderPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioebillwtorder $sxapioebillwtorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioebillwtorderPostAsync($sxapioebillwtorder)
    {
        return $this->sxapioebillwtorderPostAsyncWithHttpInfo($sxapioebillwtorder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioebillwtorderPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioebillwtorder $sxapioebillwtorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioebillwtorderPostAsyncWithHttpInfo($sxapioebillwtorder)
    {
        $returnType = '\Swagger\Client\Model\SxapioebillwtorderResp';
        $request = $this->sxapioebillwtorderPostRequest($sxapioebillwtorder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioebillwtorderPost'
     *
     * @param  \Swagger\Client\Model\Sxapioebillwtorder $sxapioebillwtorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioebillwtorderPostRequest($sxapioebillwtorder)
    {
        // verify the required parameter 'sxapioebillwtorder' is set
        if ($sxapioebillwtorder === null || (is_array($sxapioebillwtorder) && count($sxapioebillwtorder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioebillwtorder when calling sxapioebillwtorderPost'
            );
        }

        $resourcePath = '/sxapioebillwtorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioebillwtorder)) {
            $_tempBody = $sxapioebillwtorder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioecalcfreightratePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioecalcfreightrate $sxapioecalcfreightrate sxapioecalcfreightrate (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioecalcfreightrateResp
     */
    public function sxapioecalcfreightratePost($sxapioecalcfreightrate)
    {
        list($response) = $this->sxapioecalcfreightratePostWithHttpInfo($sxapioecalcfreightrate);
        return $response;
    }

    /**
     * Operation sxapioecalcfreightratePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioecalcfreightrate $sxapioecalcfreightrate (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioecalcfreightrateResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioecalcfreightratePostWithHttpInfo($sxapioecalcfreightrate)
    {
        $returnType = '\Swagger\Client\Model\SxapioecalcfreightrateResp';
        $request = $this->sxapioecalcfreightratePostRequest($sxapioecalcfreightrate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioecalcfreightrateResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioecalcfreightratePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioecalcfreightrate $sxapioecalcfreightrate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioecalcfreightratePostAsync($sxapioecalcfreightrate)
    {
        return $this->sxapioecalcfreightratePostAsyncWithHttpInfo($sxapioecalcfreightrate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioecalcfreightratePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioecalcfreightrate $sxapioecalcfreightrate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioecalcfreightratePostAsyncWithHttpInfo($sxapioecalcfreightrate)
    {
        $returnType = '\Swagger\Client\Model\SxapioecalcfreightrateResp';
        $request = $this->sxapioecalcfreightratePostRequest($sxapioecalcfreightrate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioecalcfreightratePost'
     *
     * @param  \Swagger\Client\Model\Sxapioecalcfreightrate $sxapioecalcfreightrate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioecalcfreightratePostRequest($sxapioecalcfreightrate)
    {
        // verify the required parameter 'sxapioecalcfreightrate' is set
        if ($sxapioecalcfreightrate === null || (is_array($sxapioecalcfreightrate) && count($sxapioecalcfreightrate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioecalcfreightrate when calling sxapioecalcfreightratePost'
            );
        }

        $resourcePath = '/sxapioecalcfreightrate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioecalcfreightrate)) {
            $_tempBody = $sxapioecalcfreightrate;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioecalcfreightweightPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioecalcfreightweight $sxapioecalcfreightweight sxapioecalcfreightweight (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioecalcfreightweightResp
     */
    public function sxapioecalcfreightweightPost($sxapioecalcfreightweight)
    {
        list($response) = $this->sxapioecalcfreightweightPostWithHttpInfo($sxapioecalcfreightweight);
        return $response;
    }

    /**
     * Operation sxapioecalcfreightweightPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioecalcfreightweight $sxapioecalcfreightweight (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioecalcfreightweightResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioecalcfreightweightPostWithHttpInfo($sxapioecalcfreightweight)
    {
        $returnType = '\Swagger\Client\Model\SxapioecalcfreightweightResp';
        $request = $this->sxapioecalcfreightweightPostRequest($sxapioecalcfreightweight);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioecalcfreightweightResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioecalcfreightweightPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioecalcfreightweight $sxapioecalcfreightweight (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioecalcfreightweightPostAsync($sxapioecalcfreightweight)
    {
        return $this->sxapioecalcfreightweightPostAsyncWithHttpInfo($sxapioecalcfreightweight)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioecalcfreightweightPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioecalcfreightweight $sxapioecalcfreightweight (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioecalcfreightweightPostAsyncWithHttpInfo($sxapioecalcfreightweight)
    {
        $returnType = '\Swagger\Client\Model\SxapioecalcfreightweightResp';
        $request = $this->sxapioecalcfreightweightPostRequest($sxapioecalcfreightweight);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioecalcfreightweightPost'
     *
     * @param  \Swagger\Client\Model\Sxapioecalcfreightweight $sxapioecalcfreightweight (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioecalcfreightweightPostRequest($sxapioecalcfreightweight)
    {
        // verify the required parameter 'sxapioecalcfreightweight' is set
        if ($sxapioecalcfreightweight === null || (is_array($sxapioecalcfreightweight) && count($sxapioecalcfreightweight) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioecalcfreightweight when calling sxapioecalcfreightweightPost'
            );
        }

        $resourcePath = '/sxapioecalcfreightweight';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioecalcfreightweight)) {
            $_tempBody = $sxapioecalcfreightweight;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioecashdrawerPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioecashdrawer $sxapioecashdrawer sxapioecashdrawer (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioecashdrawerResp
     */
    public function sxapioecashdrawerPost($sxapioecashdrawer)
    {
        list($response) = $this->sxapioecashdrawerPostWithHttpInfo($sxapioecashdrawer);
        return $response;
    }

    /**
     * Operation sxapioecashdrawerPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioecashdrawer $sxapioecashdrawer (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioecashdrawerResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioecashdrawerPostWithHttpInfo($sxapioecashdrawer)
    {
        $returnType = '\Swagger\Client\Model\SxapioecashdrawerResp';
        $request = $this->sxapioecashdrawerPostRequest($sxapioecashdrawer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioecashdrawerResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioecashdrawerPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioecashdrawer $sxapioecashdrawer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioecashdrawerPostAsync($sxapioecashdrawer)
    {
        return $this->sxapioecashdrawerPostAsyncWithHttpInfo($sxapioecashdrawer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioecashdrawerPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioecashdrawer $sxapioecashdrawer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioecashdrawerPostAsyncWithHttpInfo($sxapioecashdrawer)
    {
        $returnType = '\Swagger\Client\Model\SxapioecashdrawerResp';
        $request = $this->sxapioecashdrawerPostRequest($sxapioecashdrawer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioecashdrawerPost'
     *
     * @param  \Swagger\Client\Model\Sxapioecashdrawer $sxapioecashdrawer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioecashdrawerPostRequest($sxapioecashdrawer)
    {
        // verify the required parameter 'sxapioecashdrawer' is set
        if ($sxapioecashdrawer === null || (is_array($sxapioecashdrawer) && count($sxapioecashdrawer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioecashdrawer when calling sxapioecashdrawerPost'
            );
        }

        $resourcePath = '/sxapioecashdrawer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioecashdrawer)) {
            $_tempBody = $sxapioecashdrawer;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioeconvertbatchorderPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeconvertbatchorder $sxapioeconvertbatchorder sxapioeconvertbatchorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioeconvertbatchorderResp
     */
    public function sxapioeconvertbatchorderPost($sxapioeconvertbatchorder)
    {
        list($response) = $this->sxapioeconvertbatchorderPostWithHttpInfo($sxapioeconvertbatchorder);
        return $response;
    }

    /**
     * Operation sxapioeconvertbatchorderPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeconvertbatchorder $sxapioeconvertbatchorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioeconvertbatchorderResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioeconvertbatchorderPostWithHttpInfo($sxapioeconvertbatchorder)
    {
        $returnType = '\Swagger\Client\Model\SxapioeconvertbatchorderResp';
        $request = $this->sxapioeconvertbatchorderPostRequest($sxapioeconvertbatchorder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioeconvertbatchorderResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioeconvertbatchorderPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeconvertbatchorder $sxapioeconvertbatchorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioeconvertbatchorderPostAsync($sxapioeconvertbatchorder)
    {
        return $this->sxapioeconvertbatchorderPostAsyncWithHttpInfo($sxapioeconvertbatchorder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioeconvertbatchorderPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeconvertbatchorder $sxapioeconvertbatchorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioeconvertbatchorderPostAsyncWithHttpInfo($sxapioeconvertbatchorder)
    {
        $returnType = '\Swagger\Client\Model\SxapioeconvertbatchorderResp';
        $request = $this->sxapioeconvertbatchorderPostRequest($sxapioeconvertbatchorder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioeconvertbatchorderPost'
     *
     * @param  \Swagger\Client\Model\Sxapioeconvertbatchorder $sxapioeconvertbatchorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioeconvertbatchorderPostRequest($sxapioeconvertbatchorder)
    {
        // verify the required parameter 'sxapioeconvertbatchorder' is set
        if ($sxapioeconvertbatchorder === null || (is_array($sxapioeconvertbatchorder) && count($sxapioeconvertbatchorder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioeconvertbatchorder when calling sxapioeconvertbatchorderPost'
            );
        }

        $resourcePath = '/sxapioeconvertbatchorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioeconvertbatchorder)) {
            $_tempBody = $sxapioeconvertbatchorder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioecreatebatchnamePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioecreatebatchname $sxapioecreatebatchname sxapioecreatebatchname (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioecreatebatchnameResp
     */
    public function sxapioecreatebatchnamePost($sxapioecreatebatchname)
    {
        list($response) = $this->sxapioecreatebatchnamePostWithHttpInfo($sxapioecreatebatchname);
        return $response;
    }

    /**
     * Operation sxapioecreatebatchnamePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioecreatebatchname $sxapioecreatebatchname (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioecreatebatchnameResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioecreatebatchnamePostWithHttpInfo($sxapioecreatebatchname)
    {
        $returnType = '\Swagger\Client\Model\SxapioecreatebatchnameResp';
        $request = $this->sxapioecreatebatchnamePostRequest($sxapioecreatebatchname);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioecreatebatchnameResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioecreatebatchnamePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioecreatebatchname $sxapioecreatebatchname (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioecreatebatchnamePostAsync($sxapioecreatebatchname)
    {
        return $this->sxapioecreatebatchnamePostAsyncWithHttpInfo($sxapioecreatebatchname)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioecreatebatchnamePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioecreatebatchname $sxapioecreatebatchname (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioecreatebatchnamePostAsyncWithHttpInfo($sxapioecreatebatchname)
    {
        $returnType = '\Swagger\Client\Model\SxapioecreatebatchnameResp';
        $request = $this->sxapioecreatebatchnamePostRequest($sxapioecreatebatchname);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioecreatebatchnamePost'
     *
     * @param  \Swagger\Client\Model\Sxapioecreatebatchname $sxapioecreatebatchname (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioecreatebatchnamePostRequest($sxapioecreatebatchname)
    {
        // verify the required parameter 'sxapioecreatebatchname' is set
        if ($sxapioecreatebatchname === null || (is_array($sxapioecreatebatchname) && count($sxapioecreatebatchname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioecreatebatchname when calling sxapioecreatebatchnamePost'
            );
        }

        $resourcePath = '/sxapioecreatebatchname';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioecreatebatchname)) {
            $_tempBody = $sxapioecreatebatchname;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioecreditapprovalPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioecreditapproval $sxapioecreditapproval sxapioecreditapproval (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioecreditapprovalResp
     */
    public function sxapioecreditapprovalPost($sxapioecreditapproval)
    {
        list($response) = $this->sxapioecreditapprovalPostWithHttpInfo($sxapioecreditapproval);
        return $response;
    }

    /**
     * Operation sxapioecreditapprovalPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioecreditapproval $sxapioecreditapproval (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioecreditapprovalResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioecreditapprovalPostWithHttpInfo($sxapioecreditapproval)
    {
        $returnType = '\Swagger\Client\Model\SxapioecreditapprovalResp';
        $request = $this->sxapioecreditapprovalPostRequest($sxapioecreditapproval);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioecreditapprovalResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioecreditapprovalPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioecreditapproval $sxapioecreditapproval (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioecreditapprovalPostAsync($sxapioecreditapproval)
    {
        return $this->sxapioecreditapprovalPostAsyncWithHttpInfo($sxapioecreditapproval)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioecreditapprovalPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioecreditapproval $sxapioecreditapproval (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioecreditapprovalPostAsyncWithHttpInfo($sxapioecreditapproval)
    {
        $returnType = '\Swagger\Client\Model\SxapioecreditapprovalResp';
        $request = $this->sxapioecreditapprovalPostRequest($sxapioecreditapproval);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioecreditapprovalPost'
     *
     * @param  \Swagger\Client\Model\Sxapioecreditapproval $sxapioecreditapproval (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioecreditapprovalPostRequest($sxapioecreditapproval)
    {
        // verify the required parameter 'sxapioecreditapproval' is set
        if ($sxapioecreditapproval === null || (is_array($sxapioecreditapproval) && count($sxapioecreditapproval) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioecreditapproval when calling sxapioecreditapprovalPost'
            );
        }

        $resourcePath = '/sxapioecreditapproval';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioecreditapproval)) {
            $_tempBody = $sxapioecreditapproval;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioedirectroutemntPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioedirectroutemnt $sxapioedirectroutemnt sxapioedirectroutemnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioedirectroutemntResp
     */
    public function sxapioedirectroutemntPost($sxapioedirectroutemnt)
    {
        list($response) = $this->sxapioedirectroutemntPostWithHttpInfo($sxapioedirectroutemnt);
        return $response;
    }

    /**
     * Operation sxapioedirectroutemntPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioedirectroutemnt $sxapioedirectroutemnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioedirectroutemntResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioedirectroutemntPostWithHttpInfo($sxapioedirectroutemnt)
    {
        $returnType = '\Swagger\Client\Model\SxapioedirectroutemntResp';
        $request = $this->sxapioedirectroutemntPostRequest($sxapioedirectroutemnt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioedirectroutemntResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioedirectroutemntPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioedirectroutemnt $sxapioedirectroutemnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioedirectroutemntPostAsync($sxapioedirectroutemnt)
    {
        return $this->sxapioedirectroutemntPostAsyncWithHttpInfo($sxapioedirectroutemnt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioedirectroutemntPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioedirectroutemnt $sxapioedirectroutemnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioedirectroutemntPostAsyncWithHttpInfo($sxapioedirectroutemnt)
    {
        $returnType = '\Swagger\Client\Model\SxapioedirectroutemntResp';
        $request = $this->sxapioedirectroutemntPostRequest($sxapioedirectroutemnt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioedirectroutemntPost'
     *
     * @param  \Swagger\Client\Model\Sxapioedirectroutemnt $sxapioedirectroutemnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioedirectroutemntPostRequest($sxapioedirectroutemnt)
    {
        // verify the required parameter 'sxapioedirectroutemnt' is set
        if ($sxapioedirectroutemnt === null || (is_array($sxapioedirectroutemnt) && count($sxapioedirectroutemnt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioedirectroutemnt when calling sxapioedirectroutemntPost'
            );
        }

        $resourcePath = '/sxapioedirectroutemnt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioedirectroutemnt)) {
            $_tempBody = $sxapioedirectroutemnt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioeeditserlotlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeeditserlotlist $sxapioeeditserlotlist sxapioeeditserlotlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioeeditserlotlistResp
     */
    public function sxapioeeditserlotlistPost($sxapioeeditserlotlist)
    {
        list($response) = $this->sxapioeeditserlotlistPostWithHttpInfo($sxapioeeditserlotlist);
        return $response;
    }

    /**
     * Operation sxapioeeditserlotlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeeditserlotlist $sxapioeeditserlotlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioeeditserlotlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioeeditserlotlistPostWithHttpInfo($sxapioeeditserlotlist)
    {
        $returnType = '\Swagger\Client\Model\SxapioeeditserlotlistResp';
        $request = $this->sxapioeeditserlotlistPostRequest($sxapioeeditserlotlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioeeditserlotlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioeeditserlotlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeeditserlotlist $sxapioeeditserlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioeeditserlotlistPostAsync($sxapioeeditserlotlist)
    {
        return $this->sxapioeeditserlotlistPostAsyncWithHttpInfo($sxapioeeditserlotlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioeeditserlotlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeeditserlotlist $sxapioeeditserlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioeeditserlotlistPostAsyncWithHttpInfo($sxapioeeditserlotlist)
    {
        $returnType = '\Swagger\Client\Model\SxapioeeditserlotlistResp';
        $request = $this->sxapioeeditserlotlistPostRequest($sxapioeeditserlotlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioeeditserlotlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapioeeditserlotlist $sxapioeeditserlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioeeditserlotlistPostRequest($sxapioeeditserlotlist)
    {
        // verify the required parameter 'sxapioeeditserlotlist' is set
        if ($sxapioeeditserlotlist === null || (is_array($sxapioeeditserlotlist) && count($sxapioeeditserlotlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioeeditserlotlist when calling sxapioeeditserlotlistPost'
            );
        }

        $resourcePath = '/sxapioeeditserlotlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioeeditserlotlist)) {
            $_tempBody = $sxapioeeditserlotlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioefullordermntPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermnt $sxapioefullordermnt sxapioefullordermnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioefullordermntResp
     */
    public function sxapioefullordermntPost($sxapioefullordermnt)
    {
        list($response) = $this->sxapioefullordermntPostWithHttpInfo($sxapioefullordermnt);
        return $response;
    }

    /**
     * Operation sxapioefullordermntPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermnt $sxapioefullordermnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioefullordermntResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioefullordermntPostWithHttpInfo($sxapioefullordermnt)
    {
        $returnType = '\Swagger\Client\Model\SxapioefullordermntResp';
        $request = $this->sxapioefullordermntPostRequest($sxapioefullordermnt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioefullordermntResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioefullordermntPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermnt $sxapioefullordermnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioefullordermntPostAsync($sxapioefullordermnt)
    {
        return $this->sxapioefullordermntPostAsyncWithHttpInfo($sxapioefullordermnt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioefullordermntPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermnt $sxapioefullordermnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioefullordermntPostAsyncWithHttpInfo($sxapioefullordermnt)
    {
        $returnType = '\Swagger\Client\Model\SxapioefullordermntResp';
        $request = $this->sxapioefullordermntPostRequest($sxapioefullordermnt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioefullordermntPost'
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermnt $sxapioefullordermnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioefullordermntPostRequest($sxapioefullordermnt)
    {
        // verify the required parameter 'sxapioefullordermnt' is set
        if ($sxapioefullordermnt === null || (is_array($sxapioefullordermnt) && count($sxapioefullordermnt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioefullordermnt when calling sxapioefullordermntPost'
            );
        }

        $resourcePath = '/sxapioefullordermnt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioefullordermnt)) {
            $_tempBody = $sxapioefullordermnt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioefullordermntv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv2 $sxapioefullordermntv2 sxapioefullordermntv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioefullordermntv2Resp
     */
    public function sxapioefullordermntv2Post($sxapioefullordermntv2)
    {
        list($response) = $this->sxapioefullordermntv2PostWithHttpInfo($sxapioefullordermntv2);
        return $response;
    }

    /**
     * Operation sxapioefullordermntv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv2 $sxapioefullordermntv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioefullordermntv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioefullordermntv2PostWithHttpInfo($sxapioefullordermntv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapioefullordermntv2Resp';
        $request = $this->sxapioefullordermntv2PostRequest($sxapioefullordermntv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioefullordermntv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioefullordermntv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv2 $sxapioefullordermntv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioefullordermntv2PostAsync($sxapioefullordermntv2)
    {
        return $this->sxapioefullordermntv2PostAsyncWithHttpInfo($sxapioefullordermntv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioefullordermntv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv2 $sxapioefullordermntv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioefullordermntv2PostAsyncWithHttpInfo($sxapioefullordermntv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapioefullordermntv2Resp';
        $request = $this->sxapioefullordermntv2PostRequest($sxapioefullordermntv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioefullordermntv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv2 $sxapioefullordermntv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioefullordermntv2PostRequest($sxapioefullordermntv2)
    {
        // verify the required parameter 'sxapioefullordermntv2' is set
        if ($sxapioefullordermntv2 === null || (is_array($sxapioefullordermntv2) && count($sxapioefullordermntv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioefullordermntv2 when calling sxapioefullordermntv2Post'
            );
        }

        $resourcePath = '/sxapioefullordermntv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioefullordermntv2)) {
            $_tempBody = $sxapioefullordermntv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioefullordermntv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv3 $sxapioefullordermntv3 sxapioefullordermntv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioefullordermntv3Resp
     */
    public function sxapioefullordermntv3Post($sxapioefullordermntv3)
    {
        list($response) = $this->sxapioefullordermntv3PostWithHttpInfo($sxapioefullordermntv3);
        return $response;
    }

    /**
     * Operation sxapioefullordermntv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv3 $sxapioefullordermntv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioefullordermntv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioefullordermntv3PostWithHttpInfo($sxapioefullordermntv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapioefullordermntv3Resp';
        $request = $this->sxapioefullordermntv3PostRequest($sxapioefullordermntv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioefullordermntv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioefullordermntv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv3 $sxapioefullordermntv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioefullordermntv3PostAsync($sxapioefullordermntv3)
    {
        return $this->sxapioefullordermntv3PostAsyncWithHttpInfo($sxapioefullordermntv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioefullordermntv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv3 $sxapioefullordermntv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioefullordermntv3PostAsyncWithHttpInfo($sxapioefullordermntv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapioefullordermntv3Resp';
        $request = $this->sxapioefullordermntv3PostRequest($sxapioefullordermntv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioefullordermntv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv3 $sxapioefullordermntv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioefullordermntv3PostRequest($sxapioefullordermntv3)
    {
        // verify the required parameter 'sxapioefullordermntv3' is set
        if ($sxapioefullordermntv3 === null || (is_array($sxapioefullordermntv3) && count($sxapioefullordermntv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioefullordermntv3 when calling sxapioefullordermntv3Post'
            );
        }

        $resourcePath = '/sxapioefullordermntv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioefullordermntv3)) {
            $_tempBody = $sxapioefullordermntv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioefullordermntv4Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv4 $sxapioefullordermntv4 sxapioefullordermntv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioefullordermntv4Resp
     */
    public function sxapioefullordermntv4Post($sxapioefullordermntv4)
    {
        list($response) = $this->sxapioefullordermntv4PostWithHttpInfo($sxapioefullordermntv4);
        return $response;
    }

    /**
     * Operation sxapioefullordermntv4PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv4 $sxapioefullordermntv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioefullordermntv4Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioefullordermntv4PostWithHttpInfo($sxapioefullordermntv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapioefullordermntv4Resp';
        $request = $this->sxapioefullordermntv4PostRequest($sxapioefullordermntv4);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioefullordermntv4Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioefullordermntv4PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv4 $sxapioefullordermntv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioefullordermntv4PostAsync($sxapioefullordermntv4)
    {
        return $this->sxapioefullordermntv4PostAsyncWithHttpInfo($sxapioefullordermntv4)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioefullordermntv4PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv4 $sxapioefullordermntv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioefullordermntv4PostAsyncWithHttpInfo($sxapioefullordermntv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapioefullordermntv4Resp';
        $request = $this->sxapioefullordermntv4PostRequest($sxapioefullordermntv4);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioefullordermntv4Post'
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv4 $sxapioefullordermntv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioefullordermntv4PostRequest($sxapioefullordermntv4)
    {
        // verify the required parameter 'sxapioefullordermntv4' is set
        if ($sxapioefullordermntv4 === null || (is_array($sxapioefullordermntv4) && count($sxapioefullordermntv4) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioefullordermntv4 when calling sxapioefullordermntv4Post'
            );
        }

        $resourcePath = '/sxapioefullordermntv4';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioefullordermntv4)) {
            $_tempBody = $sxapioefullordermntv4;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioefullordermntv5Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv5 $sxapioefullordermntv5 sxapioefullordermntv5 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioefullordermntv5Resp
     */
    public function sxapioefullordermntv5Post($sxapioefullordermntv5)
    {
        list($response) = $this->sxapioefullordermntv5PostWithHttpInfo($sxapioefullordermntv5);
        return $response;
    }

    /**
     * Operation sxapioefullordermntv5PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv5 $sxapioefullordermntv5 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioefullordermntv5Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioefullordermntv5PostWithHttpInfo($sxapioefullordermntv5)
    {
        $returnType = '\Swagger\Client\Model\Sxapioefullordermntv5Resp';
        $request = $this->sxapioefullordermntv5PostRequest($sxapioefullordermntv5);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioefullordermntv5Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioefullordermntv5PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv5 $sxapioefullordermntv5 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioefullordermntv5PostAsync($sxapioefullordermntv5)
    {
        return $this->sxapioefullordermntv5PostAsyncWithHttpInfo($sxapioefullordermntv5)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioefullordermntv5PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv5 $sxapioefullordermntv5 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioefullordermntv5PostAsyncWithHttpInfo($sxapioefullordermntv5)
    {
        $returnType = '\Swagger\Client\Model\Sxapioefullordermntv5Resp';
        $request = $this->sxapioefullordermntv5PostRequest($sxapioefullordermntv5);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioefullordermntv5Post'
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv5 $sxapioefullordermntv5 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioefullordermntv5PostRequest($sxapioefullordermntv5)
    {
        // verify the required parameter 'sxapioefullordermntv5' is set
        if ($sxapioefullordermntv5 === null || (is_array($sxapioefullordermntv5) && count($sxapioefullordermntv5) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioefullordermntv5 when calling sxapioefullordermntv5Post'
            );
        }

        $resourcePath = '/sxapioefullordermntv5';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioefullordermntv5)) {
            $_tempBody = $sxapioefullordermntv5;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioefullordermntv6Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv6 $sxapioefullordermntv6 sxapioefullordermntv6 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioefullordermntv6Resp
     */
    public function sxapioefullordermntv6Post($sxapioefullordermntv6)
    {
        list($response) = $this->sxapioefullordermntv6PostWithHttpInfo($sxapioefullordermntv6);
        return $response;
    }

    /**
     * Operation sxapioefullordermntv6PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv6 $sxapioefullordermntv6 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioefullordermntv6Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioefullordermntv6PostWithHttpInfo($sxapioefullordermntv6)
    {
        $returnType = '\Swagger\Client\Model\Sxapioefullordermntv6Resp';
        $request = $this->sxapioefullordermntv6PostRequest($sxapioefullordermntv6);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioefullordermntv6Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioefullordermntv6PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv6 $sxapioefullordermntv6 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioefullordermntv6PostAsync($sxapioefullordermntv6)
    {
        return $this->sxapioefullordermntv6PostAsyncWithHttpInfo($sxapioefullordermntv6)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioefullordermntv6PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv6 $sxapioefullordermntv6 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioefullordermntv6PostAsyncWithHttpInfo($sxapioefullordermntv6)
    {
        $returnType = '\Swagger\Client\Model\Sxapioefullordermntv6Resp';
        $request = $this->sxapioefullordermntv6PostRequest($sxapioefullordermntv6);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioefullordermntv6Post'
     *
     * @param  \Swagger\Client\Model\Sxapioefullordermntv6 $sxapioefullordermntv6 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioefullordermntv6PostRequest($sxapioefullordermntv6)
    {
        // verify the required parameter 'sxapioefullordermntv6' is set
        if ($sxapioefullordermntv6 === null || (is_array($sxapioefullordermntv6) && count($sxapioefullordermntv6) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioefullordermntv6 when calling sxapioefullordermntv6Post'
            );
        }

        $resourcePath = '/sxapioefullordermntv6';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioefullordermntv6)) {
            $_tempBody = $sxapioefullordermntv6;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetaddonlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetaddonlist $sxapioegetaddonlist sxapioegetaddonlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioegetaddonlistResp
     */
    public function sxapioegetaddonlistPost($sxapioegetaddonlist)
    {
        list($response) = $this->sxapioegetaddonlistPostWithHttpInfo($sxapioegetaddonlist);
        return $response;
    }

    /**
     * Operation sxapioegetaddonlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetaddonlist $sxapioegetaddonlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioegetaddonlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetaddonlistPostWithHttpInfo($sxapioegetaddonlist)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetaddonlistResp';
        $request = $this->sxapioegetaddonlistPostRequest($sxapioegetaddonlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioegetaddonlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetaddonlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetaddonlist $sxapioegetaddonlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetaddonlistPostAsync($sxapioegetaddonlist)
    {
        return $this->sxapioegetaddonlistPostAsyncWithHttpInfo($sxapioegetaddonlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetaddonlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetaddonlist $sxapioegetaddonlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetaddonlistPostAsyncWithHttpInfo($sxapioegetaddonlist)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetaddonlistResp';
        $request = $this->sxapioegetaddonlistPostRequest($sxapioegetaddonlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetaddonlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapioegetaddonlist $sxapioegetaddonlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetaddonlistPostRequest($sxapioegetaddonlist)
    {
        // verify the required parameter 'sxapioegetaddonlist' is set
        if ($sxapioegetaddonlist === null || (is_array($sxapioegetaddonlist) && count($sxapioegetaddonlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetaddonlist when calling sxapioegetaddonlistPost'
            );
        }

        $resourcePath = '/sxapioegetaddonlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetaddonlist)) {
            $_tempBody = $sxapioegetaddonlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetcreditholdordersPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetcreditholdorders $sxapioegetcreditholdorders sxapioegetcreditholdorders (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioegetcreditholdordersResp
     */
    public function sxapioegetcreditholdordersPost($sxapioegetcreditholdorders)
    {
        list($response) = $this->sxapioegetcreditholdordersPostWithHttpInfo($sxapioegetcreditholdorders);
        return $response;
    }

    /**
     * Operation sxapioegetcreditholdordersPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetcreditholdorders $sxapioegetcreditholdorders (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioegetcreditholdordersResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetcreditholdordersPostWithHttpInfo($sxapioegetcreditholdorders)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetcreditholdordersResp';
        $request = $this->sxapioegetcreditholdordersPostRequest($sxapioegetcreditholdorders);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioegetcreditholdordersResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetcreditholdordersPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetcreditholdorders $sxapioegetcreditholdorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetcreditholdordersPostAsync($sxapioegetcreditholdorders)
    {
        return $this->sxapioegetcreditholdordersPostAsyncWithHttpInfo($sxapioegetcreditholdorders)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetcreditholdordersPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetcreditholdorders $sxapioegetcreditholdorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetcreditholdordersPostAsyncWithHttpInfo($sxapioegetcreditholdorders)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetcreditholdordersResp';
        $request = $this->sxapioegetcreditholdordersPostRequest($sxapioegetcreditholdorders);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetcreditholdordersPost'
     *
     * @param  \Swagger\Client\Model\Sxapioegetcreditholdorders $sxapioegetcreditholdorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetcreditholdordersPostRequest($sxapioegetcreditholdorders)
    {
        // verify the required parameter 'sxapioegetcreditholdorders' is set
        if ($sxapioegetcreditholdorders === null || (is_array($sxapioegetcreditholdorders) && count($sxapioegetcreditholdorders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetcreditholdorders when calling sxapioegetcreditholdordersPost'
            );
        }

        $resourcePath = '/sxapioegetcreditholdorders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetcreditholdorders)) {
            $_tempBody = $sxapioegetcreditholdorders;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetdeliverylistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetdeliverylist $sxapioegetdeliverylist sxapioegetdeliverylist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioegetdeliverylistResp
     */
    public function sxapioegetdeliverylistPost($sxapioegetdeliverylist)
    {
        list($response) = $this->sxapioegetdeliverylistPostWithHttpInfo($sxapioegetdeliverylist);
        return $response;
    }

    /**
     * Operation sxapioegetdeliverylistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetdeliverylist $sxapioegetdeliverylist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioegetdeliverylistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetdeliverylistPostWithHttpInfo($sxapioegetdeliverylist)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetdeliverylistResp';
        $request = $this->sxapioegetdeliverylistPostRequest($sxapioegetdeliverylist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioegetdeliverylistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetdeliverylistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetdeliverylist $sxapioegetdeliverylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetdeliverylistPostAsync($sxapioegetdeliverylist)
    {
        return $this->sxapioegetdeliverylistPostAsyncWithHttpInfo($sxapioegetdeliverylist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetdeliverylistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetdeliverylist $sxapioegetdeliverylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetdeliverylistPostAsyncWithHttpInfo($sxapioegetdeliverylist)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetdeliverylistResp';
        $request = $this->sxapioegetdeliverylistPostRequest($sxapioegetdeliverylist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetdeliverylistPost'
     *
     * @param  \Swagger\Client\Model\Sxapioegetdeliverylist $sxapioegetdeliverylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetdeliverylistPostRequest($sxapioegetdeliverylist)
    {
        // verify the required parameter 'sxapioegetdeliverylist' is set
        if ($sxapioegetdeliverylist === null || (is_array($sxapioegetdeliverylist) && count($sxapioegetdeliverylist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetdeliverylist when calling sxapioegetdeliverylistPost'
            );
        }

        $resourcePath = '/sxapioegetdeliverylist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetdeliverylist)) {
            $_tempBody = $sxapioegetdeliverylist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetedivalidationmessagesPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetedivalidationmessages $sxapioegetedivalidationmessages sxapioegetedivalidationmessages (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioegetedivalidationmessagesResp
     */
    public function sxapioegetedivalidationmessagesPost($sxapioegetedivalidationmessages)
    {
        list($response) = $this->sxapioegetedivalidationmessagesPostWithHttpInfo($sxapioegetedivalidationmessages);
        return $response;
    }

    /**
     * Operation sxapioegetedivalidationmessagesPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetedivalidationmessages $sxapioegetedivalidationmessages (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioegetedivalidationmessagesResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetedivalidationmessagesPostWithHttpInfo($sxapioegetedivalidationmessages)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetedivalidationmessagesResp';
        $request = $this->sxapioegetedivalidationmessagesPostRequest($sxapioegetedivalidationmessages);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioegetedivalidationmessagesResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetedivalidationmessagesPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetedivalidationmessages $sxapioegetedivalidationmessages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetedivalidationmessagesPostAsync($sxapioegetedivalidationmessages)
    {
        return $this->sxapioegetedivalidationmessagesPostAsyncWithHttpInfo($sxapioegetedivalidationmessages)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetedivalidationmessagesPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetedivalidationmessages $sxapioegetedivalidationmessages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetedivalidationmessagesPostAsyncWithHttpInfo($sxapioegetedivalidationmessages)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetedivalidationmessagesResp';
        $request = $this->sxapioegetedivalidationmessagesPostRequest($sxapioegetedivalidationmessages);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetedivalidationmessagesPost'
     *
     * @param  \Swagger\Client\Model\Sxapioegetedivalidationmessages $sxapioegetedivalidationmessages (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetedivalidationmessagesPostRequest($sxapioegetedivalidationmessages)
    {
        // verify the required parameter 'sxapioegetedivalidationmessages' is set
        if ($sxapioegetedivalidationmessages === null || (is_array($sxapioegetedivalidationmessages) && count($sxapioegetedivalidationmessages) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetedivalidationmessages when calling sxapioegetedivalidationmessagesPost'
            );
        }

        $resourcePath = '/sxapioegetedivalidationmessages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetedivalidationmessages)) {
            $_tempBody = $sxapioegetedivalidationmessages;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetlistofbatchordersPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofbatchorders $sxapioegetlistofbatchorders sxapioegetlistofbatchorders (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioegetlistofbatchordersResp
     */
    public function sxapioegetlistofbatchordersPost($sxapioegetlistofbatchorders)
    {
        list($response) = $this->sxapioegetlistofbatchordersPostWithHttpInfo($sxapioegetlistofbatchorders);
        return $response;
    }

    /**
     * Operation sxapioegetlistofbatchordersPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofbatchorders $sxapioegetlistofbatchorders (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioegetlistofbatchordersResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetlistofbatchordersPostWithHttpInfo($sxapioegetlistofbatchorders)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetlistofbatchordersResp';
        $request = $this->sxapioegetlistofbatchordersPostRequest($sxapioegetlistofbatchorders);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioegetlistofbatchordersResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetlistofbatchordersPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofbatchorders $sxapioegetlistofbatchorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetlistofbatchordersPostAsync($sxapioegetlistofbatchorders)
    {
        return $this->sxapioegetlistofbatchordersPostAsyncWithHttpInfo($sxapioegetlistofbatchorders)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetlistofbatchordersPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofbatchorders $sxapioegetlistofbatchorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetlistofbatchordersPostAsyncWithHttpInfo($sxapioegetlistofbatchorders)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetlistofbatchordersResp';
        $request = $this->sxapioegetlistofbatchordersPostRequest($sxapioegetlistofbatchorders);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetlistofbatchordersPost'
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofbatchorders $sxapioegetlistofbatchorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetlistofbatchordersPostRequest($sxapioegetlistofbatchorders)
    {
        // verify the required parameter 'sxapioegetlistofbatchorders' is set
        if ($sxapioegetlistofbatchorders === null || (is_array($sxapioegetlistofbatchorders) && count($sxapioegetlistofbatchorders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetlistofbatchorders when calling sxapioegetlistofbatchordersPost'
            );
        }

        $resourcePath = '/sxapioegetlistofbatchorders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetlistofbatchorders)) {
            $_tempBody = $sxapioegetlistofbatchorders;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetlistofordersPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistoforders $sxapioegetlistoforders sxapioegetlistoforders (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioegetlistofordersResp
     */
    public function sxapioegetlistofordersPost($sxapioegetlistoforders)
    {
        list($response) = $this->sxapioegetlistofordersPostWithHttpInfo($sxapioegetlistoforders);
        return $response;
    }

    /**
     * Operation sxapioegetlistofordersPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistoforders $sxapioegetlistoforders (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioegetlistofordersResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetlistofordersPostWithHttpInfo($sxapioegetlistoforders)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetlistofordersResp';
        $request = $this->sxapioegetlistofordersPostRequest($sxapioegetlistoforders);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioegetlistofordersResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetlistofordersPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistoforders $sxapioegetlistoforders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetlistofordersPostAsync($sxapioegetlistoforders)
    {
        return $this->sxapioegetlistofordersPostAsyncWithHttpInfo($sxapioegetlistoforders)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetlistofordersPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistoforders $sxapioegetlistoforders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetlistofordersPostAsyncWithHttpInfo($sxapioegetlistoforders)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetlistofordersResp';
        $request = $this->sxapioegetlistofordersPostRequest($sxapioegetlistoforders);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetlistofordersPost'
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistoforders $sxapioegetlistoforders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetlistofordersPostRequest($sxapioegetlistoforders)
    {
        // verify the required parameter 'sxapioegetlistoforders' is set
        if ($sxapioegetlistoforders === null || (is_array($sxapioegetlistoforders) && count($sxapioegetlistoforders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetlistoforders when calling sxapioegetlistofordersPost'
            );
        }

        $resourcePath = '/sxapioegetlistoforders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetlistoforders)) {
            $_tempBody = $sxapioegetlistoforders;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetlistofordersv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv2 $sxapioegetlistofordersv2 sxapioegetlistofordersv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioegetlistofordersv2Resp
     */
    public function sxapioegetlistofordersv2Post($sxapioegetlistofordersv2)
    {
        list($response) = $this->sxapioegetlistofordersv2PostWithHttpInfo($sxapioegetlistofordersv2);
        return $response;
    }

    /**
     * Operation sxapioegetlistofordersv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv2 $sxapioegetlistofordersv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioegetlistofordersv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetlistofordersv2PostWithHttpInfo($sxapioegetlistofordersv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapioegetlistofordersv2Resp';
        $request = $this->sxapioegetlistofordersv2PostRequest($sxapioegetlistofordersv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioegetlistofordersv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetlistofordersv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv2 $sxapioegetlistofordersv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetlistofordersv2PostAsync($sxapioegetlistofordersv2)
    {
        return $this->sxapioegetlistofordersv2PostAsyncWithHttpInfo($sxapioegetlistofordersv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetlistofordersv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv2 $sxapioegetlistofordersv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetlistofordersv2PostAsyncWithHttpInfo($sxapioegetlistofordersv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapioegetlistofordersv2Resp';
        $request = $this->sxapioegetlistofordersv2PostRequest($sxapioegetlistofordersv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetlistofordersv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv2 $sxapioegetlistofordersv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetlistofordersv2PostRequest($sxapioegetlistofordersv2)
    {
        // verify the required parameter 'sxapioegetlistofordersv2' is set
        if ($sxapioegetlistofordersv2 === null || (is_array($sxapioegetlistofordersv2) && count($sxapioegetlistofordersv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetlistofordersv2 when calling sxapioegetlistofordersv2Post'
            );
        }

        $resourcePath = '/sxapioegetlistofordersv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetlistofordersv2)) {
            $_tempBody = $sxapioegetlistofordersv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetlistofordersv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv3 $sxapioegetlistofordersv3 sxapioegetlistofordersv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioegetlistofordersv3Resp
     */
    public function sxapioegetlistofordersv3Post($sxapioegetlistofordersv3)
    {
        list($response) = $this->sxapioegetlistofordersv3PostWithHttpInfo($sxapioegetlistofordersv3);
        return $response;
    }

    /**
     * Operation sxapioegetlistofordersv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv3 $sxapioegetlistofordersv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioegetlistofordersv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetlistofordersv3PostWithHttpInfo($sxapioegetlistofordersv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapioegetlistofordersv3Resp';
        $request = $this->sxapioegetlistofordersv3PostRequest($sxapioegetlistofordersv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioegetlistofordersv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetlistofordersv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv3 $sxapioegetlistofordersv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetlistofordersv3PostAsync($sxapioegetlistofordersv3)
    {
        return $this->sxapioegetlistofordersv3PostAsyncWithHttpInfo($sxapioegetlistofordersv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetlistofordersv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv3 $sxapioegetlistofordersv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetlistofordersv3PostAsyncWithHttpInfo($sxapioegetlistofordersv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapioegetlistofordersv3Resp';
        $request = $this->sxapioegetlistofordersv3PostRequest($sxapioegetlistofordersv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetlistofordersv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv3 $sxapioegetlistofordersv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetlistofordersv3PostRequest($sxapioegetlistofordersv3)
    {
        // verify the required parameter 'sxapioegetlistofordersv3' is set
        if ($sxapioegetlistofordersv3 === null || (is_array($sxapioegetlistofordersv3) && count($sxapioegetlistofordersv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetlistofordersv3 when calling sxapioegetlistofordersv3Post'
            );
        }

        $resourcePath = '/sxapioegetlistofordersv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetlistofordersv3)) {
            $_tempBody = $sxapioegetlistofordersv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetlistofordersv4Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv4 $sxapioegetlistofordersv4 sxapioegetlistofordersv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioegetlistofordersv4Resp
     */
    public function sxapioegetlistofordersv4Post($sxapioegetlistofordersv4)
    {
        list($response) = $this->sxapioegetlistofordersv4PostWithHttpInfo($sxapioegetlistofordersv4);
        return $response;
    }

    /**
     * Operation sxapioegetlistofordersv4PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv4 $sxapioegetlistofordersv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioegetlistofordersv4Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetlistofordersv4PostWithHttpInfo($sxapioegetlistofordersv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapioegetlistofordersv4Resp';
        $request = $this->sxapioegetlistofordersv4PostRequest($sxapioegetlistofordersv4);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioegetlistofordersv4Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetlistofordersv4PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv4 $sxapioegetlistofordersv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetlistofordersv4PostAsync($sxapioegetlistofordersv4)
    {
        return $this->sxapioegetlistofordersv4PostAsyncWithHttpInfo($sxapioegetlistofordersv4)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetlistofordersv4PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv4 $sxapioegetlistofordersv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetlistofordersv4PostAsyncWithHttpInfo($sxapioegetlistofordersv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapioegetlistofordersv4Resp';
        $request = $this->sxapioegetlistofordersv4PostRequest($sxapioegetlistofordersv4);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetlistofordersv4Post'
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv4 $sxapioegetlistofordersv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetlistofordersv4PostRequest($sxapioegetlistofordersv4)
    {
        // verify the required parameter 'sxapioegetlistofordersv4' is set
        if ($sxapioegetlistofordersv4 === null || (is_array($sxapioegetlistofordersv4) && count($sxapioegetlistofordersv4) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetlistofordersv4 when calling sxapioegetlistofordersv4Post'
            );
        }

        $resourcePath = '/sxapioegetlistofordersv4';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetlistofordersv4)) {
            $_tempBody = $sxapioegetlistofordersv4;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetlistofordersv5Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv5 $sxapioegetlistofordersv5 sxapioegetlistofordersv5 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioegetlistofordersv5Resp
     */
    public function sxapioegetlistofordersv5Post($sxapioegetlistofordersv5)
    {
        list($response) = $this->sxapioegetlistofordersv5PostWithHttpInfo($sxapioegetlistofordersv5);
        return $response;
    }

    /**
     * Operation sxapioegetlistofordersv5PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv5 $sxapioegetlistofordersv5 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioegetlistofordersv5Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetlistofordersv5PostWithHttpInfo($sxapioegetlistofordersv5)
    {
        $returnType = '\Swagger\Client\Model\Sxapioegetlistofordersv5Resp';
        $request = $this->sxapioegetlistofordersv5PostRequest($sxapioegetlistofordersv5);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioegetlistofordersv5Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetlistofordersv5PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv5 $sxapioegetlistofordersv5 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetlistofordersv5PostAsync($sxapioegetlistofordersv5)
    {
        return $this->sxapioegetlistofordersv5PostAsyncWithHttpInfo($sxapioegetlistofordersv5)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetlistofordersv5PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv5 $sxapioegetlistofordersv5 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetlistofordersv5PostAsyncWithHttpInfo($sxapioegetlistofordersv5)
    {
        $returnType = '\Swagger\Client\Model\Sxapioegetlistofordersv5Resp';
        $request = $this->sxapioegetlistofordersv5PostRequest($sxapioegetlistofordersv5);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetlistofordersv5Post'
     *
     * @param  \Swagger\Client\Model\Sxapioegetlistofordersv5 $sxapioegetlistofordersv5 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetlistofordersv5PostRequest($sxapioegetlistofordersv5)
    {
        // verify the required parameter 'sxapioegetlistofordersv5' is set
        if ($sxapioegetlistofordersv5 === null || (is_array($sxapioegetlistofordersv5) && count($sxapioegetlistofordersv5) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetlistofordersv5 when calling sxapioegetlistofordersv5Post'
            );
        }

        $resourcePath = '/sxapioegetlistofordersv5';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetlistofordersv5)) {
            $_tempBody = $sxapioegetlistofordersv5;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetlotlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlotlist $sxapioegetlotlist sxapioegetlotlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioegetlotlistResp
     */
    public function sxapioegetlotlistPost($sxapioegetlotlist)
    {
        list($response) = $this->sxapioegetlotlistPostWithHttpInfo($sxapioegetlotlist);
        return $response;
    }

    /**
     * Operation sxapioegetlotlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlotlist $sxapioegetlotlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioegetlotlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetlotlistPostWithHttpInfo($sxapioegetlotlist)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetlotlistResp';
        $request = $this->sxapioegetlotlistPostRequest($sxapioegetlotlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioegetlotlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetlotlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlotlist $sxapioegetlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetlotlistPostAsync($sxapioegetlotlist)
    {
        return $this->sxapioegetlotlistPostAsyncWithHttpInfo($sxapioegetlotlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetlotlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetlotlist $sxapioegetlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetlotlistPostAsyncWithHttpInfo($sxapioegetlotlist)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetlotlistResp';
        $request = $this->sxapioegetlotlistPostRequest($sxapioegetlotlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetlotlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapioegetlotlist $sxapioegetlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetlotlistPostRequest($sxapioegetlotlist)
    {
        // verify the required parameter 'sxapioegetlotlist' is set
        if ($sxapioegetlotlist === null || (is_array($sxapioegetlotlist) && count($sxapioegetlotlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetlotlist when calling sxapioegetlotlistPost'
            );
        }

        $resourcePath = '/sxapioegetlotlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetlotlist)) {
            $_tempBody = $sxapioegetlotlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetordersbyservicekeyPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetordersbyservicekey $sxapioegetordersbyservicekey sxapioegetordersbyservicekey (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioegetordersbyservicekeyResp
     */
    public function sxapioegetordersbyservicekeyPost($sxapioegetordersbyservicekey)
    {
        list($response) = $this->sxapioegetordersbyservicekeyPostWithHttpInfo($sxapioegetordersbyservicekey);
        return $response;
    }

    /**
     * Operation sxapioegetordersbyservicekeyPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetordersbyservicekey $sxapioegetordersbyservicekey (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioegetordersbyservicekeyResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetordersbyservicekeyPostWithHttpInfo($sxapioegetordersbyservicekey)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetordersbyservicekeyResp';
        $request = $this->sxapioegetordersbyservicekeyPostRequest($sxapioegetordersbyservicekey);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioegetordersbyservicekeyResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetordersbyservicekeyPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetordersbyservicekey $sxapioegetordersbyservicekey (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetordersbyservicekeyPostAsync($sxapioegetordersbyservicekey)
    {
        return $this->sxapioegetordersbyservicekeyPostAsyncWithHttpInfo($sxapioegetordersbyservicekey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetordersbyservicekeyPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetordersbyservicekey $sxapioegetordersbyservicekey (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetordersbyservicekeyPostAsyncWithHttpInfo($sxapioegetordersbyservicekey)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetordersbyservicekeyResp';
        $request = $this->sxapioegetordersbyservicekeyPostRequest($sxapioegetordersbyservicekey);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetordersbyservicekeyPost'
     *
     * @param  \Swagger\Client\Model\Sxapioegetordersbyservicekey $sxapioegetordersbyservicekey (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetordersbyservicekeyPostRequest($sxapioegetordersbyservicekey)
    {
        // verify the required parameter 'sxapioegetordersbyservicekey' is set
        if ($sxapioegetordersbyservicekey === null || (is_array($sxapioegetordersbyservicekey) && count($sxapioegetordersbyservicekey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetordersbyservicekey when calling sxapioegetordersbyservicekeyPost'
            );
        }

        $resourcePath = '/sxapioegetordersbyservicekey';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetordersbyservicekey)) {
            $_tempBody = $sxapioegetordersbyservicekey;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetseriallistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetseriallist $sxapioegetseriallist sxapioegetseriallist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioegetseriallistResp
     */
    public function sxapioegetseriallistPost($sxapioegetseriallist)
    {
        list($response) = $this->sxapioegetseriallistPostWithHttpInfo($sxapioegetseriallist);
        return $response;
    }

    /**
     * Operation sxapioegetseriallistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetseriallist $sxapioegetseriallist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioegetseriallistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetseriallistPostWithHttpInfo($sxapioegetseriallist)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetseriallistResp';
        $request = $this->sxapioegetseriallistPostRequest($sxapioegetseriallist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioegetseriallistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetseriallistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetseriallist $sxapioegetseriallist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetseriallistPostAsync($sxapioegetseriallist)
    {
        return $this->sxapioegetseriallistPostAsyncWithHttpInfo($sxapioegetseriallist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetseriallistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetseriallist $sxapioegetseriallist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetseriallistPostAsyncWithHttpInfo($sxapioegetseriallist)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetseriallistResp';
        $request = $this->sxapioegetseriallistPostRequest($sxapioegetseriallist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetseriallistPost'
     *
     * @param  \Swagger\Client\Model\Sxapioegetseriallist $sxapioegetseriallist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetseriallistPostRequest($sxapioegetseriallist)
    {
        // verify the required parameter 'sxapioegetseriallist' is set
        if ($sxapioegetseriallist === null || (is_array($sxapioegetseriallist) && count($sxapioegetseriallist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetseriallist when calling sxapioegetseriallistPost'
            );
        }

        $resourcePath = '/sxapioegetseriallist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetseriallist)) {
            $_tempBody = $sxapioegetseriallist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetservicerentorderPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetservicerentorder $sxapioegetservicerentorder sxapioegetservicerentorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioegetservicerentorderResp
     */
    public function sxapioegetservicerentorderPost($sxapioegetservicerentorder)
    {
        list($response) = $this->sxapioegetservicerentorderPostWithHttpInfo($sxapioegetservicerentorder);
        return $response;
    }

    /**
     * Operation sxapioegetservicerentorderPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetservicerentorder $sxapioegetservicerentorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioegetservicerentorderResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetservicerentorderPostWithHttpInfo($sxapioegetservicerentorder)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetservicerentorderResp';
        $request = $this->sxapioegetservicerentorderPostRequest($sxapioegetservicerentorder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioegetservicerentorderResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetservicerentorderPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetservicerentorder $sxapioegetservicerentorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetservicerentorderPostAsync($sxapioegetservicerentorder)
    {
        return $this->sxapioegetservicerentorderPostAsyncWithHttpInfo($sxapioegetservicerentorder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetservicerentorderPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetservicerentorder $sxapioegetservicerentorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetservicerentorderPostAsyncWithHttpInfo($sxapioegetservicerentorder)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetservicerentorderResp';
        $request = $this->sxapioegetservicerentorderPostRequest($sxapioegetservicerentorder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetservicerentorderPost'
     *
     * @param  \Swagger\Client\Model\Sxapioegetservicerentorder $sxapioegetservicerentorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetservicerentorderPostRequest($sxapioegetservicerentorder)
    {
        // verify the required parameter 'sxapioegetservicerentorder' is set
        if ($sxapioegetservicerentorder === null || (is_array($sxapioegetservicerentorder) && count($sxapioegetservicerentorder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetservicerentorder when calling sxapioegetservicerentorderPost'
            );
        }

        $resourcePath = '/sxapioegetservicerentorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetservicerentorder)) {
            $_tempBody = $sxapioegetservicerentorder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetshoplistpastsalesPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetshoplistpastsales $sxapioegetshoplistpastsales sxapioegetshoplistpastsales (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioegetshoplistpastsalesResp
     */
    public function sxapioegetshoplistpastsalesPost($sxapioegetshoplistpastsales)
    {
        list($response) = $this->sxapioegetshoplistpastsalesPostWithHttpInfo($sxapioegetshoplistpastsales);
        return $response;
    }

    /**
     * Operation sxapioegetshoplistpastsalesPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetshoplistpastsales $sxapioegetshoplistpastsales (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioegetshoplistpastsalesResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetshoplistpastsalesPostWithHttpInfo($sxapioegetshoplistpastsales)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetshoplistpastsalesResp';
        $request = $this->sxapioegetshoplistpastsalesPostRequest($sxapioegetshoplistpastsales);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioegetshoplistpastsalesResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetshoplistpastsalesPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetshoplistpastsales $sxapioegetshoplistpastsales (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetshoplistpastsalesPostAsync($sxapioegetshoplistpastsales)
    {
        return $this->sxapioegetshoplistpastsalesPostAsyncWithHttpInfo($sxapioegetshoplistpastsales)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetshoplistpastsalesPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetshoplistpastsales $sxapioegetshoplistpastsales (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetshoplistpastsalesPostAsyncWithHttpInfo($sxapioegetshoplistpastsales)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetshoplistpastsalesResp';
        $request = $this->sxapioegetshoplistpastsalesPostRequest($sxapioegetshoplistpastsales);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetshoplistpastsalesPost'
     *
     * @param  \Swagger\Client\Model\Sxapioegetshoplistpastsales $sxapioegetshoplistpastsales (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetshoplistpastsalesPostRequest($sxapioegetshoplistpastsales)
    {
        // verify the required parameter 'sxapioegetshoplistpastsales' is set
        if ($sxapioegetshoplistpastsales === null || (is_array($sxapioegetshoplistpastsales) && count($sxapioegetshoplistpastsales) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetshoplistpastsales when calling sxapioegetshoplistpastsalesPost'
            );
        }

        $resourcePath = '/sxapioegetshoplistpastsales';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetshoplistpastsales)) {
            $_tempBody = $sxapioegetshoplistpastsales;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetsinglebatchorderPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsinglebatchorder $sxapioegetsinglebatchorder sxapioegetsinglebatchorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioegetsinglebatchorderResp
     */
    public function sxapioegetsinglebatchorderPost($sxapioegetsinglebatchorder)
    {
        list($response) = $this->sxapioegetsinglebatchorderPostWithHttpInfo($sxapioegetsinglebatchorder);
        return $response;
    }

    /**
     * Operation sxapioegetsinglebatchorderPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsinglebatchorder $sxapioegetsinglebatchorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioegetsinglebatchorderResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetsinglebatchorderPostWithHttpInfo($sxapioegetsinglebatchorder)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetsinglebatchorderResp';
        $request = $this->sxapioegetsinglebatchorderPostRequest($sxapioegetsinglebatchorder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioegetsinglebatchorderResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetsinglebatchorderPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsinglebatchorder $sxapioegetsinglebatchorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetsinglebatchorderPostAsync($sxapioegetsinglebatchorder)
    {
        return $this->sxapioegetsinglebatchorderPostAsyncWithHttpInfo($sxapioegetsinglebatchorder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetsinglebatchorderPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsinglebatchorder $sxapioegetsinglebatchorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetsinglebatchorderPostAsyncWithHttpInfo($sxapioegetsinglebatchorder)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetsinglebatchorderResp';
        $request = $this->sxapioegetsinglebatchorderPostRequest($sxapioegetsinglebatchorder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetsinglebatchorderPost'
     *
     * @param  \Swagger\Client\Model\Sxapioegetsinglebatchorder $sxapioegetsinglebatchorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetsinglebatchorderPostRequest($sxapioegetsinglebatchorder)
    {
        // verify the required parameter 'sxapioegetsinglebatchorder' is set
        if ($sxapioegetsinglebatchorder === null || (is_array($sxapioegetsinglebatchorder) && count($sxapioegetsinglebatchorder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetsinglebatchorder when calling sxapioegetsinglebatchorderPost'
            );
        }

        $resourcePath = '/sxapioegetsinglebatchorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetsinglebatchorder)) {
            $_tempBody = $sxapioegetsinglebatchorder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetsingleorderPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsingleorder $sxapioegetsingleorder sxapioegetsingleorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioegetsingleorderResp
     */
    public function sxapioegetsingleorderPost($sxapioegetsingleorder)
    {
        list($response) = $this->sxapioegetsingleorderPostWithHttpInfo($sxapioegetsingleorder);
        return $response;
    }

    /**
     * Operation sxapioegetsingleorderPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsingleorder $sxapioegetsingleorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioegetsingleorderResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetsingleorderPostWithHttpInfo($sxapioegetsingleorder)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetsingleorderResp';
        $request = $this->sxapioegetsingleorderPostRequest($sxapioegetsingleorder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioegetsingleorderResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetsingleorderPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsingleorder $sxapioegetsingleorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetsingleorderPostAsync($sxapioegetsingleorder)
    {
        return $this->sxapioegetsingleorderPostAsyncWithHttpInfo($sxapioegetsingleorder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetsingleorderPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsingleorder $sxapioegetsingleorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetsingleorderPostAsyncWithHttpInfo($sxapioegetsingleorder)
    {
        $returnType = '\Swagger\Client\Model\SxapioegetsingleorderResp';
        $request = $this->sxapioegetsingleorderPostRequest($sxapioegetsingleorder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetsingleorderPost'
     *
     * @param  \Swagger\Client\Model\Sxapioegetsingleorder $sxapioegetsingleorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetsingleorderPostRequest($sxapioegetsingleorder)
    {
        // verify the required parameter 'sxapioegetsingleorder' is set
        if ($sxapioegetsingleorder === null || (is_array($sxapioegetsingleorder) && count($sxapioegetsingleorder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetsingleorder when calling sxapioegetsingleorderPost'
            );
        }

        $resourcePath = '/sxapioegetsingleorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetsingleorder)) {
            $_tempBody = $sxapioegetsingleorder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetsingleorderv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsingleorderv2 $sxapioegetsingleorderv2 sxapioegetsingleorderv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioegetsingleorderv2Resp
     */
    public function sxapioegetsingleorderv2Post($sxapioegetsingleorderv2)
    {
        list($response) = $this->sxapioegetsingleorderv2PostWithHttpInfo($sxapioegetsingleorderv2);
        return $response;
    }

    /**
     * Operation sxapioegetsingleorderv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsingleorderv2 $sxapioegetsingleorderv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioegetsingleorderv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetsingleorderv2PostWithHttpInfo($sxapioegetsingleorderv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapioegetsingleorderv2Resp';
        $request = $this->sxapioegetsingleorderv2PostRequest($sxapioegetsingleorderv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioegetsingleorderv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetsingleorderv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsingleorderv2 $sxapioegetsingleorderv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetsingleorderv2PostAsync($sxapioegetsingleorderv2)
    {
        return $this->sxapioegetsingleorderv2PostAsyncWithHttpInfo($sxapioegetsingleorderv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetsingleorderv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsingleorderv2 $sxapioegetsingleorderv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetsingleorderv2PostAsyncWithHttpInfo($sxapioegetsingleorderv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapioegetsingleorderv2Resp';
        $request = $this->sxapioegetsingleorderv2PostRequest($sxapioegetsingleorderv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetsingleorderv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapioegetsingleorderv2 $sxapioegetsingleorderv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetsingleorderv2PostRequest($sxapioegetsingleorderv2)
    {
        // verify the required parameter 'sxapioegetsingleorderv2' is set
        if ($sxapioegetsingleorderv2 === null || (is_array($sxapioegetsingleorderv2) && count($sxapioegetsingleorderv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetsingleorderv2 when calling sxapioegetsingleorderv2Post'
            );
        }

        $resourcePath = '/sxapioegetsingleorderv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetsingleorderv2)) {
            $_tempBody = $sxapioegetsingleorderv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioegetsingleorderv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsingleorderv3 $sxapioegetsingleorderv3 sxapioegetsingleorderv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioegetsingleorderv3Resp
     */
    public function sxapioegetsingleorderv3Post($sxapioegetsingleorderv3)
    {
        list($response) = $this->sxapioegetsingleorderv3PostWithHttpInfo($sxapioegetsingleorderv3);
        return $response;
    }

    /**
     * Operation sxapioegetsingleorderv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsingleorderv3 $sxapioegetsingleorderv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioegetsingleorderv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioegetsingleorderv3PostWithHttpInfo($sxapioegetsingleorderv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapioegetsingleorderv3Resp';
        $request = $this->sxapioegetsingleorderv3PostRequest($sxapioegetsingleorderv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioegetsingleorderv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioegetsingleorderv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsingleorderv3 $sxapioegetsingleorderv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetsingleorderv3PostAsync($sxapioegetsingleorderv3)
    {
        return $this->sxapioegetsingleorderv3PostAsyncWithHttpInfo($sxapioegetsingleorderv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioegetsingleorderv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioegetsingleorderv3 $sxapioegetsingleorderv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioegetsingleorderv3PostAsyncWithHttpInfo($sxapioegetsingleorderv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapioegetsingleorderv3Resp';
        $request = $this->sxapioegetsingleorderv3PostRequest($sxapioegetsingleorderv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioegetsingleorderv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapioegetsingleorderv3 $sxapioegetsingleorderv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioegetsingleorderv3PostRequest($sxapioegetsingleorderv3)
    {
        // verify the required parameter 'sxapioegetsingleorderv3' is set
        if ($sxapioegetsingleorderv3 === null || (is_array($sxapioegetsingleorderv3) && count($sxapioegetsingleorderv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioegetsingleorderv3 when calling sxapioegetsingleorderv3Post'
            );
        }

        $resourcePath = '/sxapioegetsingleorderv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioegetsingleorderv3)) {
            $_tempBody = $sxapioegetsingleorderv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioeheaderupdatePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeheaderupdate $sxapioeheaderupdate sxapioeheaderupdate (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioeheaderupdateResp
     */
    public function sxapioeheaderupdatePost($sxapioeheaderupdate)
    {
        list($response) = $this->sxapioeheaderupdatePostWithHttpInfo($sxapioeheaderupdate);
        return $response;
    }

    /**
     * Operation sxapioeheaderupdatePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeheaderupdate $sxapioeheaderupdate (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioeheaderupdateResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioeheaderupdatePostWithHttpInfo($sxapioeheaderupdate)
    {
        $returnType = '\Swagger\Client\Model\SxapioeheaderupdateResp';
        $request = $this->sxapioeheaderupdatePostRequest($sxapioeheaderupdate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioeheaderupdateResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioeheaderupdatePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeheaderupdate $sxapioeheaderupdate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioeheaderupdatePostAsync($sxapioeheaderupdate)
    {
        return $this->sxapioeheaderupdatePostAsyncWithHttpInfo($sxapioeheaderupdate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioeheaderupdatePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeheaderupdate $sxapioeheaderupdate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioeheaderupdatePostAsyncWithHttpInfo($sxapioeheaderupdate)
    {
        $returnType = '\Swagger\Client\Model\SxapioeheaderupdateResp';
        $request = $this->sxapioeheaderupdatePostRequest($sxapioeheaderupdate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioeheaderupdatePost'
     *
     * @param  \Swagger\Client\Model\Sxapioeheaderupdate $sxapioeheaderupdate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioeheaderupdatePostRequest($sxapioeheaderupdate)
    {
        // verify the required parameter 'sxapioeheaderupdate' is set
        if ($sxapioeheaderupdate === null || (is_array($sxapioeheaderupdate) && count($sxapioeheaderupdate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioeheaderupdate when calling sxapioeheaderupdatePost'
            );
        }

        $resourcePath = '/sxapioeheaderupdate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioeheaderupdate)) {
            $_tempBody = $sxapioeheaderupdate;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioeholdallordersPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeholdallorders $sxapioeholdallorders sxapioeholdallorders (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioeholdallordersResp
     */
    public function sxapioeholdallordersPost($sxapioeholdallorders)
    {
        list($response) = $this->sxapioeholdallordersPostWithHttpInfo($sxapioeholdallorders);
        return $response;
    }

    /**
     * Operation sxapioeholdallordersPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeholdallorders $sxapioeholdallorders (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioeholdallordersResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioeholdallordersPostWithHttpInfo($sxapioeholdallorders)
    {
        $returnType = '\Swagger\Client\Model\SxapioeholdallordersResp';
        $request = $this->sxapioeholdallordersPostRequest($sxapioeholdallorders);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioeholdallordersResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioeholdallordersPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeholdallorders $sxapioeholdallorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioeholdallordersPostAsync($sxapioeholdallorders)
    {
        return $this->sxapioeholdallordersPostAsyncWithHttpInfo($sxapioeholdallorders)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioeholdallordersPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeholdallorders $sxapioeholdallorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioeholdallordersPostAsyncWithHttpInfo($sxapioeholdallorders)
    {
        $returnType = '\Swagger\Client\Model\SxapioeholdallordersResp';
        $request = $this->sxapioeholdallordersPostRequest($sxapioeholdallorders);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioeholdallordersPost'
     *
     * @param  \Swagger\Client\Model\Sxapioeholdallorders $sxapioeholdallorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioeholdallordersPostRequest($sxapioeholdallorders)
    {
        // verify the required parameter 'sxapioeholdallorders' is set
        if ($sxapioeholdallorders === null || (is_array($sxapioeholdallorders) && count($sxapioeholdallorders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioeholdallorders when calling sxapioeholdallordersPost'
            );
        }

        $resourcePath = '/sxapioeholdallorders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioeholdallorders)) {
            $_tempBody = $sxapioeholdallorders;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioeordchgseriallotPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeordchgseriallot $sxapioeordchgseriallot sxapioeordchgseriallot (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioeordchgseriallotResp
     */
    public function sxapioeordchgseriallotPost($sxapioeordchgseriallot)
    {
        list($response) = $this->sxapioeordchgseriallotPostWithHttpInfo($sxapioeordchgseriallot);
        return $response;
    }

    /**
     * Operation sxapioeordchgseriallotPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeordchgseriallot $sxapioeordchgseriallot (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioeordchgseriallotResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioeordchgseriallotPostWithHttpInfo($sxapioeordchgseriallot)
    {
        $returnType = '\Swagger\Client\Model\SxapioeordchgseriallotResp';
        $request = $this->sxapioeordchgseriallotPostRequest($sxapioeordchgseriallot);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioeordchgseriallotResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioeordchgseriallotPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeordchgseriallot $sxapioeordchgseriallot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioeordchgseriallotPostAsync($sxapioeordchgseriallot)
    {
        return $this->sxapioeordchgseriallotPostAsyncWithHttpInfo($sxapioeordchgseriallot)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioeordchgseriallotPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeordchgseriallot $sxapioeordchgseriallot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioeordchgseriallotPostAsyncWithHttpInfo($sxapioeordchgseriallot)
    {
        $returnType = '\Swagger\Client\Model\SxapioeordchgseriallotResp';
        $request = $this->sxapioeordchgseriallotPostRequest($sxapioeordchgseriallot);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioeordchgseriallotPost'
     *
     * @param  \Swagger\Client\Model\Sxapioeordchgseriallot $sxapioeordchgseriallot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioeordchgseriallotPostRequest($sxapioeordchgseriallot)
    {
        // verify the required parameter 'sxapioeordchgseriallot' is set
        if ($sxapioeordchgseriallot === null || (is_array($sxapioeordchgseriallot) && count($sxapioeordchgseriallot) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioeordchgseriallot when calling sxapioeordchgseriallotPost'
            );
        }

        $resourcePath = '/sxapioeordchgseriallot';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioeordchgseriallot)) {
            $_tempBody = $sxapioeordchgseriallot;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioeorderchangePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeorderchange $sxapioeorderchange sxapioeorderchange (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioeorderchangeResp
     */
    public function sxapioeorderchangePost($sxapioeorderchange)
    {
        list($response) = $this->sxapioeorderchangePostWithHttpInfo($sxapioeorderchange);
        return $response;
    }

    /**
     * Operation sxapioeorderchangePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeorderchange $sxapioeorderchange (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioeorderchangeResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioeorderchangePostWithHttpInfo($sxapioeorderchange)
    {
        $returnType = '\Swagger\Client\Model\SxapioeorderchangeResp';
        $request = $this->sxapioeorderchangePostRequest($sxapioeorderchange);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioeorderchangeResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioeorderchangePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeorderchange $sxapioeorderchange (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioeorderchangePostAsync($sxapioeorderchange)
    {
        return $this->sxapioeorderchangePostAsyncWithHttpInfo($sxapioeorderchange)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioeorderchangePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeorderchange $sxapioeorderchange (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioeorderchangePostAsyncWithHttpInfo($sxapioeorderchange)
    {
        $returnType = '\Swagger\Client\Model\SxapioeorderchangeResp';
        $request = $this->sxapioeorderchangePostRequest($sxapioeorderchange);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioeorderchangePost'
     *
     * @param  \Swagger\Client\Model\Sxapioeorderchange $sxapioeorderchange (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioeorderchangePostRequest($sxapioeorderchange)
    {
        // verify the required parameter 'sxapioeorderchange' is set
        if ($sxapioeorderchange === null || (is_array($sxapioeorderchange) && count($sxapioeorderchange) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioeorderchange when calling sxapioeorderchangePost'
            );
        }

        $resourcePath = '/sxapioeorderchange';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioeorderchange)) {
            $_tempBody = $sxapioeorderchange;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioeorderchangev2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeorderchangev2 $sxapioeorderchangev2 sxapioeorderchangev2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioeorderchangev2Resp
     */
    public function sxapioeorderchangev2Post($sxapioeorderchangev2)
    {
        list($response) = $this->sxapioeorderchangev2PostWithHttpInfo($sxapioeorderchangev2);
        return $response;
    }

    /**
     * Operation sxapioeorderchangev2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeorderchangev2 $sxapioeorderchangev2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioeorderchangev2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioeorderchangev2PostWithHttpInfo($sxapioeorderchangev2)
    {
        $returnType = '\Swagger\Client\Model\Sxapioeorderchangev2Resp';
        $request = $this->sxapioeorderchangev2PostRequest($sxapioeorderchangev2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioeorderchangev2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioeorderchangev2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeorderchangev2 $sxapioeorderchangev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioeorderchangev2PostAsync($sxapioeorderchangev2)
    {
        return $this->sxapioeorderchangev2PostAsyncWithHttpInfo($sxapioeorderchangev2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioeorderchangev2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeorderchangev2 $sxapioeorderchangev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioeorderchangev2PostAsyncWithHttpInfo($sxapioeorderchangev2)
    {
        $returnType = '\Swagger\Client\Model\Sxapioeorderchangev2Resp';
        $request = $this->sxapioeorderchangev2PostRequest($sxapioeorderchangev2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioeorderchangev2Post'
     *
     * @param  \Swagger\Client\Model\Sxapioeorderchangev2 $sxapioeorderchangev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioeorderchangev2PostRequest($sxapioeorderchangev2)
    {
        // verify the required parameter 'sxapioeorderchangev2' is set
        if ($sxapioeorderchangev2 === null || (is_array($sxapioeorderchangev2) && count($sxapioeorderchangev2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioeorderchangev2 when calling sxapioeorderchangev2Post'
            );
        }

        $resourcePath = '/sxapioeorderchangev2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioeorderchangev2)) {
            $_tempBody = $sxapioeorderchangev2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioeordercopyconvertPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeordercopyconvert $sxapioeordercopyconvert sxapioeordercopyconvert (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioeordercopyconvertResp
     */
    public function sxapioeordercopyconvertPost($sxapioeordercopyconvert)
    {
        list($response) = $this->sxapioeordercopyconvertPostWithHttpInfo($sxapioeordercopyconvert);
        return $response;
    }

    /**
     * Operation sxapioeordercopyconvertPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeordercopyconvert $sxapioeordercopyconvert (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioeordercopyconvertResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioeordercopyconvertPostWithHttpInfo($sxapioeordercopyconvert)
    {
        $returnType = '\Swagger\Client\Model\SxapioeordercopyconvertResp';
        $request = $this->sxapioeordercopyconvertPostRequest($sxapioeordercopyconvert);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioeordercopyconvertResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioeordercopyconvertPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeordercopyconvert $sxapioeordercopyconvert (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioeordercopyconvertPostAsync($sxapioeordercopyconvert)
    {
        return $this->sxapioeordercopyconvertPostAsyncWithHttpInfo($sxapioeordercopyconvert)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioeordercopyconvertPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeordercopyconvert $sxapioeordercopyconvert (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioeordercopyconvertPostAsyncWithHttpInfo($sxapioeordercopyconvert)
    {
        $returnType = '\Swagger\Client\Model\SxapioeordercopyconvertResp';
        $request = $this->sxapioeordercopyconvertPostRequest($sxapioeordercopyconvert);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioeordercopyconvertPost'
     *
     * @param  \Swagger\Client\Model\Sxapioeordercopyconvert $sxapioeordercopyconvert (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioeordercopyconvertPostRequest($sxapioeordercopyconvert)
    {
        // verify the required parameter 'sxapioeordercopyconvert' is set
        if ($sxapioeordercopyconvert === null || (is_array($sxapioeordercopyconvert) && count($sxapioeordercopyconvert) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioeordercopyconvert when calling sxapioeordercopyconvertPost'
            );
        }

        $resourcePath = '/sxapioeordercopyconvert';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioeordercopyconvert)) {
            $_tempBody = $sxapioeordercopyconvert;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioeorderdeleteorcancelPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeorderdeleteorcancel $sxapioeorderdeleteorcancel sxapioeorderdeleteorcancel (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioeorderdeleteorcancelResp
     */
    public function sxapioeorderdeleteorcancelPost($sxapioeorderdeleteorcancel)
    {
        list($response) = $this->sxapioeorderdeleteorcancelPostWithHttpInfo($sxapioeorderdeleteorcancel);
        return $response;
    }

    /**
     * Operation sxapioeorderdeleteorcancelPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeorderdeleteorcancel $sxapioeorderdeleteorcancel (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioeorderdeleteorcancelResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioeorderdeleteorcancelPostWithHttpInfo($sxapioeorderdeleteorcancel)
    {
        $returnType = '\Swagger\Client\Model\SxapioeorderdeleteorcancelResp';
        $request = $this->sxapioeorderdeleteorcancelPostRequest($sxapioeorderdeleteorcancel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioeorderdeleteorcancelResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioeorderdeleteorcancelPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeorderdeleteorcancel $sxapioeorderdeleteorcancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioeorderdeleteorcancelPostAsync($sxapioeorderdeleteorcancel)
    {
        return $this->sxapioeorderdeleteorcancelPostAsyncWithHttpInfo($sxapioeorderdeleteorcancel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioeorderdeleteorcancelPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeorderdeleteorcancel $sxapioeorderdeleteorcancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioeorderdeleteorcancelPostAsyncWithHttpInfo($sxapioeorderdeleteorcancel)
    {
        $returnType = '\Swagger\Client\Model\SxapioeorderdeleteorcancelResp';
        $request = $this->sxapioeorderdeleteorcancelPostRequest($sxapioeorderdeleteorcancel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioeorderdeleteorcancelPost'
     *
     * @param  \Swagger\Client\Model\Sxapioeorderdeleteorcancel $sxapioeorderdeleteorcancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioeorderdeleteorcancelPostRequest($sxapioeorderdeleteorcancel)
    {
        // verify the required parameter 'sxapioeorderdeleteorcancel' is set
        if ($sxapioeorderdeleteorcancel === null || (is_array($sxapioeorderdeleteorcancel) && count($sxapioeorderdeleteorcancel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioeorderdeleteorcancel when calling sxapioeorderdeleteorcancelPost'
            );
        }

        $resourcePath = '/sxapioeorderdeleteorcancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioeorderdeleteorcancel)) {
            $_tempBody = $sxapioeorderdeleteorcancel;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioeordershipunshipPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeordershipunship $sxapioeordershipunship sxapioeordershipunship (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioeordershipunshipResp
     */
    public function sxapioeordershipunshipPost($sxapioeordershipunship)
    {
        list($response) = $this->sxapioeordershipunshipPostWithHttpInfo($sxapioeordershipunship);
        return $response;
    }

    /**
     * Operation sxapioeordershipunshipPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeordershipunship $sxapioeordershipunship (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioeordershipunshipResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioeordershipunshipPostWithHttpInfo($sxapioeordershipunship)
    {
        $returnType = '\Swagger\Client\Model\SxapioeordershipunshipResp';
        $request = $this->sxapioeordershipunshipPostRequest($sxapioeordershipunship);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioeordershipunshipResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioeordershipunshipPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeordershipunship $sxapioeordershipunship (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioeordershipunshipPostAsync($sxapioeordershipunship)
    {
        return $this->sxapioeordershipunshipPostAsyncWithHttpInfo($sxapioeordershipunship)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioeordershipunshipPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioeordershipunship $sxapioeordershipunship (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioeordershipunshipPostAsyncWithHttpInfo($sxapioeordershipunship)
    {
        $returnType = '\Swagger\Client\Model\SxapioeordershipunshipResp';
        $request = $this->sxapioeordershipunshipPostRequest($sxapioeordershipunship);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioeordershipunshipPost'
     *
     * @param  \Swagger\Client\Model\Sxapioeordershipunship $sxapioeordershipunship (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioeordershipunshipPostRequest($sxapioeordershipunship)
    {
        // verify the required parameter 'sxapioeordershipunship' is set
        if ($sxapioeordershipunship === null || (is_array($sxapioeordershipunship) && count($sxapioeordershipunship) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioeordershipunship when calling sxapioeordershipunshipPost'
            );
        }

        $resourcePath = '/sxapioeordershipunship';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioeordershipunship)) {
            $_tempBody = $sxapioeordershipunship;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioepreauthcreditcardPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepreauthcreditcard $sxapioepreauthcreditcard sxapioepreauthcreditcard (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioepreauthcreditcardResp
     */
    public function sxapioepreauthcreditcardPost($sxapioepreauthcreditcard)
    {
        list($response) = $this->sxapioepreauthcreditcardPostWithHttpInfo($sxapioepreauthcreditcard);
        return $response;
    }

    /**
     * Operation sxapioepreauthcreditcardPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepreauthcreditcard $sxapioepreauthcreditcard (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioepreauthcreditcardResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioepreauthcreditcardPostWithHttpInfo($sxapioepreauthcreditcard)
    {
        $returnType = '\Swagger\Client\Model\SxapioepreauthcreditcardResp';
        $request = $this->sxapioepreauthcreditcardPostRequest($sxapioepreauthcreditcard);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioepreauthcreditcardResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioepreauthcreditcardPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepreauthcreditcard $sxapioepreauthcreditcard (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepreauthcreditcardPostAsync($sxapioepreauthcreditcard)
    {
        return $this->sxapioepreauthcreditcardPostAsyncWithHttpInfo($sxapioepreauthcreditcard)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioepreauthcreditcardPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepreauthcreditcard $sxapioepreauthcreditcard (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepreauthcreditcardPostAsyncWithHttpInfo($sxapioepreauthcreditcard)
    {
        $returnType = '\Swagger\Client\Model\SxapioepreauthcreditcardResp';
        $request = $this->sxapioepreauthcreditcardPostRequest($sxapioepreauthcreditcard);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioepreauthcreditcardPost'
     *
     * @param  \Swagger\Client\Model\Sxapioepreauthcreditcard $sxapioepreauthcreditcard (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioepreauthcreditcardPostRequest($sxapioepreauthcreditcard)
    {
        // verify the required parameter 'sxapioepreauthcreditcard' is set
        if ($sxapioepreauthcreditcard === null || (is_array($sxapioepreauthcreditcard) && count($sxapioepreauthcreditcard) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioepreauthcreditcard when calling sxapioepreauthcreditcardPost'
            );
        }

        $resourcePath = '/sxapioepreauthcreditcard';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioepreauthcreditcard)) {
            $_tempBody = $sxapioepreauthcreditcard;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioepricingPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricing $sxapioepricing sxapioepricing (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioepricingResp
     */
    public function sxapioepricingPost($sxapioepricing)
    {
        list($response) = $this->sxapioepricingPostWithHttpInfo($sxapioepricing);
        return $response;
    }

    /**
     * Operation sxapioepricingPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricing $sxapioepricing (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioepricingResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioepricingPostWithHttpInfo($sxapioepricing)
    {
        $returnType = '\Swagger\Client\Model\SxapioepricingResp';
        $request = $this->sxapioepricingPostRequest($sxapioepricing);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioepricingResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioepricingPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricing $sxapioepricing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingPostAsync($sxapioepricing)
    {
        return $this->sxapioepricingPostAsyncWithHttpInfo($sxapioepricing)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioepricingPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricing $sxapioepricing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingPostAsyncWithHttpInfo($sxapioepricing)
    {
        $returnType = '\Swagger\Client\Model\SxapioepricingResp';
        $request = $this->sxapioepricingPostRequest($sxapioepricing);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioepricingPost'
     *
     * @param  \Swagger\Client\Model\Sxapioepricing $sxapioepricing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioepricingPostRequest($sxapioepricing)
    {
        // verify the required parameter 'sxapioepricing' is set
        if ($sxapioepricing === null || (is_array($sxapioepricing) && count($sxapioepricing) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioepricing when calling sxapioepricingPost'
            );
        }

        $resourcePath = '/sxapioepricing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioepricing)) {
            $_tempBody = $sxapioepricing;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioepricingexternalPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingexternal $sxapioepricingexternal sxapioepricingexternal (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioepricingexternalResp
     */
    public function sxapioepricingexternalPost($sxapioepricingexternal)
    {
        list($response) = $this->sxapioepricingexternalPostWithHttpInfo($sxapioepricingexternal);
        return $response;
    }

    /**
     * Operation sxapioepricingexternalPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingexternal $sxapioepricingexternal (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioepricingexternalResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioepricingexternalPostWithHttpInfo($sxapioepricingexternal)
    {
        $returnType = '\Swagger\Client\Model\SxapioepricingexternalResp';
        $request = $this->sxapioepricingexternalPostRequest($sxapioepricingexternal);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioepricingexternalResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioepricingexternalPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingexternal $sxapioepricingexternal (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingexternalPostAsync($sxapioepricingexternal)
    {
        return $this->sxapioepricingexternalPostAsyncWithHttpInfo($sxapioepricingexternal)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioepricingexternalPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingexternal $sxapioepricingexternal (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingexternalPostAsyncWithHttpInfo($sxapioepricingexternal)
    {
        $returnType = '\Swagger\Client\Model\SxapioepricingexternalResp';
        $request = $this->sxapioepricingexternalPostRequest($sxapioepricingexternal);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioepricingexternalPost'
     *
     * @param  \Swagger\Client\Model\Sxapioepricingexternal $sxapioepricingexternal (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioepricingexternalPostRequest($sxapioepricingexternal)
    {
        // verify the required parameter 'sxapioepricingexternal' is set
        if ($sxapioepricingexternal === null || (is_array($sxapioepricingexternal) && count($sxapioepricingexternal) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioepricingexternal when calling sxapioepricingexternalPost'
            );
        }

        $resourcePath = '/sxapioepricingexternal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioepricingexternal)) {
            $_tempBody = $sxapioepricingexternal;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioepricingmultiplePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiple $sxapioepricingmultiple sxapioepricingmultiple (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioepricingmultipleResp
     */
    public function sxapioepricingmultiplePost($sxapioepricingmultiple)
    {
        list($response) = $this->sxapioepricingmultiplePostWithHttpInfo($sxapioepricingmultiple);
        return $response;
    }

    /**
     * Operation sxapioepricingmultiplePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiple $sxapioepricingmultiple (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioepricingmultipleResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioepricingmultiplePostWithHttpInfo($sxapioepricingmultiple)
    {
        $returnType = '\Swagger\Client\Model\SxapioepricingmultipleResp';
        $request = $this->sxapioepricingmultiplePostRequest($sxapioepricingmultiple);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioepricingmultipleResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioepricingmultiplePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiple $sxapioepricingmultiple (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingmultiplePostAsync($sxapioepricingmultiple)
    {
        return $this->sxapioepricingmultiplePostAsyncWithHttpInfo($sxapioepricingmultiple)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioepricingmultiplePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiple $sxapioepricingmultiple (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingmultiplePostAsyncWithHttpInfo($sxapioepricingmultiple)
    {
        $returnType = '\Swagger\Client\Model\SxapioepricingmultipleResp';
        $request = $this->sxapioepricingmultiplePostRequest($sxapioepricingmultiple);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioepricingmultiplePost'
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiple $sxapioepricingmultiple (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioepricingmultiplePostRequest($sxapioepricingmultiple)
    {
        // verify the required parameter 'sxapioepricingmultiple' is set
        if ($sxapioepricingmultiple === null || (is_array($sxapioepricingmultiple) && count($sxapioepricingmultiple) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioepricingmultiple when calling sxapioepricingmultiplePost'
            );
        }

        $resourcePath = '/sxapioepricingmultiple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioepricingmultiple)) {
            $_tempBody = $sxapioepricingmultiple;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioepricingmultipleexternalPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultipleexternal $sxapioepricingmultipleexternal sxapioepricingmultipleexternal (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioepricingmultipleexternalResp
     */
    public function sxapioepricingmultipleexternalPost($sxapioepricingmultipleexternal)
    {
        list($response) = $this->sxapioepricingmultipleexternalPostWithHttpInfo($sxapioepricingmultipleexternal);
        return $response;
    }

    /**
     * Operation sxapioepricingmultipleexternalPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultipleexternal $sxapioepricingmultipleexternal (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioepricingmultipleexternalResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioepricingmultipleexternalPostWithHttpInfo($sxapioepricingmultipleexternal)
    {
        $returnType = '\Swagger\Client\Model\SxapioepricingmultipleexternalResp';
        $request = $this->sxapioepricingmultipleexternalPostRequest($sxapioepricingmultipleexternal);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioepricingmultipleexternalResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioepricingmultipleexternalPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultipleexternal $sxapioepricingmultipleexternal (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingmultipleexternalPostAsync($sxapioepricingmultipleexternal)
    {
        return $this->sxapioepricingmultipleexternalPostAsyncWithHttpInfo($sxapioepricingmultipleexternal)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioepricingmultipleexternalPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultipleexternal $sxapioepricingmultipleexternal (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingmultipleexternalPostAsyncWithHttpInfo($sxapioepricingmultipleexternal)
    {
        $returnType = '\Swagger\Client\Model\SxapioepricingmultipleexternalResp';
        $request = $this->sxapioepricingmultipleexternalPostRequest($sxapioepricingmultipleexternal);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioepricingmultipleexternalPost'
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultipleexternal $sxapioepricingmultipleexternal (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioepricingmultipleexternalPostRequest($sxapioepricingmultipleexternal)
    {
        // verify the required parameter 'sxapioepricingmultipleexternal' is set
        if ($sxapioepricingmultipleexternal === null || (is_array($sxapioepricingmultipleexternal) && count($sxapioepricingmultipleexternal) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioepricingmultipleexternal when calling sxapioepricingmultipleexternalPost'
            );
        }

        $resourcePath = '/sxapioepricingmultipleexternal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioepricingmultipleexternal)) {
            $_tempBody = $sxapioepricingmultipleexternal;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioepricingmultiplev2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev2 $sxapioepricingmultiplev2 sxapioepricingmultiplev2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioepricingmultiplev2Resp
     */
    public function sxapioepricingmultiplev2Post($sxapioepricingmultiplev2)
    {
        list($response) = $this->sxapioepricingmultiplev2PostWithHttpInfo($sxapioepricingmultiplev2);
        return $response;
    }

    /**
     * Operation sxapioepricingmultiplev2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev2 $sxapioepricingmultiplev2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioepricingmultiplev2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioepricingmultiplev2PostWithHttpInfo($sxapioepricingmultiplev2)
    {
        $returnType = '\Swagger\Client\Model\Sxapioepricingmultiplev2Resp';
        $request = $this->sxapioepricingmultiplev2PostRequest($sxapioepricingmultiplev2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioepricingmultiplev2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioepricingmultiplev2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev2 $sxapioepricingmultiplev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingmultiplev2PostAsync($sxapioepricingmultiplev2)
    {
        return $this->sxapioepricingmultiplev2PostAsyncWithHttpInfo($sxapioepricingmultiplev2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioepricingmultiplev2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev2 $sxapioepricingmultiplev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingmultiplev2PostAsyncWithHttpInfo($sxapioepricingmultiplev2)
    {
        $returnType = '\Swagger\Client\Model\Sxapioepricingmultiplev2Resp';
        $request = $this->sxapioepricingmultiplev2PostRequest($sxapioepricingmultiplev2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioepricingmultiplev2Post'
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev2 $sxapioepricingmultiplev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioepricingmultiplev2PostRequest($sxapioepricingmultiplev2)
    {
        // verify the required parameter 'sxapioepricingmultiplev2' is set
        if ($sxapioepricingmultiplev2 === null || (is_array($sxapioepricingmultiplev2) && count($sxapioepricingmultiplev2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioepricingmultiplev2 when calling sxapioepricingmultiplev2Post'
            );
        }

        $resourcePath = '/sxapioepricingmultiplev2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioepricingmultiplev2)) {
            $_tempBody = $sxapioepricingmultiplev2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioepricingmultiplev3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev3 $sxapioepricingmultiplev3 sxapioepricingmultiplev3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioepricingmultiplev3Resp
     */
    public function sxapioepricingmultiplev3Post($sxapioepricingmultiplev3)
    {
        list($response) = $this->sxapioepricingmultiplev3PostWithHttpInfo($sxapioepricingmultiplev3);
        return $response;
    }

    /**
     * Operation sxapioepricingmultiplev3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev3 $sxapioepricingmultiplev3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioepricingmultiplev3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioepricingmultiplev3PostWithHttpInfo($sxapioepricingmultiplev3)
    {
        $returnType = '\Swagger\Client\Model\Sxapioepricingmultiplev3Resp';
        $request = $this->sxapioepricingmultiplev3PostRequest($sxapioepricingmultiplev3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioepricingmultiplev3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioepricingmultiplev3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev3 $sxapioepricingmultiplev3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingmultiplev3PostAsync($sxapioepricingmultiplev3)
    {
        return $this->sxapioepricingmultiplev3PostAsyncWithHttpInfo($sxapioepricingmultiplev3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioepricingmultiplev3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev3 $sxapioepricingmultiplev3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingmultiplev3PostAsyncWithHttpInfo($sxapioepricingmultiplev3)
    {
        $returnType = '\Swagger\Client\Model\Sxapioepricingmultiplev3Resp';
        $request = $this->sxapioepricingmultiplev3PostRequest($sxapioepricingmultiplev3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioepricingmultiplev3Post'
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev3 $sxapioepricingmultiplev3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioepricingmultiplev3PostRequest($sxapioepricingmultiplev3)
    {
        // verify the required parameter 'sxapioepricingmultiplev3' is set
        if ($sxapioepricingmultiplev3 === null || (is_array($sxapioepricingmultiplev3) && count($sxapioepricingmultiplev3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioepricingmultiplev3 when calling sxapioepricingmultiplev3Post'
            );
        }

        $resourcePath = '/sxapioepricingmultiplev3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioepricingmultiplev3)) {
            $_tempBody = $sxapioepricingmultiplev3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioepricingmultiplev4Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev4 $sxapioepricingmultiplev4 sxapioepricingmultiplev4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioepricingmultiplev4Resp
     */
    public function sxapioepricingmultiplev4Post($sxapioepricingmultiplev4)
    {
        list($response) = $this->sxapioepricingmultiplev4PostWithHttpInfo($sxapioepricingmultiplev4);
        return $response;
    }

    /**
     * Operation sxapioepricingmultiplev4PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev4 $sxapioepricingmultiplev4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioepricingmultiplev4Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioepricingmultiplev4PostWithHttpInfo($sxapioepricingmultiplev4)
    {
        $returnType = '\Swagger\Client\Model\Sxapioepricingmultiplev4Resp';
        $request = $this->sxapioepricingmultiplev4PostRequest($sxapioepricingmultiplev4);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioepricingmultiplev4Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioepricingmultiplev4PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev4 $sxapioepricingmultiplev4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingmultiplev4PostAsync($sxapioepricingmultiplev4)
    {
        return $this->sxapioepricingmultiplev4PostAsyncWithHttpInfo($sxapioepricingmultiplev4)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioepricingmultiplev4PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev4 $sxapioepricingmultiplev4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingmultiplev4PostAsyncWithHttpInfo($sxapioepricingmultiplev4)
    {
        $returnType = '\Swagger\Client\Model\Sxapioepricingmultiplev4Resp';
        $request = $this->sxapioepricingmultiplev4PostRequest($sxapioepricingmultiplev4);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioepricingmultiplev4Post'
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev4 $sxapioepricingmultiplev4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioepricingmultiplev4PostRequest($sxapioepricingmultiplev4)
    {
        // verify the required parameter 'sxapioepricingmultiplev4' is set
        if ($sxapioepricingmultiplev4 === null || (is_array($sxapioepricingmultiplev4) && count($sxapioepricingmultiplev4) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioepricingmultiplev4 when calling sxapioepricingmultiplev4Post'
            );
        }

        $resourcePath = '/sxapioepricingmultiplev4';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioepricingmultiplev4)) {
            $_tempBody = $sxapioepricingmultiplev4;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioepricingmultiplev5Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev5 $sxapioepricingmultiplev5 sxapioepricingmultiplev5 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioepricingmultiplev5Resp
     */
    public function sxapioepricingmultiplev5Post($sxapioepricingmultiplev5)
    {
        list($response) = $this->sxapioepricingmultiplev5PostWithHttpInfo($sxapioepricingmultiplev5);
        return $response;
    }

    /**
     * Operation sxapioepricingmultiplev5PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev5 $sxapioepricingmultiplev5 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioepricingmultiplev5Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioepricingmultiplev5PostWithHttpInfo($sxapioepricingmultiplev5)
    {
        $returnType = '\Swagger\Client\Model\Sxapioepricingmultiplev5Resp';
        $request = $this->sxapioepricingmultiplev5PostRequest($sxapioepricingmultiplev5);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioepricingmultiplev5Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioepricingmultiplev5PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev5 $sxapioepricingmultiplev5 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingmultiplev5PostAsync($sxapioepricingmultiplev5)
    {
        return $this->sxapioepricingmultiplev5PostAsyncWithHttpInfo($sxapioepricingmultiplev5)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioepricingmultiplev5PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev5 $sxapioepricingmultiplev5 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingmultiplev5PostAsyncWithHttpInfo($sxapioepricingmultiplev5)
    {
        $returnType = '\Swagger\Client\Model\Sxapioepricingmultiplev5Resp';
        $request = $this->sxapioepricingmultiplev5PostRequest($sxapioepricingmultiplev5);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioepricingmultiplev5Post'
     *
     * @param  \Swagger\Client\Model\Sxapioepricingmultiplev5 $sxapioepricingmultiplev5 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioepricingmultiplev5PostRequest($sxapioepricingmultiplev5)
    {
        // verify the required parameter 'sxapioepricingmultiplev5' is set
        if ($sxapioepricingmultiplev5 === null || (is_array($sxapioepricingmultiplev5) && count($sxapioepricingmultiplev5) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioepricingmultiplev5 when calling sxapioepricingmultiplev5Post'
            );
        }

        $resourcePath = '/sxapioepricingmultiplev5';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioepricingmultiplev5)) {
            $_tempBody = $sxapioepricingmultiplev5;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioepricingv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv2 $sxapioepricingv2 sxapioepricingv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioepricingv2Resp
     */
    public function sxapioepricingv2Post($sxapioepricingv2)
    {
        list($response) = $this->sxapioepricingv2PostWithHttpInfo($sxapioepricingv2);
        return $response;
    }

    /**
     * Operation sxapioepricingv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv2 $sxapioepricingv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioepricingv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioepricingv2PostWithHttpInfo($sxapioepricingv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapioepricingv2Resp';
        $request = $this->sxapioepricingv2PostRequest($sxapioepricingv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioepricingv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioepricingv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv2 $sxapioepricingv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingv2PostAsync($sxapioepricingv2)
    {
        return $this->sxapioepricingv2PostAsyncWithHttpInfo($sxapioepricingv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioepricingv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv2 $sxapioepricingv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingv2PostAsyncWithHttpInfo($sxapioepricingv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapioepricingv2Resp';
        $request = $this->sxapioepricingv2PostRequest($sxapioepricingv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioepricingv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv2 $sxapioepricingv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioepricingv2PostRequest($sxapioepricingv2)
    {
        // verify the required parameter 'sxapioepricingv2' is set
        if ($sxapioepricingv2 === null || (is_array($sxapioepricingv2) && count($sxapioepricingv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioepricingv2 when calling sxapioepricingv2Post'
            );
        }

        $resourcePath = '/sxapioepricingv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioepricingv2)) {
            $_tempBody = $sxapioepricingv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioepricingv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv3 $sxapioepricingv3 sxapioepricingv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioepricingv3Resp
     */
    public function sxapioepricingv3Post($sxapioepricingv3)
    {
        list($response) = $this->sxapioepricingv3PostWithHttpInfo($sxapioepricingv3);
        return $response;
    }

    /**
     * Operation sxapioepricingv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv3 $sxapioepricingv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioepricingv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioepricingv3PostWithHttpInfo($sxapioepricingv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapioepricingv3Resp';
        $request = $this->sxapioepricingv3PostRequest($sxapioepricingv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioepricingv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioepricingv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv3 $sxapioepricingv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingv3PostAsync($sxapioepricingv3)
    {
        return $this->sxapioepricingv3PostAsyncWithHttpInfo($sxapioepricingv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioepricingv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv3 $sxapioepricingv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingv3PostAsyncWithHttpInfo($sxapioepricingv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapioepricingv3Resp';
        $request = $this->sxapioepricingv3PostRequest($sxapioepricingv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioepricingv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv3 $sxapioepricingv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioepricingv3PostRequest($sxapioepricingv3)
    {
        // verify the required parameter 'sxapioepricingv3' is set
        if ($sxapioepricingv3 === null || (is_array($sxapioepricingv3) && count($sxapioepricingv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioepricingv3 when calling sxapioepricingv3Post'
            );
        }

        $resourcePath = '/sxapioepricingv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioepricingv3)) {
            $_tempBody = $sxapioepricingv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioepricingv4Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv4 $sxapioepricingv4 sxapioepricingv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioepricingv4Resp
     */
    public function sxapioepricingv4Post($sxapioepricingv4)
    {
        list($response) = $this->sxapioepricingv4PostWithHttpInfo($sxapioepricingv4);
        return $response;
    }

    /**
     * Operation sxapioepricingv4PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv4 $sxapioepricingv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioepricingv4Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioepricingv4PostWithHttpInfo($sxapioepricingv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapioepricingv4Resp';
        $request = $this->sxapioepricingv4PostRequest($sxapioepricingv4);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioepricingv4Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioepricingv4PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv4 $sxapioepricingv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingv4PostAsync($sxapioepricingv4)
    {
        return $this->sxapioepricingv4PostAsyncWithHttpInfo($sxapioepricingv4)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioepricingv4PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv4 $sxapioepricingv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingv4PostAsyncWithHttpInfo($sxapioepricingv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapioepricingv4Resp';
        $request = $this->sxapioepricingv4PostRequest($sxapioepricingv4);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioepricingv4Post'
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv4 $sxapioepricingv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioepricingv4PostRequest($sxapioepricingv4)
    {
        // verify the required parameter 'sxapioepricingv4' is set
        if ($sxapioepricingv4 === null || (is_array($sxapioepricingv4) && count($sxapioepricingv4) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioepricingv4 when calling sxapioepricingv4Post'
            );
        }

        $resourcePath = '/sxapioepricingv4';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioepricingv4)) {
            $_tempBody = $sxapioepricingv4;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioepricingv5Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv5 $sxapioepricingv5 sxapioepricingv5 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapioepricingv5Resp
     */
    public function sxapioepricingv5Post($sxapioepricingv5)
    {
        list($response) = $this->sxapioepricingv5PostWithHttpInfo($sxapioepricingv5);
        return $response;
    }

    /**
     * Operation sxapioepricingv5PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv5 $sxapioepricingv5 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapioepricingv5Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioepricingv5PostWithHttpInfo($sxapioepricingv5)
    {
        $returnType = '\Swagger\Client\Model\Sxapioepricingv5Resp';
        $request = $this->sxapioepricingv5PostRequest($sxapioepricingv5);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapioepricingv5Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioepricingv5PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv5 $sxapioepricingv5 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingv5PostAsync($sxapioepricingv5)
    {
        return $this->sxapioepricingv5PostAsyncWithHttpInfo($sxapioepricingv5)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioepricingv5PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv5 $sxapioepricingv5 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioepricingv5PostAsyncWithHttpInfo($sxapioepricingv5)
    {
        $returnType = '\Swagger\Client\Model\Sxapioepricingv5Resp';
        $request = $this->sxapioepricingv5PostRequest($sxapioepricingv5);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioepricingv5Post'
     *
     * @param  \Swagger\Client\Model\Sxapioepricingv5 $sxapioepricingv5 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioepricingv5PostRequest($sxapioepricingv5)
    {
        // verify the required parameter 'sxapioepricingv5' is set
        if ($sxapioepricingv5 === null || (is_array($sxapioepricingv5) && count($sxapioepricingv5) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioepricingv5 when calling sxapioepricingv5Post'
            );
        }

        $resourcePath = '/sxapioepricingv5';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioepricingv5)) {
            $_tempBody = $sxapioepricingv5;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioereceiveonaccountPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioereceiveonaccount $sxapioereceiveonaccount sxapioereceiveonaccount (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioereceiveonaccountResp
     */
    public function sxapioereceiveonaccountPost($sxapioereceiveonaccount)
    {
        list($response) = $this->sxapioereceiveonaccountPostWithHttpInfo($sxapioereceiveonaccount);
        return $response;
    }

    /**
     * Operation sxapioereceiveonaccountPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioereceiveonaccount $sxapioereceiveonaccount (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioereceiveonaccountResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioereceiveonaccountPostWithHttpInfo($sxapioereceiveonaccount)
    {
        $returnType = '\Swagger\Client\Model\SxapioereceiveonaccountResp';
        $request = $this->sxapioereceiveonaccountPostRequest($sxapioereceiveonaccount);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioereceiveonaccountResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioereceiveonaccountPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioereceiveonaccount $sxapioereceiveonaccount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioereceiveonaccountPostAsync($sxapioereceiveonaccount)
    {
        return $this->sxapioereceiveonaccountPostAsyncWithHttpInfo($sxapioereceiveonaccount)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioereceiveonaccountPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioereceiveonaccount $sxapioereceiveonaccount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioereceiveonaccountPostAsyncWithHttpInfo($sxapioereceiveonaccount)
    {
        $returnType = '\Swagger\Client\Model\SxapioereceiveonaccountResp';
        $request = $this->sxapioereceiveonaccountPostRequest($sxapioereceiveonaccount);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioereceiveonaccountPost'
     *
     * @param  \Swagger\Client\Model\Sxapioereceiveonaccount $sxapioereceiveonaccount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioereceiveonaccountPostRequest($sxapioereceiveonaccount)
    {
        // verify the required parameter 'sxapioereceiveonaccount' is set
        if ($sxapioereceiveonaccount === null || (is_array($sxapioereceiveonaccount) && count($sxapioereceiveonaccount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioereceiveonaccount when calling sxapioereceiveonaccountPost'
            );
        }

        $resourcePath = '/sxapioereceiveonaccount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioereceiveonaccount)) {
            $_tempBody = $sxapioereceiveonaccount;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapioereleaseallordersPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioereleaseallorders $sxapioereleaseallorders sxapioereleaseallorders (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapioereleaseallordersResp
     */
    public function sxapioereleaseallordersPost($sxapioereleaseallorders)
    {
        list($response) = $this->sxapioereleaseallordersPostWithHttpInfo($sxapioereleaseallorders);
        return $response;
    }

    /**
     * Operation sxapioereleaseallordersPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioereleaseallorders $sxapioereleaseallorders (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapioereleaseallordersResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapioereleaseallordersPostWithHttpInfo($sxapioereleaseallorders)
    {
        $returnType = '\Swagger\Client\Model\SxapioereleaseallordersResp';
        $request = $this->sxapioereleaseallordersPostRequest($sxapioereleaseallorders);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapioereleaseallordersResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapioereleaseallordersPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioereleaseallorders $sxapioereleaseallorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioereleaseallordersPostAsync($sxapioereleaseallorders)
    {
        return $this->sxapioereleaseallordersPostAsyncWithHttpInfo($sxapioereleaseallorders)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapioereleaseallordersPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapioereleaseallorders $sxapioereleaseallorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapioereleaseallordersPostAsyncWithHttpInfo($sxapioereleaseallorders)
    {
        $returnType = '\Swagger\Client\Model\SxapioereleaseallordersResp';
        $request = $this->sxapioereleaseallordersPostRequest($sxapioereleaseallorders);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapioereleaseallordersPost'
     *
     * @param  \Swagger\Client\Model\Sxapioereleaseallorders $sxapioereleaseallorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapioereleaseallordersPostRequest($sxapioereleaseallorders)
    {
        // verify the required parameter 'sxapioereleaseallorders' is set
        if ($sxapioereleaseallorders === null || (is_array($sxapioereleaseallorders) && count($sxapioereleaseallorders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapioereleaseallorders when calling sxapioereleaseallordersPost'
            );
        }

        $resourcePath = '/sxapioereleaseallorders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapioereleaseallorders)) {
            $_tempBody = $sxapioereleaseallorders;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipdequatepricingPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdequatepricing $sxapipdequatepricing sxapipdequatepricing (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapipdequatepricingResp
     */
    public function sxapipdequatepricingPost($sxapipdequatepricing)
    {
        list($response) = $this->sxapipdequatepricingPostWithHttpInfo($sxapipdequatepricing);
        return $response;
    }

    /**
     * Operation sxapipdequatepricingPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdequatepricing $sxapipdequatepricing (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapipdequatepricingResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipdequatepricingPostWithHttpInfo($sxapipdequatepricing)
    {
        $returnType = '\Swagger\Client\Model\SxapipdequatepricingResp';
        $request = $this->sxapipdequatepricingPostRequest($sxapipdequatepricing);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapipdequatepricingResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipdequatepricingPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdequatepricing $sxapipdequatepricing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipdequatepricingPostAsync($sxapipdequatepricing)
    {
        return $this->sxapipdequatepricingPostAsyncWithHttpInfo($sxapipdequatepricing)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipdequatepricingPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdequatepricing $sxapipdequatepricing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipdequatepricingPostAsyncWithHttpInfo($sxapipdequatepricing)
    {
        $returnType = '\Swagger\Client\Model\SxapipdequatepricingResp';
        $request = $this->sxapipdequatepricingPostRequest($sxapipdequatepricing);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipdequatepricingPost'
     *
     * @param  \Swagger\Client\Model\Sxapipdequatepricing $sxapipdequatepricing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipdequatepricingPostRequest($sxapipdequatepricing)
    {
        // verify the required parameter 'sxapipdequatepricing' is set
        if ($sxapipdequatepricing === null || (is_array($sxapipdequatepricing) && count($sxapipdequatepricing) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipdequatepricing when calling sxapipdequatepricingPost'
            );
        }

        $resourcePath = '/sxapipdequatepricing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipdequatepricing)) {
            $_tempBody = $sxapipdequatepricing;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipdequatepricingtotalsPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdequatepricingtotals $sxapipdequatepricingtotals sxapipdequatepricingtotals (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapipdequatepricingtotalsResp
     */
    public function sxapipdequatepricingtotalsPost($sxapipdequatepricingtotals)
    {
        list($response) = $this->sxapipdequatepricingtotalsPostWithHttpInfo($sxapipdequatepricingtotals);
        return $response;
    }

    /**
     * Operation sxapipdequatepricingtotalsPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdequatepricingtotals $sxapipdequatepricingtotals (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapipdequatepricingtotalsResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipdequatepricingtotalsPostWithHttpInfo($sxapipdequatepricingtotals)
    {
        $returnType = '\Swagger\Client\Model\SxapipdequatepricingtotalsResp';
        $request = $this->sxapipdequatepricingtotalsPostRequest($sxapipdequatepricingtotals);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapipdequatepricingtotalsResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipdequatepricingtotalsPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdequatepricingtotals $sxapipdequatepricingtotals (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipdequatepricingtotalsPostAsync($sxapipdequatepricingtotals)
    {
        return $this->sxapipdequatepricingtotalsPostAsyncWithHttpInfo($sxapipdequatepricingtotals)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipdequatepricingtotalsPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdequatepricingtotals $sxapipdequatepricingtotals (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipdequatepricingtotalsPostAsyncWithHttpInfo($sxapipdequatepricingtotals)
    {
        $returnType = '\Swagger\Client\Model\SxapipdequatepricingtotalsResp';
        $request = $this->sxapipdequatepricingtotalsPostRequest($sxapipdequatepricingtotals);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipdequatepricingtotalsPost'
     *
     * @param  \Swagger\Client\Model\Sxapipdequatepricingtotals $sxapipdequatepricingtotals (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipdequatepricingtotalsPostRequest($sxapipdequatepricingtotals)
    {
        // verify the required parameter 'sxapipdequatepricingtotals' is set
        if ($sxapipdequatepricingtotals === null || (is_array($sxapipdequatepricingtotals) && count($sxapipdequatepricingtotals) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipdequatepricingtotals when calling sxapipdequatepricingtotalsPost'
            );
        }

        $resourcePath = '/sxapipdequatepricingtotals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipdequatepricingtotals)) {
            $_tempBody = $sxapipdequatepricingtotals;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipdpricesheetmntPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdpricesheetmnt $sxapipdpricesheetmnt sxapipdpricesheetmnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapipdpricesheetmntResp
     */
    public function sxapipdpricesheetmntPost($sxapipdpricesheetmnt)
    {
        list($response) = $this->sxapipdpricesheetmntPostWithHttpInfo($sxapipdpricesheetmnt);
        return $response;
    }

    /**
     * Operation sxapipdpricesheetmntPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdpricesheetmnt $sxapipdpricesheetmnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapipdpricesheetmntResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipdpricesheetmntPostWithHttpInfo($sxapipdpricesheetmnt)
    {
        $returnType = '\Swagger\Client\Model\SxapipdpricesheetmntResp';
        $request = $this->sxapipdpricesheetmntPostRequest($sxapipdpricesheetmnt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapipdpricesheetmntResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipdpricesheetmntPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdpricesheetmnt $sxapipdpricesheetmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipdpricesheetmntPostAsync($sxapipdpricesheetmnt)
    {
        return $this->sxapipdpricesheetmntPostAsyncWithHttpInfo($sxapipdpricesheetmnt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipdpricesheetmntPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdpricesheetmnt $sxapipdpricesheetmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipdpricesheetmntPostAsyncWithHttpInfo($sxapipdpricesheetmnt)
    {
        $returnType = '\Swagger\Client\Model\SxapipdpricesheetmntResp';
        $request = $this->sxapipdpricesheetmntPostRequest($sxapipdpricesheetmnt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipdpricesheetmntPost'
     *
     * @param  \Swagger\Client\Model\Sxapipdpricesheetmnt $sxapipdpricesheetmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipdpricesheetmntPostRequest($sxapipdpricesheetmnt)
    {
        // verify the required parameter 'sxapipdpricesheetmnt' is set
        if ($sxapipdpricesheetmnt === null || (is_array($sxapipdpricesheetmnt) && count($sxapipdpricesheetmnt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipdpricesheetmnt when calling sxapipdpricesheetmntPost'
            );
        }

        $resourcePath = '/sxapipdpricesheetmnt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipdpricesheetmnt)) {
            $_tempBody = $sxapipdpricesheetmnt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipdpricingallmntPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdpricingallmnt $sxapipdpricingallmnt sxapipdpricingallmnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapipdpricingallmntResp
     */
    public function sxapipdpricingallmntPost($sxapipdpricingallmnt)
    {
        list($response) = $this->sxapipdpricingallmntPostWithHttpInfo($sxapipdpricingallmnt);
        return $response;
    }

    /**
     * Operation sxapipdpricingallmntPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdpricingallmnt $sxapipdpricingallmnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapipdpricingallmntResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipdpricingallmntPostWithHttpInfo($sxapipdpricingallmnt)
    {
        $returnType = '\Swagger\Client\Model\SxapipdpricingallmntResp';
        $request = $this->sxapipdpricingallmntPostRequest($sxapipdpricingallmnt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapipdpricingallmntResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipdpricingallmntPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdpricingallmnt $sxapipdpricingallmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipdpricingallmntPostAsync($sxapipdpricingallmnt)
    {
        return $this->sxapipdpricingallmntPostAsyncWithHttpInfo($sxapipdpricingallmnt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipdpricingallmntPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdpricingallmnt $sxapipdpricingallmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipdpricingallmntPostAsyncWithHttpInfo($sxapipdpricingallmnt)
    {
        $returnType = '\Swagger\Client\Model\SxapipdpricingallmntResp';
        $request = $this->sxapipdpricingallmntPostRequest($sxapipdpricingallmnt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipdpricingallmntPost'
     *
     * @param  \Swagger\Client\Model\Sxapipdpricingallmnt $sxapipdpricingallmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipdpricingallmntPostRequest($sxapipdpricingallmnt)
    {
        // verify the required parameter 'sxapipdpricingallmnt' is set
        if ($sxapipdpricingallmnt === null || (is_array($sxapipdpricingallmnt) && count($sxapipdpricingallmnt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipdpricingallmnt when calling sxapipdpricingallmntPost'
            );
        }

        $resourcePath = '/sxapipdpricingallmnt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipdpricingallmnt)) {
            $_tempBody = $sxapipdpricingallmnt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipdpricingmntPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdpricingmnt $sxapipdpricingmnt sxapipdpricingmnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapipdpricingmntResp
     */
    public function sxapipdpricingmntPost($sxapipdpricingmnt)
    {
        list($response) = $this->sxapipdpricingmntPostWithHttpInfo($sxapipdpricingmnt);
        return $response;
    }

    /**
     * Operation sxapipdpricingmntPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdpricingmnt $sxapipdpricingmnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapipdpricingmntResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipdpricingmntPostWithHttpInfo($sxapipdpricingmnt)
    {
        $returnType = '\Swagger\Client\Model\SxapipdpricingmntResp';
        $request = $this->sxapipdpricingmntPostRequest($sxapipdpricingmnt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapipdpricingmntResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipdpricingmntPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdpricingmnt $sxapipdpricingmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipdpricingmntPostAsync($sxapipdpricingmnt)
    {
        return $this->sxapipdpricingmntPostAsyncWithHttpInfo($sxapipdpricingmnt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipdpricingmntPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdpricingmnt $sxapipdpricingmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipdpricingmntPostAsyncWithHttpInfo($sxapipdpricingmnt)
    {
        $returnType = '\Swagger\Client\Model\SxapipdpricingmntResp';
        $request = $this->sxapipdpricingmntPostRequest($sxapipdpricingmnt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipdpricingmntPost'
     *
     * @param  \Swagger\Client\Model\Sxapipdpricingmnt $sxapipdpricingmnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipdpricingmntPostRequest($sxapipdpricingmnt)
    {
        // verify the required parameter 'sxapipdpricingmnt' is set
        if ($sxapipdpricingmnt === null || (is_array($sxapipdpricingmnt) && count($sxapipdpricingmnt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipdpricingmnt when calling sxapipdpricingmntPost'
            );
        }

        $resourcePath = '/sxapipdpricingmnt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipdpricingmnt)) {
            $_tempBody = $sxapipdpricingmnt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipdrebatemntPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdrebatemnt $sxapipdrebatemnt sxapipdrebatemnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapipdrebatemntResp
     */
    public function sxapipdrebatemntPost($sxapipdrebatemnt)
    {
        list($response) = $this->sxapipdrebatemntPostWithHttpInfo($sxapipdrebatemnt);
        return $response;
    }

    /**
     * Operation sxapipdrebatemntPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdrebatemnt $sxapipdrebatemnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapipdrebatemntResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipdrebatemntPostWithHttpInfo($sxapipdrebatemnt)
    {
        $returnType = '\Swagger\Client\Model\SxapipdrebatemntResp';
        $request = $this->sxapipdrebatemntPostRequest($sxapipdrebatemnt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapipdrebatemntResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipdrebatemntPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdrebatemnt $sxapipdrebatemnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipdrebatemntPostAsync($sxapipdrebatemnt)
    {
        return $this->sxapipdrebatemntPostAsyncWithHttpInfo($sxapipdrebatemnt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipdrebatemntPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipdrebatemnt $sxapipdrebatemnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipdrebatemntPostAsyncWithHttpInfo($sxapipdrebatemnt)
    {
        $returnType = '\Swagger\Client\Model\SxapipdrebatemntResp';
        $request = $this->sxapipdrebatemntPostRequest($sxapipdrebatemnt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipdrebatemntPost'
     *
     * @param  \Swagger\Client\Model\Sxapipdrebatemnt $sxapipdrebatemnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipdrebatemntPostRequest($sxapipdrebatemnt)
    {
        // verify the required parameter 'sxapipdrebatemnt' is set
        if ($sxapipdrebatemnt === null || (is_array($sxapipdrebatemnt) && count($sxapipdrebatemnt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipdrebatemnt when calling sxapipdrebatemntPost'
            );
        }

        $resourcePath = '/sxapipdrebatemnt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipdrebatemnt)) {
            $_tempBody = $sxapipdrebatemnt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipingGet
     *
     * .
     *
     * @param  int $company_number company_number (required)
     * @param  string $operator_init operator_init (required)
     * @param  string $operator_password operator_password (required)
     * @param  string $input_string input_string (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapipingResp
     */
    public function sxapipingGet($company_number, $operator_init, $operator_password, $input_string = null)
    {
        list($response) = $this->sxapipingGetWithHttpInfo($company_number, $operator_init, $operator_password, $input_string);
        return $response;
    }

    /**
     * Operation sxapipingGetWithHttpInfo
     *
     * .
     *
     * @param  int $company_number (required)
     * @param  string $operator_init (required)
     * @param  string $operator_password (required)
     * @param  string $input_string (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapipingResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipingGetWithHttpInfo($company_number, $operator_init, $operator_password, $input_string = null)
    {
        $returnType = '\Swagger\Client\Model\SxapipingResp';
        $request = $this->sxapipingGetRequest($company_number, $operator_init, $operator_password, $input_string);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapipingResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipingGetAsync
     *
     * .
     *
     * @param  int $company_number (required)
     * @param  string $operator_init (required)
     * @param  string $operator_password (required)
     * @param  string $input_string (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipingGetAsync($company_number, $operator_init, $operator_password, $input_string = null)
    {
        return $this->sxapipingGetAsyncWithHttpInfo($company_number, $operator_init, $operator_password, $input_string)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipingGetAsyncWithHttpInfo
     *
     * .
     *
     * @param  int $company_number (required)
     * @param  string $operator_init (required)
     * @param  string $operator_password (required)
     * @param  string $input_string (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipingGetAsyncWithHttpInfo($company_number, $operator_init, $operator_password, $input_string = null)
    {
        $returnType = '\Swagger\Client\Model\SxapipingResp';
        $request = $this->sxapipingGetRequest($company_number, $operator_init, $operator_password, $input_string);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipingGet'
     *
     * @param  int $company_number (required)
     * @param  string $operator_init (required)
     * @param  string $operator_password (required)
     * @param  string $input_string (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipingGetRequest($company_number, $operator_init, $operator_password, $input_string = null)
    {
        // verify the required parameter 'company_number' is set
        if ($company_number === null || (is_array($company_number) && count($company_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_number when calling sxapipingGet'
            );
        }
        // verify the required parameter 'operator_init' is set
        if ($operator_init === null || (is_array($operator_init) && count($operator_init) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operator_init when calling sxapipingGet'
            );
        }
        // verify the required parameter 'operator_password' is set
        if ($operator_password === null || (is_array($operator_password) && count($operator_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operator_password when calling sxapipingGet'
            );
        }

        $resourcePath = '/sxapiping';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($company_number !== null) {
            $queryParams['companyNumber'] = ObjectSerializer::toQueryValue($company_number);
        }
        // query params
        if ($operator_init !== null) {
            $queryParams['operatorInit'] = ObjectSerializer::toQueryValue($operator_init);
        }
        // query params
        if ($operator_password !== null) {
            $queryParams['operatorPassword'] = ObjectSerializer::toQueryValue($operator_password);
        }
        // query params
        if ($input_string !== null) {
            $queryParams['inputString'] = ObjectSerializer::toQueryValue($input_string);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipingPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiping $sxapiping sxapiping (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapipingResp
     */
    public function sxapipingPost($sxapiping)
    {
        list($response) = $this->sxapipingPostWithHttpInfo($sxapiping);
        return $response;
    }

    /**
     * Operation sxapipingPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiping $sxapiping (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapipingResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipingPostWithHttpInfo($sxapiping)
    {
        $returnType = '\Swagger\Client\Model\SxapipingResp';
        $request = $this->sxapipingPostRequest($sxapiping);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapipingResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipingPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiping $sxapiping (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipingPostAsync($sxapiping)
    {
        return $this->sxapipingPostAsyncWithHttpInfo($sxapiping)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipingPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiping $sxapiping (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipingPostAsyncWithHttpInfo($sxapiping)
    {
        $returnType = '\Swagger\Client\Model\SxapipingResp';
        $request = $this->sxapipingPostRequest($sxapiping);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipingPost'
     *
     * @param  \Swagger\Client\Model\Sxapiping $sxapiping (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipingPostRequest($sxapiping)
    {
        // verify the required parameter 'sxapiping' is set
        if ($sxapiping === null || (is_array($sxapiping) && count($sxapiping) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiping when calling sxapipingPost'
            );
        }

        $resourcePath = '/sxapiping';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiping)) {
            $_tempBody = $sxapiping;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipoacknowledgementPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipoacknowledgement $sxapipoacknowledgement sxapipoacknowledgement (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapipoacknowledgementResp
     */
    public function sxapipoacknowledgementPost($sxapipoacknowledgement)
    {
        list($response) = $this->sxapipoacknowledgementPostWithHttpInfo($sxapipoacknowledgement);
        return $response;
    }

    /**
     * Operation sxapipoacknowledgementPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipoacknowledgement $sxapipoacknowledgement (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapipoacknowledgementResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipoacknowledgementPostWithHttpInfo($sxapipoacknowledgement)
    {
        $returnType = '\Swagger\Client\Model\SxapipoacknowledgementResp';
        $request = $this->sxapipoacknowledgementPostRequest($sxapipoacknowledgement);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapipoacknowledgementResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipoacknowledgementPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipoacknowledgement $sxapipoacknowledgement (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipoacknowledgementPostAsync($sxapipoacknowledgement)
    {
        return $this->sxapipoacknowledgementPostAsyncWithHttpInfo($sxapipoacknowledgement)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipoacknowledgementPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipoacknowledgement $sxapipoacknowledgement (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipoacknowledgementPostAsyncWithHttpInfo($sxapipoacknowledgement)
    {
        $returnType = '\Swagger\Client\Model\SxapipoacknowledgementResp';
        $request = $this->sxapipoacknowledgementPostRequest($sxapipoacknowledgement);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipoacknowledgementPost'
     *
     * @param  \Swagger\Client\Model\Sxapipoacknowledgement $sxapipoacknowledgement (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipoacknowledgementPostRequest($sxapipoacknowledgement)
    {
        // verify the required parameter 'sxapipoacknowledgement' is set
        if ($sxapipoacknowledgement === null || (is_array($sxapipoacknowledgement) && count($sxapipoacknowledgement) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipoacknowledgement when calling sxapipoacknowledgementPost'
            );
        }

        $resourcePath = '/sxapipoacknowledgement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipoacknowledgement)) {
            $_tempBody = $sxapipoacknowledgement;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipoadvanceshipnoticePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipoadvanceshipnotice $sxapipoadvanceshipnotice sxapipoadvanceshipnotice (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapipoadvanceshipnoticeResp
     */
    public function sxapipoadvanceshipnoticePost($sxapipoadvanceshipnotice)
    {
        list($response) = $this->sxapipoadvanceshipnoticePostWithHttpInfo($sxapipoadvanceshipnotice);
        return $response;
    }

    /**
     * Operation sxapipoadvanceshipnoticePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipoadvanceshipnotice $sxapipoadvanceshipnotice (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapipoadvanceshipnoticeResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipoadvanceshipnoticePostWithHttpInfo($sxapipoadvanceshipnotice)
    {
        $returnType = '\Swagger\Client\Model\SxapipoadvanceshipnoticeResp';
        $request = $this->sxapipoadvanceshipnoticePostRequest($sxapipoadvanceshipnotice);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapipoadvanceshipnoticeResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipoadvanceshipnoticePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipoadvanceshipnotice $sxapipoadvanceshipnotice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipoadvanceshipnoticePostAsync($sxapipoadvanceshipnotice)
    {
        return $this->sxapipoadvanceshipnoticePostAsyncWithHttpInfo($sxapipoadvanceshipnotice)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipoadvanceshipnoticePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipoadvanceshipnotice $sxapipoadvanceshipnotice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipoadvanceshipnoticePostAsyncWithHttpInfo($sxapipoadvanceshipnotice)
    {
        $returnType = '\Swagger\Client\Model\SxapipoadvanceshipnoticeResp';
        $request = $this->sxapipoadvanceshipnoticePostRequest($sxapipoadvanceshipnotice);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipoadvanceshipnoticePost'
     *
     * @param  \Swagger\Client\Model\Sxapipoadvanceshipnotice $sxapipoadvanceshipnotice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipoadvanceshipnoticePostRequest($sxapipoadvanceshipnotice)
    {
        // verify the required parameter 'sxapipoadvanceshipnotice' is set
        if ($sxapipoadvanceshipnotice === null || (is_array($sxapipoadvanceshipnotice) && count($sxapipoadvanceshipnotice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipoadvanceshipnotice when calling sxapipoadvanceshipnoticePost'
            );
        }

        $resourcePath = '/sxapipoadvanceshipnotice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipoadvanceshipnotice)) {
            $_tempBody = $sxapipoadvanceshipnotice;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipoeditserlotlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipoeditserlotlist $sxapipoeditserlotlist sxapipoeditserlotlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapipoeditserlotlistResp
     */
    public function sxapipoeditserlotlistPost($sxapipoeditserlotlist)
    {
        list($response) = $this->sxapipoeditserlotlistPostWithHttpInfo($sxapipoeditserlotlist);
        return $response;
    }

    /**
     * Operation sxapipoeditserlotlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipoeditserlotlist $sxapipoeditserlotlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapipoeditserlotlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipoeditserlotlistPostWithHttpInfo($sxapipoeditserlotlist)
    {
        $returnType = '\Swagger\Client\Model\SxapipoeditserlotlistResp';
        $request = $this->sxapipoeditserlotlistPostRequest($sxapipoeditserlotlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapipoeditserlotlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipoeditserlotlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipoeditserlotlist $sxapipoeditserlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipoeditserlotlistPostAsync($sxapipoeditserlotlist)
    {
        return $this->sxapipoeditserlotlistPostAsyncWithHttpInfo($sxapipoeditserlotlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipoeditserlotlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipoeditserlotlist $sxapipoeditserlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipoeditserlotlistPostAsyncWithHttpInfo($sxapipoeditserlotlist)
    {
        $returnType = '\Swagger\Client\Model\SxapipoeditserlotlistResp';
        $request = $this->sxapipoeditserlotlistPostRequest($sxapipoeditserlotlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipoeditserlotlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapipoeditserlotlist $sxapipoeditserlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipoeditserlotlistPostRequest($sxapipoeditserlotlist)
    {
        // verify the required parameter 'sxapipoeditserlotlist' is set
        if ($sxapipoeditserlotlist === null || (is_array($sxapipoeditserlotlist) && count($sxapipoeditserlotlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipoeditserlotlist when calling sxapipoeditserlotlistPost'
            );
        }

        $resourcePath = '/sxapipoeditserlotlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipoeditserlotlist)) {
            $_tempBody = $sxapipoeditserlotlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipogetdeliverylistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetdeliverylist $sxapipogetdeliverylist sxapipogetdeliverylist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapipogetdeliverylistResp
     */
    public function sxapipogetdeliverylistPost($sxapipogetdeliverylist)
    {
        list($response) = $this->sxapipogetdeliverylistPostWithHttpInfo($sxapipogetdeliverylist);
        return $response;
    }

    /**
     * Operation sxapipogetdeliverylistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetdeliverylist $sxapipogetdeliverylist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapipogetdeliverylistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipogetdeliverylistPostWithHttpInfo($sxapipogetdeliverylist)
    {
        $returnType = '\Swagger\Client\Model\SxapipogetdeliverylistResp';
        $request = $this->sxapipogetdeliverylistPostRequest($sxapipogetdeliverylist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapipogetdeliverylistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipogetdeliverylistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetdeliverylist $sxapipogetdeliverylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipogetdeliverylistPostAsync($sxapipogetdeliverylist)
    {
        return $this->sxapipogetdeliverylistPostAsyncWithHttpInfo($sxapipogetdeliverylist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipogetdeliverylistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetdeliverylist $sxapipogetdeliverylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipogetdeliverylistPostAsyncWithHttpInfo($sxapipogetdeliverylist)
    {
        $returnType = '\Swagger\Client\Model\SxapipogetdeliverylistResp';
        $request = $this->sxapipogetdeliverylistPostRequest($sxapipogetdeliverylist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipogetdeliverylistPost'
     *
     * @param  \Swagger\Client\Model\Sxapipogetdeliverylist $sxapipogetdeliverylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipogetdeliverylistPostRequest($sxapipogetdeliverylist)
    {
        // verify the required parameter 'sxapipogetdeliverylist' is set
        if ($sxapipogetdeliverylist === null || (is_array($sxapipogetdeliverylist) && count($sxapipogetdeliverylist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipogetdeliverylist when calling sxapipogetdeliverylistPost'
            );
        }

        $resourcePath = '/sxapipogetdeliverylist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipogetdeliverylist)) {
            $_tempBody = $sxapipogetdeliverylist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipogetdocumentlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetdocumentlist $sxapipogetdocumentlist sxapipogetdocumentlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapipogetdocumentlistResp
     */
    public function sxapipogetdocumentlistPost($sxapipogetdocumentlist)
    {
        list($response) = $this->sxapipogetdocumentlistPostWithHttpInfo($sxapipogetdocumentlist);
        return $response;
    }

    /**
     * Operation sxapipogetdocumentlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetdocumentlist $sxapipogetdocumentlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapipogetdocumentlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipogetdocumentlistPostWithHttpInfo($sxapipogetdocumentlist)
    {
        $returnType = '\Swagger\Client\Model\SxapipogetdocumentlistResp';
        $request = $this->sxapipogetdocumentlistPostRequest($sxapipogetdocumentlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapipogetdocumentlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipogetdocumentlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetdocumentlist $sxapipogetdocumentlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipogetdocumentlistPostAsync($sxapipogetdocumentlist)
    {
        return $this->sxapipogetdocumentlistPostAsyncWithHttpInfo($sxapipogetdocumentlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipogetdocumentlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetdocumentlist $sxapipogetdocumentlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipogetdocumentlistPostAsyncWithHttpInfo($sxapipogetdocumentlist)
    {
        $returnType = '\Swagger\Client\Model\SxapipogetdocumentlistResp';
        $request = $this->sxapipogetdocumentlistPostRequest($sxapipogetdocumentlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipogetdocumentlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapipogetdocumentlist $sxapipogetdocumentlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipogetdocumentlistPostRequest($sxapipogetdocumentlist)
    {
        // verify the required parameter 'sxapipogetdocumentlist' is set
        if ($sxapipogetdocumentlist === null || (is_array($sxapipogetdocumentlist) && count($sxapipogetdocumentlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipogetdocumentlist when calling sxapipogetdocumentlistPost'
            );
        }

        $resourcePath = '/sxapipogetdocumentlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipogetdocumentlist)) {
            $_tempBody = $sxapipogetdocumentlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipogetlistofpurchaseordersPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetlistofpurchaseorders $sxapipogetlistofpurchaseorders sxapipogetlistofpurchaseorders (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapipogetlistofpurchaseordersResp
     */
    public function sxapipogetlistofpurchaseordersPost($sxapipogetlistofpurchaseorders)
    {
        list($response) = $this->sxapipogetlistofpurchaseordersPostWithHttpInfo($sxapipogetlistofpurchaseorders);
        return $response;
    }

    /**
     * Operation sxapipogetlistofpurchaseordersPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetlistofpurchaseorders $sxapipogetlistofpurchaseorders (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapipogetlistofpurchaseordersResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipogetlistofpurchaseordersPostWithHttpInfo($sxapipogetlistofpurchaseorders)
    {
        $returnType = '\Swagger\Client\Model\SxapipogetlistofpurchaseordersResp';
        $request = $this->sxapipogetlistofpurchaseordersPostRequest($sxapipogetlistofpurchaseorders);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapipogetlistofpurchaseordersResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipogetlistofpurchaseordersPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetlistofpurchaseorders $sxapipogetlistofpurchaseorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipogetlistofpurchaseordersPostAsync($sxapipogetlistofpurchaseorders)
    {
        return $this->sxapipogetlistofpurchaseordersPostAsyncWithHttpInfo($sxapipogetlistofpurchaseorders)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipogetlistofpurchaseordersPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetlistofpurchaseorders $sxapipogetlistofpurchaseorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipogetlistofpurchaseordersPostAsyncWithHttpInfo($sxapipogetlistofpurchaseorders)
    {
        $returnType = '\Swagger\Client\Model\SxapipogetlistofpurchaseordersResp';
        $request = $this->sxapipogetlistofpurchaseordersPostRequest($sxapipogetlistofpurchaseorders);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipogetlistofpurchaseordersPost'
     *
     * @param  \Swagger\Client\Model\Sxapipogetlistofpurchaseorders $sxapipogetlistofpurchaseorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipogetlistofpurchaseordersPostRequest($sxapipogetlistofpurchaseorders)
    {
        // verify the required parameter 'sxapipogetlistofpurchaseorders' is set
        if ($sxapipogetlistofpurchaseorders === null || (is_array($sxapipogetlistofpurchaseorders) && count($sxapipogetlistofpurchaseorders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipogetlistofpurchaseorders when calling sxapipogetlistofpurchaseordersPost'
            );
        }

        $resourcePath = '/sxapipogetlistofpurchaseorders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipogetlistofpurchaseorders)) {
            $_tempBody = $sxapipogetlistofpurchaseorders;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipogetlistofpurchaseordersv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetlistofpurchaseordersv2 $sxapipogetlistofpurchaseordersv2 sxapipogetlistofpurchaseordersv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapipogetlistofpurchaseordersv2Resp
     */
    public function sxapipogetlistofpurchaseordersv2Post($sxapipogetlistofpurchaseordersv2)
    {
        list($response) = $this->sxapipogetlistofpurchaseordersv2PostWithHttpInfo($sxapipogetlistofpurchaseordersv2);
        return $response;
    }

    /**
     * Operation sxapipogetlistofpurchaseordersv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetlistofpurchaseordersv2 $sxapipogetlistofpurchaseordersv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapipogetlistofpurchaseordersv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipogetlistofpurchaseordersv2PostWithHttpInfo($sxapipogetlistofpurchaseordersv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapipogetlistofpurchaseordersv2Resp';
        $request = $this->sxapipogetlistofpurchaseordersv2PostRequest($sxapipogetlistofpurchaseordersv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapipogetlistofpurchaseordersv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipogetlistofpurchaseordersv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetlistofpurchaseordersv2 $sxapipogetlistofpurchaseordersv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipogetlistofpurchaseordersv2PostAsync($sxapipogetlistofpurchaseordersv2)
    {
        return $this->sxapipogetlistofpurchaseordersv2PostAsyncWithHttpInfo($sxapipogetlistofpurchaseordersv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipogetlistofpurchaseordersv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetlistofpurchaseordersv2 $sxapipogetlistofpurchaseordersv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipogetlistofpurchaseordersv2PostAsyncWithHttpInfo($sxapipogetlistofpurchaseordersv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapipogetlistofpurchaseordersv2Resp';
        $request = $this->sxapipogetlistofpurchaseordersv2PostRequest($sxapipogetlistofpurchaseordersv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipogetlistofpurchaseordersv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapipogetlistofpurchaseordersv2 $sxapipogetlistofpurchaseordersv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipogetlistofpurchaseordersv2PostRequest($sxapipogetlistofpurchaseordersv2)
    {
        // verify the required parameter 'sxapipogetlistofpurchaseordersv2' is set
        if ($sxapipogetlistofpurchaseordersv2 === null || (is_array($sxapipogetlistofpurchaseordersv2) && count($sxapipogetlistofpurchaseordersv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipogetlistofpurchaseordersv2 when calling sxapipogetlistofpurchaseordersv2Post'
            );
        }

        $resourcePath = '/sxapipogetlistofpurchaseordersv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipogetlistofpurchaseordersv2)) {
            $_tempBody = $sxapipogetlistofpurchaseordersv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipogetlistofpurchaseordersv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetlistofpurchaseordersv3 $sxapipogetlistofpurchaseordersv3 sxapipogetlistofpurchaseordersv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapipogetlistofpurchaseordersv3Resp
     */
    public function sxapipogetlistofpurchaseordersv3Post($sxapipogetlistofpurchaseordersv3)
    {
        list($response) = $this->sxapipogetlistofpurchaseordersv3PostWithHttpInfo($sxapipogetlistofpurchaseordersv3);
        return $response;
    }

    /**
     * Operation sxapipogetlistofpurchaseordersv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetlistofpurchaseordersv3 $sxapipogetlistofpurchaseordersv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapipogetlistofpurchaseordersv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipogetlistofpurchaseordersv3PostWithHttpInfo($sxapipogetlistofpurchaseordersv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapipogetlistofpurchaseordersv3Resp';
        $request = $this->sxapipogetlistofpurchaseordersv3PostRequest($sxapipogetlistofpurchaseordersv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapipogetlistofpurchaseordersv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipogetlistofpurchaseordersv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetlistofpurchaseordersv3 $sxapipogetlistofpurchaseordersv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipogetlistofpurchaseordersv3PostAsync($sxapipogetlistofpurchaseordersv3)
    {
        return $this->sxapipogetlistofpurchaseordersv3PostAsyncWithHttpInfo($sxapipogetlistofpurchaseordersv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipogetlistofpurchaseordersv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetlistofpurchaseordersv3 $sxapipogetlistofpurchaseordersv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipogetlistofpurchaseordersv3PostAsyncWithHttpInfo($sxapipogetlistofpurchaseordersv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapipogetlistofpurchaseordersv3Resp';
        $request = $this->sxapipogetlistofpurchaseordersv3PostRequest($sxapipogetlistofpurchaseordersv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipogetlistofpurchaseordersv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapipogetlistofpurchaseordersv3 $sxapipogetlistofpurchaseordersv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipogetlistofpurchaseordersv3PostRequest($sxapipogetlistofpurchaseordersv3)
    {
        // verify the required parameter 'sxapipogetlistofpurchaseordersv3' is set
        if ($sxapipogetlistofpurchaseordersv3 === null || (is_array($sxapipogetlistofpurchaseordersv3) && count($sxapipogetlistofpurchaseordersv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipogetlistofpurchaseordersv3 when calling sxapipogetlistofpurchaseordersv3Post'
            );
        }

        $resourcePath = '/sxapipogetlistofpurchaseordersv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipogetlistofpurchaseordersv3)) {
            $_tempBody = $sxapipogetlistofpurchaseordersv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipogetsinglepoxmlPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetsinglepoxml $sxapipogetsinglepoxml sxapipogetsinglepoxml (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapipogetsinglepoxmlResp
     */
    public function sxapipogetsinglepoxmlPost($sxapipogetsinglepoxml)
    {
        list($response) = $this->sxapipogetsinglepoxmlPostWithHttpInfo($sxapipogetsinglepoxml);
        return $response;
    }

    /**
     * Operation sxapipogetsinglepoxmlPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetsinglepoxml $sxapipogetsinglepoxml (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapipogetsinglepoxmlResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipogetsinglepoxmlPostWithHttpInfo($sxapipogetsinglepoxml)
    {
        $returnType = '\Swagger\Client\Model\SxapipogetsinglepoxmlResp';
        $request = $this->sxapipogetsinglepoxmlPostRequest($sxapipogetsinglepoxml);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapipogetsinglepoxmlResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipogetsinglepoxmlPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetsinglepoxml $sxapipogetsinglepoxml (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipogetsinglepoxmlPostAsync($sxapipogetsinglepoxml)
    {
        return $this->sxapipogetsinglepoxmlPostAsyncWithHttpInfo($sxapipogetsinglepoxml)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipogetsinglepoxmlPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetsinglepoxml $sxapipogetsinglepoxml (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipogetsinglepoxmlPostAsyncWithHttpInfo($sxapipogetsinglepoxml)
    {
        $returnType = '\Swagger\Client\Model\SxapipogetsinglepoxmlResp';
        $request = $this->sxapipogetsinglepoxmlPostRequest($sxapipogetsinglepoxml);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipogetsinglepoxmlPost'
     *
     * @param  \Swagger\Client\Model\Sxapipogetsinglepoxml $sxapipogetsinglepoxml (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipogetsinglepoxmlPostRequest($sxapipogetsinglepoxml)
    {
        // verify the required parameter 'sxapipogetsinglepoxml' is set
        if ($sxapipogetsinglepoxml === null || (is_array($sxapipogetsinglepoxml) && count($sxapipogetsinglepoxml) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipogetsinglepoxml when calling sxapipogetsinglepoxmlPost'
            );
        }

        $resourcePath = '/sxapipogetsinglepoxml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipogetsinglepoxml)) {
            $_tempBody = $sxapipogetsinglepoxml;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipogetsinglepurchaseorderPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetsinglepurchaseorder $sxapipogetsinglepurchaseorder sxapipogetsinglepurchaseorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapipogetsinglepurchaseorderResp
     */
    public function sxapipogetsinglepurchaseorderPost($sxapipogetsinglepurchaseorder)
    {
        list($response) = $this->sxapipogetsinglepurchaseorderPostWithHttpInfo($sxapipogetsinglepurchaseorder);
        return $response;
    }

    /**
     * Operation sxapipogetsinglepurchaseorderPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetsinglepurchaseorder $sxapipogetsinglepurchaseorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapipogetsinglepurchaseorderResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipogetsinglepurchaseorderPostWithHttpInfo($sxapipogetsinglepurchaseorder)
    {
        $returnType = '\Swagger\Client\Model\SxapipogetsinglepurchaseorderResp';
        $request = $this->sxapipogetsinglepurchaseorderPostRequest($sxapipogetsinglepurchaseorder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapipogetsinglepurchaseorderResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipogetsinglepurchaseorderPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetsinglepurchaseorder $sxapipogetsinglepurchaseorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipogetsinglepurchaseorderPostAsync($sxapipogetsinglepurchaseorder)
    {
        return $this->sxapipogetsinglepurchaseorderPostAsyncWithHttpInfo($sxapipogetsinglepurchaseorder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipogetsinglepurchaseorderPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetsinglepurchaseorder $sxapipogetsinglepurchaseorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipogetsinglepurchaseorderPostAsyncWithHttpInfo($sxapipogetsinglepurchaseorder)
    {
        $returnType = '\Swagger\Client\Model\SxapipogetsinglepurchaseorderResp';
        $request = $this->sxapipogetsinglepurchaseorderPostRequest($sxapipogetsinglepurchaseorder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipogetsinglepurchaseorderPost'
     *
     * @param  \Swagger\Client\Model\Sxapipogetsinglepurchaseorder $sxapipogetsinglepurchaseorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipogetsinglepurchaseorderPostRequest($sxapipogetsinglepurchaseorder)
    {
        // verify the required parameter 'sxapipogetsinglepurchaseorder' is set
        if ($sxapipogetsinglepurchaseorder === null || (is_array($sxapipogetsinglepurchaseorder) && count($sxapipogetsinglepurchaseorder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipogetsinglepurchaseorder when calling sxapipogetsinglepurchaseorderPost'
            );
        }

        $resourcePath = '/sxapipogetsinglepurchaseorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipogetsinglepurchaseorder)) {
            $_tempBody = $sxapipogetsinglepurchaseorder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipogetsinglepurchaseorderv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetsinglepurchaseorderv2 $sxapipogetsinglepurchaseorderv2 sxapipogetsinglepurchaseorderv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapipogetsinglepurchaseorderv2Resp
     */
    public function sxapipogetsinglepurchaseorderv2Post($sxapipogetsinglepurchaseorderv2)
    {
        list($response) = $this->sxapipogetsinglepurchaseorderv2PostWithHttpInfo($sxapipogetsinglepurchaseorderv2);
        return $response;
    }

    /**
     * Operation sxapipogetsinglepurchaseorderv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetsinglepurchaseorderv2 $sxapipogetsinglepurchaseorderv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapipogetsinglepurchaseorderv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipogetsinglepurchaseorderv2PostWithHttpInfo($sxapipogetsinglepurchaseorderv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapipogetsinglepurchaseorderv2Resp';
        $request = $this->sxapipogetsinglepurchaseorderv2PostRequest($sxapipogetsinglepurchaseorderv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapipogetsinglepurchaseorderv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipogetsinglepurchaseorderv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetsinglepurchaseorderv2 $sxapipogetsinglepurchaseorderv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipogetsinglepurchaseorderv2PostAsync($sxapipogetsinglepurchaseorderv2)
    {
        return $this->sxapipogetsinglepurchaseorderv2PostAsyncWithHttpInfo($sxapipogetsinglepurchaseorderv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipogetsinglepurchaseorderv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipogetsinglepurchaseorderv2 $sxapipogetsinglepurchaseorderv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipogetsinglepurchaseorderv2PostAsyncWithHttpInfo($sxapipogetsinglepurchaseorderv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapipogetsinglepurchaseorderv2Resp';
        $request = $this->sxapipogetsinglepurchaseorderv2PostRequest($sxapipogetsinglepurchaseorderv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipogetsinglepurchaseorderv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapipogetsinglepurchaseorderv2 $sxapipogetsinglepurchaseorderv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipogetsinglepurchaseorderv2PostRequest($sxapipogetsinglepurchaseorderv2)
    {
        // verify the required parameter 'sxapipogetsinglepurchaseorderv2' is set
        if ($sxapipogetsinglepurchaseorderv2 === null || (is_array($sxapipogetsinglepurchaseorderv2) && count($sxapipogetsinglepurchaseorderv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipogetsinglepurchaseorderv2 when calling sxapipogetsinglepurchaseorderv2Post'
            );
        }

        $resourcePath = '/sxapipogetsinglepurchaseorderv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipogetsinglepurchaseorderv2)) {
            $_tempBody = $sxapipogetsinglepurchaseorderv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipoheaderupdatePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipoheaderupdate $sxapipoheaderupdate sxapipoheaderupdate (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapipoheaderupdateResp
     */
    public function sxapipoheaderupdatePost($sxapipoheaderupdate)
    {
        list($response) = $this->sxapipoheaderupdatePostWithHttpInfo($sxapipoheaderupdate);
        return $response;
    }

    /**
     * Operation sxapipoheaderupdatePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipoheaderupdate $sxapipoheaderupdate (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapipoheaderupdateResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipoheaderupdatePostWithHttpInfo($sxapipoheaderupdate)
    {
        $returnType = '\Swagger\Client\Model\SxapipoheaderupdateResp';
        $request = $this->sxapipoheaderupdatePostRequest($sxapipoheaderupdate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapipoheaderupdateResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipoheaderupdatePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipoheaderupdate $sxapipoheaderupdate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipoheaderupdatePostAsync($sxapipoheaderupdate)
    {
        return $this->sxapipoheaderupdatePostAsyncWithHttpInfo($sxapipoheaderupdate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipoheaderupdatePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipoheaderupdate $sxapipoheaderupdate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipoheaderupdatePostAsyncWithHttpInfo($sxapipoheaderupdate)
    {
        $returnType = '\Swagger\Client\Model\SxapipoheaderupdateResp';
        $request = $this->sxapipoheaderupdatePostRequest($sxapipoheaderupdate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipoheaderupdatePost'
     *
     * @param  \Swagger\Client\Model\Sxapipoheaderupdate $sxapipoheaderupdate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipoheaderupdatePostRequest($sxapipoheaderupdate)
    {
        // verify the required parameter 'sxapipoheaderupdate' is set
        if ($sxapipoheaderupdate === null || (is_array($sxapipoheaderupdate) && count($sxapipoheaderupdate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipoheaderupdate when calling sxapipoheaderupdatePost'
            );
        }

        $resourcePath = '/sxapipoheaderupdate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipoheaderupdate)) {
            $_tempBody = $sxapipoheaderupdate;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipoorderdeleteorcancelPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipoorderdeleteorcancel $sxapipoorderdeleteorcancel sxapipoorderdeleteorcancel (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapipoorderdeleteorcancelResp
     */
    public function sxapipoorderdeleteorcancelPost($sxapipoorderdeleteorcancel)
    {
        list($response) = $this->sxapipoorderdeleteorcancelPostWithHttpInfo($sxapipoorderdeleteorcancel);
        return $response;
    }

    /**
     * Operation sxapipoorderdeleteorcancelPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipoorderdeleteorcancel $sxapipoorderdeleteorcancel (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapipoorderdeleteorcancelResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipoorderdeleteorcancelPostWithHttpInfo($sxapipoorderdeleteorcancel)
    {
        $returnType = '\Swagger\Client\Model\SxapipoorderdeleteorcancelResp';
        $request = $this->sxapipoorderdeleteorcancelPostRequest($sxapipoorderdeleteorcancel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapipoorderdeleteorcancelResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipoorderdeleteorcancelPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipoorderdeleteorcancel $sxapipoorderdeleteorcancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipoorderdeleteorcancelPostAsync($sxapipoorderdeleteorcancel)
    {
        return $this->sxapipoorderdeleteorcancelPostAsyncWithHttpInfo($sxapipoorderdeleteorcancel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipoorderdeleteorcancelPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipoorderdeleteorcancel $sxapipoorderdeleteorcancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipoorderdeleteorcancelPostAsyncWithHttpInfo($sxapipoorderdeleteorcancel)
    {
        $returnType = '\Swagger\Client\Model\SxapipoorderdeleteorcancelResp';
        $request = $this->sxapipoorderdeleteorcancelPostRequest($sxapipoorderdeleteorcancel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipoorderdeleteorcancelPost'
     *
     * @param  \Swagger\Client\Model\Sxapipoorderdeleteorcancel $sxapipoorderdeleteorcancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipoorderdeleteorcancelPostRequest($sxapipoorderdeleteorcancel)
    {
        // verify the required parameter 'sxapipoorderdeleteorcancel' is set
        if ($sxapipoorderdeleteorcancel === null || (is_array($sxapipoorderdeleteorcancel) && count($sxapipoorderdeleteorcancel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipoorderdeleteorcancel when calling sxapipoorderdeleteorcancelPost'
            );
        }

        $resourcePath = '/sxapipoorderdeleteorcancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipoorderdeleteorcancel)) {
            $_tempBody = $sxapipoorderdeleteorcancel;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipopurchaseordermntPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipopurchaseordermnt $sxapipopurchaseordermnt sxapipopurchaseordermnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapipopurchaseordermntResp
     */
    public function sxapipopurchaseordermntPost($sxapipopurchaseordermnt)
    {
        list($response) = $this->sxapipopurchaseordermntPostWithHttpInfo($sxapipopurchaseordermnt);
        return $response;
    }

    /**
     * Operation sxapipopurchaseordermntPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipopurchaseordermnt $sxapipopurchaseordermnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapipopurchaseordermntResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipopurchaseordermntPostWithHttpInfo($sxapipopurchaseordermnt)
    {
        $returnType = '\Swagger\Client\Model\SxapipopurchaseordermntResp';
        $request = $this->sxapipopurchaseordermntPostRequest($sxapipopurchaseordermnt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapipopurchaseordermntResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipopurchaseordermntPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipopurchaseordermnt $sxapipopurchaseordermnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipopurchaseordermntPostAsync($sxapipopurchaseordermnt)
    {
        return $this->sxapipopurchaseordermntPostAsyncWithHttpInfo($sxapipopurchaseordermnt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipopurchaseordermntPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipopurchaseordermnt $sxapipopurchaseordermnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipopurchaseordermntPostAsyncWithHttpInfo($sxapipopurchaseordermnt)
    {
        $returnType = '\Swagger\Client\Model\SxapipopurchaseordermntResp';
        $request = $this->sxapipopurchaseordermntPostRequest($sxapipopurchaseordermnt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipopurchaseordermntPost'
     *
     * @param  \Swagger\Client\Model\Sxapipopurchaseordermnt $sxapipopurchaseordermnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipopurchaseordermntPostRequest($sxapipopurchaseordermnt)
    {
        // verify the required parameter 'sxapipopurchaseordermnt' is set
        if ($sxapipopurchaseordermnt === null || (is_array($sxapipopurchaseordermnt) && count($sxapipopurchaseordermnt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipopurchaseordermnt when calling sxapipopurchaseordermntPost'
            );
        }

        $resourcePath = '/sxapipopurchaseordermnt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipopurchaseordermnt)) {
            $_tempBody = $sxapipopurchaseordermnt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapipopurchaseordermntv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipopurchaseordermntv2 $sxapipopurchaseordermntv2 sxapipopurchaseordermntv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapipopurchaseordermntv2Resp
     */
    public function sxapipopurchaseordermntv2Post($sxapipopurchaseordermntv2)
    {
        list($response) = $this->sxapipopurchaseordermntv2PostWithHttpInfo($sxapipopurchaseordermntv2);
        return $response;
    }

    /**
     * Operation sxapipopurchaseordermntv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipopurchaseordermntv2 $sxapipopurchaseordermntv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapipopurchaseordermntv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapipopurchaseordermntv2PostWithHttpInfo($sxapipopurchaseordermntv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapipopurchaseordermntv2Resp';
        $request = $this->sxapipopurchaseordermntv2PostRequest($sxapipopurchaseordermntv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapipopurchaseordermntv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapipopurchaseordermntv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipopurchaseordermntv2 $sxapipopurchaseordermntv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipopurchaseordermntv2PostAsync($sxapipopurchaseordermntv2)
    {
        return $this->sxapipopurchaseordermntv2PostAsyncWithHttpInfo($sxapipopurchaseordermntv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapipopurchaseordermntv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapipopurchaseordermntv2 $sxapipopurchaseordermntv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapipopurchaseordermntv2PostAsyncWithHttpInfo($sxapipopurchaseordermntv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapipopurchaseordermntv2Resp';
        $request = $this->sxapipopurchaseordermntv2PostRequest($sxapipopurchaseordermntv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapipopurchaseordermntv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapipopurchaseordermntv2 $sxapipopurchaseordermntv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapipopurchaseordermntv2PostRequest($sxapipopurchaseordermntv2)
    {
        // verify the required parameter 'sxapipopurchaseordermntv2' is set
        if ($sxapipopurchaseordermntv2 === null || (is_array($sxapipopurchaseordermntv2) && count($sxapipopurchaseordermntv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapipopurchaseordermntv2 when calling sxapipopurchaseordermntv2Post'
            );
        }

        $resourcePath = '/sxapipopurchaseordermntv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapipopurchaseordermntv2)) {
            $_tempBody = $sxapipopurchaseordermntv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetbusinessrulePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetbusinessrule $sxapisagetbusinessrule sxapisagetbusinessrule (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisagetbusinessruleResp
     */
    public function sxapisagetbusinessrulePost($sxapisagetbusinessrule)
    {
        list($response) = $this->sxapisagetbusinessrulePostWithHttpInfo($sxapisagetbusinessrule);
        return $response;
    }

    /**
     * Operation sxapisagetbusinessrulePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetbusinessrule $sxapisagetbusinessrule (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisagetbusinessruleResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetbusinessrulePostWithHttpInfo($sxapisagetbusinessrule)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetbusinessruleResp';
        $request = $this->sxapisagetbusinessrulePostRequest($sxapisagetbusinessrule);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisagetbusinessruleResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetbusinessrulePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetbusinessrule $sxapisagetbusinessrule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetbusinessrulePostAsync($sxapisagetbusinessrule)
    {
        return $this->sxapisagetbusinessrulePostAsyncWithHttpInfo($sxapisagetbusinessrule)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetbusinessrulePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetbusinessrule $sxapisagetbusinessrule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetbusinessrulePostAsyncWithHttpInfo($sxapisagetbusinessrule)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetbusinessruleResp';
        $request = $this->sxapisagetbusinessrulePostRequest($sxapisagetbusinessrule);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetbusinessrulePost'
     *
     * @param  \Swagger\Client\Model\Sxapisagetbusinessrule $sxapisagetbusinessrule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetbusinessrulePostRequest($sxapisagetbusinessrule)
    {
        // verify the required parameter 'sxapisagetbusinessrule' is set
        if ($sxapisagetbusinessrule === null || (is_array($sxapisagetbusinessrule) && count($sxapisagetbusinessrule) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetbusinessrule when calling sxapisagetbusinessrulePost'
            );
        }

        $resourcePath = '/sxapisagetbusinessrule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetbusinessrule)) {
            $_tempBody = $sxapisagetbusinessrule;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetbuyerlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetbuyerlist $sxapisagetbuyerlist sxapisagetbuyerlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisagetbuyerlistResp
     */
    public function sxapisagetbuyerlistPost($sxapisagetbuyerlist)
    {
        list($response) = $this->sxapisagetbuyerlistPostWithHttpInfo($sxapisagetbuyerlist);
        return $response;
    }

    /**
     * Operation sxapisagetbuyerlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetbuyerlist $sxapisagetbuyerlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisagetbuyerlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetbuyerlistPostWithHttpInfo($sxapisagetbuyerlist)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetbuyerlistResp';
        $request = $this->sxapisagetbuyerlistPostRequest($sxapisagetbuyerlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisagetbuyerlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetbuyerlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetbuyerlist $sxapisagetbuyerlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetbuyerlistPostAsync($sxapisagetbuyerlist)
    {
        return $this->sxapisagetbuyerlistPostAsyncWithHttpInfo($sxapisagetbuyerlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetbuyerlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetbuyerlist $sxapisagetbuyerlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetbuyerlistPostAsyncWithHttpInfo($sxapisagetbuyerlist)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetbuyerlistResp';
        $request = $this->sxapisagetbuyerlistPostRequest($sxapisagetbuyerlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetbuyerlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapisagetbuyerlist $sxapisagetbuyerlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetbuyerlistPostRequest($sxapisagetbuyerlist)
    {
        // verify the required parameter 'sxapisagetbuyerlist' is set
        if ($sxapisagetbuyerlist === null || (is_array($sxapisagetbuyerlist) && count($sxapisagetbuyerlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetbuyerlist when calling sxapisagetbuyerlistPost'
            );
        }

        $resourcePath = '/sxapisagetbuyerlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetbuyerlist)) {
            $_tempBody = $sxapisagetbuyerlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetconnectionstringPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetconnectionstring $sxapisagetconnectionstring sxapisagetconnectionstring (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisagetconnectionstringResp
     */
    public function sxapisagetconnectionstringPost($sxapisagetconnectionstring)
    {
        list($response) = $this->sxapisagetconnectionstringPostWithHttpInfo($sxapisagetconnectionstring);
        return $response;
    }

    /**
     * Operation sxapisagetconnectionstringPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetconnectionstring $sxapisagetconnectionstring (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisagetconnectionstringResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetconnectionstringPostWithHttpInfo($sxapisagetconnectionstring)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetconnectionstringResp';
        $request = $this->sxapisagetconnectionstringPostRequest($sxapisagetconnectionstring);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisagetconnectionstringResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetconnectionstringPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetconnectionstring $sxapisagetconnectionstring (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetconnectionstringPostAsync($sxapisagetconnectionstring)
    {
        return $this->sxapisagetconnectionstringPostAsyncWithHttpInfo($sxapisagetconnectionstring)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetconnectionstringPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetconnectionstring $sxapisagetconnectionstring (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetconnectionstringPostAsyncWithHttpInfo($sxapisagetconnectionstring)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetconnectionstringResp';
        $request = $this->sxapisagetconnectionstringPostRequest($sxapisagetconnectionstring);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetconnectionstringPost'
     *
     * @param  \Swagger\Client\Model\Sxapisagetconnectionstring $sxapisagetconnectionstring (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetconnectionstringPostRequest($sxapisagetconnectionstring)
    {
        // verify the required parameter 'sxapisagetconnectionstring' is set
        if ($sxapisagetconnectionstring === null || (is_array($sxapisagetconnectionstring) && count($sxapisagetconnectionstring) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetconnectionstring when calling sxapisagetconnectionstringPost'
            );
        }

        $resourcePath = '/sxapisagetconnectionstring';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetconnectionstring)) {
            $_tempBody = $sxapisagetconnectionstring;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetenvPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetenv $sxapisagetenv sxapisagetenv (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisagetenvResp
     */
    public function sxapisagetenvPost($sxapisagetenv)
    {
        list($response) = $this->sxapisagetenvPostWithHttpInfo($sxapisagetenv);
        return $response;
    }

    /**
     * Operation sxapisagetenvPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetenv $sxapisagetenv (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisagetenvResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetenvPostWithHttpInfo($sxapisagetenv)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetenvResp';
        $request = $this->sxapisagetenvPostRequest($sxapisagetenv);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisagetenvResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetenvPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetenv $sxapisagetenv (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetenvPostAsync($sxapisagetenv)
    {
        return $this->sxapisagetenvPostAsyncWithHttpInfo($sxapisagetenv)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetenvPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetenv $sxapisagetenv (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetenvPostAsyncWithHttpInfo($sxapisagetenv)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetenvResp';
        $request = $this->sxapisagetenvPostRequest($sxapisagetenv);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetenvPost'
     *
     * @param  \Swagger\Client\Model\Sxapisagetenv $sxapisagetenv (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetenvPostRequest($sxapisagetenv)
    {
        // verify the required parameter 'sxapisagetenv' is set
        if ($sxapisagetenv === null || (is_array($sxapisagetenv) && count($sxapisagetenv) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetenv when calling sxapisagetenvPost'
            );
        }

        $resourcePath = '/sxapisagetenv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetenv)) {
            $_tempBody = $sxapisagetenv;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetgenericdatalistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetgenericdatalist $sxapisagetgenericdatalist sxapisagetgenericdatalist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisagetgenericdatalistResp
     */
    public function sxapisagetgenericdatalistPost($sxapisagetgenericdatalist)
    {
        list($response) = $this->sxapisagetgenericdatalistPostWithHttpInfo($sxapisagetgenericdatalist);
        return $response;
    }

    /**
     * Operation sxapisagetgenericdatalistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetgenericdatalist $sxapisagetgenericdatalist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisagetgenericdatalistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetgenericdatalistPostWithHttpInfo($sxapisagetgenericdatalist)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetgenericdatalistResp';
        $request = $this->sxapisagetgenericdatalistPostRequest($sxapisagetgenericdatalist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisagetgenericdatalistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetgenericdatalistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetgenericdatalist $sxapisagetgenericdatalist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetgenericdatalistPostAsync($sxapisagetgenericdatalist)
    {
        return $this->sxapisagetgenericdatalistPostAsyncWithHttpInfo($sxapisagetgenericdatalist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetgenericdatalistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetgenericdatalist $sxapisagetgenericdatalist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetgenericdatalistPostAsyncWithHttpInfo($sxapisagetgenericdatalist)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetgenericdatalistResp';
        $request = $this->sxapisagetgenericdatalistPostRequest($sxapisagetgenericdatalist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetgenericdatalistPost'
     *
     * @param  \Swagger\Client\Model\Sxapisagetgenericdatalist $sxapisagetgenericdatalist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetgenericdatalistPostRequest($sxapisagetgenericdatalist)
    {
        // verify the required parameter 'sxapisagetgenericdatalist' is set
        if ($sxapisagetgenericdatalist === null || (is_array($sxapisagetgenericdatalist) && count($sxapisagetgenericdatalist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetgenericdatalist when calling sxapisagetgenericdatalistPost'
            );
        }

        $resourcePath = '/sxapisagetgenericdatalist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetgenericdatalist)) {
            $_tempBody = $sxapisagetgenericdatalist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetgenericdatalistv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetgenericdatalistv2 $sxapisagetgenericdatalistv2 sxapisagetgenericdatalistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisagetgenericdatalistv2Resp
     */
    public function sxapisagetgenericdatalistv2Post($sxapisagetgenericdatalistv2)
    {
        list($response) = $this->sxapisagetgenericdatalistv2PostWithHttpInfo($sxapisagetgenericdatalistv2);
        return $response;
    }

    /**
     * Operation sxapisagetgenericdatalistv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetgenericdatalistv2 $sxapisagetgenericdatalistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisagetgenericdatalistv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetgenericdatalistv2PostWithHttpInfo($sxapisagetgenericdatalistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisagetgenericdatalistv2Resp';
        $request = $this->sxapisagetgenericdatalistv2PostRequest($sxapisagetgenericdatalistv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisagetgenericdatalistv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetgenericdatalistv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetgenericdatalistv2 $sxapisagetgenericdatalistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetgenericdatalistv2PostAsync($sxapisagetgenericdatalistv2)
    {
        return $this->sxapisagetgenericdatalistv2PostAsyncWithHttpInfo($sxapisagetgenericdatalistv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetgenericdatalistv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetgenericdatalistv2 $sxapisagetgenericdatalistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetgenericdatalistv2PostAsyncWithHttpInfo($sxapisagetgenericdatalistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisagetgenericdatalistv2Resp';
        $request = $this->sxapisagetgenericdatalistv2PostRequest($sxapisagetgenericdatalistv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetgenericdatalistv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapisagetgenericdatalistv2 $sxapisagetgenericdatalistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetgenericdatalistv2PostRequest($sxapisagetgenericdatalistv2)
    {
        // verify the required parameter 'sxapisagetgenericdatalistv2' is set
        if ($sxapisagetgenericdatalistv2 === null || (is_array($sxapisagetgenericdatalistv2) && count($sxapisagetgenericdatalistv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetgenericdatalistv2 when calling sxapisagetgenericdatalistv2Post'
            );
        }

        $resourcePath = '/sxapisagetgenericdatalistv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetgenericdatalistv2)) {
            $_tempBody = $sxapisagetgenericdatalistv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetgenericdatalistv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetgenericdatalistv3 $sxapisagetgenericdatalistv3 sxapisagetgenericdatalistv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisagetgenericdatalistv3Resp
     */
    public function sxapisagetgenericdatalistv3Post($sxapisagetgenericdatalistv3)
    {
        list($response) = $this->sxapisagetgenericdatalistv3PostWithHttpInfo($sxapisagetgenericdatalistv3);
        return $response;
    }

    /**
     * Operation sxapisagetgenericdatalistv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetgenericdatalistv3 $sxapisagetgenericdatalistv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisagetgenericdatalistv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetgenericdatalistv3PostWithHttpInfo($sxapisagetgenericdatalistv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapisagetgenericdatalistv3Resp';
        $request = $this->sxapisagetgenericdatalistv3PostRequest($sxapisagetgenericdatalistv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisagetgenericdatalistv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetgenericdatalistv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetgenericdatalistv3 $sxapisagetgenericdatalistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetgenericdatalistv3PostAsync($sxapisagetgenericdatalistv3)
    {
        return $this->sxapisagetgenericdatalistv3PostAsyncWithHttpInfo($sxapisagetgenericdatalistv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetgenericdatalistv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetgenericdatalistv3 $sxapisagetgenericdatalistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetgenericdatalistv3PostAsyncWithHttpInfo($sxapisagetgenericdatalistv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapisagetgenericdatalistv3Resp';
        $request = $this->sxapisagetgenericdatalistv3PostRequest($sxapisagetgenericdatalistv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetgenericdatalistv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapisagetgenericdatalistv3 $sxapisagetgenericdatalistv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetgenericdatalistv3PostRequest($sxapisagetgenericdatalistv3)
    {
        // verify the required parameter 'sxapisagetgenericdatalistv3' is set
        if ($sxapisagetgenericdatalistv3 === null || (is_array($sxapisagetgenericdatalistv3) && count($sxapisagetgenericdatalistv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetgenericdatalistv3 when calling sxapisagetgenericdatalistv3Post'
            );
        }

        $resourcePath = '/sxapisagetgenericdatalistv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetgenericdatalistv3)) {
            $_tempBody = $sxapisagetgenericdatalistv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetgenericdatalistv4Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetgenericdatalistv4 $sxapisagetgenericdatalistv4 sxapisagetgenericdatalistv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisagetgenericdatalistv4Resp
     */
    public function sxapisagetgenericdatalistv4Post($sxapisagetgenericdatalistv4)
    {
        list($response) = $this->sxapisagetgenericdatalistv4PostWithHttpInfo($sxapisagetgenericdatalistv4);
        return $response;
    }

    /**
     * Operation sxapisagetgenericdatalistv4PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetgenericdatalistv4 $sxapisagetgenericdatalistv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisagetgenericdatalistv4Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetgenericdatalistv4PostWithHttpInfo($sxapisagetgenericdatalistv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapisagetgenericdatalistv4Resp';
        $request = $this->sxapisagetgenericdatalistv4PostRequest($sxapisagetgenericdatalistv4);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisagetgenericdatalistv4Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetgenericdatalistv4PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetgenericdatalistv4 $sxapisagetgenericdatalistv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetgenericdatalistv4PostAsync($sxapisagetgenericdatalistv4)
    {
        return $this->sxapisagetgenericdatalistv4PostAsyncWithHttpInfo($sxapisagetgenericdatalistv4)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetgenericdatalistv4PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetgenericdatalistv4 $sxapisagetgenericdatalistv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetgenericdatalistv4PostAsyncWithHttpInfo($sxapisagetgenericdatalistv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapisagetgenericdatalistv4Resp';
        $request = $this->sxapisagetgenericdatalistv4PostRequest($sxapisagetgenericdatalistv4);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetgenericdatalistv4Post'
     *
     * @param  \Swagger\Client\Model\Sxapisagetgenericdatalistv4 $sxapisagetgenericdatalistv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetgenericdatalistv4PostRequest($sxapisagetgenericdatalistv4)
    {
        // verify the required parameter 'sxapisagetgenericdatalistv4' is set
        if ($sxapisagetgenericdatalistv4 === null || (is_array($sxapisagetgenericdatalistv4) && count($sxapisagetgenericdatalistv4) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetgenericdatalistv4 when calling sxapisagetgenericdatalistv4Post'
            );
        }

        $resourcePath = '/sxapisagetgenericdatalistv4';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetgenericdatalistv4)) {
            $_tempBody = $sxapisagetgenericdatalistv4;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetinternalprocsPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetinternalprocs $sxapisagetinternalprocs sxapisagetinternalprocs (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisagetinternalprocsResp
     */
    public function sxapisagetinternalprocsPost($sxapisagetinternalprocs)
    {
        list($response) = $this->sxapisagetinternalprocsPostWithHttpInfo($sxapisagetinternalprocs);
        return $response;
    }

    /**
     * Operation sxapisagetinternalprocsPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetinternalprocs $sxapisagetinternalprocs (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisagetinternalprocsResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetinternalprocsPostWithHttpInfo($sxapisagetinternalprocs)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetinternalprocsResp';
        $request = $this->sxapisagetinternalprocsPostRequest($sxapisagetinternalprocs);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisagetinternalprocsResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetinternalprocsPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetinternalprocs $sxapisagetinternalprocs (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetinternalprocsPostAsync($sxapisagetinternalprocs)
    {
        return $this->sxapisagetinternalprocsPostAsyncWithHttpInfo($sxapisagetinternalprocs)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetinternalprocsPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetinternalprocs $sxapisagetinternalprocs (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetinternalprocsPostAsyncWithHttpInfo($sxapisagetinternalprocs)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetinternalprocsResp';
        $request = $this->sxapisagetinternalprocsPostRequest($sxapisagetinternalprocs);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetinternalprocsPost'
     *
     * @param  \Swagger\Client\Model\Sxapisagetinternalprocs $sxapisagetinternalprocs (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetinternalprocsPostRequest($sxapisagetinternalprocs)
    {
        // verify the required parameter 'sxapisagetinternalprocs' is set
        if ($sxapisagetinternalprocs === null || (is_array($sxapisagetinternalprocs) && count($sxapisagetinternalprocs) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetinternalprocs when calling sxapisagetinternalprocsPost'
            );
        }

        $resourcePath = '/sxapisagetinternalprocs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetinternalprocs)) {
            $_tempBody = $sxapisagetinternalprocs;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetlinecommentsPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetlinecomments $sxapisagetlinecomments sxapisagetlinecomments (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisagetlinecommentsResp
     */
    public function sxapisagetlinecommentsPost($sxapisagetlinecomments)
    {
        list($response) = $this->sxapisagetlinecommentsPostWithHttpInfo($sxapisagetlinecomments);
        return $response;
    }

    /**
     * Operation sxapisagetlinecommentsPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetlinecomments $sxapisagetlinecomments (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisagetlinecommentsResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetlinecommentsPostWithHttpInfo($sxapisagetlinecomments)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetlinecommentsResp';
        $request = $this->sxapisagetlinecommentsPostRequest($sxapisagetlinecomments);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisagetlinecommentsResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetlinecommentsPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetlinecomments $sxapisagetlinecomments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetlinecommentsPostAsync($sxapisagetlinecomments)
    {
        return $this->sxapisagetlinecommentsPostAsyncWithHttpInfo($sxapisagetlinecomments)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetlinecommentsPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetlinecomments $sxapisagetlinecomments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetlinecommentsPostAsyncWithHttpInfo($sxapisagetlinecomments)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetlinecommentsResp';
        $request = $this->sxapisagetlinecommentsPostRequest($sxapisagetlinecomments);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetlinecommentsPost'
     *
     * @param  \Swagger\Client\Model\Sxapisagetlinecomments $sxapisagetlinecomments (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetlinecommentsPostRequest($sxapisagetlinecomments)
    {
        // verify the required parameter 'sxapisagetlinecomments' is set
        if ($sxapisagetlinecomments === null || (is_array($sxapisagetlinecomments) && count($sxapisagetlinecomments) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetlinecomments when calling sxapisagetlinecommentsPost'
            );
        }

        $resourcePath = '/sxapisagetlinecomments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetlinecomments)) {
            $_tempBody = $sxapisagetlinecomments;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetlostbusinesslistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetlostbusinesslist $sxapisagetlostbusinesslist sxapisagetlostbusinesslist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisagetlostbusinesslistResp
     */
    public function sxapisagetlostbusinesslistPost($sxapisagetlostbusinesslist)
    {
        list($response) = $this->sxapisagetlostbusinesslistPostWithHttpInfo($sxapisagetlostbusinesslist);
        return $response;
    }

    /**
     * Operation sxapisagetlostbusinesslistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetlostbusinesslist $sxapisagetlostbusinesslist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisagetlostbusinesslistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetlostbusinesslistPostWithHttpInfo($sxapisagetlostbusinesslist)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetlostbusinesslistResp';
        $request = $this->sxapisagetlostbusinesslistPostRequest($sxapisagetlostbusinesslist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisagetlostbusinesslistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetlostbusinesslistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetlostbusinesslist $sxapisagetlostbusinesslist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetlostbusinesslistPostAsync($sxapisagetlostbusinesslist)
    {
        return $this->sxapisagetlostbusinesslistPostAsyncWithHttpInfo($sxapisagetlostbusinesslist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetlostbusinesslistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetlostbusinesslist $sxapisagetlostbusinesslist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetlostbusinesslistPostAsyncWithHttpInfo($sxapisagetlostbusinesslist)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetlostbusinesslistResp';
        $request = $this->sxapisagetlostbusinesslistPostRequest($sxapisagetlostbusinesslist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetlostbusinesslistPost'
     *
     * @param  \Swagger\Client\Model\Sxapisagetlostbusinesslist $sxapisagetlostbusinesslist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetlostbusinesslistPostRequest($sxapisagetlostbusinesslist)
    {
        // verify the required parameter 'sxapisagetlostbusinesslist' is set
        if ($sxapisagetlostbusinesslist === null || (is_array($sxapisagetlostbusinesslist) && count($sxapisagetlostbusinesslist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetlostbusinesslist when calling sxapisagetlostbusinesslistPost'
            );
        }

        $resourcePath = '/sxapisagetlostbusinesslist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetlostbusinesslist)) {
            $_tempBody = $sxapisagetlostbusinesslist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetnoteslistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetnoteslist $sxapisagetnoteslist sxapisagetnoteslist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisagetnoteslistResp
     */
    public function sxapisagetnoteslistPost($sxapisagetnoteslist)
    {
        list($response) = $this->sxapisagetnoteslistPostWithHttpInfo($sxapisagetnoteslist);
        return $response;
    }

    /**
     * Operation sxapisagetnoteslistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetnoteslist $sxapisagetnoteslist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisagetnoteslistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetnoteslistPostWithHttpInfo($sxapisagetnoteslist)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetnoteslistResp';
        $request = $this->sxapisagetnoteslistPostRequest($sxapisagetnoteslist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisagetnoteslistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetnoteslistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetnoteslist $sxapisagetnoteslist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetnoteslistPostAsync($sxapisagetnoteslist)
    {
        return $this->sxapisagetnoteslistPostAsyncWithHttpInfo($sxapisagetnoteslist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetnoteslistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetnoteslist $sxapisagetnoteslist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetnoteslistPostAsyncWithHttpInfo($sxapisagetnoteslist)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetnoteslistResp';
        $request = $this->sxapisagetnoteslistPostRequest($sxapisagetnoteslist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetnoteslistPost'
     *
     * @param  \Swagger\Client\Model\Sxapisagetnoteslist $sxapisagetnoteslist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetnoteslistPostRequest($sxapisagetnoteslist)
    {
        // verify the required parameter 'sxapisagetnoteslist' is set
        if ($sxapisagetnoteslist === null || (is_array($sxapisagetnoteslist) && count($sxapisagetnoteslist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetnoteslist when calling sxapisagetnoteslistPost'
            );
        }

        $resourcePath = '/sxapisagetnoteslist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetnoteslist)) {
            $_tempBody = $sxapisagetnoteslist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetprocparamsPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetprocparams $sxapisagetprocparams sxapisagetprocparams (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisagetprocparamsResp
     */
    public function sxapisagetprocparamsPost($sxapisagetprocparams)
    {
        list($response) = $this->sxapisagetprocparamsPostWithHttpInfo($sxapisagetprocparams);
        return $response;
    }

    /**
     * Operation sxapisagetprocparamsPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetprocparams $sxapisagetprocparams (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisagetprocparamsResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetprocparamsPostWithHttpInfo($sxapisagetprocparams)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetprocparamsResp';
        $request = $this->sxapisagetprocparamsPostRequest($sxapisagetprocparams);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisagetprocparamsResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetprocparamsPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetprocparams $sxapisagetprocparams (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetprocparamsPostAsync($sxapisagetprocparams)
    {
        return $this->sxapisagetprocparamsPostAsyncWithHttpInfo($sxapisagetprocparams)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetprocparamsPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetprocparams $sxapisagetprocparams (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetprocparamsPostAsyncWithHttpInfo($sxapisagetprocparams)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetprocparamsResp';
        $request = $this->sxapisagetprocparamsPostRequest($sxapisagetprocparams);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetprocparamsPost'
     *
     * @param  \Swagger\Client\Model\Sxapisagetprocparams $sxapisagetprocparams (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetprocparamsPostRequest($sxapisagetprocparams)
    {
        // verify the required parameter 'sxapisagetprocparams' is set
        if ($sxapisagetprocparams === null || (is_array($sxapisagetprocparams) && count($sxapisagetprocparams) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetprocparams when calling sxapisagetprocparamsPost'
            );
        }

        $resourcePath = '/sxapisagetprocparams';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetprocparams)) {
            $_tempBody = $sxapisagetprocparams;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetreportlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetreportlist $sxapisagetreportlist sxapisagetreportlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisagetreportlistResp
     */
    public function sxapisagetreportlistPost($sxapisagetreportlist)
    {
        list($response) = $this->sxapisagetreportlistPostWithHttpInfo($sxapisagetreportlist);
        return $response;
    }

    /**
     * Operation sxapisagetreportlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetreportlist $sxapisagetreportlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisagetreportlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetreportlistPostWithHttpInfo($sxapisagetreportlist)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetreportlistResp';
        $request = $this->sxapisagetreportlistPostRequest($sxapisagetreportlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisagetreportlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetreportlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetreportlist $sxapisagetreportlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetreportlistPostAsync($sxapisagetreportlist)
    {
        return $this->sxapisagetreportlistPostAsyncWithHttpInfo($sxapisagetreportlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetreportlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetreportlist $sxapisagetreportlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetreportlistPostAsyncWithHttpInfo($sxapisagetreportlist)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetreportlistResp';
        $request = $this->sxapisagetreportlistPostRequest($sxapisagetreportlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetreportlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapisagetreportlist $sxapisagetreportlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetreportlistPostRequest($sxapisagetreportlist)
    {
        // verify the required parameter 'sxapisagetreportlist' is set
        if ($sxapisagetreportlist === null || (is_array($sxapisagetreportlist) && count($sxapisagetreportlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetreportlist when calling sxapisagetreportlistPost'
            );
        }

        $resourcePath = '/sxapisagetreportlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetreportlist)) {
            $_tempBody = $sxapisagetreportlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetreportstatusPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetreportstatus $sxapisagetreportstatus sxapisagetreportstatus (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisagetreportstatusResp
     */
    public function sxapisagetreportstatusPost($sxapisagetreportstatus)
    {
        list($response) = $this->sxapisagetreportstatusPostWithHttpInfo($sxapisagetreportstatus);
        return $response;
    }

    /**
     * Operation sxapisagetreportstatusPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetreportstatus $sxapisagetreportstatus (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisagetreportstatusResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetreportstatusPostWithHttpInfo($sxapisagetreportstatus)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetreportstatusResp';
        $request = $this->sxapisagetreportstatusPostRequest($sxapisagetreportstatus);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisagetreportstatusResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetreportstatusPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetreportstatus $sxapisagetreportstatus (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetreportstatusPostAsync($sxapisagetreportstatus)
    {
        return $this->sxapisagetreportstatusPostAsyncWithHttpInfo($sxapisagetreportstatus)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetreportstatusPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetreportstatus $sxapisagetreportstatus (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetreportstatusPostAsyncWithHttpInfo($sxapisagetreportstatus)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetreportstatusResp';
        $request = $this->sxapisagetreportstatusPostRequest($sxapisagetreportstatus);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetreportstatusPost'
     *
     * @param  \Swagger\Client\Model\Sxapisagetreportstatus $sxapisagetreportstatus (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetreportstatusPostRequest($sxapisagetreportstatus)
    {
        // verify the required parameter 'sxapisagetreportstatus' is set
        if ($sxapisagetreportstatus === null || (is_array($sxapisagetreportstatus) && count($sxapisagetreportstatus) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetreportstatus when calling sxapisagetreportstatusPost'
            );
        }

        $resourcePath = '/sxapisagetreportstatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetreportstatus)) {
            $_tempBody = $sxapisagetreportstatus;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetrptrangeoptionsPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetrptrangeoptions $sxapisagetrptrangeoptions sxapisagetrptrangeoptions (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisagetrptrangeoptionsResp
     */
    public function sxapisagetrptrangeoptionsPost($sxapisagetrptrangeoptions)
    {
        list($response) = $this->sxapisagetrptrangeoptionsPostWithHttpInfo($sxapisagetrptrangeoptions);
        return $response;
    }

    /**
     * Operation sxapisagetrptrangeoptionsPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetrptrangeoptions $sxapisagetrptrangeoptions (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisagetrptrangeoptionsResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetrptrangeoptionsPostWithHttpInfo($sxapisagetrptrangeoptions)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetrptrangeoptionsResp';
        $request = $this->sxapisagetrptrangeoptionsPostRequest($sxapisagetrptrangeoptions);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisagetrptrangeoptionsResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetrptrangeoptionsPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetrptrangeoptions $sxapisagetrptrangeoptions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetrptrangeoptionsPostAsync($sxapisagetrptrangeoptions)
    {
        return $this->sxapisagetrptrangeoptionsPostAsyncWithHttpInfo($sxapisagetrptrangeoptions)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetrptrangeoptionsPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetrptrangeoptions $sxapisagetrptrangeoptions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetrptrangeoptionsPostAsyncWithHttpInfo($sxapisagetrptrangeoptions)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetrptrangeoptionsResp';
        $request = $this->sxapisagetrptrangeoptionsPostRequest($sxapisagetrptrangeoptions);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetrptrangeoptionsPost'
     *
     * @param  \Swagger\Client\Model\Sxapisagetrptrangeoptions $sxapisagetrptrangeoptions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetrptrangeoptionsPostRequest($sxapisagetrptrangeoptions)
    {
        // verify the required parameter 'sxapisagetrptrangeoptions' is set
        if ($sxapisagetrptrangeoptions === null || (is_array($sxapisagetrptrangeoptions) && count($sxapisagetrptrangeoptions) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetrptrangeoptions when calling sxapisagetrptrangeoptionsPost'
            );
        }

        $resourcePath = '/sxapisagetrptrangeoptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetrptrangeoptions)) {
            $_tempBody = $sxapisagetrptrangeoptions;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetrptrangeoptionsv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetrptrangeoptionsv2 $sxapisagetrptrangeoptionsv2 sxapisagetrptrangeoptionsv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisagetrptrangeoptionsv2Resp
     */
    public function sxapisagetrptrangeoptionsv2Post($sxapisagetrptrangeoptionsv2)
    {
        list($response) = $this->sxapisagetrptrangeoptionsv2PostWithHttpInfo($sxapisagetrptrangeoptionsv2);
        return $response;
    }

    /**
     * Operation sxapisagetrptrangeoptionsv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetrptrangeoptionsv2 $sxapisagetrptrangeoptionsv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisagetrptrangeoptionsv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetrptrangeoptionsv2PostWithHttpInfo($sxapisagetrptrangeoptionsv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisagetrptrangeoptionsv2Resp';
        $request = $this->sxapisagetrptrangeoptionsv2PostRequest($sxapisagetrptrangeoptionsv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisagetrptrangeoptionsv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetrptrangeoptionsv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetrptrangeoptionsv2 $sxapisagetrptrangeoptionsv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetrptrangeoptionsv2PostAsync($sxapisagetrptrangeoptionsv2)
    {
        return $this->sxapisagetrptrangeoptionsv2PostAsyncWithHttpInfo($sxapisagetrptrangeoptionsv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetrptrangeoptionsv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetrptrangeoptionsv2 $sxapisagetrptrangeoptionsv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetrptrangeoptionsv2PostAsyncWithHttpInfo($sxapisagetrptrangeoptionsv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisagetrptrangeoptionsv2Resp';
        $request = $this->sxapisagetrptrangeoptionsv2PostRequest($sxapisagetrptrangeoptionsv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetrptrangeoptionsv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapisagetrptrangeoptionsv2 $sxapisagetrptrangeoptionsv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetrptrangeoptionsv2PostRequest($sxapisagetrptrangeoptionsv2)
    {
        // verify the required parameter 'sxapisagetrptrangeoptionsv2' is set
        if ($sxapisagetrptrangeoptionsv2 === null || (is_array($sxapisagetrptrangeoptionsv2) && count($sxapisagetrptrangeoptionsv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetrptrangeoptionsv2 when calling sxapisagetrptrangeoptionsv2Post'
            );
        }

        $resourcePath = '/sxapisagetrptrangeoptionsv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetrptrangeoptionsv2)) {
            $_tempBody = $sxapisagetrptrangeoptionsv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetshipvialistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetshipvialist $sxapisagetshipvialist sxapisagetshipvialist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisagetshipvialistResp
     */
    public function sxapisagetshipvialistPost($sxapisagetshipvialist)
    {
        list($response) = $this->sxapisagetshipvialistPostWithHttpInfo($sxapisagetshipvialist);
        return $response;
    }

    /**
     * Operation sxapisagetshipvialistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetshipvialist $sxapisagetshipvialist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisagetshipvialistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetshipvialistPostWithHttpInfo($sxapisagetshipvialist)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetshipvialistResp';
        $request = $this->sxapisagetshipvialistPostRequest($sxapisagetshipvialist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisagetshipvialistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetshipvialistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetshipvialist $sxapisagetshipvialist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetshipvialistPostAsync($sxapisagetshipvialist)
    {
        return $this->sxapisagetshipvialistPostAsyncWithHttpInfo($sxapisagetshipvialist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetshipvialistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetshipvialist $sxapisagetshipvialist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetshipvialistPostAsyncWithHttpInfo($sxapisagetshipvialist)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetshipvialistResp';
        $request = $this->sxapisagetshipvialistPostRequest($sxapisagetshipvialist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetshipvialistPost'
     *
     * @param  \Swagger\Client\Model\Sxapisagetshipvialist $sxapisagetshipvialist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetshipvialistPostRequest($sxapisagetshipvialist)
    {
        // verify the required parameter 'sxapisagetshipvialist' is set
        if ($sxapisagetshipvialist === null || (is_array($sxapisagetshipvialist) && count($sxapisagetshipvialist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetshipvialist when calling sxapisagetshipvialistPost'
            );
        }

        $resourcePath = '/sxapisagetshipvialist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetshipvialist)) {
            $_tempBody = $sxapisagetshipvialist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetsinglestoredreportPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetsinglestoredreport $sxapisagetsinglestoredreport sxapisagetsinglestoredreport (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisagetsinglestoredreportResp
     */
    public function sxapisagetsinglestoredreportPost($sxapisagetsinglestoredreport)
    {
        list($response) = $this->sxapisagetsinglestoredreportPostWithHttpInfo($sxapisagetsinglestoredreport);
        return $response;
    }

    /**
     * Operation sxapisagetsinglestoredreportPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetsinglestoredreport $sxapisagetsinglestoredreport (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisagetsinglestoredreportResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetsinglestoredreportPostWithHttpInfo($sxapisagetsinglestoredreport)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetsinglestoredreportResp';
        $request = $this->sxapisagetsinglestoredreportPostRequest($sxapisagetsinglestoredreport);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisagetsinglestoredreportResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetsinglestoredreportPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetsinglestoredreport $sxapisagetsinglestoredreport (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetsinglestoredreportPostAsync($sxapisagetsinglestoredreport)
    {
        return $this->sxapisagetsinglestoredreportPostAsyncWithHttpInfo($sxapisagetsinglestoredreport)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetsinglestoredreportPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetsinglestoredreport $sxapisagetsinglestoredreport (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetsinglestoredreportPostAsyncWithHttpInfo($sxapisagetsinglestoredreport)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetsinglestoredreportResp';
        $request = $this->sxapisagetsinglestoredreportPostRequest($sxapisagetsinglestoredreport);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetsinglestoredreportPost'
     *
     * @param  \Swagger\Client\Model\Sxapisagetsinglestoredreport $sxapisagetsinglestoredreport (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetsinglestoredreportPostRequest($sxapisagetsinglestoredreport)
    {
        // verify the required parameter 'sxapisagetsinglestoredreport' is set
        if ($sxapisagetsinglestoredreport === null || (is_array($sxapisagetsinglestoredreport) && count($sxapisagetsinglestoredreport) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetsinglestoredreport when calling sxapisagetsinglestoredreportPost'
            );
        }

        $resourcePath = '/sxapisagetsinglestoredreport';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetsinglestoredreport)) {
            $_tempBody = $sxapisagetsinglestoredreport;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetstoredreportlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetstoredreportlist $sxapisagetstoredreportlist sxapisagetstoredreportlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisagetstoredreportlistResp
     */
    public function sxapisagetstoredreportlistPost($sxapisagetstoredreportlist)
    {
        list($response) = $this->sxapisagetstoredreportlistPostWithHttpInfo($sxapisagetstoredreportlist);
        return $response;
    }

    /**
     * Operation sxapisagetstoredreportlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetstoredreportlist $sxapisagetstoredreportlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisagetstoredreportlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetstoredreportlistPostWithHttpInfo($sxapisagetstoredreportlist)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetstoredreportlistResp';
        $request = $this->sxapisagetstoredreportlistPostRequest($sxapisagetstoredreportlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisagetstoredreportlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetstoredreportlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetstoredreportlist $sxapisagetstoredreportlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetstoredreportlistPostAsync($sxapisagetstoredreportlist)
    {
        return $this->sxapisagetstoredreportlistPostAsyncWithHttpInfo($sxapisagetstoredreportlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetstoredreportlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetstoredreportlist $sxapisagetstoredreportlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetstoredreportlistPostAsyncWithHttpInfo($sxapisagetstoredreportlist)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetstoredreportlistResp';
        $request = $this->sxapisagetstoredreportlistPostRequest($sxapisagetstoredreportlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetstoredreportlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapisagetstoredreportlist $sxapisagetstoredreportlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetstoredreportlistPostRequest($sxapisagetstoredreportlist)
    {
        // verify the required parameter 'sxapisagetstoredreportlist' is set
        if ($sxapisagetstoredreportlist === null || (is_array($sxapisagetstoredreportlist) && count($sxapisagetstoredreportlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetstoredreportlist when calling sxapisagetstoredreportlistPost'
            );
        }

        $resourcePath = '/sxapisagetstoredreportlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetstoredreportlist)) {
            $_tempBody = $sxapisagetstoredreportlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagettermslistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagettermslist $sxapisagettermslist sxapisagettermslist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisagettermslistResp
     */
    public function sxapisagettermslistPost($sxapisagettermslist)
    {
        list($response) = $this->sxapisagettermslistPostWithHttpInfo($sxapisagettermslist);
        return $response;
    }

    /**
     * Operation sxapisagettermslistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagettermslist $sxapisagettermslist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisagettermslistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagettermslistPostWithHttpInfo($sxapisagettermslist)
    {
        $returnType = '\Swagger\Client\Model\SxapisagettermslistResp';
        $request = $this->sxapisagettermslistPostRequest($sxapisagettermslist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisagettermslistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagettermslistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagettermslist $sxapisagettermslist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagettermslistPostAsync($sxapisagettermslist)
    {
        return $this->sxapisagettermslistPostAsyncWithHttpInfo($sxapisagettermslist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagettermslistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagettermslist $sxapisagettermslist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagettermslistPostAsyncWithHttpInfo($sxapisagettermslist)
    {
        $returnType = '\Swagger\Client\Model\SxapisagettermslistResp';
        $request = $this->sxapisagettermslistPostRequest($sxapisagettermslist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagettermslistPost'
     *
     * @param  \Swagger\Client\Model\Sxapisagettermslist $sxapisagettermslist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagettermslistPostRequest($sxapisagettermslist)
    {
        // verify the required parameter 'sxapisagettermslist' is set
        if ($sxapisagettermslist === null || (is_array($sxapisagettermslist) && count($sxapisagettermslist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagettermslist when calling sxapisagettermslistPost'
            );
        }

        $resourcePath = '/sxapisagettermslist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagettermslist)) {
            $_tempBody = $sxapisagettermslist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisagetunitofmeasurelistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetunitofmeasurelist $sxapisagetunitofmeasurelist sxapisagetunitofmeasurelist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisagetunitofmeasurelistResp
     */
    public function sxapisagetunitofmeasurelistPost($sxapisagetunitofmeasurelist)
    {
        list($response) = $this->sxapisagetunitofmeasurelistPostWithHttpInfo($sxapisagetunitofmeasurelist);
        return $response;
    }

    /**
     * Operation sxapisagetunitofmeasurelistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetunitofmeasurelist $sxapisagetunitofmeasurelist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisagetunitofmeasurelistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisagetunitofmeasurelistPostWithHttpInfo($sxapisagetunitofmeasurelist)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetunitofmeasurelistResp';
        $request = $this->sxapisagetunitofmeasurelistPostRequest($sxapisagetunitofmeasurelist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisagetunitofmeasurelistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisagetunitofmeasurelistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetunitofmeasurelist $sxapisagetunitofmeasurelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetunitofmeasurelistPostAsync($sxapisagetunitofmeasurelist)
    {
        return $this->sxapisagetunitofmeasurelistPostAsyncWithHttpInfo($sxapisagetunitofmeasurelist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisagetunitofmeasurelistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisagetunitofmeasurelist $sxapisagetunitofmeasurelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisagetunitofmeasurelistPostAsyncWithHttpInfo($sxapisagetunitofmeasurelist)
    {
        $returnType = '\Swagger\Client\Model\SxapisagetunitofmeasurelistResp';
        $request = $this->sxapisagetunitofmeasurelistPostRequest($sxapisagetunitofmeasurelist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisagetunitofmeasurelistPost'
     *
     * @param  \Swagger\Client\Model\Sxapisagetunitofmeasurelist $sxapisagetunitofmeasurelist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisagetunitofmeasurelistPostRequest($sxapisagetunitofmeasurelist)
    {
        // verify the required parameter 'sxapisagetunitofmeasurelist' is set
        if ($sxapisagetunitofmeasurelist === null || (is_array($sxapisagetunitofmeasurelist) && count($sxapisagetunitofmeasurelist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisagetunitofmeasurelist when calling sxapisagetunitofmeasurelistPost'
            );
        }

        $resourcePath = '/sxapisagetunitofmeasurelist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisagetunitofmeasurelist)) {
            $_tempBody = $sxapisagetunitofmeasurelist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisanotechangePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisanotechange $sxapisanotechange sxapisanotechange (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisanotechangeResp
     */
    public function sxapisanotechangePost($sxapisanotechange)
    {
        list($response) = $this->sxapisanotechangePostWithHttpInfo($sxapisanotechange);
        return $response;
    }

    /**
     * Operation sxapisanotechangePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisanotechange $sxapisanotechange (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisanotechangeResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisanotechangePostWithHttpInfo($sxapisanotechange)
    {
        $returnType = '\Swagger\Client\Model\SxapisanotechangeResp';
        $request = $this->sxapisanotechangePostRequest($sxapisanotechange);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisanotechangeResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisanotechangePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisanotechange $sxapisanotechange (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisanotechangePostAsync($sxapisanotechange)
    {
        return $this->sxapisanotechangePostAsyncWithHttpInfo($sxapisanotechange)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisanotechangePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisanotechange $sxapisanotechange (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisanotechangePostAsyncWithHttpInfo($sxapisanotechange)
    {
        $returnType = '\Swagger\Client\Model\SxapisanotechangeResp';
        $request = $this->sxapisanotechangePostRequest($sxapisanotechange);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisanotechangePost'
     *
     * @param  \Swagger\Client\Model\Sxapisanotechange $sxapisanotechange (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisanotechangePostRequest($sxapisanotechange)
    {
        // verify the required parameter 'sxapisanotechange' is set
        if ($sxapisanotechange === null || (is_array($sxapisanotechange) && count($sxapisanotechange) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisanotechange when calling sxapisanotechangePost'
            );
        }

        $resourcePath = '/sxapisanotechange';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisanotechange)) {
            $_tempBody = $sxapisanotechange;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisasubmitreportPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisasubmitreport $sxapisasubmitreport sxapisasubmitreport (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisasubmitreportResp
     */
    public function sxapisasubmitreportPost($sxapisasubmitreport)
    {
        list($response) = $this->sxapisasubmitreportPostWithHttpInfo($sxapisasubmitreport);
        return $response;
    }

    /**
     * Operation sxapisasubmitreportPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisasubmitreport $sxapisasubmitreport (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisasubmitreportResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisasubmitreportPostWithHttpInfo($sxapisasubmitreport)
    {
        $returnType = '\Swagger\Client\Model\SxapisasubmitreportResp';
        $request = $this->sxapisasubmitreportPostRequest($sxapisasubmitreport);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisasubmitreportResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisasubmitreportPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisasubmitreport $sxapisasubmitreport (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisasubmitreportPostAsync($sxapisasubmitreport)
    {
        return $this->sxapisasubmitreportPostAsyncWithHttpInfo($sxapisasubmitreport)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisasubmitreportPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisasubmitreport $sxapisasubmitreport (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisasubmitreportPostAsyncWithHttpInfo($sxapisasubmitreport)
    {
        $returnType = '\Swagger\Client\Model\SxapisasubmitreportResp';
        $request = $this->sxapisasubmitreportPostRequest($sxapisasubmitreport);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisasubmitreportPost'
     *
     * @param  \Swagger\Client\Model\Sxapisasubmitreport $sxapisasubmitreport (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisasubmitreportPostRequest($sxapisasubmitreport)
    {
        // verify the required parameter 'sxapisasubmitreport' is set
        if ($sxapisasubmitreport === null || (is_array($sxapisasubmitreport) && count($sxapisasubmitreport) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisasubmitreport when calling sxapisasubmitreportPost'
            );
        }

        $resourcePath = '/sxapisasubmitreport';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisasubmitreport)) {
            $_tempBody = $sxapisasubmitreport;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisasubmitreportv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisasubmitreportv2 $sxapisasubmitreportv2 sxapisasubmitreportv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisasubmitreportv2Resp
     */
    public function sxapisasubmitreportv2Post($sxapisasubmitreportv2)
    {
        list($response) = $this->sxapisasubmitreportv2PostWithHttpInfo($sxapisasubmitreportv2);
        return $response;
    }

    /**
     * Operation sxapisasubmitreportv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisasubmitreportv2 $sxapisasubmitreportv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisasubmitreportv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisasubmitreportv2PostWithHttpInfo($sxapisasubmitreportv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisasubmitreportv2Resp';
        $request = $this->sxapisasubmitreportv2PostRequest($sxapisasubmitreportv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisasubmitreportv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisasubmitreportv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisasubmitreportv2 $sxapisasubmitreportv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisasubmitreportv2PostAsync($sxapisasubmitreportv2)
    {
        return $this->sxapisasubmitreportv2PostAsyncWithHttpInfo($sxapisasubmitreportv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisasubmitreportv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisasubmitreportv2 $sxapisasubmitreportv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisasubmitreportv2PostAsyncWithHttpInfo($sxapisasubmitreportv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisasubmitreportv2Resp';
        $request = $this->sxapisasubmitreportv2PostRequest($sxapisasubmitreportv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisasubmitreportv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapisasubmitreportv2 $sxapisasubmitreportv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisasubmitreportv2PostRequest($sxapisasubmitreportv2)
    {
        // verify the required parameter 'sxapisasubmitreportv2' is set
        if ($sxapisasubmitreportv2 === null || (is_array($sxapisasubmitreportv2) && count($sxapisasubmitreportv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisasubmitreportv2 when calling sxapisasubmitreportv2Post'
            );
        }

        $resourcePath = '/sxapisasubmitreportv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisasubmitreportv2)) {
            $_tempBody = $sxapisasubmitreportv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisatablecodemntPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisatablecodemnt $sxapisatablecodemnt sxapisatablecodemnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisatablecodemntResp
     */
    public function sxapisatablecodemntPost($sxapisatablecodemnt)
    {
        list($response) = $this->sxapisatablecodemntPostWithHttpInfo($sxapisatablecodemnt);
        return $response;
    }

    /**
     * Operation sxapisatablecodemntPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisatablecodemnt $sxapisatablecodemnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisatablecodemntResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisatablecodemntPostWithHttpInfo($sxapisatablecodemnt)
    {
        $returnType = '\Swagger\Client\Model\SxapisatablecodemntResp';
        $request = $this->sxapisatablecodemntPostRequest($sxapisatablecodemnt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisatablecodemntResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisatablecodemntPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisatablecodemnt $sxapisatablecodemnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisatablecodemntPostAsync($sxapisatablecodemnt)
    {
        return $this->sxapisatablecodemntPostAsyncWithHttpInfo($sxapisatablecodemnt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisatablecodemntPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisatablecodemnt $sxapisatablecodemnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisatablecodemntPostAsyncWithHttpInfo($sxapisatablecodemnt)
    {
        $returnType = '\Swagger\Client\Model\SxapisatablecodemntResp';
        $request = $this->sxapisatablecodemntPostRequest($sxapisatablecodemnt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisatablecodemntPost'
     *
     * @param  \Swagger\Client\Model\Sxapisatablecodemnt $sxapisatablecodemnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisatablecodemntPostRequest($sxapisatablecodemnt)
    {
        // verify the required parameter 'sxapisatablecodemnt' is set
        if ($sxapisatablecodemnt === null || (is_array($sxapisatablecodemnt) && count($sxapisatablecodemnt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisatablecodemnt when calling sxapisatablecodemntPost'
            );
        }

        $resourcePath = '/sxapisatablecodemnt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisatablecodemnt)) {
            $_tempBody = $sxapisatablecodemnt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfcustomersummaryPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfcustomersummary $sxapisfcustomersummary sxapisfcustomersummary (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfcustomersummaryResp
     */
    public function sxapisfcustomersummaryPost($sxapisfcustomersummary)
    {
        list($response) = $this->sxapisfcustomersummaryPostWithHttpInfo($sxapisfcustomersummary);
        return $response;
    }

    /**
     * Operation sxapisfcustomersummaryPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfcustomersummary $sxapisfcustomersummary (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfcustomersummaryResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfcustomersummaryPostWithHttpInfo($sxapisfcustomersummary)
    {
        $returnType = '\Swagger\Client\Model\SxapisfcustomersummaryResp';
        $request = $this->sxapisfcustomersummaryPostRequest($sxapisfcustomersummary);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfcustomersummaryResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfcustomersummaryPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfcustomersummary $sxapisfcustomersummary (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfcustomersummaryPostAsync($sxapisfcustomersummary)
    {
        return $this->sxapisfcustomersummaryPostAsyncWithHttpInfo($sxapisfcustomersummary)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfcustomersummaryPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfcustomersummary $sxapisfcustomersummary (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfcustomersummaryPostAsyncWithHttpInfo($sxapisfcustomersummary)
    {
        $returnType = '\Swagger\Client\Model\SxapisfcustomersummaryResp';
        $request = $this->sxapisfcustomersummaryPostRequest($sxapisfcustomersummary);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfcustomersummaryPost'
     *
     * @param  \Swagger\Client\Model\Sxapisfcustomersummary $sxapisfcustomersummary (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfcustomersummaryPostRequest($sxapisfcustomersummary)
    {
        // verify the required parameter 'sxapisfcustomersummary' is set
        if ($sxapisfcustomersummary === null || (is_array($sxapisfcustomersummary) && count($sxapisfcustomersummary) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfcustomersummary when calling sxapisfcustomersummaryPost'
            );
        }

        $resourcePath = '/sxapisfcustomersummary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfcustomersummary)) {
            $_tempBody = $sxapisfcustomersummary;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetassortmentitemsPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetassortmentitems $sxapisfgetassortmentitems sxapisfgetassortmentitems (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfgetassortmentitemsResp
     */
    public function sxapisfgetassortmentitemsPost($sxapisfgetassortmentitems)
    {
        list($response) = $this->sxapisfgetassortmentitemsPostWithHttpInfo($sxapisfgetassortmentitems);
        return $response;
    }

    /**
     * Operation sxapisfgetassortmentitemsPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetassortmentitems $sxapisfgetassortmentitems (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfgetassortmentitemsResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetassortmentitemsPostWithHttpInfo($sxapisfgetassortmentitems)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetassortmentitemsResp';
        $request = $this->sxapisfgetassortmentitemsPostRequest($sxapisfgetassortmentitems);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfgetassortmentitemsResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetassortmentitemsPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetassortmentitems $sxapisfgetassortmentitems (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetassortmentitemsPostAsync($sxapisfgetassortmentitems)
    {
        return $this->sxapisfgetassortmentitemsPostAsyncWithHttpInfo($sxapisfgetassortmentitems)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetassortmentitemsPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetassortmentitems $sxapisfgetassortmentitems (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetassortmentitemsPostAsyncWithHttpInfo($sxapisfgetassortmentitems)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetassortmentitemsResp';
        $request = $this->sxapisfgetassortmentitemsPostRequest($sxapisfgetassortmentitems);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetassortmentitemsPost'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetassortmentitems $sxapisfgetassortmentitems (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetassortmentitemsPostRequest($sxapisfgetassortmentitems)
    {
        // verify the required parameter 'sxapisfgetassortmentitems' is set
        if ($sxapisfgetassortmentitems === null || (is_array($sxapisfgetassortmentitems) && count($sxapisfgetassortmentitems) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetassortmentitems when calling sxapisfgetassortmentitemsPost'
            );
        }

        $resourcePath = '/sxapisfgetassortmentitems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetassortmentitems)) {
            $_tempBody = $sxapisfgetassortmentitems;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetboxPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetbox $sxapisfgetbox sxapisfgetbox (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfgetboxResp
     */
    public function sxapisfgetboxPost($sxapisfgetbox)
    {
        list($response) = $this->sxapisfgetboxPostWithHttpInfo($sxapisfgetbox);
        return $response;
    }

    /**
     * Operation sxapisfgetboxPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetbox $sxapisfgetbox (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfgetboxResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetboxPostWithHttpInfo($sxapisfgetbox)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetboxResp';
        $request = $this->sxapisfgetboxPostRequest($sxapisfgetbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfgetboxResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetboxPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetbox $sxapisfgetbox (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetboxPostAsync($sxapisfgetbox)
    {
        return $this->sxapisfgetboxPostAsyncWithHttpInfo($sxapisfgetbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetboxPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetbox $sxapisfgetbox (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetboxPostAsyncWithHttpInfo($sxapisfgetbox)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetboxResp';
        $request = $this->sxapisfgetboxPostRequest($sxapisfgetbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetboxPost'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetbox $sxapisfgetbox (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetboxPostRequest($sxapisfgetbox)
    {
        // verify the required parameter 'sxapisfgetbox' is set
        if ($sxapisfgetbox === null || (is_array($sxapisfgetbox) && count($sxapisfgetbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetbox when calling sxapisfgetboxPost'
            );
        }

        $resourcePath = '/sxapisfgetbox';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetbox)) {
            $_tempBody = $sxapisfgetbox;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetcorpgroupPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetcorpgroup $sxapisfgetcorpgroup sxapisfgetcorpgroup (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfgetcorpgroupResp
     */
    public function sxapisfgetcorpgroupPost($sxapisfgetcorpgroup)
    {
        list($response) = $this->sxapisfgetcorpgroupPostWithHttpInfo($sxapisfgetcorpgroup);
        return $response;
    }

    /**
     * Operation sxapisfgetcorpgroupPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetcorpgroup $sxapisfgetcorpgroup (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfgetcorpgroupResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetcorpgroupPostWithHttpInfo($sxapisfgetcorpgroup)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetcorpgroupResp';
        $request = $this->sxapisfgetcorpgroupPostRequest($sxapisfgetcorpgroup);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfgetcorpgroupResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetcorpgroupPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetcorpgroup $sxapisfgetcorpgroup (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetcorpgroupPostAsync($sxapisfgetcorpgroup)
    {
        return $this->sxapisfgetcorpgroupPostAsyncWithHttpInfo($sxapisfgetcorpgroup)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetcorpgroupPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetcorpgroup $sxapisfgetcorpgroup (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetcorpgroupPostAsyncWithHttpInfo($sxapisfgetcorpgroup)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetcorpgroupResp';
        $request = $this->sxapisfgetcorpgroupPostRequest($sxapisfgetcorpgroup);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetcorpgroupPost'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetcorpgroup $sxapisfgetcorpgroup (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetcorpgroupPostRequest($sxapisfgetcorpgroup)
    {
        // verify the required parameter 'sxapisfgetcorpgroup' is set
        if ($sxapisfgetcorpgroup === null || (is_array($sxapisfgetcorpgroup) && count($sxapisfgetcorpgroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetcorpgroup when calling sxapisfgetcorpgroupPost'
            );
        }

        $resourcePath = '/sxapisfgetcorpgroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetcorpgroup)) {
            $_tempBody = $sxapisfgetcorpgroup;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetcustcommentPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetcustcomment $sxapisfgetcustcomment sxapisfgetcustcomment (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfgetcustcommentResp
     */
    public function sxapisfgetcustcommentPost($sxapisfgetcustcomment)
    {
        list($response) = $this->sxapisfgetcustcommentPostWithHttpInfo($sxapisfgetcustcomment);
        return $response;
    }

    /**
     * Operation sxapisfgetcustcommentPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetcustcomment $sxapisfgetcustcomment (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfgetcustcommentResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetcustcommentPostWithHttpInfo($sxapisfgetcustcomment)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetcustcommentResp';
        $request = $this->sxapisfgetcustcommentPostRequest($sxapisfgetcustcomment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfgetcustcommentResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetcustcommentPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetcustcomment $sxapisfgetcustcomment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetcustcommentPostAsync($sxapisfgetcustcomment)
    {
        return $this->sxapisfgetcustcommentPostAsyncWithHttpInfo($sxapisfgetcustcomment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetcustcommentPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetcustcomment $sxapisfgetcustcomment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetcustcommentPostAsyncWithHttpInfo($sxapisfgetcustcomment)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetcustcommentResp';
        $request = $this->sxapisfgetcustcommentPostRequest($sxapisfgetcustcomment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetcustcommentPost'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetcustcomment $sxapisfgetcustcomment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetcustcommentPostRequest($sxapisfgetcustcomment)
    {
        // verify the required parameter 'sxapisfgetcustcomment' is set
        if ($sxapisfgetcustcomment === null || (is_array($sxapisfgetcustcomment) && count($sxapisfgetcustcomment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetcustcomment when calling sxapisfgetcustcommentPost'
            );
        }

        $resourcePath = '/sxapisfgetcustcomment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetcustcomment)) {
            $_tempBody = $sxapisfgetcustcomment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetcustomermasterPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetcustomermaster $sxapisfgetcustomermaster sxapisfgetcustomermaster (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfgetcustomermasterResp
     */
    public function sxapisfgetcustomermasterPost($sxapisfgetcustomermaster)
    {
        list($response) = $this->sxapisfgetcustomermasterPostWithHttpInfo($sxapisfgetcustomermaster);
        return $response;
    }

    /**
     * Operation sxapisfgetcustomermasterPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetcustomermaster $sxapisfgetcustomermaster (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfgetcustomermasterResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetcustomermasterPostWithHttpInfo($sxapisfgetcustomermaster)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetcustomermasterResp';
        $request = $this->sxapisfgetcustomermasterPostRequest($sxapisfgetcustomermaster);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfgetcustomermasterResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetcustomermasterPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetcustomermaster $sxapisfgetcustomermaster (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetcustomermasterPostAsync($sxapisfgetcustomermaster)
    {
        return $this->sxapisfgetcustomermasterPostAsyncWithHttpInfo($sxapisfgetcustomermaster)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetcustomermasterPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetcustomermaster $sxapisfgetcustomermaster (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetcustomermasterPostAsyncWithHttpInfo($sxapisfgetcustomermaster)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetcustomermasterResp';
        $request = $this->sxapisfgetcustomermasterPostRequest($sxapisfgetcustomermaster);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetcustomermasterPost'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetcustomermaster $sxapisfgetcustomermaster (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetcustomermasterPostRequest($sxapisfgetcustomermaster)
    {
        // verify the required parameter 'sxapisfgetcustomermaster' is set
        if ($sxapisfgetcustomermaster === null || (is_array($sxapisfgetcustomermaster) && count($sxapisfgetcustomermaster) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetcustomermaster when calling sxapisfgetcustomermasterPost'
            );
        }

        $resourcePath = '/sxapisfgetcustomermaster';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetcustomermaster)) {
            $_tempBody = $sxapisfgetcustomermaster;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetcustomermasterv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetcustomermasterv2 $sxapisfgetcustomermasterv2 sxapisfgetcustomermasterv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisfgetcustomermasterv2Resp
     */
    public function sxapisfgetcustomermasterv2Post($sxapisfgetcustomermasterv2)
    {
        list($response) = $this->sxapisfgetcustomermasterv2PostWithHttpInfo($sxapisfgetcustomermasterv2);
        return $response;
    }

    /**
     * Operation sxapisfgetcustomermasterv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetcustomermasterv2 $sxapisfgetcustomermasterv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisfgetcustomermasterv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetcustomermasterv2PostWithHttpInfo($sxapisfgetcustomermasterv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetcustomermasterv2Resp';
        $request = $this->sxapisfgetcustomermasterv2PostRequest($sxapisfgetcustomermasterv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisfgetcustomermasterv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetcustomermasterv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetcustomermasterv2 $sxapisfgetcustomermasterv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetcustomermasterv2PostAsync($sxapisfgetcustomermasterv2)
    {
        return $this->sxapisfgetcustomermasterv2PostAsyncWithHttpInfo($sxapisfgetcustomermasterv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetcustomermasterv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetcustomermasterv2 $sxapisfgetcustomermasterv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetcustomermasterv2PostAsyncWithHttpInfo($sxapisfgetcustomermasterv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetcustomermasterv2Resp';
        $request = $this->sxapisfgetcustomermasterv2PostRequest($sxapisfgetcustomermasterv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetcustomermasterv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetcustomermasterv2 $sxapisfgetcustomermasterv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetcustomermasterv2PostRequest($sxapisfgetcustomermasterv2)
    {
        // verify the required parameter 'sxapisfgetcustomermasterv2' is set
        if ($sxapisfgetcustomermasterv2 === null || (is_array($sxapisfgetcustomermasterv2) && count($sxapisfgetcustomermasterv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetcustomermasterv2 when calling sxapisfgetcustomermasterv2Post'
            );
        }

        $resourcePath = '/sxapisfgetcustomermasterv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetcustomermasterv2)) {
            $_tempBody = $sxapisfgetcustomermasterv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetenvironmentPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetenvironment $sxapisfgetenvironment sxapisfgetenvironment (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfgetenvironmentResp
     */
    public function sxapisfgetenvironmentPost($sxapisfgetenvironment)
    {
        list($response) = $this->sxapisfgetenvironmentPostWithHttpInfo($sxapisfgetenvironment);
        return $response;
    }

    /**
     * Operation sxapisfgetenvironmentPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetenvironment $sxapisfgetenvironment (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfgetenvironmentResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetenvironmentPostWithHttpInfo($sxapisfgetenvironment)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetenvironmentResp';
        $request = $this->sxapisfgetenvironmentPostRequest($sxapisfgetenvironment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfgetenvironmentResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetenvironmentPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetenvironment $sxapisfgetenvironment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetenvironmentPostAsync($sxapisfgetenvironment)
    {
        return $this->sxapisfgetenvironmentPostAsyncWithHttpInfo($sxapisfgetenvironment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetenvironmentPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetenvironment $sxapisfgetenvironment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetenvironmentPostAsyncWithHttpInfo($sxapisfgetenvironment)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetenvironmentResp';
        $request = $this->sxapisfgetenvironmentPostRequest($sxapisfgetenvironment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetenvironmentPost'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetenvironment $sxapisfgetenvironment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetenvironmentPostRequest($sxapisfgetenvironment)
    {
        // verify the required parameter 'sxapisfgetenvironment' is set
        if ($sxapisfgetenvironment === null || (is_array($sxapisfgetenvironment) && count($sxapisfgetenvironment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetenvironment when calling sxapisfgetenvironmentPost'
            );
        }

        $resourcePath = '/sxapisfgetenvironment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetenvironment)) {
            $_tempBody = $sxapisfgetenvironment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetgenericdataPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetgenericdata $sxapisfgetgenericdata sxapisfgetgenericdata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfgetgenericdataResp
     */
    public function sxapisfgetgenericdataPost($sxapisfgetgenericdata)
    {
        list($response) = $this->sxapisfgetgenericdataPostWithHttpInfo($sxapisfgetgenericdata);
        return $response;
    }

    /**
     * Operation sxapisfgetgenericdataPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetgenericdata $sxapisfgetgenericdata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfgetgenericdataResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetgenericdataPostWithHttpInfo($sxapisfgetgenericdata)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetgenericdataResp';
        $request = $this->sxapisfgetgenericdataPostRequest($sxapisfgetgenericdata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfgetgenericdataResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetgenericdataPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetgenericdata $sxapisfgetgenericdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetgenericdataPostAsync($sxapisfgetgenericdata)
    {
        return $this->sxapisfgetgenericdataPostAsyncWithHttpInfo($sxapisfgetgenericdata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetgenericdataPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetgenericdata $sxapisfgetgenericdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetgenericdataPostAsyncWithHttpInfo($sxapisfgetgenericdata)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetgenericdataResp';
        $request = $this->sxapisfgetgenericdataPostRequest($sxapisfgetgenericdata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetgenericdataPost'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetgenericdata $sxapisfgetgenericdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetgenericdataPostRequest($sxapisfgetgenericdata)
    {
        // verify the required parameter 'sxapisfgetgenericdata' is set
        if ($sxapisfgetgenericdata === null || (is_array($sxapisfgetgenericdata) && count($sxapisfgetgenericdata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetgenericdata when calling sxapisfgetgenericdataPost'
            );
        }

        $resourcePath = '/sxapisfgetgenericdata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetgenericdata)) {
            $_tempBody = $sxapisfgetgenericdata;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetgenericdatav2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetgenericdatav2 $sxapisfgetgenericdatav2 sxapisfgetgenericdatav2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisfgetgenericdatav2Resp
     */
    public function sxapisfgetgenericdatav2Post($sxapisfgetgenericdatav2)
    {
        list($response) = $this->sxapisfgetgenericdatav2PostWithHttpInfo($sxapisfgetgenericdatav2);
        return $response;
    }

    /**
     * Operation sxapisfgetgenericdatav2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetgenericdatav2 $sxapisfgetgenericdatav2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisfgetgenericdatav2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetgenericdatav2PostWithHttpInfo($sxapisfgetgenericdatav2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetgenericdatav2Resp';
        $request = $this->sxapisfgetgenericdatav2PostRequest($sxapisfgetgenericdatav2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisfgetgenericdatav2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetgenericdatav2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetgenericdatav2 $sxapisfgetgenericdatav2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetgenericdatav2PostAsync($sxapisfgetgenericdatav2)
    {
        return $this->sxapisfgetgenericdatav2PostAsyncWithHttpInfo($sxapisfgetgenericdatav2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetgenericdatav2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetgenericdatav2 $sxapisfgetgenericdatav2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetgenericdatav2PostAsyncWithHttpInfo($sxapisfgetgenericdatav2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetgenericdatav2Resp';
        $request = $this->sxapisfgetgenericdatav2PostRequest($sxapisfgetgenericdatav2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetgenericdatav2Post'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetgenericdatav2 $sxapisfgetgenericdatav2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetgenericdatav2PostRequest($sxapisfgetgenericdatav2)
    {
        // verify the required parameter 'sxapisfgetgenericdatav2' is set
        if ($sxapisfgetgenericdatav2 === null || (is_array($sxapisfgetgenericdatav2) && count($sxapisfgetgenericdatav2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetgenericdatav2 when calling sxapisfgetgenericdatav2Post'
            );
        }

        $resourcePath = '/sxapisfgetgenericdatav2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetgenericdatav2)) {
            $_tempBody = $sxapisfgetgenericdatav2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetinvoicedetailPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetinvoicedetail $sxapisfgetinvoicedetail sxapisfgetinvoicedetail (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfgetinvoicedetailResp
     */
    public function sxapisfgetinvoicedetailPost($sxapisfgetinvoicedetail)
    {
        list($response) = $this->sxapisfgetinvoicedetailPostWithHttpInfo($sxapisfgetinvoicedetail);
        return $response;
    }

    /**
     * Operation sxapisfgetinvoicedetailPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetinvoicedetail $sxapisfgetinvoicedetail (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfgetinvoicedetailResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetinvoicedetailPostWithHttpInfo($sxapisfgetinvoicedetail)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetinvoicedetailResp';
        $request = $this->sxapisfgetinvoicedetailPostRequest($sxapisfgetinvoicedetail);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfgetinvoicedetailResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetinvoicedetailPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetinvoicedetail $sxapisfgetinvoicedetail (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetinvoicedetailPostAsync($sxapisfgetinvoicedetail)
    {
        return $this->sxapisfgetinvoicedetailPostAsyncWithHttpInfo($sxapisfgetinvoicedetail)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetinvoicedetailPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetinvoicedetail $sxapisfgetinvoicedetail (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetinvoicedetailPostAsyncWithHttpInfo($sxapisfgetinvoicedetail)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetinvoicedetailResp';
        $request = $this->sxapisfgetinvoicedetailPostRequest($sxapisfgetinvoicedetail);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetinvoicedetailPost'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetinvoicedetail $sxapisfgetinvoicedetail (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetinvoicedetailPostRequest($sxapisfgetinvoicedetail)
    {
        // verify the required parameter 'sxapisfgetinvoicedetail' is set
        if ($sxapisfgetinvoicedetail === null || (is_array($sxapisfgetinvoicedetail) && count($sxapisfgetinvoicedetail) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetinvoicedetail when calling sxapisfgetinvoicedetailPost'
            );
        }

        $resourcePath = '/sxapisfgetinvoicedetail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetinvoicedetail)) {
            $_tempBody = $sxapisfgetinvoicedetail;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetoeorderdataPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderdata $sxapisfgetoeorderdata sxapisfgetoeorderdata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfgetoeorderdataResp
     */
    public function sxapisfgetoeorderdataPost($sxapisfgetoeorderdata)
    {
        list($response) = $this->sxapisfgetoeorderdataPostWithHttpInfo($sxapisfgetoeorderdata);
        return $response;
    }

    /**
     * Operation sxapisfgetoeorderdataPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderdata $sxapisfgetoeorderdata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfgetoeorderdataResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetoeorderdataPostWithHttpInfo($sxapisfgetoeorderdata)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetoeorderdataResp';
        $request = $this->sxapisfgetoeorderdataPostRequest($sxapisfgetoeorderdata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfgetoeorderdataResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetoeorderdataPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderdata $sxapisfgetoeorderdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetoeorderdataPostAsync($sxapisfgetoeorderdata)
    {
        return $this->sxapisfgetoeorderdataPostAsyncWithHttpInfo($sxapisfgetoeorderdata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetoeorderdataPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderdata $sxapisfgetoeorderdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetoeorderdataPostAsyncWithHttpInfo($sxapisfgetoeorderdata)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetoeorderdataResp';
        $request = $this->sxapisfgetoeorderdataPostRequest($sxapisfgetoeorderdata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetoeorderdataPost'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderdata $sxapisfgetoeorderdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetoeorderdataPostRequest($sxapisfgetoeorderdata)
    {
        // verify the required parameter 'sxapisfgetoeorderdata' is set
        if ($sxapisfgetoeorderdata === null || (is_array($sxapisfgetoeorderdata) && count($sxapisfgetoeorderdata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetoeorderdata when calling sxapisfgetoeorderdataPost'
            );
        }

        $resourcePath = '/sxapisfgetoeorderdata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetoeorderdata)) {
            $_tempBody = $sxapisfgetoeorderdata;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetoeorderdatav2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderdatav2 $sxapisfgetoeorderdatav2 sxapisfgetoeorderdatav2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisfgetoeorderdatav2Resp
     */
    public function sxapisfgetoeorderdatav2Post($sxapisfgetoeorderdatav2)
    {
        list($response) = $this->sxapisfgetoeorderdatav2PostWithHttpInfo($sxapisfgetoeorderdatav2);
        return $response;
    }

    /**
     * Operation sxapisfgetoeorderdatav2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderdatav2 $sxapisfgetoeorderdatav2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisfgetoeorderdatav2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetoeorderdatav2PostWithHttpInfo($sxapisfgetoeorderdatav2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetoeorderdatav2Resp';
        $request = $this->sxapisfgetoeorderdatav2PostRequest($sxapisfgetoeorderdatav2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisfgetoeorderdatav2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetoeorderdatav2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderdatav2 $sxapisfgetoeorderdatav2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetoeorderdatav2PostAsync($sxapisfgetoeorderdatav2)
    {
        return $this->sxapisfgetoeorderdatav2PostAsyncWithHttpInfo($sxapisfgetoeorderdatav2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetoeorderdatav2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderdatav2 $sxapisfgetoeorderdatav2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetoeorderdatav2PostAsyncWithHttpInfo($sxapisfgetoeorderdatav2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetoeorderdatav2Resp';
        $request = $this->sxapisfgetoeorderdatav2PostRequest($sxapisfgetoeorderdatav2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetoeorderdatav2Post'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderdatav2 $sxapisfgetoeorderdatav2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetoeorderdatav2PostRequest($sxapisfgetoeorderdatav2)
    {
        // verify the required parameter 'sxapisfgetoeorderdatav2' is set
        if ($sxapisfgetoeorderdatav2 === null || (is_array($sxapisfgetoeorderdatav2) && count($sxapisfgetoeorderdatav2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetoeorderdatav2 when calling sxapisfgetoeorderdatav2Post'
            );
        }

        $resourcePath = '/sxapisfgetoeorderdatav2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetoeorderdatav2)) {
            $_tempBody = $sxapisfgetoeorderdatav2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetoeorderdatav3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderdatav3 $sxapisfgetoeorderdatav3 sxapisfgetoeorderdatav3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisfgetoeorderdatav3Resp
     */
    public function sxapisfgetoeorderdatav3Post($sxapisfgetoeorderdatav3)
    {
        list($response) = $this->sxapisfgetoeorderdatav3PostWithHttpInfo($sxapisfgetoeorderdatav3);
        return $response;
    }

    /**
     * Operation sxapisfgetoeorderdatav3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderdatav3 $sxapisfgetoeorderdatav3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisfgetoeorderdatav3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetoeorderdatav3PostWithHttpInfo($sxapisfgetoeorderdatav3)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetoeorderdatav3Resp';
        $request = $this->sxapisfgetoeorderdatav3PostRequest($sxapisfgetoeorderdatav3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisfgetoeorderdatav3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetoeorderdatav3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderdatav3 $sxapisfgetoeorderdatav3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetoeorderdatav3PostAsync($sxapisfgetoeorderdatav3)
    {
        return $this->sxapisfgetoeorderdatav3PostAsyncWithHttpInfo($sxapisfgetoeorderdatav3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetoeorderdatav3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderdatav3 $sxapisfgetoeorderdatav3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetoeorderdatav3PostAsyncWithHttpInfo($sxapisfgetoeorderdatav3)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetoeorderdatav3Resp';
        $request = $this->sxapisfgetoeorderdatav3PostRequest($sxapisfgetoeorderdatav3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetoeorderdatav3Post'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderdatav3 $sxapisfgetoeorderdatav3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetoeorderdatav3PostRequest($sxapisfgetoeorderdatav3)
    {
        // verify the required parameter 'sxapisfgetoeorderdatav3' is set
        if ($sxapisfgetoeorderdatav3 === null || (is_array($sxapisfgetoeorderdatav3) && count($sxapisfgetoeorderdatav3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetoeorderdatav3 when calling sxapisfgetoeorderdatav3Post'
            );
        }

        $resourcePath = '/sxapisfgetoeorderdatav3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetoeorderdatav3)) {
            $_tempBody = $sxapisfgetoeorderdatav3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetoeorderhistoryPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderhistory $sxapisfgetoeorderhistory sxapisfgetoeorderhistory (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfgetoeorderhistoryResp
     */
    public function sxapisfgetoeorderhistoryPost($sxapisfgetoeorderhistory)
    {
        list($response) = $this->sxapisfgetoeorderhistoryPostWithHttpInfo($sxapisfgetoeorderhistory);
        return $response;
    }

    /**
     * Operation sxapisfgetoeorderhistoryPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderhistory $sxapisfgetoeorderhistory (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfgetoeorderhistoryResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetoeorderhistoryPostWithHttpInfo($sxapisfgetoeorderhistory)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetoeorderhistoryResp';
        $request = $this->sxapisfgetoeorderhistoryPostRequest($sxapisfgetoeorderhistory);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfgetoeorderhistoryResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetoeorderhistoryPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderhistory $sxapisfgetoeorderhistory (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetoeorderhistoryPostAsync($sxapisfgetoeorderhistory)
    {
        return $this->sxapisfgetoeorderhistoryPostAsyncWithHttpInfo($sxapisfgetoeorderhistory)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetoeorderhistoryPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderhistory $sxapisfgetoeorderhistory (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetoeorderhistoryPostAsyncWithHttpInfo($sxapisfgetoeorderhistory)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetoeorderhistoryResp';
        $request = $this->sxapisfgetoeorderhistoryPostRequest($sxapisfgetoeorderhistory);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetoeorderhistoryPost'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderhistory $sxapisfgetoeorderhistory (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetoeorderhistoryPostRequest($sxapisfgetoeorderhistory)
    {
        // verify the required parameter 'sxapisfgetoeorderhistory' is set
        if ($sxapisfgetoeorderhistory === null || (is_array($sxapisfgetoeorderhistory) && count($sxapisfgetoeorderhistory) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetoeorderhistory when calling sxapisfgetoeorderhistoryPost'
            );
        }

        $resourcePath = '/sxapisfgetoeorderhistory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetoeorderhistory)) {
            $_tempBody = $sxapisfgetoeorderhistory;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetoeorderhistoryv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderhistoryv2 $sxapisfgetoeorderhistoryv2 sxapisfgetoeorderhistoryv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisfgetoeorderhistoryv2Resp
     */
    public function sxapisfgetoeorderhistoryv2Post($sxapisfgetoeorderhistoryv2)
    {
        list($response) = $this->sxapisfgetoeorderhistoryv2PostWithHttpInfo($sxapisfgetoeorderhistoryv2);
        return $response;
    }

    /**
     * Operation sxapisfgetoeorderhistoryv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderhistoryv2 $sxapisfgetoeorderhistoryv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisfgetoeorderhistoryv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetoeorderhistoryv2PostWithHttpInfo($sxapisfgetoeorderhistoryv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetoeorderhistoryv2Resp';
        $request = $this->sxapisfgetoeorderhistoryv2PostRequest($sxapisfgetoeorderhistoryv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisfgetoeorderhistoryv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetoeorderhistoryv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderhistoryv2 $sxapisfgetoeorderhistoryv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetoeorderhistoryv2PostAsync($sxapisfgetoeorderhistoryv2)
    {
        return $this->sxapisfgetoeorderhistoryv2PostAsyncWithHttpInfo($sxapisfgetoeorderhistoryv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetoeorderhistoryv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderhistoryv2 $sxapisfgetoeorderhistoryv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetoeorderhistoryv2PostAsyncWithHttpInfo($sxapisfgetoeorderhistoryv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetoeorderhistoryv2Resp';
        $request = $this->sxapisfgetoeorderhistoryv2PostRequest($sxapisfgetoeorderhistoryv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetoeorderhistoryv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetoeorderhistoryv2 $sxapisfgetoeorderhistoryv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetoeorderhistoryv2PostRequest($sxapisfgetoeorderhistoryv2)
    {
        // verify the required parameter 'sxapisfgetoeorderhistoryv2' is set
        if ($sxapisfgetoeorderhistoryv2 === null || (is_array($sxapisfgetoeorderhistoryv2) && count($sxapisfgetoeorderhistoryv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetoeorderhistoryv2 when calling sxapisfgetoeorderhistoryv2Post'
            );
        }

        $resourcePath = '/sxapisfgetoeorderhistoryv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetoeorderhistoryv2)) {
            $_tempBody = $sxapisfgetoeorderhistoryv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetopenartransactionPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopenartransaction $sxapisfgetopenartransaction sxapisfgetopenartransaction (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfgetopenartransactionResp
     */
    public function sxapisfgetopenartransactionPost($sxapisfgetopenartransaction)
    {
        list($response) = $this->sxapisfgetopenartransactionPostWithHttpInfo($sxapisfgetopenartransaction);
        return $response;
    }

    /**
     * Operation sxapisfgetopenartransactionPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopenartransaction $sxapisfgetopenartransaction (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfgetopenartransactionResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetopenartransactionPostWithHttpInfo($sxapisfgetopenartransaction)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetopenartransactionResp';
        $request = $this->sxapisfgetopenartransactionPostRequest($sxapisfgetopenartransaction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfgetopenartransactionResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetopenartransactionPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopenartransaction $sxapisfgetopenartransaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetopenartransactionPostAsync($sxapisfgetopenartransaction)
    {
        return $this->sxapisfgetopenartransactionPostAsyncWithHttpInfo($sxapisfgetopenartransaction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetopenartransactionPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopenartransaction $sxapisfgetopenartransaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetopenartransactionPostAsyncWithHttpInfo($sxapisfgetopenartransaction)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetopenartransactionResp';
        $request = $this->sxapisfgetopenartransactionPostRequest($sxapisfgetopenartransaction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetopenartransactionPost'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopenartransaction $sxapisfgetopenartransaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetopenartransactionPostRequest($sxapisfgetopenartransaction)
    {
        // verify the required parameter 'sxapisfgetopenartransaction' is set
        if ($sxapisfgetopenartransaction === null || (is_array($sxapisfgetopenartransaction) && count($sxapisfgetopenartransaction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetopenartransaction when calling sxapisfgetopenartransactionPost'
            );
        }

        $resourcePath = '/sxapisfgetopenartransaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetopenartransaction)) {
            $_tempBody = $sxapisfgetopenartransaction;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetopenartransactionv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopenartransactionv2 $sxapisfgetopenartransactionv2 sxapisfgetopenartransactionv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisfgetopenartransactionv2Resp
     */
    public function sxapisfgetopenartransactionv2Post($sxapisfgetopenartransactionv2)
    {
        list($response) = $this->sxapisfgetopenartransactionv2PostWithHttpInfo($sxapisfgetopenartransactionv2);
        return $response;
    }

    /**
     * Operation sxapisfgetopenartransactionv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopenartransactionv2 $sxapisfgetopenartransactionv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisfgetopenartransactionv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetopenartransactionv2PostWithHttpInfo($sxapisfgetopenartransactionv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetopenartransactionv2Resp';
        $request = $this->sxapisfgetopenartransactionv2PostRequest($sxapisfgetopenartransactionv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisfgetopenartransactionv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetopenartransactionv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopenartransactionv2 $sxapisfgetopenartransactionv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetopenartransactionv2PostAsync($sxapisfgetopenartransactionv2)
    {
        return $this->sxapisfgetopenartransactionv2PostAsyncWithHttpInfo($sxapisfgetopenartransactionv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetopenartransactionv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopenartransactionv2 $sxapisfgetopenartransactionv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetopenartransactionv2PostAsyncWithHttpInfo($sxapisfgetopenartransactionv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetopenartransactionv2Resp';
        $request = $this->sxapisfgetopenartransactionv2PostRequest($sxapisfgetopenartransactionv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetopenartransactionv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopenartransactionv2 $sxapisfgetopenartransactionv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetopenartransactionv2PostRequest($sxapisfgetopenartransactionv2)
    {
        // verify the required parameter 'sxapisfgetopenartransactionv2' is set
        if ($sxapisfgetopenartransactionv2 === null || (is_array($sxapisfgetopenartransactionv2) && count($sxapisfgetopenartransactionv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetopenartransactionv2 when calling sxapisfgetopenartransactionv2Post'
            );
        }

        $resourcePath = '/sxapisfgetopenartransactionv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetopenartransactionv2)) {
            $_tempBody = $sxapisfgetopenartransactionv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetopeninvoicePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopeninvoice $sxapisfgetopeninvoice sxapisfgetopeninvoice (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfgetopeninvoiceResp
     */
    public function sxapisfgetopeninvoicePost($sxapisfgetopeninvoice)
    {
        list($response) = $this->sxapisfgetopeninvoicePostWithHttpInfo($sxapisfgetopeninvoice);
        return $response;
    }

    /**
     * Operation sxapisfgetopeninvoicePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopeninvoice $sxapisfgetopeninvoice (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfgetopeninvoiceResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetopeninvoicePostWithHttpInfo($sxapisfgetopeninvoice)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetopeninvoiceResp';
        $request = $this->sxapisfgetopeninvoicePostRequest($sxapisfgetopeninvoice);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfgetopeninvoiceResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetopeninvoicePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopeninvoice $sxapisfgetopeninvoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetopeninvoicePostAsync($sxapisfgetopeninvoice)
    {
        return $this->sxapisfgetopeninvoicePostAsyncWithHttpInfo($sxapisfgetopeninvoice)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetopeninvoicePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopeninvoice $sxapisfgetopeninvoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetopeninvoicePostAsyncWithHttpInfo($sxapisfgetopeninvoice)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetopeninvoiceResp';
        $request = $this->sxapisfgetopeninvoicePostRequest($sxapisfgetopeninvoice);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetopeninvoicePost'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopeninvoice $sxapisfgetopeninvoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetopeninvoicePostRequest($sxapisfgetopeninvoice)
    {
        // verify the required parameter 'sxapisfgetopeninvoice' is set
        if ($sxapisfgetopeninvoice === null || (is_array($sxapisfgetopeninvoice) && count($sxapisfgetopeninvoice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetopeninvoice when calling sxapisfgetopeninvoicePost'
            );
        }

        $resourcePath = '/sxapisfgetopeninvoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetopeninvoice)) {
            $_tempBody = $sxapisfgetopeninvoice;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetopeninvoicev2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopeninvoicev2 $sxapisfgetopeninvoicev2 sxapisfgetopeninvoicev2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisfgetopeninvoicev2Resp
     */
    public function sxapisfgetopeninvoicev2Post($sxapisfgetopeninvoicev2)
    {
        list($response) = $this->sxapisfgetopeninvoicev2PostWithHttpInfo($sxapisfgetopeninvoicev2);
        return $response;
    }

    /**
     * Operation sxapisfgetopeninvoicev2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopeninvoicev2 $sxapisfgetopeninvoicev2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisfgetopeninvoicev2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetopeninvoicev2PostWithHttpInfo($sxapisfgetopeninvoicev2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetopeninvoicev2Resp';
        $request = $this->sxapisfgetopeninvoicev2PostRequest($sxapisfgetopeninvoicev2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisfgetopeninvoicev2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetopeninvoicev2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopeninvoicev2 $sxapisfgetopeninvoicev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetopeninvoicev2PostAsync($sxapisfgetopeninvoicev2)
    {
        return $this->sxapisfgetopeninvoicev2PostAsyncWithHttpInfo($sxapisfgetopeninvoicev2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetopeninvoicev2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopeninvoicev2 $sxapisfgetopeninvoicev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetopeninvoicev2PostAsyncWithHttpInfo($sxapisfgetopeninvoicev2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetopeninvoicev2Resp';
        $request = $this->sxapisfgetopeninvoicev2PostRequest($sxapisfgetopeninvoicev2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetopeninvoicev2Post'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopeninvoicev2 $sxapisfgetopeninvoicev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetopeninvoicev2PostRequest($sxapisfgetopeninvoicev2)
    {
        // verify the required parameter 'sxapisfgetopeninvoicev2' is set
        if ($sxapisfgetopeninvoicev2 === null || (is_array($sxapisfgetopeninvoicev2) && count($sxapisfgetopeninvoicev2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetopeninvoicev2 when calling sxapisfgetopeninvoicev2Post'
            );
        }

        $resourcePath = '/sxapisfgetopeninvoicev2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetopeninvoicev2)) {
            $_tempBody = $sxapisfgetopeninvoicev2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetopenoeordersPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopenoeorders $sxapisfgetopenoeorders sxapisfgetopenoeorders (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfgetopenoeordersResp
     */
    public function sxapisfgetopenoeordersPost($sxapisfgetopenoeorders)
    {
        list($response) = $this->sxapisfgetopenoeordersPostWithHttpInfo($sxapisfgetopenoeorders);
        return $response;
    }

    /**
     * Operation sxapisfgetopenoeordersPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopenoeorders $sxapisfgetopenoeorders (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfgetopenoeordersResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetopenoeordersPostWithHttpInfo($sxapisfgetopenoeorders)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetopenoeordersResp';
        $request = $this->sxapisfgetopenoeordersPostRequest($sxapisfgetopenoeorders);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfgetopenoeordersResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetopenoeordersPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopenoeorders $sxapisfgetopenoeorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetopenoeordersPostAsync($sxapisfgetopenoeorders)
    {
        return $this->sxapisfgetopenoeordersPostAsyncWithHttpInfo($sxapisfgetopenoeorders)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetopenoeordersPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopenoeorders $sxapisfgetopenoeorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetopenoeordersPostAsyncWithHttpInfo($sxapisfgetopenoeorders)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetopenoeordersResp';
        $request = $this->sxapisfgetopenoeordersPostRequest($sxapisfgetopenoeorders);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetopenoeordersPost'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetopenoeorders $sxapisfgetopenoeorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetopenoeordersPostRequest($sxapisfgetopenoeorders)
    {
        // verify the required parameter 'sxapisfgetopenoeorders' is set
        if ($sxapisfgetopenoeorders === null || (is_array($sxapisfgetopenoeorders) && count($sxapisfgetopenoeorders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetopenoeorders when calling sxapisfgetopenoeordersPost'
            );
        }

        $resourcePath = '/sxapisfgetopenoeorders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetopenoeorders)) {
            $_tempBody = $sxapisfgetopenoeorders;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetpaidinvoicePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpaidinvoice $sxapisfgetpaidinvoice sxapisfgetpaidinvoice (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfgetpaidinvoiceResp
     */
    public function sxapisfgetpaidinvoicePost($sxapisfgetpaidinvoice)
    {
        list($response) = $this->sxapisfgetpaidinvoicePostWithHttpInfo($sxapisfgetpaidinvoice);
        return $response;
    }

    /**
     * Operation sxapisfgetpaidinvoicePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpaidinvoice $sxapisfgetpaidinvoice (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfgetpaidinvoiceResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetpaidinvoicePostWithHttpInfo($sxapisfgetpaidinvoice)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetpaidinvoiceResp';
        $request = $this->sxapisfgetpaidinvoicePostRequest($sxapisfgetpaidinvoice);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfgetpaidinvoiceResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetpaidinvoicePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpaidinvoice $sxapisfgetpaidinvoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetpaidinvoicePostAsync($sxapisfgetpaidinvoice)
    {
        return $this->sxapisfgetpaidinvoicePostAsyncWithHttpInfo($sxapisfgetpaidinvoice)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetpaidinvoicePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpaidinvoice $sxapisfgetpaidinvoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetpaidinvoicePostAsyncWithHttpInfo($sxapisfgetpaidinvoice)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetpaidinvoiceResp';
        $request = $this->sxapisfgetpaidinvoicePostRequest($sxapisfgetpaidinvoice);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetpaidinvoicePost'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpaidinvoice $sxapisfgetpaidinvoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetpaidinvoicePostRequest($sxapisfgetpaidinvoice)
    {
        // verify the required parameter 'sxapisfgetpaidinvoice' is set
        if ($sxapisfgetpaidinvoice === null || (is_array($sxapisfgetpaidinvoice) && count($sxapisfgetpaidinvoice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetpaidinvoice when calling sxapisfgetpaidinvoicePost'
            );
        }

        $resourcePath = '/sxapisfgetpaidinvoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetpaidinvoice)) {
            $_tempBody = $sxapisfgetpaidinvoice;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetpaidinvoicev2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpaidinvoicev2 $sxapisfgetpaidinvoicev2 sxapisfgetpaidinvoicev2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisfgetpaidinvoicev2Resp
     */
    public function sxapisfgetpaidinvoicev2Post($sxapisfgetpaidinvoicev2)
    {
        list($response) = $this->sxapisfgetpaidinvoicev2PostWithHttpInfo($sxapisfgetpaidinvoicev2);
        return $response;
    }

    /**
     * Operation sxapisfgetpaidinvoicev2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpaidinvoicev2 $sxapisfgetpaidinvoicev2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisfgetpaidinvoicev2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetpaidinvoicev2PostWithHttpInfo($sxapisfgetpaidinvoicev2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetpaidinvoicev2Resp';
        $request = $this->sxapisfgetpaidinvoicev2PostRequest($sxapisfgetpaidinvoicev2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisfgetpaidinvoicev2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetpaidinvoicev2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpaidinvoicev2 $sxapisfgetpaidinvoicev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetpaidinvoicev2PostAsync($sxapisfgetpaidinvoicev2)
    {
        return $this->sxapisfgetpaidinvoicev2PostAsyncWithHttpInfo($sxapisfgetpaidinvoicev2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetpaidinvoicev2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpaidinvoicev2 $sxapisfgetpaidinvoicev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetpaidinvoicev2PostAsyncWithHttpInfo($sxapisfgetpaidinvoicev2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetpaidinvoicev2Resp';
        $request = $this->sxapisfgetpaidinvoicev2PostRequest($sxapisfgetpaidinvoicev2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetpaidinvoicev2Post'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpaidinvoicev2 $sxapisfgetpaidinvoicev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetpaidinvoicev2PostRequest($sxapisfgetpaidinvoicev2)
    {
        // verify the required parameter 'sxapisfgetpaidinvoicev2' is set
        if ($sxapisfgetpaidinvoicev2 === null || (is_array($sxapisfgetpaidinvoicev2) && count($sxapisfgetpaidinvoicev2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetpaidinvoicev2 when calling sxapisfgetpaidinvoicev2Post'
            );
        }

        $resourcePath = '/sxapisfgetpaidinvoicev2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetpaidinvoicev2)) {
            $_tempBody = $sxapisfgetpaidinvoicev2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetpriceavailPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavail $sxapisfgetpriceavail sxapisfgetpriceavail (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfgetpriceavailResp
     */
    public function sxapisfgetpriceavailPost($sxapisfgetpriceavail)
    {
        list($response) = $this->sxapisfgetpriceavailPostWithHttpInfo($sxapisfgetpriceavail);
        return $response;
    }

    /**
     * Operation sxapisfgetpriceavailPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavail $sxapisfgetpriceavail (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfgetpriceavailResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetpriceavailPostWithHttpInfo($sxapisfgetpriceavail)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetpriceavailResp';
        $request = $this->sxapisfgetpriceavailPostRequest($sxapisfgetpriceavail);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfgetpriceavailResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetpriceavailPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavail $sxapisfgetpriceavail (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetpriceavailPostAsync($sxapisfgetpriceavail)
    {
        return $this->sxapisfgetpriceavailPostAsyncWithHttpInfo($sxapisfgetpriceavail)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetpriceavailPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavail $sxapisfgetpriceavail (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetpriceavailPostAsyncWithHttpInfo($sxapisfgetpriceavail)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetpriceavailResp';
        $request = $this->sxapisfgetpriceavailPostRequest($sxapisfgetpriceavail);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetpriceavailPost'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavail $sxapisfgetpriceavail (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetpriceavailPostRequest($sxapisfgetpriceavail)
    {
        // verify the required parameter 'sxapisfgetpriceavail' is set
        if ($sxapisfgetpriceavail === null || (is_array($sxapisfgetpriceavail) && count($sxapisfgetpriceavail) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetpriceavail when calling sxapisfgetpriceavailPost'
            );
        }

        $resourcePath = '/sxapisfgetpriceavail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetpriceavail)) {
            $_tempBody = $sxapisfgetpriceavail;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetpriceavailmultiplePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavailmultiple $sxapisfgetpriceavailmultiple sxapisfgetpriceavailmultiple (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfgetpriceavailmultipleResp
     */
    public function sxapisfgetpriceavailmultiplePost($sxapisfgetpriceavailmultiple)
    {
        list($response) = $this->sxapisfgetpriceavailmultiplePostWithHttpInfo($sxapisfgetpriceavailmultiple);
        return $response;
    }

    /**
     * Operation sxapisfgetpriceavailmultiplePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavailmultiple $sxapisfgetpriceavailmultiple (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfgetpriceavailmultipleResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetpriceavailmultiplePostWithHttpInfo($sxapisfgetpriceavailmultiple)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetpriceavailmultipleResp';
        $request = $this->sxapisfgetpriceavailmultiplePostRequest($sxapisfgetpriceavailmultiple);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfgetpriceavailmultipleResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetpriceavailmultiplePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavailmultiple $sxapisfgetpriceavailmultiple (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetpriceavailmultiplePostAsync($sxapisfgetpriceavailmultiple)
    {
        return $this->sxapisfgetpriceavailmultiplePostAsyncWithHttpInfo($sxapisfgetpriceavailmultiple)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetpriceavailmultiplePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavailmultiple $sxapisfgetpriceavailmultiple (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetpriceavailmultiplePostAsyncWithHttpInfo($sxapisfgetpriceavailmultiple)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetpriceavailmultipleResp';
        $request = $this->sxapisfgetpriceavailmultiplePostRequest($sxapisfgetpriceavailmultiple);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetpriceavailmultiplePost'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavailmultiple $sxapisfgetpriceavailmultiple (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetpriceavailmultiplePostRequest($sxapisfgetpriceavailmultiple)
    {
        // verify the required parameter 'sxapisfgetpriceavailmultiple' is set
        if ($sxapisfgetpriceavailmultiple === null || (is_array($sxapisfgetpriceavailmultiple) && count($sxapisfgetpriceavailmultiple) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetpriceavailmultiple when calling sxapisfgetpriceavailmultiplePost'
            );
        }

        $resourcePath = '/sxapisfgetpriceavailmultiple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetpriceavailmultiple)) {
            $_tempBody = $sxapisfgetpriceavailmultiple;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetpriceavailmultiplev2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavailmultiplev2 $sxapisfgetpriceavailmultiplev2 sxapisfgetpriceavailmultiplev2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisfgetpriceavailmultiplev2Resp
     */
    public function sxapisfgetpriceavailmultiplev2Post($sxapisfgetpriceavailmultiplev2)
    {
        list($response) = $this->sxapisfgetpriceavailmultiplev2PostWithHttpInfo($sxapisfgetpriceavailmultiplev2);
        return $response;
    }

    /**
     * Operation sxapisfgetpriceavailmultiplev2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavailmultiplev2 $sxapisfgetpriceavailmultiplev2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisfgetpriceavailmultiplev2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetpriceavailmultiplev2PostWithHttpInfo($sxapisfgetpriceavailmultiplev2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetpriceavailmultiplev2Resp';
        $request = $this->sxapisfgetpriceavailmultiplev2PostRequest($sxapisfgetpriceavailmultiplev2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisfgetpriceavailmultiplev2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetpriceavailmultiplev2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavailmultiplev2 $sxapisfgetpriceavailmultiplev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetpriceavailmultiplev2PostAsync($sxapisfgetpriceavailmultiplev2)
    {
        return $this->sxapisfgetpriceavailmultiplev2PostAsyncWithHttpInfo($sxapisfgetpriceavailmultiplev2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetpriceavailmultiplev2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavailmultiplev2 $sxapisfgetpriceavailmultiplev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetpriceavailmultiplev2PostAsyncWithHttpInfo($sxapisfgetpriceavailmultiplev2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetpriceavailmultiplev2Resp';
        $request = $this->sxapisfgetpriceavailmultiplev2PostRequest($sxapisfgetpriceavailmultiplev2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetpriceavailmultiplev2Post'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavailmultiplev2 $sxapisfgetpriceavailmultiplev2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetpriceavailmultiplev2PostRequest($sxapisfgetpriceavailmultiplev2)
    {
        // verify the required parameter 'sxapisfgetpriceavailmultiplev2' is set
        if ($sxapisfgetpriceavailmultiplev2 === null || (is_array($sxapisfgetpriceavailmultiplev2) && count($sxapisfgetpriceavailmultiplev2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetpriceavailmultiplev2 when calling sxapisfgetpriceavailmultiplev2Post'
            );
        }

        $resourcePath = '/sxapisfgetpriceavailmultiplev2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetpriceavailmultiplev2)) {
            $_tempBody = $sxapisfgetpriceavailmultiplev2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetpriceavailv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavailv2 $sxapisfgetpriceavailv2 sxapisfgetpriceavailv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisfgetpriceavailv2Resp
     */
    public function sxapisfgetpriceavailv2Post($sxapisfgetpriceavailv2)
    {
        list($response) = $this->sxapisfgetpriceavailv2PostWithHttpInfo($sxapisfgetpriceavailv2);
        return $response;
    }

    /**
     * Operation sxapisfgetpriceavailv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavailv2 $sxapisfgetpriceavailv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisfgetpriceavailv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetpriceavailv2PostWithHttpInfo($sxapisfgetpriceavailv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetpriceavailv2Resp';
        $request = $this->sxapisfgetpriceavailv2PostRequest($sxapisfgetpriceavailv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisfgetpriceavailv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetpriceavailv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavailv2 $sxapisfgetpriceavailv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetpriceavailv2PostAsync($sxapisfgetpriceavailv2)
    {
        return $this->sxapisfgetpriceavailv2PostAsyncWithHttpInfo($sxapisfgetpriceavailv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetpriceavailv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavailv2 $sxapisfgetpriceavailv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetpriceavailv2PostAsyncWithHttpInfo($sxapisfgetpriceavailv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetpriceavailv2Resp';
        $request = $this->sxapisfgetpriceavailv2PostRequest($sxapisfgetpriceavailv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetpriceavailv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavailv2 $sxapisfgetpriceavailv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetpriceavailv2PostRequest($sxapisfgetpriceavailv2)
    {
        // verify the required parameter 'sxapisfgetpriceavailv2' is set
        if ($sxapisfgetpriceavailv2 === null || (is_array($sxapisfgetpriceavailv2) && count($sxapisfgetpriceavailv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetpriceavailv2 when calling sxapisfgetpriceavailv2Post'
            );
        }

        $resourcePath = '/sxapisfgetpriceavailv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetpriceavailv2)) {
            $_tempBody = $sxapisfgetpriceavailv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetpriceavailv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavailv3 $sxapisfgetpriceavailv3 sxapisfgetpriceavailv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisfgetpriceavailv3Resp
     */
    public function sxapisfgetpriceavailv3Post($sxapisfgetpriceavailv3)
    {
        list($response) = $this->sxapisfgetpriceavailv3PostWithHttpInfo($sxapisfgetpriceavailv3);
        return $response;
    }

    /**
     * Operation sxapisfgetpriceavailv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavailv3 $sxapisfgetpriceavailv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisfgetpriceavailv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetpriceavailv3PostWithHttpInfo($sxapisfgetpriceavailv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetpriceavailv3Resp';
        $request = $this->sxapisfgetpriceavailv3PostRequest($sxapisfgetpriceavailv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisfgetpriceavailv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetpriceavailv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavailv3 $sxapisfgetpriceavailv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetpriceavailv3PostAsync($sxapisfgetpriceavailv3)
    {
        return $this->sxapisfgetpriceavailv3PostAsyncWithHttpInfo($sxapisfgetpriceavailv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetpriceavailv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavailv3 $sxapisfgetpriceavailv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetpriceavailv3PostAsyncWithHttpInfo($sxapisfgetpriceavailv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetpriceavailv3Resp';
        $request = $this->sxapisfgetpriceavailv3PostRequest($sxapisfgetpriceavailv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetpriceavailv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetpriceavailv3 $sxapisfgetpriceavailv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetpriceavailv3PostRequest($sxapisfgetpriceavailv3)
    {
        // verify the required parameter 'sxapisfgetpriceavailv3' is set
        if ($sxapisfgetpriceavailv3 === null || (is_array($sxapisfgetpriceavailv3) && count($sxapisfgetpriceavailv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetpriceavailv3 when calling sxapisfgetpriceavailv3Post'
            );
        }

        $resourcePath = '/sxapisfgetpriceavailv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetpriceavailv3)) {
            $_tempBody = $sxapisfgetpriceavailv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetsalesstatisticsPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetsalesstatistics $sxapisfgetsalesstatistics sxapisfgetsalesstatistics (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfgetsalesstatisticsResp
     */
    public function sxapisfgetsalesstatisticsPost($sxapisfgetsalesstatistics)
    {
        list($response) = $this->sxapisfgetsalesstatisticsPostWithHttpInfo($sxapisfgetsalesstatistics);
        return $response;
    }

    /**
     * Operation sxapisfgetsalesstatisticsPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetsalesstatistics $sxapisfgetsalesstatistics (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfgetsalesstatisticsResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetsalesstatisticsPostWithHttpInfo($sxapisfgetsalesstatistics)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetsalesstatisticsResp';
        $request = $this->sxapisfgetsalesstatisticsPostRequest($sxapisfgetsalesstatistics);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfgetsalesstatisticsResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetsalesstatisticsPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetsalesstatistics $sxapisfgetsalesstatistics (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetsalesstatisticsPostAsync($sxapisfgetsalesstatistics)
    {
        return $this->sxapisfgetsalesstatisticsPostAsyncWithHttpInfo($sxapisfgetsalesstatistics)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetsalesstatisticsPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetsalesstatistics $sxapisfgetsalesstatistics (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetsalesstatisticsPostAsyncWithHttpInfo($sxapisfgetsalesstatistics)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetsalesstatisticsResp';
        $request = $this->sxapisfgetsalesstatisticsPostRequest($sxapisfgetsalesstatistics);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetsalesstatisticsPost'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetsalesstatistics $sxapisfgetsalesstatistics (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetsalesstatisticsPostRequest($sxapisfgetsalesstatistics)
    {
        // verify the required parameter 'sxapisfgetsalesstatistics' is set
        if ($sxapisfgetsalesstatistics === null || (is_array($sxapisfgetsalesstatistics) && count($sxapisfgetsalesstatistics) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetsalesstatistics when calling sxapisfgetsalesstatisticsPost'
            );
        }

        $resourcePath = '/sxapisfgetsalesstatistics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetsalesstatistics)) {
            $_tempBody = $sxapisfgetsalesstatistics;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetshiptolistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetshiptolist $sxapisfgetshiptolist sxapisfgetshiptolist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfgetshiptolistResp
     */
    public function sxapisfgetshiptolistPost($sxapisfgetshiptolist)
    {
        list($response) = $this->sxapisfgetshiptolistPostWithHttpInfo($sxapisfgetshiptolist);
        return $response;
    }

    /**
     * Operation sxapisfgetshiptolistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetshiptolist $sxapisfgetshiptolist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfgetshiptolistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetshiptolistPostWithHttpInfo($sxapisfgetshiptolist)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetshiptolistResp';
        $request = $this->sxapisfgetshiptolistPostRequest($sxapisfgetshiptolist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfgetshiptolistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetshiptolistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetshiptolist $sxapisfgetshiptolist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetshiptolistPostAsync($sxapisfgetshiptolist)
    {
        return $this->sxapisfgetshiptolistPostAsyncWithHttpInfo($sxapisfgetshiptolist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetshiptolistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetshiptolist $sxapisfgetshiptolist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetshiptolistPostAsyncWithHttpInfo($sxapisfgetshiptolist)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgetshiptolistResp';
        $request = $this->sxapisfgetshiptolistPostRequest($sxapisfgetshiptolist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetshiptolistPost'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetshiptolist $sxapisfgetshiptolist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetshiptolistPostRequest($sxapisfgetshiptolist)
    {
        // verify the required parameter 'sxapisfgetshiptolist' is set
        if ($sxapisfgetshiptolist === null || (is_array($sxapisfgetshiptolist) && count($sxapisfgetshiptolist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetshiptolist when calling sxapisfgetshiptolistPost'
            );
        }

        $resourcePath = '/sxapisfgetshiptolist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetshiptolist)) {
            $_tempBody = $sxapisfgetshiptolist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgetshiptolistv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetshiptolistv2 $sxapisfgetshiptolistv2 sxapisfgetshiptolistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisfgetshiptolistv2Resp
     */
    public function sxapisfgetshiptolistv2Post($sxapisfgetshiptolistv2)
    {
        list($response) = $this->sxapisfgetshiptolistv2PostWithHttpInfo($sxapisfgetshiptolistv2);
        return $response;
    }

    /**
     * Operation sxapisfgetshiptolistv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetshiptolistv2 $sxapisfgetshiptolistv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisfgetshiptolistv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgetshiptolistv2PostWithHttpInfo($sxapisfgetshiptolistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetshiptolistv2Resp';
        $request = $this->sxapisfgetshiptolistv2PostRequest($sxapisfgetshiptolistv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisfgetshiptolistv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgetshiptolistv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetshiptolistv2 $sxapisfgetshiptolistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetshiptolistv2PostAsync($sxapisfgetshiptolistv2)
    {
        return $this->sxapisfgetshiptolistv2PostAsyncWithHttpInfo($sxapisfgetshiptolistv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgetshiptolistv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgetshiptolistv2 $sxapisfgetshiptolistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgetshiptolistv2PostAsyncWithHttpInfo($sxapisfgetshiptolistv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfgetshiptolistv2Resp';
        $request = $this->sxapisfgetshiptolistv2PostRequest($sxapisfgetshiptolistv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgetshiptolistv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapisfgetshiptolistv2 $sxapisfgetshiptolistv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgetshiptolistv2PostRequest($sxapisfgetshiptolistv2)
    {
        // verify the required parameter 'sxapisfgetshiptolistv2' is set
        if ($sxapisfgetshiptolistv2 === null || (is_array($sxapisfgetshiptolistv2) && count($sxapisfgetshiptolistv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgetshiptolistv2 when calling sxapisfgetshiptolistv2Post'
            );
        }

        $resourcePath = '/sxapisfgetshiptolistv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgetshiptolistv2)) {
            $_tempBody = $sxapisfgetshiptolistv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfgettrackingnumPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgettrackingnum $sxapisfgettrackingnum sxapisfgettrackingnum (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfgettrackingnumResp
     */
    public function sxapisfgettrackingnumPost($sxapisfgettrackingnum)
    {
        list($response) = $this->sxapisfgettrackingnumPostWithHttpInfo($sxapisfgettrackingnum);
        return $response;
    }

    /**
     * Operation sxapisfgettrackingnumPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgettrackingnum $sxapisfgettrackingnum (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfgettrackingnumResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfgettrackingnumPostWithHttpInfo($sxapisfgettrackingnum)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgettrackingnumResp';
        $request = $this->sxapisfgettrackingnumPostRequest($sxapisfgettrackingnum);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfgettrackingnumResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfgettrackingnumPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgettrackingnum $sxapisfgettrackingnum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgettrackingnumPostAsync($sxapisfgettrackingnum)
    {
        return $this->sxapisfgettrackingnumPostAsyncWithHttpInfo($sxapisfgettrackingnum)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfgettrackingnumPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfgettrackingnum $sxapisfgettrackingnum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfgettrackingnumPostAsyncWithHttpInfo($sxapisfgettrackingnum)
    {
        $returnType = '\Swagger\Client\Model\SxapisfgettrackingnumResp';
        $request = $this->sxapisfgettrackingnumPostRequest($sxapisfgettrackingnum);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfgettrackingnumPost'
     *
     * @param  \Swagger\Client\Model\Sxapisfgettrackingnum $sxapisfgettrackingnum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfgettrackingnumPostRequest($sxapisfgettrackingnum)
    {
        // verify the required parameter 'sxapisfgettrackingnum' is set
        if ($sxapisfgettrackingnum === null || (is_array($sxapisfgettrackingnum) && count($sxapisfgettrackingnum) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfgettrackingnum when calling sxapisfgettrackingnumPost'
            );
        }

        $resourcePath = '/sxapisfgettrackingnum';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfgettrackingnum)) {
            $_tempBody = $sxapisfgettrackingnum;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfoeordertotloadPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfoeordertotload $sxapisfoeordertotload sxapisfoeordertotload (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfoeordertotloadResp
     */
    public function sxapisfoeordertotloadPost($sxapisfoeordertotload)
    {
        list($response) = $this->sxapisfoeordertotloadPostWithHttpInfo($sxapisfoeordertotload);
        return $response;
    }

    /**
     * Operation sxapisfoeordertotloadPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfoeordertotload $sxapisfoeordertotload (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfoeordertotloadResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfoeordertotloadPostWithHttpInfo($sxapisfoeordertotload)
    {
        $returnType = '\Swagger\Client\Model\SxapisfoeordertotloadResp';
        $request = $this->sxapisfoeordertotloadPostRequest($sxapisfoeordertotload);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfoeordertotloadResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfoeordertotloadPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfoeordertotload $sxapisfoeordertotload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfoeordertotloadPostAsync($sxapisfoeordertotload)
    {
        return $this->sxapisfoeordertotloadPostAsyncWithHttpInfo($sxapisfoeordertotload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfoeordertotloadPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfoeordertotload $sxapisfoeordertotload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfoeordertotloadPostAsyncWithHttpInfo($sxapisfoeordertotload)
    {
        $returnType = '\Swagger\Client\Model\SxapisfoeordertotloadResp';
        $request = $this->sxapisfoeordertotloadPostRequest($sxapisfoeordertotload);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfoeordertotloadPost'
     *
     * @param  \Swagger\Client\Model\Sxapisfoeordertotload $sxapisfoeordertotload (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfoeordertotloadPostRequest($sxapisfoeordertotload)
    {
        // verify the required parameter 'sxapisfoeordertotload' is set
        if ($sxapisfoeordertotload === null || (is_array($sxapisfoeordertotload) && count($sxapisfoeordertotload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfoeordertotload when calling sxapisfoeordertotloadPost'
            );
        }

        $resourcePath = '/sxapisfoeordertotload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfoeordertotload)) {
            $_tempBody = $sxapisfoeordertotload;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfoeordertotloadv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfoeordertotloadv2 $sxapisfoeordertotloadv2 sxapisfoeordertotloadv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisfoeordertotloadv2Resp
     */
    public function sxapisfoeordertotloadv2Post($sxapisfoeordertotloadv2)
    {
        list($response) = $this->sxapisfoeordertotloadv2PostWithHttpInfo($sxapisfoeordertotloadv2);
        return $response;
    }

    /**
     * Operation sxapisfoeordertotloadv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfoeordertotloadv2 $sxapisfoeordertotloadv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisfoeordertotloadv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfoeordertotloadv2PostWithHttpInfo($sxapisfoeordertotloadv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfoeordertotloadv2Resp';
        $request = $this->sxapisfoeordertotloadv2PostRequest($sxapisfoeordertotloadv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisfoeordertotloadv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfoeordertotloadv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfoeordertotloadv2 $sxapisfoeordertotloadv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfoeordertotloadv2PostAsync($sxapisfoeordertotloadv2)
    {
        return $this->sxapisfoeordertotloadv2PostAsyncWithHttpInfo($sxapisfoeordertotloadv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfoeordertotloadv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfoeordertotloadv2 $sxapisfoeordertotloadv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfoeordertotloadv2PostAsyncWithHttpInfo($sxapisfoeordertotloadv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfoeordertotloadv2Resp';
        $request = $this->sxapisfoeordertotloadv2PostRequest($sxapisfoeordertotloadv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfoeordertotloadv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapisfoeordertotloadv2 $sxapisfoeordertotloadv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfoeordertotloadv2PostRequest($sxapisfoeordertotloadv2)
    {
        // verify the required parameter 'sxapisfoeordertotloadv2' is set
        if ($sxapisfoeordertotloadv2 === null || (is_array($sxapisfoeordertotloadv2) && count($sxapisfoeordertotloadv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfoeordertotloadv2 when calling sxapisfoeordertotloadv2Post'
            );
        }

        $resourcePath = '/sxapisfoeordertotloadv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfoeordertotloadv2)) {
            $_tempBody = $sxapisfoeordertotloadv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfoeordertotloadv3Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfoeordertotloadv3 $sxapisfoeordertotloadv3 sxapisfoeordertotloadv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisfoeordertotloadv3Resp
     */
    public function sxapisfoeordertotloadv3Post($sxapisfoeordertotloadv3)
    {
        list($response) = $this->sxapisfoeordertotloadv3PostWithHttpInfo($sxapisfoeordertotloadv3);
        return $response;
    }

    /**
     * Operation sxapisfoeordertotloadv3PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfoeordertotloadv3 $sxapisfoeordertotloadv3 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisfoeordertotloadv3Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfoeordertotloadv3PostWithHttpInfo($sxapisfoeordertotloadv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfoeordertotloadv3Resp';
        $request = $this->sxapisfoeordertotloadv3PostRequest($sxapisfoeordertotloadv3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisfoeordertotloadv3Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfoeordertotloadv3PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfoeordertotloadv3 $sxapisfoeordertotloadv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfoeordertotloadv3PostAsync($sxapisfoeordertotloadv3)
    {
        return $this->sxapisfoeordertotloadv3PostAsyncWithHttpInfo($sxapisfoeordertotloadv3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfoeordertotloadv3PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfoeordertotloadv3 $sxapisfoeordertotloadv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfoeordertotloadv3PostAsyncWithHttpInfo($sxapisfoeordertotloadv3)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfoeordertotloadv3Resp';
        $request = $this->sxapisfoeordertotloadv3PostRequest($sxapisfoeordertotloadv3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfoeordertotloadv3Post'
     *
     * @param  \Swagger\Client\Model\Sxapisfoeordertotloadv3 $sxapisfoeordertotloadv3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfoeordertotloadv3PostRequest($sxapisfoeordertotloadv3)
    {
        // verify the required parameter 'sxapisfoeordertotloadv3' is set
        if ($sxapisfoeordertotloadv3 === null || (is_array($sxapisfoeordertotloadv3) && count($sxapisfoeordertotloadv3) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfoeordertotloadv3 when calling sxapisfoeordertotloadv3Post'
            );
        }

        $resourcePath = '/sxapisfoeordertotloadv3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfoeordertotloadv3)) {
            $_tempBody = $sxapisfoeordertotloadv3;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfoeordertotloadv4Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfoeordertotloadv4 $sxapisfoeordertotloadv4 sxapisfoeordertotloadv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisfoeordertotloadv4Resp
     */
    public function sxapisfoeordertotloadv4Post($sxapisfoeordertotloadv4)
    {
        list($response) = $this->sxapisfoeordertotloadv4PostWithHttpInfo($sxapisfoeordertotloadv4);
        return $response;
    }

    /**
     * Operation sxapisfoeordertotloadv4PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfoeordertotloadv4 $sxapisfoeordertotloadv4 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisfoeordertotloadv4Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfoeordertotloadv4PostWithHttpInfo($sxapisfoeordertotloadv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfoeordertotloadv4Resp';
        $request = $this->sxapisfoeordertotloadv4PostRequest($sxapisfoeordertotloadv4);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisfoeordertotloadv4Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfoeordertotloadv4PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfoeordertotloadv4 $sxapisfoeordertotloadv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfoeordertotloadv4PostAsync($sxapisfoeordertotloadv4)
    {
        return $this->sxapisfoeordertotloadv4PostAsyncWithHttpInfo($sxapisfoeordertotloadv4)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfoeordertotloadv4PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfoeordertotloadv4 $sxapisfoeordertotloadv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfoeordertotloadv4PostAsyncWithHttpInfo($sxapisfoeordertotloadv4)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfoeordertotloadv4Resp';
        $request = $this->sxapisfoeordertotloadv4PostRequest($sxapisfoeordertotloadv4);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfoeordertotloadv4Post'
     *
     * @param  \Swagger\Client\Model\Sxapisfoeordertotloadv4 $sxapisfoeordertotloadv4 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfoeordertotloadv4PostRequest($sxapisfoeordertotloadv4)
    {
        // verify the required parameter 'sxapisfoeordertotloadv4' is set
        if ($sxapisfoeordertotloadv4 === null || (is_array($sxapisfoeordertotloadv4) && count($sxapisfoeordertotloadv4) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfoeordertotloadv4 when calling sxapisfoeordertotloadv4Post'
            );
        }

        $resourcePath = '/sxapisfoeordertotloadv4';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfoeordertotloadv4)) {
            $_tempBody = $sxapisfoeordertotloadv4;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfoequotereleasePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfoequoterelease $sxapisfoequoterelease sxapisfoequoterelease (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfoequotereleaseResp
     */
    public function sxapisfoequotereleasePost($sxapisfoequoterelease)
    {
        list($response) = $this->sxapisfoequotereleasePostWithHttpInfo($sxapisfoequoterelease);
        return $response;
    }

    /**
     * Operation sxapisfoequotereleasePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfoequoterelease $sxapisfoequoterelease (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfoequotereleaseResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfoequotereleasePostWithHttpInfo($sxapisfoequoterelease)
    {
        $returnType = '\Swagger\Client\Model\SxapisfoequotereleaseResp';
        $request = $this->sxapisfoequotereleasePostRequest($sxapisfoequoterelease);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfoequotereleaseResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfoequotereleasePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfoequoterelease $sxapisfoequoterelease (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfoequotereleasePostAsync($sxapisfoequoterelease)
    {
        return $this->sxapisfoequotereleasePostAsyncWithHttpInfo($sxapisfoequoterelease)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfoequotereleasePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfoequoterelease $sxapisfoequoterelease (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfoequotereleasePostAsyncWithHttpInfo($sxapisfoequoterelease)
    {
        $returnType = '\Swagger\Client\Model\SxapisfoequotereleaseResp';
        $request = $this->sxapisfoequotereleasePostRequest($sxapisfoequoterelease);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfoequotereleasePost'
     *
     * @param  \Swagger\Client\Model\Sxapisfoequoterelease $sxapisfoequoterelease (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfoequotereleasePostRequest($sxapisfoequoterelease)
    {
        // verify the required parameter 'sxapisfoequoterelease' is set
        if ($sxapisfoequoterelease === null || (is_array($sxapisfoequoterelease) && count($sxapisfoequoterelease) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfoequoterelease when calling sxapisfoequotereleasePost'
            );
        }

        $resourcePath = '/sxapisfoequoterelease';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfoequoterelease)) {
            $_tempBody = $sxapisfoequoterelease;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfproductrestrictionPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfproductrestriction $sxapisfproductrestriction sxapisfproductrestriction (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfproductrestrictionResp
     */
    public function sxapisfproductrestrictionPost($sxapisfproductrestriction)
    {
        list($response) = $this->sxapisfproductrestrictionPostWithHttpInfo($sxapisfproductrestriction);
        return $response;
    }

    /**
     * Operation sxapisfproductrestrictionPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfproductrestriction $sxapisfproductrestriction (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfproductrestrictionResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfproductrestrictionPostWithHttpInfo($sxapisfproductrestriction)
    {
        $returnType = '\Swagger\Client\Model\SxapisfproductrestrictionResp';
        $request = $this->sxapisfproductrestrictionPostRequest($sxapisfproductrestriction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfproductrestrictionResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfproductrestrictionPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfproductrestriction $sxapisfproductrestriction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfproductrestrictionPostAsync($sxapisfproductrestriction)
    {
        return $this->sxapisfproductrestrictionPostAsyncWithHttpInfo($sxapisfproductrestriction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfproductrestrictionPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfproductrestriction $sxapisfproductrestriction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfproductrestrictionPostAsyncWithHttpInfo($sxapisfproductrestriction)
    {
        $returnType = '\Swagger\Client\Model\SxapisfproductrestrictionResp';
        $request = $this->sxapisfproductrestrictionPostRequest($sxapisfproductrestriction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfproductrestrictionPost'
     *
     * @param  \Swagger\Client\Model\Sxapisfproductrestriction $sxapisfproductrestriction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfproductrestrictionPostRequest($sxapisfproductrestriction)
    {
        // verify the required parameter 'sxapisfproductrestriction' is set
        if ($sxapisfproductrestriction === null || (is_array($sxapisfproductrestriction) && count($sxapisfproductrestriction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfproductrestriction when calling sxapisfproductrestrictionPost'
            );
        }

        $resourcePath = '/sxapisfproductrestriction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfproductrestriction)) {
            $_tempBody = $sxapisfproductrestriction;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfvalidatecustomerPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfvalidatecustomer $sxapisfvalidatecustomer sxapisfvalidatecustomer (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisfvalidatecustomerResp
     */
    public function sxapisfvalidatecustomerPost($sxapisfvalidatecustomer)
    {
        list($response) = $this->sxapisfvalidatecustomerPostWithHttpInfo($sxapisfvalidatecustomer);
        return $response;
    }

    /**
     * Operation sxapisfvalidatecustomerPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfvalidatecustomer $sxapisfvalidatecustomer (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisfvalidatecustomerResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfvalidatecustomerPostWithHttpInfo($sxapisfvalidatecustomer)
    {
        $returnType = '\Swagger\Client\Model\SxapisfvalidatecustomerResp';
        $request = $this->sxapisfvalidatecustomerPostRequest($sxapisfvalidatecustomer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisfvalidatecustomerResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfvalidatecustomerPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfvalidatecustomer $sxapisfvalidatecustomer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfvalidatecustomerPostAsync($sxapisfvalidatecustomer)
    {
        return $this->sxapisfvalidatecustomerPostAsyncWithHttpInfo($sxapisfvalidatecustomer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfvalidatecustomerPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfvalidatecustomer $sxapisfvalidatecustomer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfvalidatecustomerPostAsyncWithHttpInfo($sxapisfvalidatecustomer)
    {
        $returnType = '\Swagger\Client\Model\SxapisfvalidatecustomerResp';
        $request = $this->sxapisfvalidatecustomerPostRequest($sxapisfvalidatecustomer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfvalidatecustomerPost'
     *
     * @param  \Swagger\Client\Model\Sxapisfvalidatecustomer $sxapisfvalidatecustomer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfvalidatecustomerPostRequest($sxapisfvalidatecustomer)
    {
        // verify the required parameter 'sxapisfvalidatecustomer' is set
        if ($sxapisfvalidatecustomer === null || (is_array($sxapisfvalidatecustomer) && count($sxapisfvalidatecustomer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfvalidatecustomer when calling sxapisfvalidatecustomerPost'
            );
        }

        $resourcePath = '/sxapisfvalidatecustomer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfvalidatecustomer)) {
            $_tempBody = $sxapisfvalidatecustomer;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisfvalidatecustomerv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfvalidatecustomerv2 $sxapisfvalidatecustomerv2 sxapisfvalidatecustomerv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisfvalidatecustomerv2Resp
     */
    public function sxapisfvalidatecustomerv2Post($sxapisfvalidatecustomerv2)
    {
        list($response) = $this->sxapisfvalidatecustomerv2PostWithHttpInfo($sxapisfvalidatecustomerv2);
        return $response;
    }

    /**
     * Operation sxapisfvalidatecustomerv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfvalidatecustomerv2 $sxapisfvalidatecustomerv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisfvalidatecustomerv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisfvalidatecustomerv2PostWithHttpInfo($sxapisfvalidatecustomerv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfvalidatecustomerv2Resp';
        $request = $this->sxapisfvalidatecustomerv2PostRequest($sxapisfvalidatecustomerv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisfvalidatecustomerv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisfvalidatecustomerv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfvalidatecustomerv2 $sxapisfvalidatecustomerv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfvalidatecustomerv2PostAsync($sxapisfvalidatecustomerv2)
    {
        return $this->sxapisfvalidatecustomerv2PostAsyncWithHttpInfo($sxapisfvalidatecustomerv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisfvalidatecustomerv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisfvalidatecustomerv2 $sxapisfvalidatecustomerv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisfvalidatecustomerv2PostAsyncWithHttpInfo($sxapisfvalidatecustomerv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisfvalidatecustomerv2Resp';
        $request = $this->sxapisfvalidatecustomerv2PostRequest($sxapisfvalidatecustomerv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisfvalidatecustomerv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapisfvalidatecustomerv2 $sxapisfvalidatecustomerv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisfvalidatecustomerv2PostRequest($sxapisfvalidatecustomerv2)
    {
        // verify the required parameter 'sxapisfvalidatecustomerv2' is set
        if ($sxapisfvalidatecustomerv2 === null || (is_array($sxapisfvalidatecustomerv2) && count($sxapisfvalidatecustomerv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisfvalidatecustomerv2 when calling sxapisfvalidatecustomerv2Post'
            );
        }

        $resourcePath = '/sxapisfvalidatecustomerv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisfvalidatecustomerv2)) {
            $_tempBody = $sxapisfvalidatecustomerv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapishippinginterfacePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapishippinginterface $sxapishippinginterface sxapishippinginterface (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapishippinginterfaceResp
     */
    public function sxapishippinginterfacePost($sxapishippinginterface)
    {
        list($response) = $this->sxapishippinginterfacePostWithHttpInfo($sxapishippinginterface);
        return $response;
    }

    /**
     * Operation sxapishippinginterfacePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapishippinginterface $sxapishippinginterface (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapishippinginterfaceResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapishippinginterfacePostWithHttpInfo($sxapishippinginterface)
    {
        $returnType = '\Swagger\Client\Model\SxapishippinginterfaceResp';
        $request = $this->sxapishippinginterfacePostRequest($sxapishippinginterface);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapishippinginterfaceResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapishippinginterfacePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapishippinginterface $sxapishippinginterface (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapishippinginterfacePostAsync($sxapishippinginterface)
    {
        return $this->sxapishippinginterfacePostAsyncWithHttpInfo($sxapishippinginterface)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapishippinginterfacePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapishippinginterface $sxapishippinginterface (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapishippinginterfacePostAsyncWithHttpInfo($sxapishippinginterface)
    {
        $returnType = '\Swagger\Client\Model\SxapishippinginterfaceResp';
        $request = $this->sxapishippinginterfacePostRequest($sxapishippinginterface);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapishippinginterfacePost'
     *
     * @param  \Swagger\Client\Model\Sxapishippinginterface $sxapishippinginterface (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapishippinginterfacePostRequest($sxapishippinginterface)
    {
        // verify the required parameter 'sxapishippinginterface' is set
        if ($sxapishippinginterface === null || (is_array($sxapishippinginterface) && count($sxapishippinginterface) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapishippinginterface when calling sxapishippinginterfacePost'
            );
        }

        $resourcePath = '/sxapishippinginterface';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapishippinginterface)) {
            $_tempBody = $sxapishippinginterface;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrallowtiecancelPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrallowtiecancel $sxapisrallowtiecancel sxapisrallowtiecancel (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrallowtiecancelResp
     */
    public function sxapisrallowtiecancelPost($sxapisrallowtiecancel)
    {
        list($response) = $this->sxapisrallowtiecancelPostWithHttpInfo($sxapisrallowtiecancel);
        return $response;
    }

    /**
     * Operation sxapisrallowtiecancelPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrallowtiecancel $sxapisrallowtiecancel (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrallowtiecancelResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrallowtiecancelPostWithHttpInfo($sxapisrallowtiecancel)
    {
        $returnType = '\Swagger\Client\Model\SxapisrallowtiecancelResp';
        $request = $this->sxapisrallowtiecancelPostRequest($sxapisrallowtiecancel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrallowtiecancelResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrallowtiecancelPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrallowtiecancel $sxapisrallowtiecancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrallowtiecancelPostAsync($sxapisrallowtiecancel)
    {
        return $this->sxapisrallowtiecancelPostAsyncWithHttpInfo($sxapisrallowtiecancel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrallowtiecancelPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrallowtiecancel $sxapisrallowtiecancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrallowtiecancelPostAsyncWithHttpInfo($sxapisrallowtiecancel)
    {
        $returnType = '\Swagger\Client\Model\SxapisrallowtiecancelResp';
        $request = $this->sxapisrallowtiecancelPostRequest($sxapisrallowtiecancel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrallowtiecancelPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrallowtiecancel $sxapisrallowtiecancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrallowtiecancelPostRequest($sxapisrallowtiecancel)
    {
        // verify the required parameter 'sxapisrallowtiecancel' is set
        if ($sxapisrallowtiecancel === null || (is_array($sxapisrallowtiecancel) && count($sxapisrallowtiecancel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrallowtiecancel when calling sxapisrallowtiecancelPost'
            );
        }

        $resourcePath = '/sxapisrallowtiecancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrallowtiecancel)) {
            $_tempBody = $sxapisrallowtiecancel;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrcountentryPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrcountentry $sxapisrcountentry sxapisrcountentry (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrcountentryResp
     */
    public function sxapisrcountentryPost($sxapisrcountentry)
    {
        list($response) = $this->sxapisrcountentryPostWithHttpInfo($sxapisrcountentry);
        return $response;
    }

    /**
     * Operation sxapisrcountentryPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrcountentry $sxapisrcountentry (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrcountentryResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrcountentryPostWithHttpInfo($sxapisrcountentry)
    {
        $returnType = '\Swagger\Client\Model\SxapisrcountentryResp';
        $request = $this->sxapisrcountentryPostRequest($sxapisrcountentry);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrcountentryResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrcountentryPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrcountentry $sxapisrcountentry (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrcountentryPostAsync($sxapisrcountentry)
    {
        return $this->sxapisrcountentryPostAsyncWithHttpInfo($sxapisrcountentry)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrcountentryPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrcountentry $sxapisrcountentry (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrcountentryPostAsyncWithHttpInfo($sxapisrcountentry)
    {
        $returnType = '\Swagger\Client\Model\SxapisrcountentryResp';
        $request = $this->sxapisrcountentryPostRequest($sxapisrcountentry);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrcountentryPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrcountentry $sxapisrcountentry (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrcountentryPostRequest($sxapisrcountentry)
    {
        // verify the required parameter 'sxapisrcountentry' is set
        if ($sxapisrcountentry === null || (is_array($sxapisrcountentry) && count($sxapisrcountentry) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrcountentry when calling sxapisrcountentryPost'
            );
        }

        $resourcePath = '/sxapisrcountentry';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrcountentry)) {
            $_tempBody = $sxapisrcountentry;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrcreateoeorderPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrcreateoeorder $sxapisrcreateoeorder sxapisrcreateoeorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrcreateoeorderResp
     */
    public function sxapisrcreateoeorderPost($sxapisrcreateoeorder)
    {
        list($response) = $this->sxapisrcreateoeorderPostWithHttpInfo($sxapisrcreateoeorder);
        return $response;
    }

    /**
     * Operation sxapisrcreateoeorderPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrcreateoeorder $sxapisrcreateoeorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrcreateoeorderResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrcreateoeorderPostWithHttpInfo($sxapisrcreateoeorder)
    {
        $returnType = '\Swagger\Client\Model\SxapisrcreateoeorderResp';
        $request = $this->sxapisrcreateoeorderPostRequest($sxapisrcreateoeorder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrcreateoeorderResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrcreateoeorderPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrcreateoeorder $sxapisrcreateoeorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrcreateoeorderPostAsync($sxapisrcreateoeorder)
    {
        return $this->sxapisrcreateoeorderPostAsyncWithHttpInfo($sxapisrcreateoeorder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrcreateoeorderPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrcreateoeorder $sxapisrcreateoeorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrcreateoeorderPostAsyncWithHttpInfo($sxapisrcreateoeorder)
    {
        $returnType = '\Swagger\Client\Model\SxapisrcreateoeorderResp';
        $request = $this->sxapisrcreateoeorderPostRequest($sxapisrcreateoeorder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrcreateoeorderPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrcreateoeorder $sxapisrcreateoeorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrcreateoeorderPostRequest($sxapisrcreateoeorder)
    {
        // verify the required parameter 'sxapisrcreateoeorder' is set
        if ($sxapisrcreateoeorder === null || (is_array($sxapisrcreateoeorder) && count($sxapisrcreateoeorder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrcreateoeorder when calling sxapisrcreateoeorderPost'
            );
        }

        $resourcePath = '/sxapisrcreateoeorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrcreateoeorder)) {
            $_tempBody = $sxapisrcreateoeorder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrcreateoeorderv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrcreateoeorderv2 $sxapisrcreateoeorderv2 sxapisrcreateoeorderv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisrcreateoeorderv2Resp
     */
    public function sxapisrcreateoeorderv2Post($sxapisrcreateoeorderv2)
    {
        list($response) = $this->sxapisrcreateoeorderv2PostWithHttpInfo($sxapisrcreateoeorderv2);
        return $response;
    }

    /**
     * Operation sxapisrcreateoeorderv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrcreateoeorderv2 $sxapisrcreateoeorderv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisrcreateoeorderv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrcreateoeorderv2PostWithHttpInfo($sxapisrcreateoeorderv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisrcreateoeorderv2Resp';
        $request = $this->sxapisrcreateoeorderv2PostRequest($sxapisrcreateoeorderv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisrcreateoeorderv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrcreateoeorderv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrcreateoeorderv2 $sxapisrcreateoeorderv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrcreateoeorderv2PostAsync($sxapisrcreateoeorderv2)
    {
        return $this->sxapisrcreateoeorderv2PostAsyncWithHttpInfo($sxapisrcreateoeorderv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrcreateoeorderv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrcreateoeorderv2 $sxapisrcreateoeorderv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrcreateoeorderv2PostAsyncWithHttpInfo($sxapisrcreateoeorderv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisrcreateoeorderv2Resp';
        $request = $this->sxapisrcreateoeorderv2PostRequest($sxapisrcreateoeorderv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrcreateoeorderv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapisrcreateoeorderv2 $sxapisrcreateoeorderv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrcreateoeorderv2PostRequest($sxapisrcreateoeorderv2)
    {
        // verify the required parameter 'sxapisrcreateoeorderv2' is set
        if ($sxapisrcreateoeorderv2 === null || (is_array($sxapisrcreateoeorderv2) && count($sxapisrcreateoeorderv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrcreateoeorderv2 when calling sxapisrcreateoeorderv2Post'
            );
        }

        $resourcePath = '/sxapisrcreateoeorderv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrcreateoeorderv2)) {
            $_tempBody = $sxapisrcreateoeorderv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrdeletecountPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrdeletecount $sxapisrdeletecount sxapisrdeletecount (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrdeletecountResp
     */
    public function sxapisrdeletecountPost($sxapisrdeletecount)
    {
        list($response) = $this->sxapisrdeletecountPostWithHttpInfo($sxapisrdeletecount);
        return $response;
    }

    /**
     * Operation sxapisrdeletecountPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrdeletecount $sxapisrdeletecount (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrdeletecountResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrdeletecountPostWithHttpInfo($sxapisrdeletecount)
    {
        $returnType = '\Swagger\Client\Model\SxapisrdeletecountResp';
        $request = $this->sxapisrdeletecountPostRequest($sxapisrdeletecount);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrdeletecountResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrdeletecountPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrdeletecount $sxapisrdeletecount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrdeletecountPostAsync($sxapisrdeletecount)
    {
        return $this->sxapisrdeletecountPostAsyncWithHttpInfo($sxapisrdeletecount)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrdeletecountPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrdeletecount $sxapisrdeletecount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrdeletecountPostAsyncWithHttpInfo($sxapisrdeletecount)
    {
        $returnType = '\Swagger\Client\Model\SxapisrdeletecountResp';
        $request = $this->sxapisrdeletecountPostRequest($sxapisrdeletecount);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrdeletecountPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrdeletecount $sxapisrdeletecount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrdeletecountPostRequest($sxapisrdeletecount)
    {
        // verify the required parameter 'sxapisrdeletecount' is set
        if ($sxapisrdeletecount === null || (is_array($sxapisrdeletecount) && count($sxapisrdeletecount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrdeletecount when calling sxapisrdeletecountPost'
            );
        }

        $resourcePath = '/sxapisrdeletecount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrdeletecount)) {
            $_tempBody = $sxapisrdeletecount;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrediticserlotlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrediticserlotlist $sxapisrediticserlotlist sxapisrediticserlotlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrediticserlotlistResp
     */
    public function sxapisrediticserlotlistPost($sxapisrediticserlotlist)
    {
        list($response) = $this->sxapisrediticserlotlistPostWithHttpInfo($sxapisrediticserlotlist);
        return $response;
    }

    /**
     * Operation sxapisrediticserlotlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrediticserlotlist $sxapisrediticserlotlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrediticserlotlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrediticserlotlistPostWithHttpInfo($sxapisrediticserlotlist)
    {
        $returnType = '\Swagger\Client\Model\SxapisrediticserlotlistResp';
        $request = $this->sxapisrediticserlotlistPostRequest($sxapisrediticserlotlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrediticserlotlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrediticserlotlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrediticserlotlist $sxapisrediticserlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrediticserlotlistPostAsync($sxapisrediticserlotlist)
    {
        return $this->sxapisrediticserlotlistPostAsyncWithHttpInfo($sxapisrediticserlotlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrediticserlotlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrediticserlotlist $sxapisrediticserlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrediticserlotlistPostAsyncWithHttpInfo($sxapisrediticserlotlist)
    {
        $returnType = '\Swagger\Client\Model\SxapisrediticserlotlistResp';
        $request = $this->sxapisrediticserlotlistPostRequest($sxapisrediticserlotlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrediticserlotlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrediticserlotlist $sxapisrediticserlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrediticserlotlistPostRequest($sxapisrediticserlotlist)
    {
        // verify the required parameter 'sxapisrediticserlotlist' is set
        if ($sxapisrediticserlotlist === null || (is_array($sxapisrediticserlotlist) && count($sxapisrediticserlotlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrediticserlotlist when calling sxapisrediticserlotlistPost'
            );
        }

        $resourcePath = '/sxapisrediticserlotlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrediticserlotlist)) {
            $_tempBody = $sxapisrediticserlotlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrgetdefaultpowtshipviaPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetdefaultpowtshipvia $sxapisrgetdefaultpowtshipvia sxapisrgetdefaultpowtshipvia (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrgetdefaultpowtshipviaResp
     */
    public function sxapisrgetdefaultpowtshipviaPost($sxapisrgetdefaultpowtshipvia)
    {
        list($response) = $this->sxapisrgetdefaultpowtshipviaPostWithHttpInfo($sxapisrgetdefaultpowtshipvia);
        return $response;
    }

    /**
     * Operation sxapisrgetdefaultpowtshipviaPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetdefaultpowtshipvia $sxapisrgetdefaultpowtshipvia (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrgetdefaultpowtshipviaResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrgetdefaultpowtshipviaPostWithHttpInfo($sxapisrgetdefaultpowtshipvia)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetdefaultpowtshipviaResp';
        $request = $this->sxapisrgetdefaultpowtshipviaPostRequest($sxapisrgetdefaultpowtshipvia);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrgetdefaultpowtshipviaResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrgetdefaultpowtshipviaPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetdefaultpowtshipvia $sxapisrgetdefaultpowtshipvia (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetdefaultpowtshipviaPostAsync($sxapisrgetdefaultpowtshipvia)
    {
        return $this->sxapisrgetdefaultpowtshipviaPostAsyncWithHttpInfo($sxapisrgetdefaultpowtshipvia)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrgetdefaultpowtshipviaPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetdefaultpowtshipvia $sxapisrgetdefaultpowtshipvia (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetdefaultpowtshipviaPostAsyncWithHttpInfo($sxapisrgetdefaultpowtshipvia)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetdefaultpowtshipviaResp';
        $request = $this->sxapisrgetdefaultpowtshipviaPostRequest($sxapisrgetdefaultpowtshipvia);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrgetdefaultpowtshipviaPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrgetdefaultpowtshipvia $sxapisrgetdefaultpowtshipvia (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrgetdefaultpowtshipviaPostRequest($sxapisrgetdefaultpowtshipvia)
    {
        // verify the required parameter 'sxapisrgetdefaultpowtshipvia' is set
        if ($sxapisrgetdefaultpowtshipvia === null || (is_array($sxapisrgetdefaultpowtshipvia) && count($sxapisrgetdefaultpowtshipvia) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrgetdefaultpowtshipvia when calling sxapisrgetdefaultpowtshipviaPost'
            );
        }

        $resourcePath = '/sxapisrgetdefaultpowtshipvia';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrgetdefaultpowtshipvia)) {
            $_tempBody = $sxapisrgetdefaultpowtshipvia;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrgetdefaultprintersPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetdefaultprinters $sxapisrgetdefaultprinters sxapisrgetdefaultprinters (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrgetdefaultprintersResp
     */
    public function sxapisrgetdefaultprintersPost($sxapisrgetdefaultprinters)
    {
        list($response) = $this->sxapisrgetdefaultprintersPostWithHttpInfo($sxapisrgetdefaultprinters);
        return $response;
    }

    /**
     * Operation sxapisrgetdefaultprintersPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetdefaultprinters $sxapisrgetdefaultprinters (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrgetdefaultprintersResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrgetdefaultprintersPostWithHttpInfo($sxapisrgetdefaultprinters)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetdefaultprintersResp';
        $request = $this->sxapisrgetdefaultprintersPostRequest($sxapisrgetdefaultprinters);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrgetdefaultprintersResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrgetdefaultprintersPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetdefaultprinters $sxapisrgetdefaultprinters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetdefaultprintersPostAsync($sxapisrgetdefaultprinters)
    {
        return $this->sxapisrgetdefaultprintersPostAsyncWithHttpInfo($sxapisrgetdefaultprinters)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrgetdefaultprintersPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetdefaultprinters $sxapisrgetdefaultprinters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetdefaultprintersPostAsyncWithHttpInfo($sxapisrgetdefaultprinters)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetdefaultprintersResp';
        $request = $this->sxapisrgetdefaultprintersPostRequest($sxapisrgetdefaultprinters);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrgetdefaultprintersPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrgetdefaultprinters $sxapisrgetdefaultprinters (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrgetdefaultprintersPostRequest($sxapisrgetdefaultprinters)
    {
        // verify the required parameter 'sxapisrgetdefaultprinters' is set
        if ($sxapisrgetdefaultprinters === null || (is_array($sxapisrgetdefaultprinters) && count($sxapisrgetdefaultprinters) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrgetdefaultprinters when calling sxapisrgetdefaultprintersPost'
            );
        }

        $resourcePath = '/sxapisrgetdefaultprinters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrgetdefaultprinters)) {
            $_tempBody = $sxapisrgetdefaultprinters;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrgetdefaultrestockdataPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetdefaultrestockdata $sxapisrgetdefaultrestockdata sxapisrgetdefaultrestockdata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrgetdefaultrestockdataResp
     */
    public function sxapisrgetdefaultrestockdataPost($sxapisrgetdefaultrestockdata)
    {
        list($response) = $this->sxapisrgetdefaultrestockdataPostWithHttpInfo($sxapisrgetdefaultrestockdata);
        return $response;
    }

    /**
     * Operation sxapisrgetdefaultrestockdataPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetdefaultrestockdata $sxapisrgetdefaultrestockdata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrgetdefaultrestockdataResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrgetdefaultrestockdataPostWithHttpInfo($sxapisrgetdefaultrestockdata)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetdefaultrestockdataResp';
        $request = $this->sxapisrgetdefaultrestockdataPostRequest($sxapisrgetdefaultrestockdata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrgetdefaultrestockdataResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrgetdefaultrestockdataPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetdefaultrestockdata $sxapisrgetdefaultrestockdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetdefaultrestockdataPostAsync($sxapisrgetdefaultrestockdata)
    {
        return $this->sxapisrgetdefaultrestockdataPostAsyncWithHttpInfo($sxapisrgetdefaultrestockdata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrgetdefaultrestockdataPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetdefaultrestockdata $sxapisrgetdefaultrestockdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetdefaultrestockdataPostAsyncWithHttpInfo($sxapisrgetdefaultrestockdata)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetdefaultrestockdataResp';
        $request = $this->sxapisrgetdefaultrestockdataPostRequest($sxapisrgetdefaultrestockdata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrgetdefaultrestockdataPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrgetdefaultrestockdata $sxapisrgetdefaultrestockdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrgetdefaultrestockdataPostRequest($sxapisrgetdefaultrestockdata)
    {
        // verify the required parameter 'sxapisrgetdefaultrestockdata' is set
        if ($sxapisrgetdefaultrestockdata === null || (is_array($sxapisrgetdefaultrestockdata) && count($sxapisrgetdefaultrestockdata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrgetdefaultrestockdata when calling sxapisrgetdefaultrestockdataPost'
            );
        }

        $resourcePath = '/sxapisrgetdefaultrestockdata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrgetdefaultrestockdata)) {
            $_tempBody = $sxapisrgetdefaultrestockdata;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrgetitembackorderdataPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetitembackorderdata $sxapisrgetitembackorderdata sxapisrgetitembackorderdata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrgetitembackorderdataResp
     */
    public function sxapisrgetitembackorderdataPost($sxapisrgetitembackorderdata)
    {
        list($response) = $this->sxapisrgetitembackorderdataPostWithHttpInfo($sxapisrgetitembackorderdata);
        return $response;
    }

    /**
     * Operation sxapisrgetitembackorderdataPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetitembackorderdata $sxapisrgetitembackorderdata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrgetitembackorderdataResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrgetitembackorderdataPostWithHttpInfo($sxapisrgetitembackorderdata)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetitembackorderdataResp';
        $request = $this->sxapisrgetitembackorderdataPostRequest($sxapisrgetitembackorderdata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrgetitembackorderdataResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrgetitembackorderdataPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetitembackorderdata $sxapisrgetitembackorderdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetitembackorderdataPostAsync($sxapisrgetitembackorderdata)
    {
        return $this->sxapisrgetitembackorderdataPostAsyncWithHttpInfo($sxapisrgetitembackorderdata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrgetitembackorderdataPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetitembackorderdata $sxapisrgetitembackorderdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetitembackorderdataPostAsyncWithHttpInfo($sxapisrgetitembackorderdata)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetitembackorderdataResp';
        $request = $this->sxapisrgetitembackorderdataPostRequest($sxapisrgetitembackorderdata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrgetitembackorderdataPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrgetitembackorderdata $sxapisrgetitembackorderdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrgetitembackorderdataPostRequest($sxapisrgetitembackorderdata)
    {
        // verify the required parameter 'sxapisrgetitembackorderdata' is set
        if ($sxapisrgetitembackorderdata === null || (is_array($sxapisrgetitembackorderdata) && count($sxapisrgetitembackorderdata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrgetitembackorderdata when calling sxapisrgetitembackorderdataPost'
            );
        }

        $resourcePath = '/sxapisrgetitembackorderdata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrgetitembackorderdata)) {
            $_tempBody = $sxapisrgetitembackorderdata;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrgetitemtransdataPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetitemtransdata $sxapisrgetitemtransdata sxapisrgetitemtransdata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrgetitemtransdataResp
     */
    public function sxapisrgetitemtransdataPost($sxapisrgetitemtransdata)
    {
        list($response) = $this->sxapisrgetitemtransdataPostWithHttpInfo($sxapisrgetitemtransdata);
        return $response;
    }

    /**
     * Operation sxapisrgetitemtransdataPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetitemtransdata $sxapisrgetitemtransdata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrgetitemtransdataResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrgetitemtransdataPostWithHttpInfo($sxapisrgetitemtransdata)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetitemtransdataResp';
        $request = $this->sxapisrgetitemtransdataPostRequest($sxapisrgetitemtransdata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrgetitemtransdataResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrgetitemtransdataPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetitemtransdata $sxapisrgetitemtransdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetitemtransdataPostAsync($sxapisrgetitemtransdata)
    {
        return $this->sxapisrgetitemtransdataPostAsyncWithHttpInfo($sxapisrgetitemtransdata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrgetitemtransdataPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetitemtransdata $sxapisrgetitemtransdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetitemtransdataPostAsyncWithHttpInfo($sxapisrgetitemtransdata)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetitemtransdataResp';
        $request = $this->sxapisrgetitemtransdataPostRequest($sxapisrgetitemtransdata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrgetitemtransdataPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrgetitemtransdata $sxapisrgetitemtransdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrgetitemtransdataPostRequest($sxapisrgetitemtransdata)
    {
        // verify the required parameter 'sxapisrgetitemtransdata' is set
        if ($sxapisrgetitemtransdata === null || (is_array($sxapisrgetitemtransdata) && count($sxapisrgetitemtransdata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrgetitemtransdata when calling sxapisrgetitemtransdataPost'
            );
        }

        $resourcePath = '/sxapisrgetitemtransdata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrgetitemtransdata)) {
            $_tempBody = $sxapisrgetitemtransdata;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrgetnonstockpricePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetnonstockprice $sxapisrgetnonstockprice sxapisrgetnonstockprice (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrgetnonstockpriceResp
     */
    public function sxapisrgetnonstockpricePost($sxapisrgetnonstockprice)
    {
        list($response) = $this->sxapisrgetnonstockpricePostWithHttpInfo($sxapisrgetnonstockprice);
        return $response;
    }

    /**
     * Operation sxapisrgetnonstockpricePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetnonstockprice $sxapisrgetnonstockprice (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrgetnonstockpriceResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrgetnonstockpricePostWithHttpInfo($sxapisrgetnonstockprice)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetnonstockpriceResp';
        $request = $this->sxapisrgetnonstockpricePostRequest($sxapisrgetnonstockprice);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrgetnonstockpriceResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrgetnonstockpricePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetnonstockprice $sxapisrgetnonstockprice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetnonstockpricePostAsync($sxapisrgetnonstockprice)
    {
        return $this->sxapisrgetnonstockpricePostAsyncWithHttpInfo($sxapisrgetnonstockprice)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrgetnonstockpricePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetnonstockprice $sxapisrgetnonstockprice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetnonstockpricePostAsyncWithHttpInfo($sxapisrgetnonstockprice)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetnonstockpriceResp';
        $request = $this->sxapisrgetnonstockpricePostRequest($sxapisrgetnonstockprice);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrgetnonstockpricePost'
     *
     * @param  \Swagger\Client\Model\Sxapisrgetnonstockprice $sxapisrgetnonstockprice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrgetnonstockpricePostRequest($sxapisrgetnonstockprice)
    {
        // verify the required parameter 'sxapisrgetnonstockprice' is set
        if ($sxapisrgetnonstockprice === null || (is_array($sxapisrgetnonstockprice) && count($sxapisrgetnonstockprice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrgetnonstockprice when calling sxapisrgetnonstockpricePost'
            );
        }

        $resourcePath = '/sxapisrgetnonstockprice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrgetnonstockprice)) {
            $_tempBody = $sxapisrgetnonstockprice;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrgetopenpowtdataPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetopenpowtdata $sxapisrgetopenpowtdata sxapisrgetopenpowtdata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrgetopenpowtdataResp
     */
    public function sxapisrgetopenpowtdataPost($sxapisrgetopenpowtdata)
    {
        list($response) = $this->sxapisrgetopenpowtdataPostWithHttpInfo($sxapisrgetopenpowtdata);
        return $response;
    }

    /**
     * Operation sxapisrgetopenpowtdataPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetopenpowtdata $sxapisrgetopenpowtdata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrgetopenpowtdataResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrgetopenpowtdataPostWithHttpInfo($sxapisrgetopenpowtdata)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetopenpowtdataResp';
        $request = $this->sxapisrgetopenpowtdataPostRequest($sxapisrgetopenpowtdata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrgetopenpowtdataResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrgetopenpowtdataPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetopenpowtdata $sxapisrgetopenpowtdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetopenpowtdataPostAsync($sxapisrgetopenpowtdata)
    {
        return $this->sxapisrgetopenpowtdataPostAsyncWithHttpInfo($sxapisrgetopenpowtdata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrgetopenpowtdataPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetopenpowtdata $sxapisrgetopenpowtdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetopenpowtdataPostAsyncWithHttpInfo($sxapisrgetopenpowtdata)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetopenpowtdataResp';
        $request = $this->sxapisrgetopenpowtdataPostRequest($sxapisrgetopenpowtdata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrgetopenpowtdataPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrgetopenpowtdata $sxapisrgetopenpowtdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrgetopenpowtdataPostRequest($sxapisrgetopenpowtdata)
    {
        // verify the required parameter 'sxapisrgetopenpowtdata' is set
        if ($sxapisrgetopenpowtdata === null || (is_array($sxapisrgetopenpowtdata) && count($sxapisrgetopenpowtdata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrgetopenpowtdata when calling sxapisrgetopenpowtdataPost'
            );
        }

        $resourcePath = '/sxapisrgetopenpowtdata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrgetopenpowtdata)) {
            $_tempBody = $sxapisrgetopenpowtdata;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrgetreturnorderlinesPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetreturnorderlines $sxapisrgetreturnorderlines sxapisrgetreturnorderlines (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrgetreturnorderlinesResp
     */
    public function sxapisrgetreturnorderlinesPost($sxapisrgetreturnorderlines)
    {
        list($response) = $this->sxapisrgetreturnorderlinesPostWithHttpInfo($sxapisrgetreturnorderlines);
        return $response;
    }

    /**
     * Operation sxapisrgetreturnorderlinesPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetreturnorderlines $sxapisrgetreturnorderlines (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrgetreturnorderlinesResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrgetreturnorderlinesPostWithHttpInfo($sxapisrgetreturnorderlines)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetreturnorderlinesResp';
        $request = $this->sxapisrgetreturnorderlinesPostRequest($sxapisrgetreturnorderlines);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrgetreturnorderlinesResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrgetreturnorderlinesPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetreturnorderlines $sxapisrgetreturnorderlines (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetreturnorderlinesPostAsync($sxapisrgetreturnorderlines)
    {
        return $this->sxapisrgetreturnorderlinesPostAsyncWithHttpInfo($sxapisrgetreturnorderlines)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrgetreturnorderlinesPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetreturnorderlines $sxapisrgetreturnorderlines (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetreturnorderlinesPostAsyncWithHttpInfo($sxapisrgetreturnorderlines)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetreturnorderlinesResp';
        $request = $this->sxapisrgetreturnorderlinesPostRequest($sxapisrgetreturnorderlines);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrgetreturnorderlinesPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrgetreturnorderlines $sxapisrgetreturnorderlines (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrgetreturnorderlinesPostRequest($sxapisrgetreturnorderlines)
    {
        // verify the required parameter 'sxapisrgetreturnorderlines' is set
        if ($sxapisrgetreturnorderlines === null || (is_array($sxapisrgetreturnorderlines) && count($sxapisrgetreturnorderlines) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrgetreturnorderlines when calling sxapisrgetreturnorderlinesPost'
            );
        }

        $resourcePath = '/sxapisrgetreturnorderlines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrgetreturnorderlines)) {
            $_tempBody = $sxapisrgetreturnorderlines;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrgettaxstatusPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgettaxstatus $sxapisrgettaxstatus sxapisrgettaxstatus (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrgettaxstatusResp
     */
    public function sxapisrgettaxstatusPost($sxapisrgettaxstatus)
    {
        list($response) = $this->sxapisrgettaxstatusPostWithHttpInfo($sxapisrgettaxstatus);
        return $response;
    }

    /**
     * Operation sxapisrgettaxstatusPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgettaxstatus $sxapisrgettaxstatus (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrgettaxstatusResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrgettaxstatusPostWithHttpInfo($sxapisrgettaxstatus)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgettaxstatusResp';
        $request = $this->sxapisrgettaxstatusPostRequest($sxapisrgettaxstatus);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrgettaxstatusResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrgettaxstatusPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgettaxstatus $sxapisrgettaxstatus (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgettaxstatusPostAsync($sxapisrgettaxstatus)
    {
        return $this->sxapisrgettaxstatusPostAsyncWithHttpInfo($sxapisrgettaxstatus)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrgettaxstatusPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgettaxstatus $sxapisrgettaxstatus (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgettaxstatusPostAsyncWithHttpInfo($sxapisrgettaxstatus)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgettaxstatusResp';
        $request = $this->sxapisrgettaxstatusPostRequest($sxapisrgettaxstatus);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrgettaxstatusPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrgettaxstatus $sxapisrgettaxstatus (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrgettaxstatusPostRequest($sxapisrgettaxstatus)
    {
        // verify the required parameter 'sxapisrgettaxstatus' is set
        if ($sxapisrgettaxstatus === null || (is_array($sxapisrgettaxstatus) && count($sxapisrgettaxstatus) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrgettaxstatus when calling sxapisrgettaxstatusPost'
            );
        }

        $resourcePath = '/sxapisrgettaxstatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrgettaxstatus)) {
            $_tempBody = $sxapisrgettaxstatus;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrgetwarehouselistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetwarehouselist $sxapisrgetwarehouselist sxapisrgetwarehouselist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrgetwarehouselistResp
     */
    public function sxapisrgetwarehouselistPost($sxapisrgetwarehouselist)
    {
        list($response) = $this->sxapisrgetwarehouselistPostWithHttpInfo($sxapisrgetwarehouselist);
        return $response;
    }

    /**
     * Operation sxapisrgetwarehouselistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetwarehouselist $sxapisrgetwarehouselist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrgetwarehouselistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrgetwarehouselistPostWithHttpInfo($sxapisrgetwarehouselist)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetwarehouselistResp';
        $request = $this->sxapisrgetwarehouselistPostRequest($sxapisrgetwarehouselist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrgetwarehouselistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrgetwarehouselistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetwarehouselist $sxapisrgetwarehouselist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetwarehouselistPostAsync($sxapisrgetwarehouselist)
    {
        return $this->sxapisrgetwarehouselistPostAsyncWithHttpInfo($sxapisrgetwarehouselist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrgetwarehouselistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetwarehouselist $sxapisrgetwarehouselist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetwarehouselistPostAsyncWithHttpInfo($sxapisrgetwarehouselist)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetwarehouselistResp';
        $request = $this->sxapisrgetwarehouselistPostRequest($sxapisrgetwarehouselist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrgetwarehouselistPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrgetwarehouselist $sxapisrgetwarehouselist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrgetwarehouselistPostRequest($sxapisrgetwarehouselist)
    {
        // verify the required parameter 'sxapisrgetwarehouselist' is set
        if ($sxapisrgetwarehouselist === null || (is_array($sxapisrgetwarehouselist) && count($sxapisrgetwarehouselist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrgetwarehouselist when calling sxapisrgetwarehouselistPost'
            );
        }

        $resourcePath = '/sxapisrgetwarehouselist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrgetwarehouselist)) {
            $_tempBody = $sxapisrgetwarehouselist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrgetwhseprodbalancesPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetwhseprodbalances $sxapisrgetwhseprodbalances sxapisrgetwhseprodbalances (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrgetwhseprodbalancesResp
     */
    public function sxapisrgetwhseprodbalancesPost($sxapisrgetwhseprodbalances)
    {
        list($response) = $this->sxapisrgetwhseprodbalancesPostWithHttpInfo($sxapisrgetwhseprodbalances);
        return $response;
    }

    /**
     * Operation sxapisrgetwhseprodbalancesPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetwhseprodbalances $sxapisrgetwhseprodbalances (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrgetwhseprodbalancesResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrgetwhseprodbalancesPostWithHttpInfo($sxapisrgetwhseprodbalances)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetwhseprodbalancesResp';
        $request = $this->sxapisrgetwhseprodbalancesPostRequest($sxapisrgetwhseprodbalances);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrgetwhseprodbalancesResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrgetwhseprodbalancesPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetwhseprodbalances $sxapisrgetwhseprodbalances (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetwhseprodbalancesPostAsync($sxapisrgetwhseprodbalances)
    {
        return $this->sxapisrgetwhseprodbalancesPostAsyncWithHttpInfo($sxapisrgetwhseprodbalances)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrgetwhseprodbalancesPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetwhseprodbalances $sxapisrgetwhseprodbalances (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetwhseprodbalancesPostAsyncWithHttpInfo($sxapisrgetwhseprodbalances)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetwhseprodbalancesResp';
        $request = $this->sxapisrgetwhseprodbalancesPostRequest($sxapisrgetwhseprodbalances);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrgetwhseprodbalancesPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrgetwhseprodbalances $sxapisrgetwhseprodbalances (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrgetwhseprodbalancesPostRequest($sxapisrgetwhseprodbalances)
    {
        // verify the required parameter 'sxapisrgetwhseprodbalances' is set
        if ($sxapisrgetwhseprodbalances === null || (is_array($sxapisrgetwhseprodbalances) && count($sxapisrgetwhseprodbalances) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrgetwhseprodbalances when calling sxapisrgetwhseprodbalancesPost'
            );
        }

        $resourcePath = '/sxapisrgetwhseprodbalances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrgetwhseprodbalances)) {
            $_tempBody = $sxapisrgetwhseprodbalances;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrgetwhseprodlistdataPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetwhseprodlistdata $sxapisrgetwhseprodlistdata sxapisrgetwhseprodlistdata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrgetwhseprodlistdataResp
     */
    public function sxapisrgetwhseprodlistdataPost($sxapisrgetwhseprodlistdata)
    {
        list($response) = $this->sxapisrgetwhseprodlistdataPostWithHttpInfo($sxapisrgetwhseprodlistdata);
        return $response;
    }

    /**
     * Operation sxapisrgetwhseprodlistdataPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetwhseprodlistdata $sxapisrgetwhseprodlistdata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrgetwhseprodlistdataResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrgetwhseprodlistdataPostWithHttpInfo($sxapisrgetwhseprodlistdata)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetwhseprodlistdataResp';
        $request = $this->sxapisrgetwhseprodlistdataPostRequest($sxapisrgetwhseprodlistdata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrgetwhseprodlistdataResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrgetwhseprodlistdataPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetwhseprodlistdata $sxapisrgetwhseprodlistdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetwhseprodlistdataPostAsync($sxapisrgetwhseprodlistdata)
    {
        return $this->sxapisrgetwhseprodlistdataPostAsyncWithHttpInfo($sxapisrgetwhseprodlistdata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrgetwhseprodlistdataPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetwhseprodlistdata $sxapisrgetwhseprodlistdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetwhseprodlistdataPostAsyncWithHttpInfo($sxapisrgetwhseprodlistdata)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetwhseprodlistdataResp';
        $request = $this->sxapisrgetwhseprodlistdataPostRequest($sxapisrgetwhseprodlistdata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrgetwhseprodlistdataPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrgetwhseprodlistdata $sxapisrgetwhseprodlistdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrgetwhseprodlistdataPostRequest($sxapisrgetwhseprodlistdata)
    {
        // verify the required parameter 'sxapisrgetwhseprodlistdata' is set
        if ($sxapisrgetwhseprodlistdata === null || (is_array($sxapisrgetwhseprodlistdata) && count($sxapisrgetwhseprodlistdata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrgetwhseprodlistdata when calling sxapisrgetwhseprodlistdataPost'
            );
        }

        $resourcePath = '/sxapisrgetwhseprodlistdata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrgetwhseprodlistdata)) {
            $_tempBody = $sxapisrgetwhseprodlistdata;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrgetwhseproductdataPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetwhseproductdata $sxapisrgetwhseproductdata sxapisrgetwhseproductdata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrgetwhseproductdataResp
     */
    public function sxapisrgetwhseproductdataPost($sxapisrgetwhseproductdata)
    {
        list($response) = $this->sxapisrgetwhseproductdataPostWithHttpInfo($sxapisrgetwhseproductdata);
        return $response;
    }

    /**
     * Operation sxapisrgetwhseproductdataPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetwhseproductdata $sxapisrgetwhseproductdata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrgetwhseproductdataResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrgetwhseproductdataPostWithHttpInfo($sxapisrgetwhseproductdata)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetwhseproductdataResp';
        $request = $this->sxapisrgetwhseproductdataPostRequest($sxapisrgetwhseproductdata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrgetwhseproductdataResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrgetwhseproductdataPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetwhseproductdata $sxapisrgetwhseproductdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetwhseproductdataPostAsync($sxapisrgetwhseproductdata)
    {
        return $this->sxapisrgetwhseproductdataPostAsyncWithHttpInfo($sxapisrgetwhseproductdata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrgetwhseproductdataPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrgetwhseproductdata $sxapisrgetwhseproductdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrgetwhseproductdataPostAsyncWithHttpInfo($sxapisrgetwhseproductdata)
    {
        $returnType = '\Swagger\Client\Model\SxapisrgetwhseproductdataResp';
        $request = $this->sxapisrgetwhseproductdataPostRequest($sxapisrgetwhseproductdata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrgetwhseproductdataPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrgetwhseproductdata $sxapisrgetwhseproductdata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrgetwhseproductdataPostRequest($sxapisrgetwhseproductdata)
    {
        // verify the required parameter 'sxapisrgetwhseproductdata' is set
        if ($sxapisrgetwhseproductdata === null || (is_array($sxapisrgetwhseproductdata) && count($sxapisrgetwhseproductdata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrgetwhseproductdata when calling sxapisrgetwhseproductdataPost'
            );
        }

        $resourcePath = '/sxapisrgetwhseproductdata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrgetwhseproductdata)) {
            $_tempBody = $sxapisrgetwhseproductdata;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrinventoryadjustPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrinventoryadjust $sxapisrinventoryadjust sxapisrinventoryadjust (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrinventoryadjustResp
     */
    public function sxapisrinventoryadjustPost($sxapisrinventoryadjust)
    {
        list($response) = $this->sxapisrinventoryadjustPostWithHttpInfo($sxapisrinventoryadjust);
        return $response;
    }

    /**
     * Operation sxapisrinventoryadjustPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrinventoryadjust $sxapisrinventoryadjust (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrinventoryadjustResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrinventoryadjustPostWithHttpInfo($sxapisrinventoryadjust)
    {
        $returnType = '\Swagger\Client\Model\SxapisrinventoryadjustResp';
        $request = $this->sxapisrinventoryadjustPostRequest($sxapisrinventoryadjust);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrinventoryadjustResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrinventoryadjustPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrinventoryadjust $sxapisrinventoryadjust (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrinventoryadjustPostAsync($sxapisrinventoryadjust)
    {
        return $this->sxapisrinventoryadjustPostAsyncWithHttpInfo($sxapisrinventoryadjust)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrinventoryadjustPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrinventoryadjust $sxapisrinventoryadjust (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrinventoryadjustPostAsyncWithHttpInfo($sxapisrinventoryadjust)
    {
        $returnType = '\Swagger\Client\Model\SxapisrinventoryadjustResp';
        $request = $this->sxapisrinventoryadjustPostRequest($sxapisrinventoryadjust);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrinventoryadjustPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrinventoryadjust $sxapisrinventoryadjust (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrinventoryadjustPostRequest($sxapisrinventoryadjust)
    {
        // verify the required parameter 'sxapisrinventoryadjust' is set
        if ($sxapisrinventoryadjust === null || (is_array($sxapisrinventoryadjust) && count($sxapisrinventoryadjust) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrinventoryadjust when calling sxapisrinventoryadjustPost'
            );
        }

        $resourcePath = '/sxapisrinventoryadjust';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrinventoryadjust)) {
            $_tempBody = $sxapisrinventoryadjust;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrinventorytransferPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrinventorytransfer $sxapisrinventorytransfer sxapisrinventorytransfer (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrinventorytransferResp
     */
    public function sxapisrinventorytransferPost($sxapisrinventorytransfer)
    {
        list($response) = $this->sxapisrinventorytransferPostWithHttpInfo($sxapisrinventorytransfer);
        return $response;
    }

    /**
     * Operation sxapisrinventorytransferPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrinventorytransfer $sxapisrinventorytransfer (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrinventorytransferResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrinventorytransferPostWithHttpInfo($sxapisrinventorytransfer)
    {
        $returnType = '\Swagger\Client\Model\SxapisrinventorytransferResp';
        $request = $this->sxapisrinventorytransferPostRequest($sxapisrinventorytransfer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrinventorytransferResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrinventorytransferPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrinventorytransfer $sxapisrinventorytransfer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrinventorytransferPostAsync($sxapisrinventorytransfer)
    {
        return $this->sxapisrinventorytransferPostAsyncWithHttpInfo($sxapisrinventorytransfer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrinventorytransferPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrinventorytransfer $sxapisrinventorytransfer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrinventorytransferPostAsyncWithHttpInfo($sxapisrinventorytransfer)
    {
        $returnType = '\Swagger\Client\Model\SxapisrinventorytransferResp';
        $request = $this->sxapisrinventorytransferPostRequest($sxapisrinventorytransfer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrinventorytransferPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrinventorytransfer $sxapisrinventorytransfer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrinventorytransferPostRequest($sxapisrinventorytransfer)
    {
        // verify the required parameter 'sxapisrinventorytransfer' is set
        if ($sxapisrinventorytransfer === null || (is_array($sxapisrinventorytransfer) && count($sxapisrinventorytransfer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrinventorytransfer when calling sxapisrinventorytransferPost'
            );
        }

        $resourcePath = '/sxapisrinventorytransfer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrinventorytransfer)) {
            $_tempBody = $sxapisrinventorytransfer;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrorderchangePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrorderchange $sxapisrorderchange sxapisrorderchange (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrorderchangeResp
     */
    public function sxapisrorderchangePost($sxapisrorderchange)
    {
        list($response) = $this->sxapisrorderchangePostWithHttpInfo($sxapisrorderchange);
        return $response;
    }

    /**
     * Operation sxapisrorderchangePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrorderchange $sxapisrorderchange (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrorderchangeResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrorderchangePostWithHttpInfo($sxapisrorderchange)
    {
        $returnType = '\Swagger\Client\Model\SxapisrorderchangeResp';
        $request = $this->sxapisrorderchangePostRequest($sxapisrorderchange);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrorderchangeResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrorderchangePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrorderchange $sxapisrorderchange (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrorderchangePostAsync($sxapisrorderchange)
    {
        return $this->sxapisrorderchangePostAsyncWithHttpInfo($sxapisrorderchange)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrorderchangePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrorderchange $sxapisrorderchange (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrorderchangePostAsyncWithHttpInfo($sxapisrorderchange)
    {
        $returnType = '\Swagger\Client\Model\SxapisrorderchangeResp';
        $request = $this->sxapisrorderchangePostRequest($sxapisrorderchange);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrorderchangePost'
     *
     * @param  \Swagger\Client\Model\Sxapisrorderchange $sxapisrorderchange (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrorderchangePostRequest($sxapisrorderchange)
    {
        // verify the required parameter 'sxapisrorderchange' is set
        if ($sxapisrorderchange === null || (is_array($sxapisrorderchange) && count($sxapisrorderchange) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrorderchange when calling sxapisrorderchangePost'
            );
        }

        $resourcePath = '/sxapisrorderchange';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrorderchange)) {
            $_tempBody = $sxapisrorderchange;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrprocessbackorderPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrprocessbackorder $sxapisrprocessbackorder sxapisrprocessbackorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrprocessbackorderResp
     */
    public function sxapisrprocessbackorderPost($sxapisrprocessbackorder)
    {
        list($response) = $this->sxapisrprocessbackorderPostWithHttpInfo($sxapisrprocessbackorder);
        return $response;
    }

    /**
     * Operation sxapisrprocessbackorderPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrprocessbackorder $sxapisrprocessbackorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrprocessbackorderResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrprocessbackorderPostWithHttpInfo($sxapisrprocessbackorder)
    {
        $returnType = '\Swagger\Client\Model\SxapisrprocessbackorderResp';
        $request = $this->sxapisrprocessbackorderPostRequest($sxapisrprocessbackorder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrprocessbackorderResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrprocessbackorderPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrprocessbackorder $sxapisrprocessbackorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrprocessbackorderPostAsync($sxapisrprocessbackorder)
    {
        return $this->sxapisrprocessbackorderPostAsyncWithHttpInfo($sxapisrprocessbackorder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrprocessbackorderPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrprocessbackorder $sxapisrprocessbackorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrprocessbackorderPostAsyncWithHttpInfo($sxapisrprocessbackorder)
    {
        $returnType = '\Swagger\Client\Model\SxapisrprocessbackorderResp';
        $request = $this->sxapisrprocessbackorderPostRequest($sxapisrprocessbackorder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrprocessbackorderPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrprocessbackorder $sxapisrprocessbackorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrprocessbackorderPostRequest($sxapisrprocessbackorder)
    {
        // verify the required parameter 'sxapisrprocessbackorder' is set
        if ($sxapisrprocessbackorder === null || (is_array($sxapisrprocessbackorder) && count($sxapisrprocessbackorder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrprocessbackorder when calling sxapisrprocessbackorderPost'
            );
        }

        $resourcePath = '/sxapisrprocessbackorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrprocessbackorder)) {
            $_tempBody = $sxapisrprocessbackorder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrprocessbackorderv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrprocessbackorderv2 $sxapisrprocessbackorderv2 sxapisrprocessbackorderv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapisrprocessbackorderv2Resp
     */
    public function sxapisrprocessbackorderv2Post($sxapisrprocessbackorderv2)
    {
        list($response) = $this->sxapisrprocessbackorderv2PostWithHttpInfo($sxapisrprocessbackorderv2);
        return $response;
    }

    /**
     * Operation sxapisrprocessbackorderv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrprocessbackorderv2 $sxapisrprocessbackorderv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapisrprocessbackorderv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrprocessbackorderv2PostWithHttpInfo($sxapisrprocessbackorderv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisrprocessbackorderv2Resp';
        $request = $this->sxapisrprocessbackorderv2PostRequest($sxapisrprocessbackorderv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapisrprocessbackorderv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrprocessbackorderv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrprocessbackorderv2 $sxapisrprocessbackorderv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrprocessbackorderv2PostAsync($sxapisrprocessbackorderv2)
    {
        return $this->sxapisrprocessbackorderv2PostAsyncWithHttpInfo($sxapisrprocessbackorderv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrprocessbackorderv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrprocessbackorderv2 $sxapisrprocessbackorderv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrprocessbackorderv2PostAsyncWithHttpInfo($sxapisrprocessbackorderv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapisrprocessbackorderv2Resp';
        $request = $this->sxapisrprocessbackorderv2PostRequest($sxapisrprocessbackorderv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrprocessbackorderv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapisrprocessbackorderv2 $sxapisrprocessbackorderv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrprocessbackorderv2PostRequest($sxapisrprocessbackorderv2)
    {
        // verify the required parameter 'sxapisrprocessbackorderv2' is set
        if ($sxapisrprocessbackorderv2 === null || (is_array($sxapisrprocessbackorderv2) && count($sxapisrprocessbackorderv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrprocessbackorderv2 when calling sxapisrprocessbackorderv2Post'
            );
        }

        $resourcePath = '/sxapisrprocessbackorderv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrprocessbackorderv2)) {
            $_tempBody = $sxapisrprocessbackorderv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrprocessregrindinPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrprocessregrindin $sxapisrprocessregrindin sxapisrprocessregrindin (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrprocessregrindinResp
     */
    public function sxapisrprocessregrindinPost($sxapisrprocessregrindin)
    {
        list($response) = $this->sxapisrprocessregrindinPostWithHttpInfo($sxapisrprocessregrindin);
        return $response;
    }

    /**
     * Operation sxapisrprocessregrindinPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrprocessregrindin $sxapisrprocessregrindin (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrprocessregrindinResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrprocessregrindinPostWithHttpInfo($sxapisrprocessregrindin)
    {
        $returnType = '\Swagger\Client\Model\SxapisrprocessregrindinResp';
        $request = $this->sxapisrprocessregrindinPostRequest($sxapisrprocessregrindin);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrprocessregrindinResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrprocessregrindinPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrprocessregrindin $sxapisrprocessregrindin (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrprocessregrindinPostAsync($sxapisrprocessregrindin)
    {
        return $this->sxapisrprocessregrindinPostAsyncWithHttpInfo($sxapisrprocessregrindin)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrprocessregrindinPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrprocessregrindin $sxapisrprocessregrindin (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrprocessregrindinPostAsyncWithHttpInfo($sxapisrprocessregrindin)
    {
        $returnType = '\Swagger\Client\Model\SxapisrprocessregrindinResp';
        $request = $this->sxapisrprocessregrindinPostRequest($sxapisrprocessregrindin);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrprocessregrindinPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrprocessregrindin $sxapisrprocessregrindin (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrprocessregrindinPostRequest($sxapisrprocessregrindin)
    {
        // verify the required parameter 'sxapisrprocessregrindin' is set
        if ($sxapisrprocessregrindin === null || (is_array($sxapisrprocessregrindin) && count($sxapisrprocessregrindin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrprocessregrindin when calling sxapisrprocessregrindinPost'
            );
        }

        $resourcePath = '/sxapisrprocessregrindin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrprocessregrindin)) {
            $_tempBody = $sxapisrprocessregrindin;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrprocessregrindoutPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrprocessregrindout $sxapisrprocessregrindout sxapisrprocessregrindout (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrprocessregrindoutResp
     */
    public function sxapisrprocessregrindoutPost($sxapisrprocessregrindout)
    {
        list($response) = $this->sxapisrprocessregrindoutPostWithHttpInfo($sxapisrprocessregrindout);
        return $response;
    }

    /**
     * Operation sxapisrprocessregrindoutPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrprocessregrindout $sxapisrprocessregrindout (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrprocessregrindoutResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrprocessregrindoutPostWithHttpInfo($sxapisrprocessregrindout)
    {
        $returnType = '\Swagger\Client\Model\SxapisrprocessregrindoutResp';
        $request = $this->sxapisrprocessregrindoutPostRequest($sxapisrprocessregrindout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrprocessregrindoutResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrprocessregrindoutPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrprocessregrindout $sxapisrprocessregrindout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrprocessregrindoutPostAsync($sxapisrprocessregrindout)
    {
        return $this->sxapisrprocessregrindoutPostAsyncWithHttpInfo($sxapisrprocessregrindout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrprocessregrindoutPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrprocessregrindout $sxapisrprocessregrindout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrprocessregrindoutPostAsyncWithHttpInfo($sxapisrprocessregrindout)
    {
        $returnType = '\Swagger\Client\Model\SxapisrprocessregrindoutResp';
        $request = $this->sxapisrprocessregrindoutPostRequest($sxapisrprocessregrindout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrprocessregrindoutPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrprocessregrindout $sxapisrprocessregrindout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrprocessregrindoutPostRequest($sxapisrprocessregrindout)
    {
        // verify the required parameter 'sxapisrprocessregrindout' is set
        if ($sxapisrprocessregrindout === null || (is_array($sxapisrprocessregrindout) && count($sxapisrprocessregrindout) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrprocessregrindout when calling sxapisrprocessregrindoutPost'
            );
        }

        $resourcePath = '/sxapisrprocessregrindout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrprocessregrindout)) {
            $_tempBody = $sxapisrprocessregrindout;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrreceivecustinvPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrreceivecustinv $sxapisrreceivecustinv sxapisrreceivecustinv (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrreceivecustinvResp
     */
    public function sxapisrreceivecustinvPost($sxapisrreceivecustinv)
    {
        list($response) = $this->sxapisrreceivecustinvPostWithHttpInfo($sxapisrreceivecustinv);
        return $response;
    }

    /**
     * Operation sxapisrreceivecustinvPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrreceivecustinv $sxapisrreceivecustinv (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrreceivecustinvResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrreceivecustinvPostWithHttpInfo($sxapisrreceivecustinv)
    {
        $returnType = '\Swagger\Client\Model\SxapisrreceivecustinvResp';
        $request = $this->sxapisrreceivecustinvPostRequest($sxapisrreceivecustinv);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrreceivecustinvResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrreceivecustinvPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrreceivecustinv $sxapisrreceivecustinv (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrreceivecustinvPostAsync($sxapisrreceivecustinv)
    {
        return $this->sxapisrreceivecustinvPostAsyncWithHttpInfo($sxapisrreceivecustinv)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrreceivecustinvPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrreceivecustinv $sxapisrreceivecustinv (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrreceivecustinvPostAsyncWithHttpInfo($sxapisrreceivecustinv)
    {
        $returnType = '\Swagger\Client\Model\SxapisrreceivecustinvResp';
        $request = $this->sxapisrreceivecustinvPostRequest($sxapisrreceivecustinv);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrreceivecustinvPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrreceivecustinv $sxapisrreceivecustinv (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrreceivecustinvPostRequest($sxapisrreceivecustinv)
    {
        // verify the required parameter 'sxapisrreceivecustinv' is set
        if ($sxapisrreceivecustinv === null || (is_array($sxapisrreceivecustinv) && count($sxapisrreceivecustinv) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrreceivecustinv when calling sxapisrreceivecustinvPost'
            );
        }

        $resourcePath = '/sxapisrreceivecustinv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrreceivecustinv)) {
            $_tempBody = $sxapisrreceivecustinv;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrreceivepoPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrreceivepo $sxapisrreceivepo sxapisrreceivepo (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrreceivepoResp
     */
    public function sxapisrreceivepoPost($sxapisrreceivepo)
    {
        list($response) = $this->sxapisrreceivepoPostWithHttpInfo($sxapisrreceivepo);
        return $response;
    }

    /**
     * Operation sxapisrreceivepoPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrreceivepo $sxapisrreceivepo (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrreceivepoResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrreceivepoPostWithHttpInfo($sxapisrreceivepo)
    {
        $returnType = '\Swagger\Client\Model\SxapisrreceivepoResp';
        $request = $this->sxapisrreceivepoPostRequest($sxapisrreceivepo);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrreceivepoResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrreceivepoPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrreceivepo $sxapisrreceivepo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrreceivepoPostAsync($sxapisrreceivepo)
    {
        return $this->sxapisrreceivepoPostAsyncWithHttpInfo($sxapisrreceivepo)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrreceivepoPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrreceivepo $sxapisrreceivepo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrreceivepoPostAsyncWithHttpInfo($sxapisrreceivepo)
    {
        $returnType = '\Swagger\Client\Model\SxapisrreceivepoResp';
        $request = $this->sxapisrreceivepoPostRequest($sxapisrreceivepo);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrreceivepoPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrreceivepo $sxapisrreceivepo (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrreceivepoPostRequest($sxapisrreceivepo)
    {
        // verify the required parameter 'sxapisrreceivepo' is set
        if ($sxapisrreceivepo === null || (is_array($sxapisrreceivepo) && count($sxapisrreceivepo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrreceivepo when calling sxapisrreceivepoPost'
            );
        }

        $resourcePath = '/sxapisrreceivepo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrreceivepo)) {
            $_tempBody = $sxapisrreceivepo;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrreceivewtPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrreceivewt $sxapisrreceivewt sxapisrreceivewt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrreceivewtResp
     */
    public function sxapisrreceivewtPost($sxapisrreceivewt)
    {
        list($response) = $this->sxapisrreceivewtPostWithHttpInfo($sxapisrreceivewt);
        return $response;
    }

    /**
     * Operation sxapisrreceivewtPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrreceivewt $sxapisrreceivewt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrreceivewtResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrreceivewtPostWithHttpInfo($sxapisrreceivewt)
    {
        $returnType = '\Swagger\Client\Model\SxapisrreceivewtResp';
        $request = $this->sxapisrreceivewtPostRequest($sxapisrreceivewt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrreceivewtResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrreceivewtPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrreceivewt $sxapisrreceivewt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrreceivewtPostAsync($sxapisrreceivewt)
    {
        return $this->sxapisrreceivewtPostAsyncWithHttpInfo($sxapisrreceivewt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrreceivewtPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrreceivewt $sxapisrreceivewt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrreceivewtPostAsyncWithHttpInfo($sxapisrreceivewt)
    {
        $returnType = '\Swagger\Client\Model\SxapisrreceivewtResp';
        $request = $this->sxapisrreceivewtPostRequest($sxapisrreceivewt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrreceivewtPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrreceivewt $sxapisrreceivewt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrreceivewtPostRequest($sxapisrreceivewt)
    {
        // verify the required parameter 'sxapisrreceivewt' is set
        if ($sxapisrreceivewt === null || (is_array($sxapisrreceivewt) && count($sxapisrreceivewt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrreceivewt when calling sxapisrreceivewtPost'
            );
        }

        $resourcePath = '/sxapisrreceivewt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrreceivewt)) {
            $_tempBody = $sxapisrreceivewt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrshipwtPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrshipwt $sxapisrshipwt sxapisrshipwt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrshipwtResp
     */
    public function sxapisrshipwtPost($sxapisrshipwt)
    {
        list($response) = $this->sxapisrshipwtPostWithHttpInfo($sxapisrshipwt);
        return $response;
    }

    /**
     * Operation sxapisrshipwtPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrshipwt $sxapisrshipwt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrshipwtResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrshipwtPostWithHttpInfo($sxapisrshipwt)
    {
        $returnType = '\Swagger\Client\Model\SxapisrshipwtResp';
        $request = $this->sxapisrshipwtPostRequest($sxapisrshipwt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrshipwtResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrshipwtPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrshipwt $sxapisrshipwt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrshipwtPostAsync($sxapisrshipwt)
    {
        return $this->sxapisrshipwtPostAsyncWithHttpInfo($sxapisrshipwt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrshipwtPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrshipwt $sxapisrshipwt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrshipwtPostAsyncWithHttpInfo($sxapisrshipwt)
    {
        $returnType = '\Swagger\Client\Model\SxapisrshipwtResp';
        $request = $this->sxapisrshipwtPostRequest($sxapisrshipwt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrshipwtPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrshipwt $sxapisrshipwt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrshipwtPostRequest($sxapisrshipwt)
    {
        // verify the required parameter 'sxapisrshipwt' is set
        if ($sxapisrshipwt === null || (is_array($sxapisrshipwt) && count($sxapisrshipwt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrshipwt when calling sxapisrshipwtPost'
            );
        }

        $resourcePath = '/sxapisrshipwt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrshipwt)) {
            $_tempBody = $sxapisrshipwt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrunavailableadjustPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrunavailableadjust $sxapisrunavailableadjust sxapisrunavailableadjust (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrunavailableadjustResp
     */
    public function sxapisrunavailableadjustPost($sxapisrunavailableadjust)
    {
        list($response) = $this->sxapisrunavailableadjustPostWithHttpInfo($sxapisrunavailableadjust);
        return $response;
    }

    /**
     * Operation sxapisrunavailableadjustPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrunavailableadjust $sxapisrunavailableadjust (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrunavailableadjustResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrunavailableadjustPostWithHttpInfo($sxapisrunavailableadjust)
    {
        $returnType = '\Swagger\Client\Model\SxapisrunavailableadjustResp';
        $request = $this->sxapisrunavailableadjustPostRequest($sxapisrunavailableadjust);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrunavailableadjustResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrunavailableadjustPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrunavailableadjust $sxapisrunavailableadjust (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrunavailableadjustPostAsync($sxapisrunavailableadjust)
    {
        return $this->sxapisrunavailableadjustPostAsyncWithHttpInfo($sxapisrunavailableadjust)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrunavailableadjustPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrunavailableadjust $sxapisrunavailableadjust (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrunavailableadjustPostAsyncWithHttpInfo($sxapisrunavailableadjust)
    {
        $returnType = '\Swagger\Client\Model\SxapisrunavailableadjustResp';
        $request = $this->sxapisrunavailableadjustPostRequest($sxapisrunavailableadjust);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrunavailableadjustPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrunavailableadjust $sxapisrunavailableadjust (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrunavailableadjustPostRequest($sxapisrunavailableadjust)
    {
        // verify the required parameter 'sxapisrunavailableadjust' is set
        if ($sxapisrunavailableadjust === null || (is_array($sxapisrunavailableadjust) && count($sxapisrunavailableadjust) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrunavailableadjust when calling sxapisrunavailableadjustPost'
            );
        }

        $resourcePath = '/sxapisrunavailableadjust';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrunavailableadjust)) {
            $_tempBody = $sxapisrunavailableadjust;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrupdatecountPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrupdatecount $sxapisrupdatecount sxapisrupdatecount (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrupdatecountResp
     */
    public function sxapisrupdatecountPost($sxapisrupdatecount)
    {
        list($response) = $this->sxapisrupdatecountPostWithHttpInfo($sxapisrupdatecount);
        return $response;
    }

    /**
     * Operation sxapisrupdatecountPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrupdatecount $sxapisrupdatecount (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrupdatecountResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrupdatecountPostWithHttpInfo($sxapisrupdatecount)
    {
        $returnType = '\Swagger\Client\Model\SxapisrupdatecountResp';
        $request = $this->sxapisrupdatecountPostRequest($sxapisrupdatecount);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrupdatecountResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrupdatecountPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrupdatecount $sxapisrupdatecount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrupdatecountPostAsync($sxapisrupdatecount)
    {
        return $this->sxapisrupdatecountPostAsyncWithHttpInfo($sxapisrupdatecount)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrupdatecountPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrupdatecount $sxapisrupdatecount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrupdatecountPostAsyncWithHttpInfo($sxapisrupdatecount)
    {
        $returnType = '\Swagger\Client\Model\SxapisrupdatecountResp';
        $request = $this->sxapisrupdatecountPostRequest($sxapisrupdatecount);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrupdatecountPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrupdatecount $sxapisrupdatecount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrupdatecountPostRequest($sxapisrupdatecount)
    {
        // verify the required parameter 'sxapisrupdatecount' is set
        if ($sxapisrupdatecount === null || (is_array($sxapisrupdatecount) && count($sxapisrupdatecount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrupdatecount when calling sxapisrupdatecountPost'
            );
        }

        $resourcePath = '/sxapisrupdatecount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrupdatecount)) {
            $_tempBody = $sxapisrupdatecount;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrupdatecustonorderPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrupdatecustonorder $sxapisrupdatecustonorder sxapisrupdatecustonorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrupdatecustonorderResp
     */
    public function sxapisrupdatecustonorderPost($sxapisrupdatecustonorder)
    {
        list($response) = $this->sxapisrupdatecustonorderPostWithHttpInfo($sxapisrupdatecustonorder);
        return $response;
    }

    /**
     * Operation sxapisrupdatecustonorderPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrupdatecustonorder $sxapisrupdatecustonorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrupdatecustonorderResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrupdatecustonorderPostWithHttpInfo($sxapisrupdatecustonorder)
    {
        $returnType = '\Swagger\Client\Model\SxapisrupdatecustonorderResp';
        $request = $this->sxapisrupdatecustonorderPostRequest($sxapisrupdatecustonorder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrupdatecustonorderResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrupdatecustonorderPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrupdatecustonorder $sxapisrupdatecustonorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrupdatecustonorderPostAsync($sxapisrupdatecustonorder)
    {
        return $this->sxapisrupdatecustonorderPostAsyncWithHttpInfo($sxapisrupdatecustonorder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrupdatecustonorderPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrupdatecustonorder $sxapisrupdatecustonorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrupdatecustonorderPostAsyncWithHttpInfo($sxapisrupdatecustonorder)
    {
        $returnType = '\Swagger\Client\Model\SxapisrupdatecustonorderResp';
        $request = $this->sxapisrupdatecustonorderPostRequest($sxapisrupdatecustonorder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrupdatecustonorderPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrupdatecustonorder $sxapisrupdatecustonorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrupdatecustonorderPostRequest($sxapisrupdatecustonorder)
    {
        // verify the required parameter 'sxapisrupdatecustonorder' is set
        if ($sxapisrupdatecustonorder === null || (is_array($sxapisrupdatecustonorder) && count($sxapisrupdatecustonorder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrupdatecustonorder when calling sxapisrupdatecustonorderPost'
            );
        }

        $resourcePath = '/sxapisrupdatecustonorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrupdatecustonorder)) {
            $_tempBody = $sxapisrupdatecustonorder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapisrupdateworkorderPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrupdateworkorder $sxapisrupdateworkorder sxapisrupdateworkorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapisrupdateworkorderResp
     */
    public function sxapisrupdateworkorderPost($sxapisrupdateworkorder)
    {
        list($response) = $this->sxapisrupdateworkorderPostWithHttpInfo($sxapisrupdateworkorder);
        return $response;
    }

    /**
     * Operation sxapisrupdateworkorderPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrupdateworkorder $sxapisrupdateworkorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapisrupdateworkorderResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapisrupdateworkorderPostWithHttpInfo($sxapisrupdateworkorder)
    {
        $returnType = '\Swagger\Client\Model\SxapisrupdateworkorderResp';
        $request = $this->sxapisrupdateworkorderPostRequest($sxapisrupdateworkorder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapisrupdateworkorderResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapisrupdateworkorderPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrupdateworkorder $sxapisrupdateworkorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrupdateworkorderPostAsync($sxapisrupdateworkorder)
    {
        return $this->sxapisrupdateworkorderPostAsyncWithHttpInfo($sxapisrupdateworkorder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapisrupdateworkorderPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapisrupdateworkorder $sxapisrupdateworkorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapisrupdateworkorderPostAsyncWithHttpInfo($sxapisrupdateworkorder)
    {
        $returnType = '\Swagger\Client\Model\SxapisrupdateworkorderResp';
        $request = $this->sxapisrupdateworkorderPostRequest($sxapisrupdateworkorder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapisrupdateworkorderPost'
     *
     * @param  \Swagger\Client\Model\Sxapisrupdateworkorder $sxapisrupdateworkorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapisrupdateworkorderPostRequest($sxapisrupdateworkorder)
    {
        // verify the required parameter 'sxapisrupdateworkorder' is set
        if ($sxapisrupdateworkorder === null || (is_array($sxapisrupdateworkorder) && count($sxapisrupdateworkorder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapisrupdateworkorder when calling sxapisrupdateworkorderPost'
            );
        }

        $resourcePath = '/sxapisrupdateworkorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapisrupdateworkorder)) {
            $_tempBody = $sxapisrupdateworkorder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapitokengeneratePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapitokengenerate $sxapitokengenerate sxapitokengenerate (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapitokengenerateResp
     */
    public function sxapitokengeneratePost($sxapitokengenerate)
    {
        list($response) = $this->sxapitokengeneratePostWithHttpInfo($sxapitokengenerate);
        return $response;
    }

    /**
     * Operation sxapitokengeneratePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapitokengenerate $sxapitokengenerate (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapitokengenerateResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapitokengeneratePostWithHttpInfo($sxapitokengenerate)
    {
        $returnType = '\Swagger\Client\Model\SxapitokengenerateResp';
        $request = $this->sxapitokengeneratePostRequest($sxapitokengenerate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapitokengenerateResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapitokengeneratePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapitokengenerate $sxapitokengenerate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapitokengeneratePostAsync($sxapitokengenerate)
    {
        return $this->sxapitokengeneratePostAsyncWithHttpInfo($sxapitokengenerate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapitokengeneratePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapitokengenerate $sxapitokengenerate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapitokengeneratePostAsyncWithHttpInfo($sxapitokengenerate)
    {
        $returnType = '\Swagger\Client\Model\SxapitokengenerateResp';
        $request = $this->sxapitokengeneratePostRequest($sxapitokengenerate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapitokengeneratePost'
     *
     * @param  \Swagger\Client\Model\Sxapitokengenerate $sxapitokengenerate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapitokengeneratePostRequest($sxapitokengenerate)
    {
        // verify the required parameter 'sxapitokengenerate' is set
        if ($sxapitokengenerate === null || (is_array($sxapitokengenerate) && count($sxapitokengenerate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapitokengenerate when calling sxapitokengeneratePost'
            );
        }

        $resourcePath = '/sxapitokengenerate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapitokengenerate)) {
            $_tempBody = $sxapitokengenerate;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapitwlgetcartondataPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapitwlgetcartondata $sxapitwlgetcartondata sxapitwlgetcartondata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapitwlgetcartondataResp
     */
    public function sxapitwlgetcartondataPost($sxapitwlgetcartondata)
    {
        list($response) = $this->sxapitwlgetcartondataPostWithHttpInfo($sxapitwlgetcartondata);
        return $response;
    }

    /**
     * Operation sxapitwlgetcartondataPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapitwlgetcartondata $sxapitwlgetcartondata (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapitwlgetcartondataResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapitwlgetcartondataPostWithHttpInfo($sxapitwlgetcartondata)
    {
        $returnType = '\Swagger\Client\Model\SxapitwlgetcartondataResp';
        $request = $this->sxapitwlgetcartondataPostRequest($sxapitwlgetcartondata);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapitwlgetcartondataResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapitwlgetcartondataPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapitwlgetcartondata $sxapitwlgetcartondata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapitwlgetcartondataPostAsync($sxapitwlgetcartondata)
    {
        return $this->sxapitwlgetcartondataPostAsyncWithHttpInfo($sxapitwlgetcartondata)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapitwlgetcartondataPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapitwlgetcartondata $sxapitwlgetcartondata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapitwlgetcartondataPostAsyncWithHttpInfo($sxapitwlgetcartondata)
    {
        $returnType = '\Swagger\Client\Model\SxapitwlgetcartondataResp';
        $request = $this->sxapitwlgetcartondataPostRequest($sxapitwlgetcartondata);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapitwlgetcartondataPost'
     *
     * @param  \Swagger\Client\Model\Sxapitwlgetcartondata $sxapitwlgetcartondata (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapitwlgetcartondataPostRequest($sxapitwlgetcartondata)
    {
        // verify the required parameter 'sxapitwlgetcartondata' is set
        if ($sxapitwlgetcartondata === null || (is_array($sxapitwlgetcartondata) && count($sxapitwlgetcartondata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapitwlgetcartondata when calling sxapitwlgetcartondataPost'
            );
        }

        $resourcePath = '/sxapitwlgetcartondata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapitwlgetcartondata)) {
            $_tempBody = $sxapitwlgetcartondata;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapitwlgettrackernumPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapitwlgettrackernum $sxapitwlgettrackernum sxapitwlgettrackernum (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapitwlgettrackernumResp
     */
    public function sxapitwlgettrackernumPost($sxapitwlgettrackernum)
    {
        list($response) = $this->sxapitwlgettrackernumPostWithHttpInfo($sxapitwlgettrackernum);
        return $response;
    }

    /**
     * Operation sxapitwlgettrackernumPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapitwlgettrackernum $sxapitwlgettrackernum (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapitwlgettrackernumResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapitwlgettrackernumPostWithHttpInfo($sxapitwlgettrackernum)
    {
        $returnType = '\Swagger\Client\Model\SxapitwlgettrackernumResp';
        $request = $this->sxapitwlgettrackernumPostRequest($sxapitwlgettrackernum);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapitwlgettrackernumResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapitwlgettrackernumPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapitwlgettrackernum $sxapitwlgettrackernum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapitwlgettrackernumPostAsync($sxapitwlgettrackernum)
    {
        return $this->sxapitwlgettrackernumPostAsyncWithHttpInfo($sxapitwlgettrackernum)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapitwlgettrackernumPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapitwlgettrackernum $sxapitwlgettrackernum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapitwlgettrackernumPostAsyncWithHttpInfo($sxapitwlgettrackernum)
    {
        $returnType = '\Swagger\Client\Model\SxapitwlgettrackernumResp';
        $request = $this->sxapitwlgettrackernumPostRequest($sxapitwlgettrackernum);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapitwlgettrackernumPost'
     *
     * @param  \Swagger\Client\Model\Sxapitwlgettrackernum $sxapitwlgettrackernum (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapitwlgettrackernumPostRequest($sxapitwlgettrackernum)
    {
        // verify the required parameter 'sxapitwlgettrackernum' is set
        if ($sxapitwlgettrackernum === null || (is_array($sxapitwlgettrackernum) && count($sxapitwlgettrackernum) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapitwlgettrackernum when calling sxapitwlgettrackernumPost'
            );
        }

        $resourcePath = '/sxapitwlgettrackernum';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapitwlgettrackernum)) {
            $_tempBody = $sxapitwlgettrackernum;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiwtapprovealllinesPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtapprovealllines $sxapiwtapprovealllines sxapiwtapprovealllines (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiwtapprovealllinesResp
     */
    public function sxapiwtapprovealllinesPost($sxapiwtapprovealllines)
    {
        list($response) = $this->sxapiwtapprovealllinesPostWithHttpInfo($sxapiwtapprovealllines);
        return $response;
    }

    /**
     * Operation sxapiwtapprovealllinesPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtapprovealllines $sxapiwtapprovealllines (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiwtapprovealllinesResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiwtapprovealllinesPostWithHttpInfo($sxapiwtapprovealllines)
    {
        $returnType = '\Swagger\Client\Model\SxapiwtapprovealllinesResp';
        $request = $this->sxapiwtapprovealllinesPostRequest($sxapiwtapprovealllines);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiwtapprovealllinesResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiwtapprovealllinesPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtapprovealllines $sxapiwtapprovealllines (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwtapprovealllinesPostAsync($sxapiwtapprovealllines)
    {
        return $this->sxapiwtapprovealllinesPostAsyncWithHttpInfo($sxapiwtapprovealllines)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiwtapprovealllinesPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtapprovealllines $sxapiwtapprovealllines (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwtapprovealllinesPostAsyncWithHttpInfo($sxapiwtapprovealllines)
    {
        $returnType = '\Swagger\Client\Model\SxapiwtapprovealllinesResp';
        $request = $this->sxapiwtapprovealllinesPostRequest($sxapiwtapprovealllines);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiwtapprovealllinesPost'
     *
     * @param  \Swagger\Client\Model\Sxapiwtapprovealllines $sxapiwtapprovealllines (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiwtapprovealllinesPostRequest($sxapiwtapprovealllines)
    {
        // verify the required parameter 'sxapiwtapprovealllines' is set
        if ($sxapiwtapprovealllines === null || (is_array($sxapiwtapprovealllines) && count($sxapiwtapprovealllines) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiwtapprovealllines when calling sxapiwtapprovealllinesPost'
            );
        }

        $resourcePath = '/sxapiwtapprovealllines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiwtapprovealllines)) {
            $_tempBody = $sxapiwtapprovealllines;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiwteditserlotlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwteditserlotlist $sxapiwteditserlotlist sxapiwteditserlotlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiwteditserlotlistResp
     */
    public function sxapiwteditserlotlistPost($sxapiwteditserlotlist)
    {
        list($response) = $this->sxapiwteditserlotlistPostWithHttpInfo($sxapiwteditserlotlist);
        return $response;
    }

    /**
     * Operation sxapiwteditserlotlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwteditserlotlist $sxapiwteditserlotlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiwteditserlotlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiwteditserlotlistPostWithHttpInfo($sxapiwteditserlotlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiwteditserlotlistResp';
        $request = $this->sxapiwteditserlotlistPostRequest($sxapiwteditserlotlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiwteditserlotlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiwteditserlotlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwteditserlotlist $sxapiwteditserlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwteditserlotlistPostAsync($sxapiwteditserlotlist)
    {
        return $this->sxapiwteditserlotlistPostAsyncWithHttpInfo($sxapiwteditserlotlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiwteditserlotlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwteditserlotlist $sxapiwteditserlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwteditserlotlistPostAsyncWithHttpInfo($sxapiwteditserlotlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiwteditserlotlistResp';
        $request = $this->sxapiwteditserlotlistPostRequest($sxapiwteditserlotlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiwteditserlotlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiwteditserlotlist $sxapiwteditserlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiwteditserlotlistPostRequest($sxapiwteditserlotlist)
    {
        // verify the required parameter 'sxapiwteditserlotlist' is set
        if ($sxapiwteditserlotlist === null || (is_array($sxapiwteditserlotlist) && count($sxapiwteditserlotlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiwteditserlotlist when calling sxapiwteditserlotlistPost'
            );
        }

        $resourcePath = '/sxapiwteditserlotlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiwteditserlotlist)) {
            $_tempBody = $sxapiwteditserlotlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiwtgetdeliverylistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetdeliverylist $sxapiwtgetdeliverylist sxapiwtgetdeliverylist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiwtgetdeliverylistResp
     */
    public function sxapiwtgetdeliverylistPost($sxapiwtgetdeliverylist)
    {
        list($response) = $this->sxapiwtgetdeliverylistPostWithHttpInfo($sxapiwtgetdeliverylist);
        return $response;
    }

    /**
     * Operation sxapiwtgetdeliverylistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetdeliverylist $sxapiwtgetdeliverylist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiwtgetdeliverylistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiwtgetdeliverylistPostWithHttpInfo($sxapiwtgetdeliverylist)
    {
        $returnType = '\Swagger\Client\Model\SxapiwtgetdeliverylistResp';
        $request = $this->sxapiwtgetdeliverylistPostRequest($sxapiwtgetdeliverylist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiwtgetdeliverylistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiwtgetdeliverylistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetdeliverylist $sxapiwtgetdeliverylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwtgetdeliverylistPostAsync($sxapiwtgetdeliverylist)
    {
        return $this->sxapiwtgetdeliverylistPostAsyncWithHttpInfo($sxapiwtgetdeliverylist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiwtgetdeliverylistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetdeliverylist $sxapiwtgetdeliverylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwtgetdeliverylistPostAsyncWithHttpInfo($sxapiwtgetdeliverylist)
    {
        $returnType = '\Swagger\Client\Model\SxapiwtgetdeliverylistResp';
        $request = $this->sxapiwtgetdeliverylistPostRequest($sxapiwtgetdeliverylist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiwtgetdeliverylistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetdeliverylist $sxapiwtgetdeliverylist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiwtgetdeliverylistPostRequest($sxapiwtgetdeliverylist)
    {
        // verify the required parameter 'sxapiwtgetdeliverylist' is set
        if ($sxapiwtgetdeliverylist === null || (is_array($sxapiwtgetdeliverylist) && count($sxapiwtgetdeliverylist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiwtgetdeliverylist when calling sxapiwtgetdeliverylistPost'
            );
        }

        $resourcePath = '/sxapiwtgetdeliverylist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiwtgetdeliverylist)) {
            $_tempBody = $sxapiwtgetdeliverylist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiwtgetlistoftransferordersPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetlistoftransferorders $sxapiwtgetlistoftransferorders sxapiwtgetlistoftransferorders (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiwtgetlistoftransferordersResp
     */
    public function sxapiwtgetlistoftransferordersPost($sxapiwtgetlistoftransferorders)
    {
        list($response) = $this->sxapiwtgetlistoftransferordersPostWithHttpInfo($sxapiwtgetlistoftransferorders);
        return $response;
    }

    /**
     * Operation sxapiwtgetlistoftransferordersPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetlistoftransferorders $sxapiwtgetlistoftransferorders (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiwtgetlistoftransferordersResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiwtgetlistoftransferordersPostWithHttpInfo($sxapiwtgetlistoftransferorders)
    {
        $returnType = '\Swagger\Client\Model\SxapiwtgetlistoftransferordersResp';
        $request = $this->sxapiwtgetlistoftransferordersPostRequest($sxapiwtgetlistoftransferorders);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiwtgetlistoftransferordersResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiwtgetlistoftransferordersPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetlistoftransferorders $sxapiwtgetlistoftransferorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwtgetlistoftransferordersPostAsync($sxapiwtgetlistoftransferorders)
    {
        return $this->sxapiwtgetlistoftransferordersPostAsyncWithHttpInfo($sxapiwtgetlistoftransferorders)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiwtgetlistoftransferordersPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetlistoftransferorders $sxapiwtgetlistoftransferorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwtgetlistoftransferordersPostAsyncWithHttpInfo($sxapiwtgetlistoftransferorders)
    {
        $returnType = '\Swagger\Client\Model\SxapiwtgetlistoftransferordersResp';
        $request = $this->sxapiwtgetlistoftransferordersPostRequest($sxapiwtgetlistoftransferorders);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiwtgetlistoftransferordersPost'
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetlistoftransferorders $sxapiwtgetlistoftransferorders (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiwtgetlistoftransferordersPostRequest($sxapiwtgetlistoftransferorders)
    {
        // verify the required parameter 'sxapiwtgetlistoftransferorders' is set
        if ($sxapiwtgetlistoftransferorders === null || (is_array($sxapiwtgetlistoftransferorders) && count($sxapiwtgetlistoftransferorders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiwtgetlistoftransferorders when calling sxapiwtgetlistoftransferordersPost'
            );
        }

        $resourcePath = '/sxapiwtgetlistoftransferorders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiwtgetlistoftransferorders)) {
            $_tempBody = $sxapiwtgetlistoftransferorders;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiwtgetlistoftransferordersv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetlistoftransferordersv2 $sxapiwtgetlistoftransferordersv2 sxapiwtgetlistoftransferordersv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiwtgetlistoftransferordersv2Resp
     */
    public function sxapiwtgetlistoftransferordersv2Post($sxapiwtgetlistoftransferordersv2)
    {
        list($response) = $this->sxapiwtgetlistoftransferordersv2PostWithHttpInfo($sxapiwtgetlistoftransferordersv2);
        return $response;
    }

    /**
     * Operation sxapiwtgetlistoftransferordersv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetlistoftransferordersv2 $sxapiwtgetlistoftransferordersv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiwtgetlistoftransferordersv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiwtgetlistoftransferordersv2PostWithHttpInfo($sxapiwtgetlistoftransferordersv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiwtgetlistoftransferordersv2Resp';
        $request = $this->sxapiwtgetlistoftransferordersv2PostRequest($sxapiwtgetlistoftransferordersv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiwtgetlistoftransferordersv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiwtgetlistoftransferordersv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetlistoftransferordersv2 $sxapiwtgetlistoftransferordersv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwtgetlistoftransferordersv2PostAsync($sxapiwtgetlistoftransferordersv2)
    {
        return $this->sxapiwtgetlistoftransferordersv2PostAsyncWithHttpInfo($sxapiwtgetlistoftransferordersv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiwtgetlistoftransferordersv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetlistoftransferordersv2 $sxapiwtgetlistoftransferordersv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwtgetlistoftransferordersv2PostAsyncWithHttpInfo($sxapiwtgetlistoftransferordersv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiwtgetlistoftransferordersv2Resp';
        $request = $this->sxapiwtgetlistoftransferordersv2PostRequest($sxapiwtgetlistoftransferordersv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiwtgetlistoftransferordersv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetlistoftransferordersv2 $sxapiwtgetlistoftransferordersv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiwtgetlistoftransferordersv2PostRequest($sxapiwtgetlistoftransferordersv2)
    {
        // verify the required parameter 'sxapiwtgetlistoftransferordersv2' is set
        if ($sxapiwtgetlistoftransferordersv2 === null || (is_array($sxapiwtgetlistoftransferordersv2) && count($sxapiwtgetlistoftransferordersv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiwtgetlistoftransferordersv2 when calling sxapiwtgetlistoftransferordersv2Post'
            );
        }

        $resourcePath = '/sxapiwtgetlistoftransferordersv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiwtgetlistoftransferordersv2)) {
            $_tempBody = $sxapiwtgetlistoftransferordersv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiwtgetlotlistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetlotlist $sxapiwtgetlotlist sxapiwtgetlotlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiwtgetlotlistResp
     */
    public function sxapiwtgetlotlistPost($sxapiwtgetlotlist)
    {
        list($response) = $this->sxapiwtgetlotlistPostWithHttpInfo($sxapiwtgetlotlist);
        return $response;
    }

    /**
     * Operation sxapiwtgetlotlistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetlotlist $sxapiwtgetlotlist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiwtgetlotlistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiwtgetlotlistPostWithHttpInfo($sxapiwtgetlotlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiwtgetlotlistResp';
        $request = $this->sxapiwtgetlotlistPostRequest($sxapiwtgetlotlist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiwtgetlotlistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiwtgetlotlistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetlotlist $sxapiwtgetlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwtgetlotlistPostAsync($sxapiwtgetlotlist)
    {
        return $this->sxapiwtgetlotlistPostAsyncWithHttpInfo($sxapiwtgetlotlist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiwtgetlotlistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetlotlist $sxapiwtgetlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwtgetlotlistPostAsyncWithHttpInfo($sxapiwtgetlotlist)
    {
        $returnType = '\Swagger\Client\Model\SxapiwtgetlotlistResp';
        $request = $this->sxapiwtgetlotlistPostRequest($sxapiwtgetlotlist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiwtgetlotlistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetlotlist $sxapiwtgetlotlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiwtgetlotlistPostRequest($sxapiwtgetlotlist)
    {
        // verify the required parameter 'sxapiwtgetlotlist' is set
        if ($sxapiwtgetlotlist === null || (is_array($sxapiwtgetlotlist) && count($sxapiwtgetlotlist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiwtgetlotlist when calling sxapiwtgetlotlistPost'
            );
        }

        $resourcePath = '/sxapiwtgetlotlist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiwtgetlotlist)) {
            $_tempBody = $sxapiwtgetlotlist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiwtgetseriallistPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetseriallist $sxapiwtgetseriallist sxapiwtgetseriallist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiwtgetseriallistResp
     */
    public function sxapiwtgetseriallistPost($sxapiwtgetseriallist)
    {
        list($response) = $this->sxapiwtgetseriallistPostWithHttpInfo($sxapiwtgetseriallist);
        return $response;
    }

    /**
     * Operation sxapiwtgetseriallistPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetseriallist $sxapiwtgetseriallist (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiwtgetseriallistResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiwtgetseriallistPostWithHttpInfo($sxapiwtgetseriallist)
    {
        $returnType = '\Swagger\Client\Model\SxapiwtgetseriallistResp';
        $request = $this->sxapiwtgetseriallistPostRequest($sxapiwtgetseriallist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiwtgetseriallistResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiwtgetseriallistPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetseriallist $sxapiwtgetseriallist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwtgetseriallistPostAsync($sxapiwtgetseriallist)
    {
        return $this->sxapiwtgetseriallistPostAsyncWithHttpInfo($sxapiwtgetseriallist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiwtgetseriallistPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetseriallist $sxapiwtgetseriallist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwtgetseriallistPostAsyncWithHttpInfo($sxapiwtgetseriallist)
    {
        $returnType = '\Swagger\Client\Model\SxapiwtgetseriallistResp';
        $request = $this->sxapiwtgetseriallistPostRequest($sxapiwtgetseriallist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiwtgetseriallistPost'
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetseriallist $sxapiwtgetseriallist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiwtgetseriallistPostRequest($sxapiwtgetseriallist)
    {
        // verify the required parameter 'sxapiwtgetseriallist' is set
        if ($sxapiwtgetseriallist === null || (is_array($sxapiwtgetseriallist) && count($sxapiwtgetseriallist) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiwtgetseriallist when calling sxapiwtgetseriallistPost'
            );
        }

        $resourcePath = '/sxapiwtgetseriallist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiwtgetseriallist)) {
            $_tempBody = $sxapiwtgetseriallist;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiwtgetsingletransferorderPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetsingletransferorder $sxapiwtgetsingletransferorder sxapiwtgetsingletransferorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiwtgetsingletransferorderResp
     */
    public function sxapiwtgetsingletransferorderPost($sxapiwtgetsingletransferorder)
    {
        list($response) = $this->sxapiwtgetsingletransferorderPostWithHttpInfo($sxapiwtgetsingletransferorder);
        return $response;
    }

    /**
     * Operation sxapiwtgetsingletransferorderPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetsingletransferorder $sxapiwtgetsingletransferorder (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiwtgetsingletransferorderResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiwtgetsingletransferorderPostWithHttpInfo($sxapiwtgetsingletransferorder)
    {
        $returnType = '\Swagger\Client\Model\SxapiwtgetsingletransferorderResp';
        $request = $this->sxapiwtgetsingletransferorderPostRequest($sxapiwtgetsingletransferorder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiwtgetsingletransferorderResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiwtgetsingletransferorderPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetsingletransferorder $sxapiwtgetsingletransferorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwtgetsingletransferorderPostAsync($sxapiwtgetsingletransferorder)
    {
        return $this->sxapiwtgetsingletransferorderPostAsyncWithHttpInfo($sxapiwtgetsingletransferorder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiwtgetsingletransferorderPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetsingletransferorder $sxapiwtgetsingletransferorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwtgetsingletransferorderPostAsyncWithHttpInfo($sxapiwtgetsingletransferorder)
    {
        $returnType = '\Swagger\Client\Model\SxapiwtgetsingletransferorderResp';
        $request = $this->sxapiwtgetsingletransferorderPostRequest($sxapiwtgetsingletransferorder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiwtgetsingletransferorderPost'
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetsingletransferorder $sxapiwtgetsingletransferorder (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiwtgetsingletransferorderPostRequest($sxapiwtgetsingletransferorder)
    {
        // verify the required parameter 'sxapiwtgetsingletransferorder' is set
        if ($sxapiwtgetsingletransferorder === null || (is_array($sxapiwtgetsingletransferorder) && count($sxapiwtgetsingletransferorder) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiwtgetsingletransferorder when calling sxapiwtgetsingletransferorderPost'
            );
        }

        $resourcePath = '/sxapiwtgetsingletransferorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiwtgetsingletransferorder)) {
            $_tempBody = $sxapiwtgetsingletransferorder;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiwtgetsingletransferorderv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetsingletransferorderv2 $sxapiwtgetsingletransferorderv2 sxapiwtgetsingletransferorderv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiwtgetsingletransferorderv2Resp
     */
    public function sxapiwtgetsingletransferorderv2Post($sxapiwtgetsingletransferorderv2)
    {
        list($response) = $this->sxapiwtgetsingletransferorderv2PostWithHttpInfo($sxapiwtgetsingletransferorderv2);
        return $response;
    }

    /**
     * Operation sxapiwtgetsingletransferorderv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetsingletransferorderv2 $sxapiwtgetsingletransferorderv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiwtgetsingletransferorderv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiwtgetsingletransferorderv2PostWithHttpInfo($sxapiwtgetsingletransferorderv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiwtgetsingletransferorderv2Resp';
        $request = $this->sxapiwtgetsingletransferorderv2PostRequest($sxapiwtgetsingletransferorderv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiwtgetsingletransferorderv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiwtgetsingletransferorderv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetsingletransferorderv2 $sxapiwtgetsingletransferorderv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwtgetsingletransferorderv2PostAsync($sxapiwtgetsingletransferorderv2)
    {
        return $this->sxapiwtgetsingletransferorderv2PostAsyncWithHttpInfo($sxapiwtgetsingletransferorderv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiwtgetsingletransferorderv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetsingletransferorderv2 $sxapiwtgetsingletransferorderv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwtgetsingletransferorderv2PostAsyncWithHttpInfo($sxapiwtgetsingletransferorderv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiwtgetsingletransferorderv2Resp';
        $request = $this->sxapiwtgetsingletransferorderv2PostRequest($sxapiwtgetsingletransferorderv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiwtgetsingletransferorderv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiwtgetsingletransferorderv2 $sxapiwtgetsingletransferorderv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiwtgetsingletransferorderv2PostRequest($sxapiwtgetsingletransferorderv2)
    {
        // verify the required parameter 'sxapiwtgetsingletransferorderv2' is set
        if ($sxapiwtgetsingletransferorderv2 === null || (is_array($sxapiwtgetsingletransferorderv2) && count($sxapiwtgetsingletransferorderv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiwtgetsingletransferorderv2 when calling sxapiwtgetsingletransferorderv2Post'
            );
        }

        $resourcePath = '/sxapiwtgetsingletransferorderv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiwtgetsingletransferorderv2)) {
            $_tempBody = $sxapiwtgetsingletransferorderv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiwtheaderupdatePost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtheaderupdate $sxapiwtheaderupdate sxapiwtheaderupdate (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiwtheaderupdateResp
     */
    public function sxapiwtheaderupdatePost($sxapiwtheaderupdate)
    {
        list($response) = $this->sxapiwtheaderupdatePostWithHttpInfo($sxapiwtheaderupdate);
        return $response;
    }

    /**
     * Operation sxapiwtheaderupdatePostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtheaderupdate $sxapiwtheaderupdate (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiwtheaderupdateResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiwtheaderupdatePostWithHttpInfo($sxapiwtheaderupdate)
    {
        $returnType = '\Swagger\Client\Model\SxapiwtheaderupdateResp';
        $request = $this->sxapiwtheaderupdatePostRequest($sxapiwtheaderupdate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiwtheaderupdateResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiwtheaderupdatePostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtheaderupdate $sxapiwtheaderupdate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwtheaderupdatePostAsync($sxapiwtheaderupdate)
    {
        return $this->sxapiwtheaderupdatePostAsyncWithHttpInfo($sxapiwtheaderupdate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiwtheaderupdatePostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwtheaderupdate $sxapiwtheaderupdate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwtheaderupdatePostAsyncWithHttpInfo($sxapiwtheaderupdate)
    {
        $returnType = '\Swagger\Client\Model\SxapiwtheaderupdateResp';
        $request = $this->sxapiwtheaderupdatePostRequest($sxapiwtheaderupdate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiwtheaderupdatePost'
     *
     * @param  \Swagger\Client\Model\Sxapiwtheaderupdate $sxapiwtheaderupdate (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiwtheaderupdatePostRequest($sxapiwtheaderupdate)
    {
        // verify the required parameter 'sxapiwtheaderupdate' is set
        if ($sxapiwtheaderupdate === null || (is_array($sxapiwtheaderupdate) && count($sxapiwtheaderupdate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiwtheaderupdate when calling sxapiwtheaderupdatePost'
            );
        }

        $resourcePath = '/sxapiwtheaderupdate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiwtheaderupdate)) {
            $_tempBody = $sxapiwtheaderupdate;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiwttransferdeleteorcancelPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwttransferdeleteorcancel $sxapiwttransferdeleteorcancel sxapiwttransferdeleteorcancel (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiwttransferdeleteorcancelResp
     */
    public function sxapiwttransferdeleteorcancelPost($sxapiwttransferdeleteorcancel)
    {
        list($response) = $this->sxapiwttransferdeleteorcancelPostWithHttpInfo($sxapiwttransferdeleteorcancel);
        return $response;
    }

    /**
     * Operation sxapiwttransferdeleteorcancelPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwttransferdeleteorcancel $sxapiwttransferdeleteorcancel (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiwttransferdeleteorcancelResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiwttransferdeleteorcancelPostWithHttpInfo($sxapiwttransferdeleteorcancel)
    {
        $returnType = '\Swagger\Client\Model\SxapiwttransferdeleteorcancelResp';
        $request = $this->sxapiwttransferdeleteorcancelPostRequest($sxapiwttransferdeleteorcancel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiwttransferdeleteorcancelResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiwttransferdeleteorcancelPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwttransferdeleteorcancel $sxapiwttransferdeleteorcancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwttransferdeleteorcancelPostAsync($sxapiwttransferdeleteorcancel)
    {
        return $this->sxapiwttransferdeleteorcancelPostAsyncWithHttpInfo($sxapiwttransferdeleteorcancel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiwttransferdeleteorcancelPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwttransferdeleteorcancel $sxapiwttransferdeleteorcancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwttransferdeleteorcancelPostAsyncWithHttpInfo($sxapiwttransferdeleteorcancel)
    {
        $returnType = '\Swagger\Client\Model\SxapiwttransferdeleteorcancelResp';
        $request = $this->sxapiwttransferdeleteorcancelPostRequest($sxapiwttransferdeleteorcancel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiwttransferdeleteorcancelPost'
     *
     * @param  \Swagger\Client\Model\Sxapiwttransferdeleteorcancel $sxapiwttransferdeleteorcancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiwttransferdeleteorcancelPostRequest($sxapiwttransferdeleteorcancel)
    {
        // verify the required parameter 'sxapiwttransferdeleteorcancel' is set
        if ($sxapiwttransferdeleteorcancel === null || (is_array($sxapiwttransferdeleteorcancel) && count($sxapiwttransferdeleteorcancel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiwttransferdeleteorcancel when calling sxapiwttransferdeleteorcancelPost'
            );
        }

        $resourcePath = '/sxapiwttransferdeleteorcancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiwttransferdeleteorcancel)) {
            $_tempBody = $sxapiwttransferdeleteorcancel;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiwttransferordermntPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwttransferordermnt $sxapiwttransferordermnt sxapiwttransferordermnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapiwttransferordermntResp
     */
    public function sxapiwttransferordermntPost($sxapiwttransferordermnt)
    {
        list($response) = $this->sxapiwttransferordermntPostWithHttpInfo($sxapiwttransferordermnt);
        return $response;
    }

    /**
     * Operation sxapiwttransferordermntPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwttransferordermnt $sxapiwttransferordermnt (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapiwttransferordermntResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiwttransferordermntPostWithHttpInfo($sxapiwttransferordermnt)
    {
        $returnType = '\Swagger\Client\Model\SxapiwttransferordermntResp';
        $request = $this->sxapiwttransferordermntPostRequest($sxapiwttransferordermnt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapiwttransferordermntResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiwttransferordermntPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwttransferordermnt $sxapiwttransferordermnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwttransferordermntPostAsync($sxapiwttransferordermnt)
    {
        return $this->sxapiwttransferordermntPostAsyncWithHttpInfo($sxapiwttransferordermnt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiwttransferordermntPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwttransferordermnt $sxapiwttransferordermnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwttransferordermntPostAsyncWithHttpInfo($sxapiwttransferordermnt)
    {
        $returnType = '\Swagger\Client\Model\SxapiwttransferordermntResp';
        $request = $this->sxapiwttransferordermntPostRequest($sxapiwttransferordermnt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiwttransferordermntPost'
     *
     * @param  \Swagger\Client\Model\Sxapiwttransferordermnt $sxapiwttransferordermnt (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiwttransferordermntPostRequest($sxapiwttransferordermnt)
    {
        // verify the required parameter 'sxapiwttransferordermnt' is set
        if ($sxapiwttransferordermnt === null || (is_array($sxapiwttransferordermnt) && count($sxapiwttransferordermnt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiwttransferordermnt when calling sxapiwttransferordermntPost'
            );
        }

        $resourcePath = '/sxapiwttransferordermnt';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiwttransferordermnt)) {
            $_tempBody = $sxapiwttransferordermnt;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapiwttransferordermntv2Post
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwttransferordermntv2 $sxapiwttransferordermntv2 sxapiwttransferordermntv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Sxapiwttransferordermntv2Resp
     */
    public function sxapiwttransferordermntv2Post($sxapiwttransferordermntv2)
    {
        list($response) = $this->sxapiwttransferordermntv2PostWithHttpInfo($sxapiwttransferordermntv2);
        return $response;
    }

    /**
     * Operation sxapiwttransferordermntv2PostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwttransferordermntv2 $sxapiwttransferordermntv2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Sxapiwttransferordermntv2Resp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapiwttransferordermntv2PostWithHttpInfo($sxapiwttransferordermntv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiwttransferordermntv2Resp';
        $request = $this->sxapiwttransferordermntv2PostRequest($sxapiwttransferordermntv2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Sxapiwttransferordermntv2Resp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapiwttransferordermntv2PostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwttransferordermntv2 $sxapiwttransferordermntv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwttransferordermntv2PostAsync($sxapiwttransferordermntv2)
    {
        return $this->sxapiwttransferordermntv2PostAsyncWithHttpInfo($sxapiwttransferordermntv2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapiwttransferordermntv2PostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapiwttransferordermntv2 $sxapiwttransferordermntv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapiwttransferordermntv2PostAsyncWithHttpInfo($sxapiwttransferordermntv2)
    {
        $returnType = '\Swagger\Client\Model\Sxapiwttransferordermntv2Resp';
        $request = $this->sxapiwttransferordermntv2PostRequest($sxapiwttransferordermntv2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapiwttransferordermntv2Post'
     *
     * @param  \Swagger\Client\Model\Sxapiwttransferordermntv2 $sxapiwttransferordermntv2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapiwttransferordermntv2PostRequest($sxapiwttransferordermntv2)
    {
        // verify the required parameter 'sxapiwttransferordermntv2' is set
        if ($sxapiwttransferordermntv2 === null || (is_array($sxapiwttransferordermntv2) && count($sxapiwttransferordermntv2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapiwttransferordermntv2 when calling sxapiwttransferordermntv2Post'
            );
        }

        $resourcePath = '/sxapiwttransferordermntv2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapiwttransferordermntv2)) {
            $_tempBody = $sxapiwttransferordermntv2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sxapixmlprocessingPost
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapixmlprocessing $sxapixmlprocessing sxapixmlprocessing (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SxapixmlprocessingResp
     */
    public function sxapixmlprocessingPost($sxapixmlprocessing)
    {
        list($response) = $this->sxapixmlprocessingPostWithHttpInfo($sxapixmlprocessing);
        return $response;
    }

    /**
     * Operation sxapixmlprocessingPostWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapixmlprocessing $sxapixmlprocessing (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SxapixmlprocessingResp, HTTP status code, HTTP response headers (array of strings)
     */
    public function sxapixmlprocessingPostWithHttpInfo($sxapixmlprocessing)
    {
        $returnType = '\Swagger\Client\Model\SxapixmlprocessingResp';
        $request = $this->sxapixmlprocessingPostRequest($sxapixmlprocessing);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SxapixmlprocessingResp',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sxapixmlprocessingPostAsync
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapixmlprocessing $sxapixmlprocessing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapixmlprocessingPostAsync($sxapixmlprocessing)
    {
        return $this->sxapixmlprocessingPostAsyncWithHttpInfo($sxapixmlprocessing)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sxapixmlprocessingPostAsyncWithHttpInfo
     *
     * .
     *
     * @param  \Swagger\Client\Model\Sxapixmlprocessing $sxapixmlprocessing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sxapixmlprocessingPostAsyncWithHttpInfo($sxapixmlprocessing)
    {
        $returnType = '\Swagger\Client\Model\SxapixmlprocessingResp';
        $request = $this->sxapixmlprocessingPostRequest($sxapixmlprocessing);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sxapixmlprocessingPost'
     *
     * @param  \Swagger\Client\Model\Sxapixmlprocessing $sxapixmlprocessing (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sxapixmlprocessingPostRequest($sxapixmlprocessing)
    {
        // verify the required parameter 'sxapixmlprocessing' is set
        if ($sxapixmlprocessing === null || (is_array($sxapixmlprocessing) && count($sxapixmlprocessing) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sxapixmlprocessing when calling sxapixmlprocessingPost'
            );
        }

        $resourcePath = '/sxapixmlprocessing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($sxapixmlprocessing)) {
            $_tempBody = $sxapixmlprocessing;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
