<?php
/**
 * TRptoptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TRptoptions Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TRptoptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-rptoptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'options_seq' => 'int',
        'option_nm' => 'string',
        'opt_def' => 'string',
        'edit_type' => 'string',
        'orequir_fl' => 'bool',
        'of_length' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'options_seq' => 'int64',
        'option_nm' => null,
        'opt_def' => null,
        'edit_type' => null,
        'orequir_fl' => null,
        'of_length' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'options_seq' => 'optionsSeq',
        'option_nm' => 'optionNm',
        'opt_def' => 'optDef',
        'edit_type' => 'editType',
        'orequir_fl' => 'orequirFl',
        'of_length' => 'ofLength'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'options_seq' => 'setOptionsSeq',
        'option_nm' => 'setOptionNm',
        'opt_def' => 'setOptDef',
        'edit_type' => 'setEditType',
        'orequir_fl' => 'setOrequirFl',
        'of_length' => 'setOfLength'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'options_seq' => 'getOptionsSeq',
        'option_nm' => 'getOptionNm',
        'opt_def' => 'getOptDef',
        'edit_type' => 'getEditType',
        'orequir_fl' => 'getOrequirFl',
        'of_length' => 'getOfLength'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['options_seq'] = isset($data['options_seq']) ? $data['options_seq'] : null;
        $this->container['option_nm'] = isset($data['option_nm']) ? $data['option_nm'] : null;
        $this->container['opt_def'] = isset($data['opt_def']) ? $data['opt_def'] : null;
        $this->container['edit_type'] = isset($data['edit_type']) ? $data['edit_type'] : null;
        $this->container['orequir_fl'] = isset($data['orequir_fl']) ? $data['orequir_fl'] : null;
        $this->container['of_length'] = isset($data['of_length']) ? $data['of_length'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets options_seq
     *
     * @return int
     */
    public function getOptionsSeq()
    {
        return $this->container['options_seq'];
    }

    /**
     * Sets options_seq
     *
     * @param int $options_seq options_seq
     *
     * @return $this
     */
    public function setOptionsSeq($options_seq)
    {
        $this->container['options_seq'] = $options_seq;

        return $this;
    }

    /**
     * Gets option_nm
     *
     * @return string
     */
    public function getOptionNm()
    {
        return $this->container['option_nm'];
    }

    /**
     * Sets option_nm
     *
     * @param string $option_nm option_nm
     *
     * @return $this
     */
    public function setOptionNm($option_nm)
    {
        $this->container['option_nm'] = $option_nm;

        return $this;
    }

    /**
     * Gets opt_def
     *
     * @return string
     */
    public function getOptDef()
    {
        return $this->container['opt_def'];
    }

    /**
     * Sets opt_def
     *
     * @param string $opt_def opt_def
     *
     * @return $this
     */
    public function setOptDef($opt_def)
    {
        $this->container['opt_def'] = $opt_def;

        return $this;
    }

    /**
     * Gets edit_type
     *
     * @return string
     */
    public function getEditType()
    {
        return $this->container['edit_type'];
    }

    /**
     * Sets edit_type
     *
     * @param string $edit_type edit_type
     *
     * @return $this
     */
    public function setEditType($edit_type)
    {
        $this->container['edit_type'] = $edit_type;

        return $this;
    }

    /**
     * Gets orequir_fl
     *
     * @return bool
     */
    public function getOrequirFl()
    {
        return $this->container['orequir_fl'];
    }

    /**
     * Sets orequir_fl
     *
     * @param bool $orequir_fl orequir_fl
     *
     * @return $this
     */
    public function setOrequirFl($orequir_fl)
    {
        $this->container['orequir_fl'] = $orequir_fl;

        return $this;
    }

    /**
     * Gets of_length
     *
     * @return int
     */
    public function getOfLength()
    {
        return $this->container['of_length'];
    }

    /**
     * Sets of_length
     *
     * @param int $of_length of_length
     *
     * @return $this
     */
    public function setOfLength($of_length)
    {
        $this->container['of_length'] = $of_length;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


