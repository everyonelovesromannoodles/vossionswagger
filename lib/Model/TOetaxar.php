<?php
/**
 * TOetaxar
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TOetaxar Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TOetaxar implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-oetaxar';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'recty' => 'int',
        'localcode' => 'string',
        'taxsalebase' => 'string',
        'taxsaleamt' => 'string',
        'taxsalesrt' => 'double',
        'taxuseamt' => 'string',
        'taxusert' => 'double',
        'taxtransamt' => 'string',
        'taxtransrt' => 'double',
        'taxexcamt' => 'string',
        'taxexcrt' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'recty' => 'int64',
        'localcode' => null,
        'taxsalebase' => null,
        'taxsaleamt' => null,
        'taxsalesrt' => 'double',
        'taxuseamt' => null,
        'taxusert' => 'double',
        'taxtransamt' => null,
        'taxtransrt' => 'double',
        'taxexcamt' => null,
        'taxexcrt' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recty' => 'recty',
        'localcode' => 'localcode',
        'taxsalebase' => 'taxsalebase',
        'taxsaleamt' => 'taxsaleamt',
        'taxsalesrt' => 'taxsalesrt',
        'taxuseamt' => 'taxuseamt',
        'taxusert' => 'taxusert',
        'taxtransamt' => 'taxtransamt',
        'taxtransrt' => 'taxtransrt',
        'taxexcamt' => 'taxexcamt',
        'taxexcrt' => 'taxexcrt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recty' => 'setRecty',
        'localcode' => 'setLocalcode',
        'taxsalebase' => 'setTaxsalebase',
        'taxsaleamt' => 'setTaxsaleamt',
        'taxsalesrt' => 'setTaxsalesrt',
        'taxuseamt' => 'setTaxuseamt',
        'taxusert' => 'setTaxusert',
        'taxtransamt' => 'setTaxtransamt',
        'taxtransrt' => 'setTaxtransrt',
        'taxexcamt' => 'setTaxexcamt',
        'taxexcrt' => 'setTaxexcrt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recty' => 'getRecty',
        'localcode' => 'getLocalcode',
        'taxsalebase' => 'getTaxsalebase',
        'taxsaleamt' => 'getTaxsaleamt',
        'taxsalesrt' => 'getTaxsalesrt',
        'taxuseamt' => 'getTaxuseamt',
        'taxusert' => 'getTaxusert',
        'taxtransamt' => 'getTaxtransamt',
        'taxtransrt' => 'getTaxtransrt',
        'taxexcamt' => 'getTaxexcamt',
        'taxexcrt' => 'getTaxexcrt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recty'] = isset($data['recty']) ? $data['recty'] : null;
        $this->container['localcode'] = isset($data['localcode']) ? $data['localcode'] : null;
        $this->container['taxsalebase'] = isset($data['taxsalebase']) ? $data['taxsalebase'] : null;
        $this->container['taxsaleamt'] = isset($data['taxsaleamt']) ? $data['taxsaleamt'] : null;
        $this->container['taxsalesrt'] = isset($data['taxsalesrt']) ? $data['taxsalesrt'] : null;
        $this->container['taxuseamt'] = isset($data['taxuseamt']) ? $data['taxuseamt'] : null;
        $this->container['taxusert'] = isset($data['taxusert']) ? $data['taxusert'] : null;
        $this->container['taxtransamt'] = isset($data['taxtransamt']) ? $data['taxtransamt'] : null;
        $this->container['taxtransrt'] = isset($data['taxtransrt']) ? $data['taxtransrt'] : null;
        $this->container['taxexcamt'] = isset($data['taxexcamt']) ? $data['taxexcamt'] : null;
        $this->container['taxexcrt'] = isset($data['taxexcrt']) ? $data['taxexcrt'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recty
     *
     * @return int
     */
    public function getRecty()
    {
        return $this->container['recty'];
    }

    /**
     * Sets recty
     *
     * @param int $recty recty
     *
     * @return $this
     */
    public function setRecty($recty)
    {
        $this->container['recty'] = $recty;

        return $this;
    }

    /**
     * Gets localcode
     *
     * @return string
     */
    public function getLocalcode()
    {
        return $this->container['localcode'];
    }

    /**
     * Sets localcode
     *
     * @param string $localcode localcode
     *
     * @return $this
     */
    public function setLocalcode($localcode)
    {
        $this->container['localcode'] = $localcode;

        return $this;
    }

    /**
     * Gets taxsalebase
     *
     * @return string
     */
    public function getTaxsalebase()
    {
        return $this->container['taxsalebase'];
    }

    /**
     * Sets taxsalebase
     *
     * @param string $taxsalebase taxsalebase
     *
     * @return $this
     */
    public function setTaxsalebase($taxsalebase)
    {
        $this->container['taxsalebase'] = $taxsalebase;

        return $this;
    }

    /**
     * Gets taxsaleamt
     *
     * @return string
     */
    public function getTaxsaleamt()
    {
        return $this->container['taxsaleamt'];
    }

    /**
     * Sets taxsaleamt
     *
     * @param string $taxsaleamt taxsaleamt
     *
     * @return $this
     */
    public function setTaxsaleamt($taxsaleamt)
    {
        $this->container['taxsaleamt'] = $taxsaleamt;

        return $this;
    }

    /**
     * Gets taxsalesrt
     *
     * @return double
     */
    public function getTaxsalesrt()
    {
        return $this->container['taxsalesrt'];
    }

    /**
     * Sets taxsalesrt
     *
     * @param double $taxsalesrt taxsalesrt
     *
     * @return $this
     */
    public function setTaxsalesrt($taxsalesrt)
    {
        $this->container['taxsalesrt'] = $taxsalesrt;

        return $this;
    }

    /**
     * Gets taxuseamt
     *
     * @return string
     */
    public function getTaxuseamt()
    {
        return $this->container['taxuseamt'];
    }

    /**
     * Sets taxuseamt
     *
     * @param string $taxuseamt taxuseamt
     *
     * @return $this
     */
    public function setTaxuseamt($taxuseamt)
    {
        $this->container['taxuseamt'] = $taxuseamt;

        return $this;
    }

    /**
     * Gets taxusert
     *
     * @return double
     */
    public function getTaxusert()
    {
        return $this->container['taxusert'];
    }

    /**
     * Sets taxusert
     *
     * @param double $taxusert taxusert
     *
     * @return $this
     */
    public function setTaxusert($taxusert)
    {
        $this->container['taxusert'] = $taxusert;

        return $this;
    }

    /**
     * Gets taxtransamt
     *
     * @return string
     */
    public function getTaxtransamt()
    {
        return $this->container['taxtransamt'];
    }

    /**
     * Sets taxtransamt
     *
     * @param string $taxtransamt taxtransamt
     *
     * @return $this
     */
    public function setTaxtransamt($taxtransamt)
    {
        $this->container['taxtransamt'] = $taxtransamt;

        return $this;
    }

    /**
     * Gets taxtransrt
     *
     * @return double
     */
    public function getTaxtransrt()
    {
        return $this->container['taxtransrt'];
    }

    /**
     * Sets taxtransrt
     *
     * @param double $taxtransrt taxtransrt
     *
     * @return $this
     */
    public function setTaxtransrt($taxtransrt)
    {
        $this->container['taxtransrt'] = $taxtransrt;

        return $this;
    }

    /**
     * Gets taxexcamt
     *
     * @return string
     */
    public function getTaxexcamt()
    {
        return $this->container['taxexcamt'];
    }

    /**
     * Sets taxexcamt
     *
     * @param string $taxexcamt taxexcamt
     *
     * @return $this
     */
    public function setTaxexcamt($taxexcamt)
    {
        $this->container['taxexcamt'] = $taxexcamt;

        return $this;
    }

    /**
     * Gets taxexcrt
     *
     * @return double
     */
    public function getTaxexcrt()
    {
        return $this->container['taxexcrt'];
    }

    /**
     * Sets taxexcrt
     *
     * @param double $taxexcrt taxexcrt
     *
     * @return $this
     */
    public function setTaxexcrt($taxexcrt)
    {
        $this->container['taxexcrt'] = $taxexcrt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


