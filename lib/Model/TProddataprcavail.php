<?php
/**
 * TProddataprcavail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TProddataprcavail Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TProddataprcavail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-proddataprcavail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'origwhse' => 'string',
        'qtyord' => 'double',
        'unit' => 'string',
        'vendcost' => 'double',
        'vendprice1' => 'double',
        'vendprice2' => 'double',
        'vendprice3' => 'double',
        'vendprice4' => 'double',
        'vendprice5' => 'double',
        'nonstockty' => 'string',
        'calcpricety' => 'string',
        'prod' => 'string',
        'itemdetail' => 'string',
        'stockfl' => 'bool',
        'calcpricefl' => 'bool',
        'catalogfl' => 'bool',
        'availabilitywhse' => 'string',
        'altwhse' => 'string',
        'pricingextraparam' => 'string',
        'netavail' => 'double',
        'unitconv' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'origwhse' => null,
        'qtyord' => 'double',
        'unit' => null,
        'vendcost' => 'double',
        'vendprice1' => 'double',
        'vendprice2' => 'double',
        'vendprice3' => 'double',
        'vendprice4' => 'double',
        'vendprice5' => 'double',
        'nonstockty' => null,
        'calcpricety' => null,
        'prod' => null,
        'itemdetail' => null,
        'stockfl' => null,
        'calcpricefl' => null,
        'catalogfl' => null,
        'availabilitywhse' => null,
        'altwhse' => null,
        'pricingextraparam' => null,
        'netavail' => 'double',
        'unitconv' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'origwhse' => 'origwhse',
        'qtyord' => 'qtyord',
        'unit' => 'unit',
        'vendcost' => 'vendcost',
        'vendprice1' => 'vendprice1',
        'vendprice2' => 'vendprice2',
        'vendprice3' => 'vendprice3',
        'vendprice4' => 'vendprice4',
        'vendprice5' => 'vendprice5',
        'nonstockty' => 'nonstockty',
        'calcpricety' => 'calcpricety',
        'prod' => 'prod',
        'itemdetail' => 'itemdetail',
        'stockfl' => 'stockfl',
        'calcpricefl' => 'calcpricefl',
        'catalogfl' => 'catalogfl',
        'availabilitywhse' => 'availabilitywhse',
        'altwhse' => 'altwhse',
        'pricingextraparam' => 'pricingextraparam',
        'netavail' => 'netavail',
        'unitconv' => 'unitconv'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'origwhse' => 'setOrigwhse',
        'qtyord' => 'setQtyord',
        'unit' => 'setUnit',
        'vendcost' => 'setVendcost',
        'vendprice1' => 'setVendprice1',
        'vendprice2' => 'setVendprice2',
        'vendprice3' => 'setVendprice3',
        'vendprice4' => 'setVendprice4',
        'vendprice5' => 'setVendprice5',
        'nonstockty' => 'setNonstockty',
        'calcpricety' => 'setCalcpricety',
        'prod' => 'setProd',
        'itemdetail' => 'setItemdetail',
        'stockfl' => 'setStockfl',
        'calcpricefl' => 'setCalcpricefl',
        'catalogfl' => 'setCatalogfl',
        'availabilitywhse' => 'setAvailabilitywhse',
        'altwhse' => 'setAltwhse',
        'pricingextraparam' => 'setPricingextraparam',
        'netavail' => 'setNetavail',
        'unitconv' => 'setUnitconv'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'origwhse' => 'getOrigwhse',
        'qtyord' => 'getQtyord',
        'unit' => 'getUnit',
        'vendcost' => 'getVendcost',
        'vendprice1' => 'getVendprice1',
        'vendprice2' => 'getVendprice2',
        'vendprice3' => 'getVendprice3',
        'vendprice4' => 'getVendprice4',
        'vendprice5' => 'getVendprice5',
        'nonstockty' => 'getNonstockty',
        'calcpricety' => 'getCalcpricety',
        'prod' => 'getProd',
        'itemdetail' => 'getItemdetail',
        'stockfl' => 'getStockfl',
        'calcpricefl' => 'getCalcpricefl',
        'catalogfl' => 'getCatalogfl',
        'availabilitywhse' => 'getAvailabilitywhse',
        'altwhse' => 'getAltwhse',
        'pricingextraparam' => 'getPricingextraparam',
        'netavail' => 'getNetavail',
        'unitconv' => 'getUnitconv'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['origwhse'] = isset($data['origwhse']) ? $data['origwhse'] : null;
        $this->container['qtyord'] = isset($data['qtyord']) ? $data['qtyord'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['vendcost'] = isset($data['vendcost']) ? $data['vendcost'] : null;
        $this->container['vendprice1'] = isset($data['vendprice1']) ? $data['vendprice1'] : null;
        $this->container['vendprice2'] = isset($data['vendprice2']) ? $data['vendprice2'] : null;
        $this->container['vendprice3'] = isset($data['vendprice3']) ? $data['vendprice3'] : null;
        $this->container['vendprice4'] = isset($data['vendprice4']) ? $data['vendprice4'] : null;
        $this->container['vendprice5'] = isset($data['vendprice5']) ? $data['vendprice5'] : null;
        $this->container['nonstockty'] = isset($data['nonstockty']) ? $data['nonstockty'] : null;
        $this->container['calcpricety'] = isset($data['calcpricety']) ? $data['calcpricety'] : null;
        $this->container['prod'] = isset($data['prod']) ? $data['prod'] : null;
        $this->container['itemdetail'] = isset($data['itemdetail']) ? $data['itemdetail'] : null;
        $this->container['stockfl'] = isset($data['stockfl']) ? $data['stockfl'] : null;
        $this->container['calcpricefl'] = isset($data['calcpricefl']) ? $data['calcpricefl'] : null;
        $this->container['catalogfl'] = isset($data['catalogfl']) ? $data['catalogfl'] : null;
        $this->container['availabilitywhse'] = isset($data['availabilitywhse']) ? $data['availabilitywhse'] : null;
        $this->container['altwhse'] = isset($data['altwhse']) ? $data['altwhse'] : null;
        $this->container['pricingextraparam'] = isset($data['pricingextraparam']) ? $data['pricingextraparam'] : null;
        $this->container['netavail'] = isset($data['netavail']) ? $data['netavail'] : null;
        $this->container['unitconv'] = isset($data['unitconv']) ? $data['unitconv'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets origwhse
     *
     * @return string
     */
    public function getOrigwhse()
    {
        return $this->container['origwhse'];
    }

    /**
     * Sets origwhse
     *
     * @param string $origwhse origwhse
     *
     * @return $this
     */
    public function setOrigwhse($origwhse)
    {
        $this->container['origwhse'] = $origwhse;

        return $this;
    }

    /**
     * Gets qtyord
     *
     * @return double
     */
    public function getQtyord()
    {
        return $this->container['qtyord'];
    }

    /**
     * Sets qtyord
     *
     * @param double $qtyord qtyord
     *
     * @return $this
     */
    public function setQtyord($qtyord)
    {
        $this->container['qtyord'] = $qtyord;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets vendcost
     *
     * @return double
     */
    public function getVendcost()
    {
        return $this->container['vendcost'];
    }

    /**
     * Sets vendcost
     *
     * @param double $vendcost vendcost
     *
     * @return $this
     */
    public function setVendcost($vendcost)
    {
        $this->container['vendcost'] = $vendcost;

        return $this;
    }

    /**
     * Gets vendprice1
     *
     * @return double
     */
    public function getVendprice1()
    {
        return $this->container['vendprice1'];
    }

    /**
     * Sets vendprice1
     *
     * @param double $vendprice1 vendprice1
     *
     * @return $this
     */
    public function setVendprice1($vendprice1)
    {
        $this->container['vendprice1'] = $vendprice1;

        return $this;
    }

    /**
     * Gets vendprice2
     *
     * @return double
     */
    public function getVendprice2()
    {
        return $this->container['vendprice2'];
    }

    /**
     * Sets vendprice2
     *
     * @param double $vendprice2 vendprice2
     *
     * @return $this
     */
    public function setVendprice2($vendprice2)
    {
        $this->container['vendprice2'] = $vendprice2;

        return $this;
    }

    /**
     * Gets vendprice3
     *
     * @return double
     */
    public function getVendprice3()
    {
        return $this->container['vendprice3'];
    }

    /**
     * Sets vendprice3
     *
     * @param double $vendprice3 vendprice3
     *
     * @return $this
     */
    public function setVendprice3($vendprice3)
    {
        $this->container['vendprice3'] = $vendprice3;

        return $this;
    }

    /**
     * Gets vendprice4
     *
     * @return double
     */
    public function getVendprice4()
    {
        return $this->container['vendprice4'];
    }

    /**
     * Sets vendprice4
     *
     * @param double $vendprice4 vendprice4
     *
     * @return $this
     */
    public function setVendprice4($vendprice4)
    {
        $this->container['vendprice4'] = $vendprice4;

        return $this;
    }

    /**
     * Gets vendprice5
     *
     * @return double
     */
    public function getVendprice5()
    {
        return $this->container['vendprice5'];
    }

    /**
     * Sets vendprice5
     *
     * @param double $vendprice5 vendprice5
     *
     * @return $this
     */
    public function setVendprice5($vendprice5)
    {
        $this->container['vendprice5'] = $vendprice5;

        return $this;
    }

    /**
     * Gets nonstockty
     *
     * @return string
     */
    public function getNonstockty()
    {
        return $this->container['nonstockty'];
    }

    /**
     * Sets nonstockty
     *
     * @param string $nonstockty nonstockty
     *
     * @return $this
     */
    public function setNonstockty($nonstockty)
    {
        $this->container['nonstockty'] = $nonstockty;

        return $this;
    }

    /**
     * Gets calcpricety
     *
     * @return string
     */
    public function getCalcpricety()
    {
        return $this->container['calcpricety'];
    }

    /**
     * Sets calcpricety
     *
     * @param string $calcpricety calcpricety
     *
     * @return $this
     */
    public function setCalcpricety($calcpricety)
    {
        $this->container['calcpricety'] = $calcpricety;

        return $this;
    }

    /**
     * Gets prod
     *
     * @return string
     */
    public function getProd()
    {
        return $this->container['prod'];
    }

    /**
     * Sets prod
     *
     * @param string $prod prod
     *
     * @return $this
     */
    public function setProd($prod)
    {
        $this->container['prod'] = $prod;

        return $this;
    }

    /**
     * Gets itemdetail
     *
     * @return string
     */
    public function getItemdetail()
    {
        return $this->container['itemdetail'];
    }

    /**
     * Sets itemdetail
     *
     * @param string $itemdetail itemdetail
     *
     * @return $this
     */
    public function setItemdetail($itemdetail)
    {
        $this->container['itemdetail'] = $itemdetail;

        return $this;
    }

    /**
     * Gets stockfl
     *
     * @return bool
     */
    public function getStockfl()
    {
        return $this->container['stockfl'];
    }

    /**
     * Sets stockfl
     *
     * @param bool $stockfl stockfl
     *
     * @return $this
     */
    public function setStockfl($stockfl)
    {
        $this->container['stockfl'] = $stockfl;

        return $this;
    }

    /**
     * Gets calcpricefl
     *
     * @return bool
     */
    public function getCalcpricefl()
    {
        return $this->container['calcpricefl'];
    }

    /**
     * Sets calcpricefl
     *
     * @param bool $calcpricefl calcpricefl
     *
     * @return $this
     */
    public function setCalcpricefl($calcpricefl)
    {
        $this->container['calcpricefl'] = $calcpricefl;

        return $this;
    }

    /**
     * Gets catalogfl
     *
     * @return bool
     */
    public function getCatalogfl()
    {
        return $this->container['catalogfl'];
    }

    /**
     * Sets catalogfl
     *
     * @param bool $catalogfl catalogfl
     *
     * @return $this
     */
    public function setCatalogfl($catalogfl)
    {
        $this->container['catalogfl'] = $catalogfl;

        return $this;
    }

    /**
     * Gets availabilitywhse
     *
     * @return string
     */
    public function getAvailabilitywhse()
    {
        return $this->container['availabilitywhse'];
    }

    /**
     * Sets availabilitywhse
     *
     * @param string $availabilitywhse availabilitywhse
     *
     * @return $this
     */
    public function setAvailabilitywhse($availabilitywhse)
    {
        $this->container['availabilitywhse'] = $availabilitywhse;

        return $this;
    }

    /**
     * Gets altwhse
     *
     * @return string
     */
    public function getAltwhse()
    {
        return $this->container['altwhse'];
    }

    /**
     * Sets altwhse
     *
     * @param string $altwhse altwhse
     *
     * @return $this
     */
    public function setAltwhse($altwhse)
    {
        $this->container['altwhse'] = $altwhse;

        return $this;
    }

    /**
     * Gets pricingextraparam
     *
     * @return string
     */
    public function getPricingextraparam()
    {
        return $this->container['pricingextraparam'];
    }

    /**
     * Sets pricingextraparam
     *
     * @param string $pricingextraparam pricingextraparam
     *
     * @return $this
     */
    public function setPricingextraparam($pricingextraparam)
    {
        $this->container['pricingextraparam'] = $pricingextraparam;

        return $this;
    }

    /**
     * Gets netavail
     *
     * @return double
     */
    public function getNetavail()
    {
        return $this->container['netavail'];
    }

    /**
     * Sets netavail
     *
     * @param double $netavail netavail
     *
     * @return $this
     */
    public function setNetavail($netavail)
    {
        $this->container['netavail'] = $netavail;

        return $this;
    }

    /**
     * Gets unitconv
     *
     * @return double
     */
    public function getUnitconv()
    {
        return $this->container['unitconv'];
    }

    /**
     * Sets unitconv
     *
     * @param double $unitconv unitconv
     *
     * @return $this
     */
    public function setUnitconv($unitconv)
    {
        $this->container['unitconv'] = $unitconv;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


