<?php
/**
 * TItembalancev2
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TItembalancev2 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TItembalancev2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-itembalancev2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cono' => 'int',
        'itemnumber' => 'string',
        'whseid' => 'string',
        'listprice1' => 'double',
        'listprice2' => 'double',
        'listprice3' => 'double',
        'listprice4' => 'double',
        'listprice5' => 'double',
        'suspendfl' => 'string',
        'qtyonhand' => 'double',
        'statustype' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cono' => 'int64',
        'itemnumber' => null,
        'whseid' => null,
        'listprice1' => 'double',
        'listprice2' => 'double',
        'listprice3' => 'double',
        'listprice4' => 'double',
        'listprice5' => 'double',
        'suspendfl' => null,
        'qtyonhand' => 'double',
        'statustype' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cono' => 'cono',
        'itemnumber' => 'itemnumber',
        'whseid' => 'whseid',
        'listprice1' => 'listprice1',
        'listprice2' => 'listprice2',
        'listprice3' => 'listprice3',
        'listprice4' => 'listprice4',
        'listprice5' => 'listprice5',
        'suspendfl' => 'suspendfl',
        'qtyonhand' => 'qtyonhand',
        'statustype' => 'statustype'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cono' => 'setCono',
        'itemnumber' => 'setItemnumber',
        'whseid' => 'setWhseid',
        'listprice1' => 'setListprice1',
        'listprice2' => 'setListprice2',
        'listprice3' => 'setListprice3',
        'listprice4' => 'setListprice4',
        'listprice5' => 'setListprice5',
        'suspendfl' => 'setSuspendfl',
        'qtyonhand' => 'setQtyonhand',
        'statustype' => 'setStatustype'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cono' => 'getCono',
        'itemnumber' => 'getItemnumber',
        'whseid' => 'getWhseid',
        'listprice1' => 'getListprice1',
        'listprice2' => 'getListprice2',
        'listprice3' => 'getListprice3',
        'listprice4' => 'getListprice4',
        'listprice5' => 'getListprice5',
        'suspendfl' => 'getSuspendfl',
        'qtyonhand' => 'getQtyonhand',
        'statustype' => 'getStatustype'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cono'] = isset($data['cono']) ? $data['cono'] : null;
        $this->container['itemnumber'] = isset($data['itemnumber']) ? $data['itemnumber'] : null;
        $this->container['whseid'] = isset($data['whseid']) ? $data['whseid'] : null;
        $this->container['listprice1'] = isset($data['listprice1']) ? $data['listprice1'] : null;
        $this->container['listprice2'] = isset($data['listprice2']) ? $data['listprice2'] : null;
        $this->container['listprice3'] = isset($data['listprice3']) ? $data['listprice3'] : null;
        $this->container['listprice4'] = isset($data['listprice4']) ? $data['listprice4'] : null;
        $this->container['listprice5'] = isset($data['listprice5']) ? $data['listprice5'] : null;
        $this->container['suspendfl'] = isset($data['suspendfl']) ? $data['suspendfl'] : null;
        $this->container['qtyonhand'] = isset($data['qtyonhand']) ? $data['qtyonhand'] : null;
        $this->container['statustype'] = isset($data['statustype']) ? $data['statustype'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cono
     *
     * @return int
     */
    public function getCono()
    {
        return $this->container['cono'];
    }

    /**
     * Sets cono
     *
     * @param int $cono cono
     *
     * @return $this
     */
    public function setCono($cono)
    {
        $this->container['cono'] = $cono;

        return $this;
    }

    /**
     * Gets itemnumber
     *
     * @return string
     */
    public function getItemnumber()
    {
        return $this->container['itemnumber'];
    }

    /**
     * Sets itemnumber
     *
     * @param string $itemnumber itemnumber
     *
     * @return $this
     */
    public function setItemnumber($itemnumber)
    {
        $this->container['itemnumber'] = $itemnumber;

        return $this;
    }

    /**
     * Gets whseid
     *
     * @return string
     */
    public function getWhseid()
    {
        return $this->container['whseid'];
    }

    /**
     * Sets whseid
     *
     * @param string $whseid whseid
     *
     * @return $this
     */
    public function setWhseid($whseid)
    {
        $this->container['whseid'] = $whseid;

        return $this;
    }

    /**
     * Gets listprice1
     *
     * @return double
     */
    public function getListprice1()
    {
        return $this->container['listprice1'];
    }

    /**
     * Sets listprice1
     *
     * @param double $listprice1 listprice1
     *
     * @return $this
     */
    public function setListprice1($listprice1)
    {
        $this->container['listprice1'] = $listprice1;

        return $this;
    }

    /**
     * Gets listprice2
     *
     * @return double
     */
    public function getListprice2()
    {
        return $this->container['listprice2'];
    }

    /**
     * Sets listprice2
     *
     * @param double $listprice2 listprice2
     *
     * @return $this
     */
    public function setListprice2($listprice2)
    {
        $this->container['listprice2'] = $listprice2;

        return $this;
    }

    /**
     * Gets listprice3
     *
     * @return double
     */
    public function getListprice3()
    {
        return $this->container['listprice3'];
    }

    /**
     * Sets listprice3
     *
     * @param double $listprice3 listprice3
     *
     * @return $this
     */
    public function setListprice3($listprice3)
    {
        $this->container['listprice3'] = $listprice3;

        return $this;
    }

    /**
     * Gets listprice4
     *
     * @return double
     */
    public function getListprice4()
    {
        return $this->container['listprice4'];
    }

    /**
     * Sets listprice4
     *
     * @param double $listprice4 listprice4
     *
     * @return $this
     */
    public function setListprice4($listprice4)
    {
        $this->container['listprice4'] = $listprice4;

        return $this;
    }

    /**
     * Gets listprice5
     *
     * @return double
     */
    public function getListprice5()
    {
        return $this->container['listprice5'];
    }

    /**
     * Sets listprice5
     *
     * @param double $listprice5 listprice5
     *
     * @return $this
     */
    public function setListprice5($listprice5)
    {
        $this->container['listprice5'] = $listprice5;

        return $this;
    }

    /**
     * Gets suspendfl
     *
     * @return string
     */
    public function getSuspendfl()
    {
        return $this->container['suspendfl'];
    }

    /**
     * Sets suspendfl
     *
     * @param string $suspendfl suspendfl
     *
     * @return $this
     */
    public function setSuspendfl($suspendfl)
    {
        $this->container['suspendfl'] = $suspendfl;

        return $this;
    }

    /**
     * Gets qtyonhand
     *
     * @return double
     */
    public function getQtyonhand()
    {
        return $this->container['qtyonhand'];
    }

    /**
     * Sets qtyonhand
     *
     * @param double $qtyonhand qtyonhand
     *
     * @return $this
     */
    public function setQtyonhand($qtyonhand)
    {
        $this->container['qtyonhand'] = $qtyonhand;

        return $this;
    }

    /**
     * Gets statustype
     *
     * @return string
     */
    public function getStatustype()
    {
        return $this->container['statustype'];
    }

    /**
     * Sets statustype
     *
     * @param string $statustype statustype
     *
     * @return $this
     */
    public function setStatustype($statustype)
    {
        $this->container['statustype'] = $statustype;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


