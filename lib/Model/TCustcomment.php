<?php
/**
 * TCustcomment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TCustcomment Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TCustcomment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-custcomment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'commtype' => 'string',
        'custno' => 'double',
        'shipto' => 'string',
        'commseqno' => 'int',
        'commtext' => 'string',
        'poprintdt' => '\DateTime',
        'reviewdt' => '\DateTime',
        'commcd' => 'string',
        'printcd' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'commtype' => null,
        'custno' => 'double',
        'shipto' => null,
        'commseqno' => 'int64',
        'commtext' => null,
        'poprintdt' => 'date',
        'reviewdt' => 'date',
        'commcd' => null,
        'printcd' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'commtype' => 'commtype',
        'custno' => 'custno',
        'shipto' => 'shipto',
        'commseqno' => 'commseqno',
        'commtext' => 'commtext',
        'poprintdt' => 'poprintdt',
        'reviewdt' => 'reviewdt',
        'commcd' => 'commcd',
        'printcd' => 'printcd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'commtype' => 'setCommtype',
        'custno' => 'setCustno',
        'shipto' => 'setShipto',
        'commseqno' => 'setCommseqno',
        'commtext' => 'setCommtext',
        'poprintdt' => 'setPoprintdt',
        'reviewdt' => 'setReviewdt',
        'commcd' => 'setCommcd',
        'printcd' => 'setPrintcd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'commtype' => 'getCommtype',
        'custno' => 'getCustno',
        'shipto' => 'getShipto',
        'commseqno' => 'getCommseqno',
        'commtext' => 'getCommtext',
        'poprintdt' => 'getPoprintdt',
        'reviewdt' => 'getReviewdt',
        'commcd' => 'getCommcd',
        'printcd' => 'getPrintcd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['commtype'] = isset($data['commtype']) ? $data['commtype'] : null;
        $this->container['custno'] = isset($data['custno']) ? $data['custno'] : null;
        $this->container['shipto'] = isset($data['shipto']) ? $data['shipto'] : null;
        $this->container['commseqno'] = isset($data['commseqno']) ? $data['commseqno'] : null;
        $this->container['commtext'] = isset($data['commtext']) ? $data['commtext'] : null;
        $this->container['poprintdt'] = isset($data['poprintdt']) ? $data['poprintdt'] : null;
        $this->container['reviewdt'] = isset($data['reviewdt']) ? $data['reviewdt'] : null;
        $this->container['commcd'] = isset($data['commcd']) ? $data['commcd'] : null;
        $this->container['printcd'] = isset($data['printcd']) ? $data['printcd'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets commtype
     *
     * @return string
     */
    public function getCommtype()
    {
        return $this->container['commtype'];
    }

    /**
     * Sets commtype
     *
     * @param string $commtype commtype
     *
     * @return $this
     */
    public function setCommtype($commtype)
    {
        $this->container['commtype'] = $commtype;

        return $this;
    }

    /**
     * Gets custno
     *
     * @return double
     */
    public function getCustno()
    {
        return $this->container['custno'];
    }

    /**
     * Sets custno
     *
     * @param double $custno custno
     *
     * @return $this
     */
    public function setCustno($custno)
    {
        $this->container['custno'] = $custno;

        return $this;
    }

    /**
     * Gets shipto
     *
     * @return string
     */
    public function getShipto()
    {
        return $this->container['shipto'];
    }

    /**
     * Sets shipto
     *
     * @param string $shipto shipto
     *
     * @return $this
     */
    public function setShipto($shipto)
    {
        $this->container['shipto'] = $shipto;

        return $this;
    }

    /**
     * Gets commseqno
     *
     * @return int
     */
    public function getCommseqno()
    {
        return $this->container['commseqno'];
    }

    /**
     * Sets commseqno
     *
     * @param int $commseqno commseqno
     *
     * @return $this
     */
    public function setCommseqno($commseqno)
    {
        $this->container['commseqno'] = $commseqno;

        return $this;
    }

    /**
     * Gets commtext
     *
     * @return string
     */
    public function getCommtext()
    {
        return $this->container['commtext'];
    }

    /**
     * Sets commtext
     *
     * @param string $commtext commtext
     *
     * @return $this
     */
    public function setCommtext($commtext)
    {
        $this->container['commtext'] = $commtext;

        return $this;
    }

    /**
     * Gets poprintdt
     *
     * @return \DateTime
     */
    public function getPoprintdt()
    {
        return $this->container['poprintdt'];
    }

    /**
     * Sets poprintdt
     *
     * @param \DateTime $poprintdt poprintdt
     *
     * @return $this
     */
    public function setPoprintdt($poprintdt)
    {
        $this->container['poprintdt'] = $poprintdt;

        return $this;
    }

    /**
     * Gets reviewdt
     *
     * @return \DateTime
     */
    public function getReviewdt()
    {
        return $this->container['reviewdt'];
    }

    /**
     * Sets reviewdt
     *
     * @param \DateTime $reviewdt reviewdt
     *
     * @return $this
     */
    public function setReviewdt($reviewdt)
    {
        $this->container['reviewdt'] = $reviewdt;

        return $this;
    }

    /**
     * Gets commcd
     *
     * @return string
     */
    public function getCommcd()
    {
        return $this->container['commcd'];
    }

    /**
     * Sets commcd
     *
     * @param string $commcd commcd
     *
     * @return $this
     */
    public function setCommcd($commcd)
    {
        $this->container['commcd'] = $commcd;

        return $this;
    }

    /**
     * Gets printcd
     *
     * @return string
     */
    public function getPrintcd()
    {
        return $this->container['printcd'];
    }

    /**
     * Sets printcd
     *
     * @param string $printcd printcd
     *
     * @return $this
     */
    public function setPrintcd($printcd)
    {
        $this->container['printcd'] = $printcd;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


