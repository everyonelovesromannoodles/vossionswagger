<?php
/**
 * TOrdtotdata
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TOrdtotdata Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TOrdtotdata implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-ordtotdata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'messageout' => 'string',
        'totlineamt' => 'double',
        'totaddonamt' => 'double',
        'totdiscamt' => 'double',
        'tottaxamt' => 'double',
        'totexciseamt' => 'double',
        'totcontaineramt' => 'double',
        'totordamt' => 'double',
        'totinvamt' => 'double',
        'currencyty' => 'string',
        'ccauthamt' => 'double',
        'completioncd' => 'string',
        'totweight' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'messageout' => null,
        'totlineamt' => 'double',
        'totaddonamt' => 'double',
        'totdiscamt' => 'double',
        'tottaxamt' => 'double',
        'totexciseamt' => 'double',
        'totcontaineramt' => 'double',
        'totordamt' => 'double',
        'totinvamt' => 'double',
        'currencyty' => null,
        'ccauthamt' => 'double',
        'completioncd' => null,
        'totweight' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'messageout' => 'messageout',
        'totlineamt' => 'totlineamt',
        'totaddonamt' => 'totaddonamt',
        'totdiscamt' => 'totdiscamt',
        'tottaxamt' => 'tottaxamt',
        'totexciseamt' => 'totexciseamt',
        'totcontaineramt' => 'totcontaineramt',
        'totordamt' => 'totordamt',
        'totinvamt' => 'totinvamt',
        'currencyty' => 'currencyty',
        'ccauthamt' => 'ccauthamt',
        'completioncd' => 'completioncd',
        'totweight' => 'totweight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'messageout' => 'setMessageout',
        'totlineamt' => 'setTotlineamt',
        'totaddonamt' => 'setTotaddonamt',
        'totdiscamt' => 'setTotdiscamt',
        'tottaxamt' => 'setTottaxamt',
        'totexciseamt' => 'setTotexciseamt',
        'totcontaineramt' => 'setTotcontaineramt',
        'totordamt' => 'setTotordamt',
        'totinvamt' => 'setTotinvamt',
        'currencyty' => 'setCurrencyty',
        'ccauthamt' => 'setCcauthamt',
        'completioncd' => 'setCompletioncd',
        'totweight' => 'setTotweight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'messageout' => 'getMessageout',
        'totlineamt' => 'getTotlineamt',
        'totaddonamt' => 'getTotaddonamt',
        'totdiscamt' => 'getTotdiscamt',
        'tottaxamt' => 'getTottaxamt',
        'totexciseamt' => 'getTotexciseamt',
        'totcontaineramt' => 'getTotcontaineramt',
        'totordamt' => 'getTotordamt',
        'totinvamt' => 'getTotinvamt',
        'currencyty' => 'getCurrencyty',
        'ccauthamt' => 'getCcauthamt',
        'completioncd' => 'getCompletioncd',
        'totweight' => 'getTotweight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['messageout'] = isset($data['messageout']) ? $data['messageout'] : null;
        $this->container['totlineamt'] = isset($data['totlineamt']) ? $data['totlineamt'] : null;
        $this->container['totaddonamt'] = isset($data['totaddonamt']) ? $data['totaddonamt'] : null;
        $this->container['totdiscamt'] = isset($data['totdiscamt']) ? $data['totdiscamt'] : null;
        $this->container['tottaxamt'] = isset($data['tottaxamt']) ? $data['tottaxamt'] : null;
        $this->container['totexciseamt'] = isset($data['totexciseamt']) ? $data['totexciseamt'] : null;
        $this->container['totcontaineramt'] = isset($data['totcontaineramt']) ? $data['totcontaineramt'] : null;
        $this->container['totordamt'] = isset($data['totordamt']) ? $data['totordamt'] : null;
        $this->container['totinvamt'] = isset($data['totinvamt']) ? $data['totinvamt'] : null;
        $this->container['currencyty'] = isset($data['currencyty']) ? $data['currencyty'] : null;
        $this->container['ccauthamt'] = isset($data['ccauthamt']) ? $data['ccauthamt'] : null;
        $this->container['completioncd'] = isset($data['completioncd']) ? $data['completioncd'] : null;
        $this->container['totweight'] = isset($data['totweight']) ? $data['totweight'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets messageout
     *
     * @return string
     */
    public function getMessageout()
    {
        return $this->container['messageout'];
    }

    /**
     * Sets messageout
     *
     * @param string $messageout messageout
     *
     * @return $this
     */
    public function setMessageout($messageout)
    {
        $this->container['messageout'] = $messageout;

        return $this;
    }

    /**
     * Gets totlineamt
     *
     * @return double
     */
    public function getTotlineamt()
    {
        return $this->container['totlineamt'];
    }

    /**
     * Sets totlineamt
     *
     * @param double $totlineamt totlineamt
     *
     * @return $this
     */
    public function setTotlineamt($totlineamt)
    {
        $this->container['totlineamt'] = $totlineamt;

        return $this;
    }

    /**
     * Gets totaddonamt
     *
     * @return double
     */
    public function getTotaddonamt()
    {
        return $this->container['totaddonamt'];
    }

    /**
     * Sets totaddonamt
     *
     * @param double $totaddonamt totaddonamt
     *
     * @return $this
     */
    public function setTotaddonamt($totaddonamt)
    {
        $this->container['totaddonamt'] = $totaddonamt;

        return $this;
    }

    /**
     * Gets totdiscamt
     *
     * @return double
     */
    public function getTotdiscamt()
    {
        return $this->container['totdiscamt'];
    }

    /**
     * Sets totdiscamt
     *
     * @param double $totdiscamt totdiscamt
     *
     * @return $this
     */
    public function setTotdiscamt($totdiscamt)
    {
        $this->container['totdiscamt'] = $totdiscamt;

        return $this;
    }

    /**
     * Gets tottaxamt
     *
     * @return double
     */
    public function getTottaxamt()
    {
        return $this->container['tottaxamt'];
    }

    /**
     * Sets tottaxamt
     *
     * @param double $tottaxamt tottaxamt
     *
     * @return $this
     */
    public function setTottaxamt($tottaxamt)
    {
        $this->container['tottaxamt'] = $tottaxamt;

        return $this;
    }

    /**
     * Gets totexciseamt
     *
     * @return double
     */
    public function getTotexciseamt()
    {
        return $this->container['totexciseamt'];
    }

    /**
     * Sets totexciseamt
     *
     * @param double $totexciseamt totexciseamt
     *
     * @return $this
     */
    public function setTotexciseamt($totexciseamt)
    {
        $this->container['totexciseamt'] = $totexciseamt;

        return $this;
    }

    /**
     * Gets totcontaineramt
     *
     * @return double
     */
    public function getTotcontaineramt()
    {
        return $this->container['totcontaineramt'];
    }

    /**
     * Sets totcontaineramt
     *
     * @param double $totcontaineramt totcontaineramt
     *
     * @return $this
     */
    public function setTotcontaineramt($totcontaineramt)
    {
        $this->container['totcontaineramt'] = $totcontaineramt;

        return $this;
    }

    /**
     * Gets totordamt
     *
     * @return double
     */
    public function getTotordamt()
    {
        return $this->container['totordamt'];
    }

    /**
     * Sets totordamt
     *
     * @param double $totordamt totordamt
     *
     * @return $this
     */
    public function setTotordamt($totordamt)
    {
        $this->container['totordamt'] = $totordamt;

        return $this;
    }

    /**
     * Gets totinvamt
     *
     * @return double
     */
    public function getTotinvamt()
    {
        return $this->container['totinvamt'];
    }

    /**
     * Sets totinvamt
     *
     * @param double $totinvamt totinvamt
     *
     * @return $this
     */
    public function setTotinvamt($totinvamt)
    {
        $this->container['totinvamt'] = $totinvamt;

        return $this;
    }

    /**
     * Gets currencyty
     *
     * @return string
     */
    public function getCurrencyty()
    {
        return $this->container['currencyty'];
    }

    /**
     * Sets currencyty
     *
     * @param string $currencyty currencyty
     *
     * @return $this
     */
    public function setCurrencyty($currencyty)
    {
        $this->container['currencyty'] = $currencyty;

        return $this;
    }

    /**
     * Gets ccauthamt
     *
     * @return double
     */
    public function getCcauthamt()
    {
        return $this->container['ccauthamt'];
    }

    /**
     * Sets ccauthamt
     *
     * @param double $ccauthamt ccauthamt
     *
     * @return $this
     */
    public function setCcauthamt($ccauthamt)
    {
        $this->container['ccauthamt'] = $ccauthamt;

        return $this;
    }

    /**
     * Gets completioncd
     *
     * @return string
     */
    public function getCompletioncd()
    {
        return $this->container['completioncd'];
    }

    /**
     * Sets completioncd
     *
     * @param string $completioncd completioncd
     *
     * @return $this
     */
    public function setCompletioncd($completioncd)
    {
        $this->container['completioncd'] = $completioncd;

        return $this;
    }

    /**
     * Gets totweight
     *
     * @return double
     */
    public function getTotweight()
    {
        return $this->container['totweight'];
    }

    /**
     * Sets totweight
     *
     * @param double $totweight totweight
     *
     * @return $this
     */
    public function setTotweight($totweight)
    {
        $this->container['totweight'] = $totweight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


