<?php
/**
 * Sxapisfgetpriceavailv2Request
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Sxapisfgetpriceavailv2Request Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Sxapisfgetpriceavailv2Request implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapisfgetpriceavailv2_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company_number' => 'int',
        'operator_init' => 'string',
        'operator_password' => 'string',
        'transaction_id' => 'string',
        'request_id' => 'string',
        'order_number' => 'int',
        'warehouse_id' => 'string',
        'order_quantity' => 'double',
        'unit_of_measure' => 'string',
        'vendor_cost' => 'double',
        'vendor_price1' => 'double',
        'vendor_price2' => 'double',
        'vendor_price3' => 'double',
        'vendor_price4' => 'double',
        'vendor_price5' => 'double',
        'non_stock_flag' => 'string',
        'calculate_prices' => 'string',
        'ship_to_number' => 'string',
        'default_warehouse_only' => 'string',
        'item_number' => 'string',
        'item_detail' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'company_number' => 'int64',
        'operator_init' => null,
        'operator_password' => null,
        'transaction_id' => null,
        'request_id' => null,
        'order_number' => 'int64',
        'warehouse_id' => null,
        'order_quantity' => 'double',
        'unit_of_measure' => null,
        'vendor_cost' => 'double',
        'vendor_price1' => 'double',
        'vendor_price2' => 'double',
        'vendor_price3' => 'double',
        'vendor_price4' => 'double',
        'vendor_price5' => 'double',
        'non_stock_flag' => null,
        'calculate_prices' => null,
        'ship_to_number' => null,
        'default_warehouse_only' => null,
        'item_number' => null,
        'item_detail' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_number' => 'companyNumber',
        'operator_init' => 'operatorInit',
        'operator_password' => 'operatorPassword',
        'transaction_id' => 'transactionID',
        'request_id' => 'requestID',
        'order_number' => 'orderNumber',
        'warehouse_id' => 'warehouseID',
        'order_quantity' => 'orderQuantity',
        'unit_of_measure' => 'unitOfMeasure',
        'vendor_cost' => 'vendorCost',
        'vendor_price1' => 'vendorPrice1',
        'vendor_price2' => 'vendorPrice2',
        'vendor_price3' => 'vendorPrice3',
        'vendor_price4' => 'vendorPrice4',
        'vendor_price5' => 'vendorPrice5',
        'non_stock_flag' => 'nonStockFlag',
        'calculate_prices' => 'calculatePrices',
        'ship_to_number' => 'shipToNumber',
        'default_warehouse_only' => 'defaultWarehouseOnly',
        'item_number' => 'itemNumber',
        'item_detail' => 'itemDetail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_number' => 'setCompanyNumber',
        'operator_init' => 'setOperatorInit',
        'operator_password' => 'setOperatorPassword',
        'transaction_id' => 'setTransactionId',
        'request_id' => 'setRequestId',
        'order_number' => 'setOrderNumber',
        'warehouse_id' => 'setWarehouseId',
        'order_quantity' => 'setOrderQuantity',
        'unit_of_measure' => 'setUnitOfMeasure',
        'vendor_cost' => 'setVendorCost',
        'vendor_price1' => 'setVendorPrice1',
        'vendor_price2' => 'setVendorPrice2',
        'vendor_price3' => 'setVendorPrice3',
        'vendor_price4' => 'setVendorPrice4',
        'vendor_price5' => 'setVendorPrice5',
        'non_stock_flag' => 'setNonStockFlag',
        'calculate_prices' => 'setCalculatePrices',
        'ship_to_number' => 'setShipToNumber',
        'default_warehouse_only' => 'setDefaultWarehouseOnly',
        'item_number' => 'setItemNumber',
        'item_detail' => 'setItemDetail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_number' => 'getCompanyNumber',
        'operator_init' => 'getOperatorInit',
        'operator_password' => 'getOperatorPassword',
        'transaction_id' => 'getTransactionId',
        'request_id' => 'getRequestId',
        'order_number' => 'getOrderNumber',
        'warehouse_id' => 'getWarehouseId',
        'order_quantity' => 'getOrderQuantity',
        'unit_of_measure' => 'getUnitOfMeasure',
        'vendor_cost' => 'getVendorCost',
        'vendor_price1' => 'getVendorPrice1',
        'vendor_price2' => 'getVendorPrice2',
        'vendor_price3' => 'getVendorPrice3',
        'vendor_price4' => 'getVendorPrice4',
        'vendor_price5' => 'getVendorPrice5',
        'non_stock_flag' => 'getNonStockFlag',
        'calculate_prices' => 'getCalculatePrices',
        'ship_to_number' => 'getShipToNumber',
        'default_warehouse_only' => 'getDefaultWarehouseOnly',
        'item_number' => 'getItemNumber',
        'item_detail' => 'getItemDetail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_number'] = isset($data['company_number']) ? $data['company_number'] : null;
        $this->container['operator_init'] = isset($data['operator_init']) ? $data['operator_init'] : null;
        $this->container['operator_password'] = isset($data['operator_password']) ? $data['operator_password'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['warehouse_id'] = isset($data['warehouse_id']) ? $data['warehouse_id'] : null;
        $this->container['order_quantity'] = isset($data['order_quantity']) ? $data['order_quantity'] : null;
        $this->container['unit_of_measure'] = isset($data['unit_of_measure']) ? $data['unit_of_measure'] : null;
        $this->container['vendor_cost'] = isset($data['vendor_cost']) ? $data['vendor_cost'] : null;
        $this->container['vendor_price1'] = isset($data['vendor_price1']) ? $data['vendor_price1'] : null;
        $this->container['vendor_price2'] = isset($data['vendor_price2']) ? $data['vendor_price2'] : null;
        $this->container['vendor_price3'] = isset($data['vendor_price3']) ? $data['vendor_price3'] : null;
        $this->container['vendor_price4'] = isset($data['vendor_price4']) ? $data['vendor_price4'] : null;
        $this->container['vendor_price5'] = isset($data['vendor_price5']) ? $data['vendor_price5'] : null;
        $this->container['non_stock_flag'] = isset($data['non_stock_flag']) ? $data['non_stock_flag'] : null;
        $this->container['calculate_prices'] = isset($data['calculate_prices']) ? $data['calculate_prices'] : null;
        $this->container['ship_to_number'] = isset($data['ship_to_number']) ? $data['ship_to_number'] : null;
        $this->container['default_warehouse_only'] = isset($data['default_warehouse_only']) ? $data['default_warehouse_only'] : null;
        $this->container['item_number'] = isset($data['item_number']) ? $data['item_number'] : null;
        $this->container['item_detail'] = isset($data['item_detail']) ? $data['item_detail'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_number
     *
     * @return int
     */
    public function getCompanyNumber()
    {
        return $this->container['company_number'];
    }

    /**
     * Sets company_number
     *
     * @param int $company_number company_number
     *
     * @return $this
     */
    public function setCompanyNumber($company_number)
    {
        $this->container['company_number'] = $company_number;

        return $this;
    }

    /**
     * Gets operator_init
     *
     * @return string
     */
    public function getOperatorInit()
    {
        return $this->container['operator_init'];
    }

    /**
     * Sets operator_init
     *
     * @param string $operator_init operator_init
     *
     * @return $this
     */
    public function setOperatorInit($operator_init)
    {
        $this->container['operator_init'] = $operator_init;

        return $this;
    }

    /**
     * Gets operator_password
     *
     * @return string
     */
    public function getOperatorPassword()
    {
        return $this->container['operator_password'];
    }

    /**
     * Sets operator_password
     *
     * @param string $operator_password operator_password
     *
     * @return $this
     */
    public function setOperatorPassword($operator_password)
    {
        $this->container['operator_password'] = $operator_password;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id transaction_id
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id request_id
     *
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return int
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param int $order_number order_number
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return string
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param string $warehouse_id warehouse_id
     *
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets order_quantity
     *
     * @return double
     */
    public function getOrderQuantity()
    {
        return $this->container['order_quantity'];
    }

    /**
     * Sets order_quantity
     *
     * @param double $order_quantity order_quantity
     *
     * @return $this
     */
    public function setOrderQuantity($order_quantity)
    {
        $this->container['order_quantity'] = $order_quantity;

        return $this;
    }

    /**
     * Gets unit_of_measure
     *
     * @return string
     */
    public function getUnitOfMeasure()
    {
        return $this->container['unit_of_measure'];
    }

    /**
     * Sets unit_of_measure
     *
     * @param string $unit_of_measure unit_of_measure
     *
     * @return $this
     */
    public function setUnitOfMeasure($unit_of_measure)
    {
        $this->container['unit_of_measure'] = $unit_of_measure;

        return $this;
    }

    /**
     * Gets vendor_cost
     *
     * @return double
     */
    public function getVendorCost()
    {
        return $this->container['vendor_cost'];
    }

    /**
     * Sets vendor_cost
     *
     * @param double $vendor_cost vendor_cost
     *
     * @return $this
     */
    public function setVendorCost($vendor_cost)
    {
        $this->container['vendor_cost'] = $vendor_cost;

        return $this;
    }

    /**
     * Gets vendor_price1
     *
     * @return double
     */
    public function getVendorPrice1()
    {
        return $this->container['vendor_price1'];
    }

    /**
     * Sets vendor_price1
     *
     * @param double $vendor_price1 vendor_price1
     *
     * @return $this
     */
    public function setVendorPrice1($vendor_price1)
    {
        $this->container['vendor_price1'] = $vendor_price1;

        return $this;
    }

    /**
     * Gets vendor_price2
     *
     * @return double
     */
    public function getVendorPrice2()
    {
        return $this->container['vendor_price2'];
    }

    /**
     * Sets vendor_price2
     *
     * @param double $vendor_price2 vendor_price2
     *
     * @return $this
     */
    public function setVendorPrice2($vendor_price2)
    {
        $this->container['vendor_price2'] = $vendor_price2;

        return $this;
    }

    /**
     * Gets vendor_price3
     *
     * @return double
     */
    public function getVendorPrice3()
    {
        return $this->container['vendor_price3'];
    }

    /**
     * Sets vendor_price3
     *
     * @param double $vendor_price3 vendor_price3
     *
     * @return $this
     */
    public function setVendorPrice3($vendor_price3)
    {
        $this->container['vendor_price3'] = $vendor_price3;

        return $this;
    }

    /**
     * Gets vendor_price4
     *
     * @return double
     */
    public function getVendorPrice4()
    {
        return $this->container['vendor_price4'];
    }

    /**
     * Sets vendor_price4
     *
     * @param double $vendor_price4 vendor_price4
     *
     * @return $this
     */
    public function setVendorPrice4($vendor_price4)
    {
        $this->container['vendor_price4'] = $vendor_price4;

        return $this;
    }

    /**
     * Gets vendor_price5
     *
     * @return double
     */
    public function getVendorPrice5()
    {
        return $this->container['vendor_price5'];
    }

    /**
     * Sets vendor_price5
     *
     * @param double $vendor_price5 vendor_price5
     *
     * @return $this
     */
    public function setVendorPrice5($vendor_price5)
    {
        $this->container['vendor_price5'] = $vendor_price5;

        return $this;
    }

    /**
     * Gets non_stock_flag
     *
     * @return string
     */
    public function getNonStockFlag()
    {
        return $this->container['non_stock_flag'];
    }

    /**
     * Sets non_stock_flag
     *
     * @param string $non_stock_flag non_stock_flag
     *
     * @return $this
     */
    public function setNonStockFlag($non_stock_flag)
    {
        $this->container['non_stock_flag'] = $non_stock_flag;

        return $this;
    }

    /**
     * Gets calculate_prices
     *
     * @return string
     */
    public function getCalculatePrices()
    {
        return $this->container['calculate_prices'];
    }

    /**
     * Sets calculate_prices
     *
     * @param string $calculate_prices calculate_prices
     *
     * @return $this
     */
    public function setCalculatePrices($calculate_prices)
    {
        $this->container['calculate_prices'] = $calculate_prices;

        return $this;
    }

    /**
     * Gets ship_to_number
     *
     * @return string
     */
    public function getShipToNumber()
    {
        return $this->container['ship_to_number'];
    }

    /**
     * Sets ship_to_number
     *
     * @param string $ship_to_number ship_to_number
     *
     * @return $this
     */
    public function setShipToNumber($ship_to_number)
    {
        $this->container['ship_to_number'] = $ship_to_number;

        return $this;
    }

    /**
     * Gets default_warehouse_only
     *
     * @return string
     */
    public function getDefaultWarehouseOnly()
    {
        return $this->container['default_warehouse_only'];
    }

    /**
     * Sets default_warehouse_only
     *
     * @param string $default_warehouse_only default_warehouse_only
     *
     * @return $this
     */
    public function setDefaultWarehouseOnly($default_warehouse_only)
    {
        $this->container['default_warehouse_only'] = $default_warehouse_only;

        return $this;
    }

    /**
     * Gets item_number
     *
     * @return string
     */
    public function getItemNumber()
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     *
     * @param string $item_number item_number
     *
     * @return $this
     */
    public function setItemNumber($item_number)
    {
        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets item_detail
     *
     * @return string
     */
    public function getItemDetail()
    {
        return $this->container['item_detail'];
    }

    /**
     * Sets item_detail
     *
     * @param string $item_detail item_detail
     *
     * @return $this
     */
    public function setItemDetail($item_detail)
    {
        $this->container['item_detail'] = $item_detail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


