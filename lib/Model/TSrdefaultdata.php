<?php
/**
 * TSrdefaultdata
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TSrdefaultdata Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TSrdefaultdata implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-srdefaultdata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'whse' => 'string',
        'seqno' => 'int',
        'department' => 'string',
        'employeeid' => 'string',
        'employeename' => 'string',
        'machinenum' => 'string',
        'project' => 'string',
        'workordernum' => 'string',
        'chargeno' => 'string',
        'custglno' => 'string',
        'promisedt' => '\DateTime',
        'taxablefl' => 'bool',
        'notes' => 'string',
        'srnotesprntfl' => 'string',
        'comments' => 'string',
        'pickprtfl' => 'string',
        'user1' => 'string',
        'user2' => 'string',
        'user3' => 'string',
        'user4' => 'string',
        'user5' => 'string',
        'user6' => 'double',
        'user7' => 'double',
        'user8' => '\DateTime',
        'user9' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'whse' => null,
        'seqno' => 'int64',
        'department' => null,
        'employeeid' => null,
        'employeename' => null,
        'machinenum' => null,
        'project' => null,
        'workordernum' => null,
        'chargeno' => null,
        'custglno' => null,
        'promisedt' => 'date',
        'taxablefl' => null,
        'notes' => null,
        'srnotesprntfl' => null,
        'comments' => null,
        'pickprtfl' => null,
        'user1' => null,
        'user2' => null,
        'user3' => null,
        'user4' => null,
        'user5' => null,
        'user6' => 'double',
        'user7' => 'double',
        'user8' => 'date',
        'user9' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'whse' => 'whse',
        'seqno' => 'seqno',
        'department' => 'department',
        'employeeid' => 'employeeid',
        'employeename' => 'employeename',
        'machinenum' => 'machinenum',
        'project' => 'project',
        'workordernum' => 'workordernum',
        'chargeno' => 'chargeno',
        'custglno' => 'custglno',
        'promisedt' => 'promisedt',
        'taxablefl' => 'taxablefl',
        'notes' => 'notes',
        'srnotesprntfl' => 'srnotesprntfl',
        'comments' => 'comments',
        'pickprtfl' => 'pickprtfl',
        'user1' => 'user1',
        'user2' => 'user2',
        'user3' => 'user3',
        'user4' => 'user4',
        'user5' => 'user5',
        'user6' => 'user6',
        'user7' => 'user7',
        'user8' => 'user8',
        'user9' => 'user9'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'whse' => 'setWhse',
        'seqno' => 'setSeqno',
        'department' => 'setDepartment',
        'employeeid' => 'setEmployeeid',
        'employeename' => 'setEmployeename',
        'machinenum' => 'setMachinenum',
        'project' => 'setProject',
        'workordernum' => 'setWorkordernum',
        'chargeno' => 'setChargeno',
        'custglno' => 'setCustglno',
        'promisedt' => 'setPromisedt',
        'taxablefl' => 'setTaxablefl',
        'notes' => 'setNotes',
        'srnotesprntfl' => 'setSrnotesprntfl',
        'comments' => 'setComments',
        'pickprtfl' => 'setPickprtfl',
        'user1' => 'setUser1',
        'user2' => 'setUser2',
        'user3' => 'setUser3',
        'user4' => 'setUser4',
        'user5' => 'setUser5',
        'user6' => 'setUser6',
        'user7' => 'setUser7',
        'user8' => 'setUser8',
        'user9' => 'setUser9'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'whse' => 'getWhse',
        'seqno' => 'getSeqno',
        'department' => 'getDepartment',
        'employeeid' => 'getEmployeeid',
        'employeename' => 'getEmployeename',
        'machinenum' => 'getMachinenum',
        'project' => 'getProject',
        'workordernum' => 'getWorkordernum',
        'chargeno' => 'getChargeno',
        'custglno' => 'getCustglno',
        'promisedt' => 'getPromisedt',
        'taxablefl' => 'getTaxablefl',
        'notes' => 'getNotes',
        'srnotesprntfl' => 'getSrnotesprntfl',
        'comments' => 'getComments',
        'pickprtfl' => 'getPickprtfl',
        'user1' => 'getUser1',
        'user2' => 'getUser2',
        'user3' => 'getUser3',
        'user4' => 'getUser4',
        'user5' => 'getUser5',
        'user6' => 'getUser6',
        'user7' => 'getUser7',
        'user8' => 'getUser8',
        'user9' => 'getUser9'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['whse'] = isset($data['whse']) ? $data['whse'] : null;
        $this->container['seqno'] = isset($data['seqno']) ? $data['seqno'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['employeeid'] = isset($data['employeeid']) ? $data['employeeid'] : null;
        $this->container['employeename'] = isset($data['employeename']) ? $data['employeename'] : null;
        $this->container['machinenum'] = isset($data['machinenum']) ? $data['machinenum'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['workordernum'] = isset($data['workordernum']) ? $data['workordernum'] : null;
        $this->container['chargeno'] = isset($data['chargeno']) ? $data['chargeno'] : null;
        $this->container['custglno'] = isset($data['custglno']) ? $data['custglno'] : null;
        $this->container['promisedt'] = isset($data['promisedt']) ? $data['promisedt'] : null;
        $this->container['taxablefl'] = isset($data['taxablefl']) ? $data['taxablefl'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['srnotesprntfl'] = isset($data['srnotesprntfl']) ? $data['srnotesprntfl'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['pickprtfl'] = isset($data['pickprtfl']) ? $data['pickprtfl'] : null;
        $this->container['user1'] = isset($data['user1']) ? $data['user1'] : null;
        $this->container['user2'] = isset($data['user2']) ? $data['user2'] : null;
        $this->container['user3'] = isset($data['user3']) ? $data['user3'] : null;
        $this->container['user4'] = isset($data['user4']) ? $data['user4'] : null;
        $this->container['user5'] = isset($data['user5']) ? $data['user5'] : null;
        $this->container['user6'] = isset($data['user6']) ? $data['user6'] : null;
        $this->container['user7'] = isset($data['user7']) ? $data['user7'] : null;
        $this->container['user8'] = isset($data['user8']) ? $data['user8'] : null;
        $this->container['user9'] = isset($data['user9']) ? $data['user9'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets whse
     *
     * @return string
     */
    public function getWhse()
    {
        return $this->container['whse'];
    }

    /**
     * Sets whse
     *
     * @param string $whse whse
     *
     * @return $this
     */
    public function setWhse($whse)
    {
        $this->container['whse'] = $whse;

        return $this;
    }

    /**
     * Gets seqno
     *
     * @return int
     */
    public function getSeqno()
    {
        return $this->container['seqno'];
    }

    /**
     * Sets seqno
     *
     * @param int $seqno seqno
     *
     * @return $this
     */
    public function setSeqno($seqno)
    {
        $this->container['seqno'] = $seqno;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string $department department
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets employeeid
     *
     * @return string
     */
    public function getEmployeeid()
    {
        return $this->container['employeeid'];
    }

    /**
     * Sets employeeid
     *
     * @param string $employeeid employeeid
     *
     * @return $this
     */
    public function setEmployeeid($employeeid)
    {
        $this->container['employeeid'] = $employeeid;

        return $this;
    }

    /**
     * Gets employeename
     *
     * @return string
     */
    public function getEmployeename()
    {
        return $this->container['employeename'];
    }

    /**
     * Sets employeename
     *
     * @param string $employeename employeename
     *
     * @return $this
     */
    public function setEmployeename($employeename)
    {
        $this->container['employeename'] = $employeename;

        return $this;
    }

    /**
     * Gets machinenum
     *
     * @return string
     */
    public function getMachinenum()
    {
        return $this->container['machinenum'];
    }

    /**
     * Sets machinenum
     *
     * @param string $machinenum machinenum
     *
     * @return $this
     */
    public function setMachinenum($machinenum)
    {
        $this->container['machinenum'] = $machinenum;

        return $this;
    }

    /**
     * Gets project
     *
     * @return string
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param string $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets workordernum
     *
     * @return string
     */
    public function getWorkordernum()
    {
        return $this->container['workordernum'];
    }

    /**
     * Sets workordernum
     *
     * @param string $workordernum workordernum
     *
     * @return $this
     */
    public function setWorkordernum($workordernum)
    {
        $this->container['workordernum'] = $workordernum;

        return $this;
    }

    /**
     * Gets chargeno
     *
     * @return string
     */
    public function getChargeno()
    {
        return $this->container['chargeno'];
    }

    /**
     * Sets chargeno
     *
     * @param string $chargeno chargeno
     *
     * @return $this
     */
    public function setChargeno($chargeno)
    {
        $this->container['chargeno'] = $chargeno;

        return $this;
    }

    /**
     * Gets custglno
     *
     * @return string
     */
    public function getCustglno()
    {
        return $this->container['custglno'];
    }

    /**
     * Sets custglno
     *
     * @param string $custglno custglno
     *
     * @return $this
     */
    public function setCustglno($custglno)
    {
        $this->container['custglno'] = $custglno;

        return $this;
    }

    /**
     * Gets promisedt
     *
     * @return \DateTime
     */
    public function getPromisedt()
    {
        return $this->container['promisedt'];
    }

    /**
     * Sets promisedt
     *
     * @param \DateTime $promisedt promisedt
     *
     * @return $this
     */
    public function setPromisedt($promisedt)
    {
        $this->container['promisedt'] = $promisedt;

        return $this;
    }

    /**
     * Gets taxablefl
     *
     * @return bool
     */
    public function getTaxablefl()
    {
        return $this->container['taxablefl'];
    }

    /**
     * Sets taxablefl
     *
     * @param bool $taxablefl taxablefl
     *
     * @return $this
     */
    public function setTaxablefl($taxablefl)
    {
        $this->container['taxablefl'] = $taxablefl;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets srnotesprntfl
     *
     * @return string
     */
    public function getSrnotesprntfl()
    {
        return $this->container['srnotesprntfl'];
    }

    /**
     * Sets srnotesprntfl
     *
     * @param string $srnotesprntfl srnotesprntfl
     *
     * @return $this
     */
    public function setSrnotesprntfl($srnotesprntfl)
    {
        $this->container['srnotesprntfl'] = $srnotesprntfl;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets pickprtfl
     *
     * @return string
     */
    public function getPickprtfl()
    {
        return $this->container['pickprtfl'];
    }

    /**
     * Sets pickprtfl
     *
     * @param string $pickprtfl pickprtfl
     *
     * @return $this
     */
    public function setPickprtfl($pickprtfl)
    {
        $this->container['pickprtfl'] = $pickprtfl;

        return $this;
    }

    /**
     * Gets user1
     *
     * @return string
     */
    public function getUser1()
    {
        return $this->container['user1'];
    }

    /**
     * Sets user1
     *
     * @param string $user1 user1
     *
     * @return $this
     */
    public function setUser1($user1)
    {
        $this->container['user1'] = $user1;

        return $this;
    }

    /**
     * Gets user2
     *
     * @return string
     */
    public function getUser2()
    {
        return $this->container['user2'];
    }

    /**
     * Sets user2
     *
     * @param string $user2 user2
     *
     * @return $this
     */
    public function setUser2($user2)
    {
        $this->container['user2'] = $user2;

        return $this;
    }

    /**
     * Gets user3
     *
     * @return string
     */
    public function getUser3()
    {
        return $this->container['user3'];
    }

    /**
     * Sets user3
     *
     * @param string $user3 user3
     *
     * @return $this
     */
    public function setUser3($user3)
    {
        $this->container['user3'] = $user3;

        return $this;
    }

    /**
     * Gets user4
     *
     * @return string
     */
    public function getUser4()
    {
        return $this->container['user4'];
    }

    /**
     * Sets user4
     *
     * @param string $user4 user4
     *
     * @return $this
     */
    public function setUser4($user4)
    {
        $this->container['user4'] = $user4;

        return $this;
    }

    /**
     * Gets user5
     *
     * @return string
     */
    public function getUser5()
    {
        return $this->container['user5'];
    }

    /**
     * Sets user5
     *
     * @param string $user5 user5
     *
     * @return $this
     */
    public function setUser5($user5)
    {
        $this->container['user5'] = $user5;

        return $this;
    }

    /**
     * Gets user6
     *
     * @return double
     */
    public function getUser6()
    {
        return $this->container['user6'];
    }

    /**
     * Sets user6
     *
     * @param double $user6 user6
     *
     * @return $this
     */
    public function setUser6($user6)
    {
        $this->container['user6'] = $user6;

        return $this;
    }

    /**
     * Gets user7
     *
     * @return double
     */
    public function getUser7()
    {
        return $this->container['user7'];
    }

    /**
     * Sets user7
     *
     * @param double $user7 user7
     *
     * @return $this
     */
    public function setUser7($user7)
    {
        $this->container['user7'] = $user7;

        return $this;
    }

    /**
     * Gets user8
     *
     * @return \DateTime
     */
    public function getUser8()
    {
        return $this->container['user8'];
    }

    /**
     * Sets user8
     *
     * @param \DateTime $user8 user8
     *
     * @return $this
     */
    public function setUser8($user8)
    {
        $this->container['user8'] = $user8;

        return $this;
    }

    /**
     * Gets user9
     *
     * @return \DateTime
     */
    public function getUser9()
    {
        return $this->container['user9'];
    }

    /**
     * Sets user9
     *
     * @param \DateTime $user9 user9
     *
     * @return $this
     */
    public function setUser9($user9)
    {
        $this->container['user9'] = $user9;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


