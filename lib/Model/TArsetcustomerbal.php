<?php
/**
 * TArsetcustomerbal
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TArsetcustomerbal Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TArsetcustomerbal implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-arsetcustomerbal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cono' => 'int',
        'custno' => 'double',
        'shipto' => 'string',
        'bodtype' => 'string',
        'boddatetm' => 'string',
        'periodbal1' => 'double',
        'periodbal2' => 'double',
        'periodbal3' => 'double',
        'periodbal4' => 'double',
        'periodbal5' => 'double',
        'periodbal6' => 'double',
        'customerbal' => 'double',
        'lastpayamt' => 'double',
        'lastpaydate' => '\DateTime',
        'avgdaystopay' => 'int',
        'user1' => 'string',
        'user2' => 'string',
        'user3' => 'string',
        'user4' => 'string',
        'user5' => 'string',
        'user6' => 'double',
        'user7' => 'double',
        'user8' => '\DateTime',
        'user9' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cono' => 'int64',
        'custno' => 'double',
        'shipto' => null,
        'bodtype' => null,
        'boddatetm' => null,
        'periodbal1' => 'double',
        'periodbal2' => 'double',
        'periodbal3' => 'double',
        'periodbal4' => 'double',
        'periodbal5' => 'double',
        'periodbal6' => 'double',
        'customerbal' => 'double',
        'lastpayamt' => 'double',
        'lastpaydate' => 'date',
        'avgdaystopay' => 'int64',
        'user1' => null,
        'user2' => null,
        'user3' => null,
        'user4' => null,
        'user5' => null,
        'user6' => 'double',
        'user7' => 'double',
        'user8' => 'date',
        'user9' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cono' => 'cono',
        'custno' => 'custno',
        'shipto' => 'shipto',
        'bodtype' => 'bodtype',
        'boddatetm' => 'boddatetm',
        'periodbal1' => 'periodbal1',
        'periodbal2' => 'periodbal2',
        'periodbal3' => 'periodbal3',
        'periodbal4' => 'periodbal4',
        'periodbal5' => 'periodbal5',
        'periodbal6' => 'periodbal6',
        'customerbal' => 'customerbal',
        'lastpayamt' => 'lastpayamt',
        'lastpaydate' => 'lastpaydate',
        'avgdaystopay' => 'avgdaystopay',
        'user1' => 'user1',
        'user2' => 'user2',
        'user3' => 'user3',
        'user4' => 'user4',
        'user5' => 'user5',
        'user6' => 'user6',
        'user7' => 'user7',
        'user8' => 'user8',
        'user9' => 'user9'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cono' => 'setCono',
        'custno' => 'setCustno',
        'shipto' => 'setShipto',
        'bodtype' => 'setBodtype',
        'boddatetm' => 'setBoddatetm',
        'periodbal1' => 'setPeriodbal1',
        'periodbal2' => 'setPeriodbal2',
        'periodbal3' => 'setPeriodbal3',
        'periodbal4' => 'setPeriodbal4',
        'periodbal5' => 'setPeriodbal5',
        'periodbal6' => 'setPeriodbal6',
        'customerbal' => 'setCustomerbal',
        'lastpayamt' => 'setLastpayamt',
        'lastpaydate' => 'setLastpaydate',
        'avgdaystopay' => 'setAvgdaystopay',
        'user1' => 'setUser1',
        'user2' => 'setUser2',
        'user3' => 'setUser3',
        'user4' => 'setUser4',
        'user5' => 'setUser5',
        'user6' => 'setUser6',
        'user7' => 'setUser7',
        'user8' => 'setUser8',
        'user9' => 'setUser9'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cono' => 'getCono',
        'custno' => 'getCustno',
        'shipto' => 'getShipto',
        'bodtype' => 'getBodtype',
        'boddatetm' => 'getBoddatetm',
        'periodbal1' => 'getPeriodbal1',
        'periodbal2' => 'getPeriodbal2',
        'periodbal3' => 'getPeriodbal3',
        'periodbal4' => 'getPeriodbal4',
        'periodbal5' => 'getPeriodbal5',
        'periodbal6' => 'getPeriodbal6',
        'customerbal' => 'getCustomerbal',
        'lastpayamt' => 'getLastpayamt',
        'lastpaydate' => 'getLastpaydate',
        'avgdaystopay' => 'getAvgdaystopay',
        'user1' => 'getUser1',
        'user2' => 'getUser2',
        'user3' => 'getUser3',
        'user4' => 'getUser4',
        'user5' => 'getUser5',
        'user6' => 'getUser6',
        'user7' => 'getUser7',
        'user8' => 'getUser8',
        'user9' => 'getUser9'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cono'] = isset($data['cono']) ? $data['cono'] : null;
        $this->container['custno'] = isset($data['custno']) ? $data['custno'] : null;
        $this->container['shipto'] = isset($data['shipto']) ? $data['shipto'] : null;
        $this->container['bodtype'] = isset($data['bodtype']) ? $data['bodtype'] : null;
        $this->container['boddatetm'] = isset($data['boddatetm']) ? $data['boddatetm'] : null;
        $this->container['periodbal1'] = isset($data['periodbal1']) ? $data['periodbal1'] : null;
        $this->container['periodbal2'] = isset($data['periodbal2']) ? $data['periodbal2'] : null;
        $this->container['periodbal3'] = isset($data['periodbal3']) ? $data['periodbal3'] : null;
        $this->container['periodbal4'] = isset($data['periodbal4']) ? $data['periodbal4'] : null;
        $this->container['periodbal5'] = isset($data['periodbal5']) ? $data['periodbal5'] : null;
        $this->container['periodbal6'] = isset($data['periodbal6']) ? $data['periodbal6'] : null;
        $this->container['customerbal'] = isset($data['customerbal']) ? $data['customerbal'] : null;
        $this->container['lastpayamt'] = isset($data['lastpayamt']) ? $data['lastpayamt'] : null;
        $this->container['lastpaydate'] = isset($data['lastpaydate']) ? $data['lastpaydate'] : null;
        $this->container['avgdaystopay'] = isset($data['avgdaystopay']) ? $data['avgdaystopay'] : null;
        $this->container['user1'] = isset($data['user1']) ? $data['user1'] : null;
        $this->container['user2'] = isset($data['user2']) ? $data['user2'] : null;
        $this->container['user3'] = isset($data['user3']) ? $data['user3'] : null;
        $this->container['user4'] = isset($data['user4']) ? $data['user4'] : null;
        $this->container['user5'] = isset($data['user5']) ? $data['user5'] : null;
        $this->container['user6'] = isset($data['user6']) ? $data['user6'] : null;
        $this->container['user7'] = isset($data['user7']) ? $data['user7'] : null;
        $this->container['user8'] = isset($data['user8']) ? $data['user8'] : null;
        $this->container['user9'] = isset($data['user9']) ? $data['user9'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cono
     *
     * @return int
     */
    public function getCono()
    {
        return $this->container['cono'];
    }

    /**
     * Sets cono
     *
     * @param int $cono cono
     *
     * @return $this
     */
    public function setCono($cono)
    {
        $this->container['cono'] = $cono;

        return $this;
    }

    /**
     * Gets custno
     *
     * @return double
     */
    public function getCustno()
    {
        return $this->container['custno'];
    }

    /**
     * Sets custno
     *
     * @param double $custno custno
     *
     * @return $this
     */
    public function setCustno($custno)
    {
        $this->container['custno'] = $custno;

        return $this;
    }

    /**
     * Gets shipto
     *
     * @return string
     */
    public function getShipto()
    {
        return $this->container['shipto'];
    }

    /**
     * Sets shipto
     *
     * @param string $shipto shipto
     *
     * @return $this
     */
    public function setShipto($shipto)
    {
        $this->container['shipto'] = $shipto;

        return $this;
    }

    /**
     * Gets bodtype
     *
     * @return string
     */
    public function getBodtype()
    {
        return $this->container['bodtype'];
    }

    /**
     * Sets bodtype
     *
     * @param string $bodtype bodtype
     *
     * @return $this
     */
    public function setBodtype($bodtype)
    {
        $this->container['bodtype'] = $bodtype;

        return $this;
    }

    /**
     * Gets boddatetm
     *
     * @return string
     */
    public function getBoddatetm()
    {
        return $this->container['boddatetm'];
    }

    /**
     * Sets boddatetm
     *
     * @param string $boddatetm boddatetm
     *
     * @return $this
     */
    public function setBoddatetm($boddatetm)
    {
        $this->container['boddatetm'] = $boddatetm;

        return $this;
    }

    /**
     * Gets periodbal1
     *
     * @return double
     */
    public function getPeriodbal1()
    {
        return $this->container['periodbal1'];
    }

    /**
     * Sets periodbal1
     *
     * @param double $periodbal1 periodbal1
     *
     * @return $this
     */
    public function setPeriodbal1($periodbal1)
    {
        $this->container['periodbal1'] = $periodbal1;

        return $this;
    }

    /**
     * Gets periodbal2
     *
     * @return double
     */
    public function getPeriodbal2()
    {
        return $this->container['periodbal2'];
    }

    /**
     * Sets periodbal2
     *
     * @param double $periodbal2 periodbal2
     *
     * @return $this
     */
    public function setPeriodbal2($periodbal2)
    {
        $this->container['periodbal2'] = $periodbal2;

        return $this;
    }

    /**
     * Gets periodbal3
     *
     * @return double
     */
    public function getPeriodbal3()
    {
        return $this->container['periodbal3'];
    }

    /**
     * Sets periodbal3
     *
     * @param double $periodbal3 periodbal3
     *
     * @return $this
     */
    public function setPeriodbal3($periodbal3)
    {
        $this->container['periodbal3'] = $periodbal3;

        return $this;
    }

    /**
     * Gets periodbal4
     *
     * @return double
     */
    public function getPeriodbal4()
    {
        return $this->container['periodbal4'];
    }

    /**
     * Sets periodbal4
     *
     * @param double $periodbal4 periodbal4
     *
     * @return $this
     */
    public function setPeriodbal4($periodbal4)
    {
        $this->container['periodbal4'] = $periodbal4;

        return $this;
    }

    /**
     * Gets periodbal5
     *
     * @return double
     */
    public function getPeriodbal5()
    {
        return $this->container['periodbal5'];
    }

    /**
     * Sets periodbal5
     *
     * @param double $periodbal5 periodbal5
     *
     * @return $this
     */
    public function setPeriodbal5($periodbal5)
    {
        $this->container['periodbal5'] = $periodbal5;

        return $this;
    }

    /**
     * Gets periodbal6
     *
     * @return double
     */
    public function getPeriodbal6()
    {
        return $this->container['periodbal6'];
    }

    /**
     * Sets periodbal6
     *
     * @param double $periodbal6 periodbal6
     *
     * @return $this
     */
    public function setPeriodbal6($periodbal6)
    {
        $this->container['periodbal6'] = $periodbal6;

        return $this;
    }

    /**
     * Gets customerbal
     *
     * @return double
     */
    public function getCustomerbal()
    {
        return $this->container['customerbal'];
    }

    /**
     * Sets customerbal
     *
     * @param double $customerbal customerbal
     *
     * @return $this
     */
    public function setCustomerbal($customerbal)
    {
        $this->container['customerbal'] = $customerbal;

        return $this;
    }

    /**
     * Gets lastpayamt
     *
     * @return double
     */
    public function getLastpayamt()
    {
        return $this->container['lastpayamt'];
    }

    /**
     * Sets lastpayamt
     *
     * @param double $lastpayamt lastpayamt
     *
     * @return $this
     */
    public function setLastpayamt($lastpayamt)
    {
        $this->container['lastpayamt'] = $lastpayamt;

        return $this;
    }

    /**
     * Gets lastpaydate
     *
     * @return \DateTime
     */
    public function getLastpaydate()
    {
        return $this->container['lastpaydate'];
    }

    /**
     * Sets lastpaydate
     *
     * @param \DateTime $lastpaydate lastpaydate
     *
     * @return $this
     */
    public function setLastpaydate($lastpaydate)
    {
        $this->container['lastpaydate'] = $lastpaydate;

        return $this;
    }

    /**
     * Gets avgdaystopay
     *
     * @return int
     */
    public function getAvgdaystopay()
    {
        return $this->container['avgdaystopay'];
    }

    /**
     * Sets avgdaystopay
     *
     * @param int $avgdaystopay avgdaystopay
     *
     * @return $this
     */
    public function setAvgdaystopay($avgdaystopay)
    {
        $this->container['avgdaystopay'] = $avgdaystopay;

        return $this;
    }

    /**
     * Gets user1
     *
     * @return string
     */
    public function getUser1()
    {
        return $this->container['user1'];
    }

    /**
     * Sets user1
     *
     * @param string $user1 user1
     *
     * @return $this
     */
    public function setUser1($user1)
    {
        $this->container['user1'] = $user1;

        return $this;
    }

    /**
     * Gets user2
     *
     * @return string
     */
    public function getUser2()
    {
        return $this->container['user2'];
    }

    /**
     * Sets user2
     *
     * @param string $user2 user2
     *
     * @return $this
     */
    public function setUser2($user2)
    {
        $this->container['user2'] = $user2;

        return $this;
    }

    /**
     * Gets user3
     *
     * @return string
     */
    public function getUser3()
    {
        return $this->container['user3'];
    }

    /**
     * Sets user3
     *
     * @param string $user3 user3
     *
     * @return $this
     */
    public function setUser3($user3)
    {
        $this->container['user3'] = $user3;

        return $this;
    }

    /**
     * Gets user4
     *
     * @return string
     */
    public function getUser4()
    {
        return $this->container['user4'];
    }

    /**
     * Sets user4
     *
     * @param string $user4 user4
     *
     * @return $this
     */
    public function setUser4($user4)
    {
        $this->container['user4'] = $user4;

        return $this;
    }

    /**
     * Gets user5
     *
     * @return string
     */
    public function getUser5()
    {
        return $this->container['user5'];
    }

    /**
     * Sets user5
     *
     * @param string $user5 user5
     *
     * @return $this
     */
    public function setUser5($user5)
    {
        $this->container['user5'] = $user5;

        return $this;
    }

    /**
     * Gets user6
     *
     * @return double
     */
    public function getUser6()
    {
        return $this->container['user6'];
    }

    /**
     * Sets user6
     *
     * @param double $user6 user6
     *
     * @return $this
     */
    public function setUser6($user6)
    {
        $this->container['user6'] = $user6;

        return $this;
    }

    /**
     * Gets user7
     *
     * @return double
     */
    public function getUser7()
    {
        return $this->container['user7'];
    }

    /**
     * Sets user7
     *
     * @param double $user7 user7
     *
     * @return $this
     */
    public function setUser7($user7)
    {
        $this->container['user7'] = $user7;

        return $this;
    }

    /**
     * Gets user8
     *
     * @return \DateTime
     */
    public function getUser8()
    {
        return $this->container['user8'];
    }

    /**
     * Sets user8
     *
     * @param \DateTime $user8 user8
     *
     * @return $this
     */
    public function setUser8($user8)
    {
        $this->container['user8'] = $user8;

        return $this;
    }

    /**
     * Gets user9
     *
     * @return \DateTime
     */
    public function getUser9()
    {
        return $this->container['user9'];
    }

    /**
     * Sets user9
     *
     * @param \DateTime $user9 user9
     *
     * @return $this
     */
    public function setUser9($user9)
    {
        $this->container['user9'] = $user9;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


