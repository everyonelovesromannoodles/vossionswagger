<?php
/**
 * TProductrestrictiondata
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TProductrestrictiondata Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TProductrestrictiondata implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-productrestrictiondata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'prod' => 'string',
        'productname' => 'string',
        'itemwhse' => 'string',
        'shipdt' => '\DateTime',
        'shipto' => 'string',
        'shiptocity' => 'string',
        'shiptostate' => 'string',
        'shiptozip' => 'string',
        'shiptocountry' => 'string',
        'shiptoterritory' => 'string',
        'shiptogeocode' => 'string',
        'restrictedflag' => 'bool',
        'userfield' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'prod' => null,
        'productname' => null,
        'itemwhse' => null,
        'shipdt' => 'date',
        'shipto' => null,
        'shiptocity' => null,
        'shiptostate' => null,
        'shiptozip' => null,
        'shiptocountry' => null,
        'shiptoterritory' => null,
        'shiptogeocode' => null,
        'restrictedflag' => null,
        'userfield' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'prod' => 'prod',
        'productname' => 'productname',
        'itemwhse' => 'itemwhse',
        'shipdt' => 'shipdt',
        'shipto' => 'shipto',
        'shiptocity' => 'shiptocity',
        'shiptostate' => 'shiptostate',
        'shiptozip' => 'shiptozip',
        'shiptocountry' => 'shiptocountry',
        'shiptoterritory' => 'shiptoterritory',
        'shiptogeocode' => 'shiptogeocode',
        'restrictedflag' => 'restrictedflag',
        'userfield' => 'userfield'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'prod' => 'setProd',
        'productname' => 'setProductname',
        'itemwhse' => 'setItemwhse',
        'shipdt' => 'setShipdt',
        'shipto' => 'setShipto',
        'shiptocity' => 'setShiptocity',
        'shiptostate' => 'setShiptostate',
        'shiptozip' => 'setShiptozip',
        'shiptocountry' => 'setShiptocountry',
        'shiptoterritory' => 'setShiptoterritory',
        'shiptogeocode' => 'setShiptogeocode',
        'restrictedflag' => 'setRestrictedflag',
        'userfield' => 'setUserfield'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'prod' => 'getProd',
        'productname' => 'getProductname',
        'itemwhse' => 'getItemwhse',
        'shipdt' => 'getShipdt',
        'shipto' => 'getShipto',
        'shiptocity' => 'getShiptocity',
        'shiptostate' => 'getShiptostate',
        'shiptozip' => 'getShiptozip',
        'shiptocountry' => 'getShiptocountry',
        'shiptoterritory' => 'getShiptoterritory',
        'shiptogeocode' => 'getShiptogeocode',
        'restrictedflag' => 'getRestrictedflag',
        'userfield' => 'getUserfield'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['prod'] = isset($data['prod']) ? $data['prod'] : null;
        $this->container['productname'] = isset($data['productname']) ? $data['productname'] : null;
        $this->container['itemwhse'] = isset($data['itemwhse']) ? $data['itemwhse'] : null;
        $this->container['shipdt'] = isset($data['shipdt']) ? $data['shipdt'] : null;
        $this->container['shipto'] = isset($data['shipto']) ? $data['shipto'] : null;
        $this->container['shiptocity'] = isset($data['shiptocity']) ? $data['shiptocity'] : null;
        $this->container['shiptostate'] = isset($data['shiptostate']) ? $data['shiptostate'] : null;
        $this->container['shiptozip'] = isset($data['shiptozip']) ? $data['shiptozip'] : null;
        $this->container['shiptocountry'] = isset($data['shiptocountry']) ? $data['shiptocountry'] : null;
        $this->container['shiptoterritory'] = isset($data['shiptoterritory']) ? $data['shiptoterritory'] : null;
        $this->container['shiptogeocode'] = isset($data['shiptogeocode']) ? $data['shiptogeocode'] : null;
        $this->container['restrictedflag'] = isset($data['restrictedflag']) ? $data['restrictedflag'] : null;
        $this->container['userfield'] = isset($data['userfield']) ? $data['userfield'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets prod
     *
     * @return string
     */
    public function getProd()
    {
        return $this->container['prod'];
    }

    /**
     * Sets prod
     *
     * @param string $prod prod
     *
     * @return $this
     */
    public function setProd($prod)
    {
        $this->container['prod'] = $prod;

        return $this;
    }

    /**
     * Gets productname
     *
     * @return string
     */
    public function getProductname()
    {
        return $this->container['productname'];
    }

    /**
     * Sets productname
     *
     * @param string $productname productname
     *
     * @return $this
     */
    public function setProductname($productname)
    {
        $this->container['productname'] = $productname;

        return $this;
    }

    /**
     * Gets itemwhse
     *
     * @return string
     */
    public function getItemwhse()
    {
        return $this->container['itemwhse'];
    }

    /**
     * Sets itemwhse
     *
     * @param string $itemwhse itemwhse
     *
     * @return $this
     */
    public function setItemwhse($itemwhse)
    {
        $this->container['itemwhse'] = $itemwhse;

        return $this;
    }

    /**
     * Gets shipdt
     *
     * @return \DateTime
     */
    public function getShipdt()
    {
        return $this->container['shipdt'];
    }

    /**
     * Sets shipdt
     *
     * @param \DateTime $shipdt shipdt
     *
     * @return $this
     */
    public function setShipdt($shipdt)
    {
        $this->container['shipdt'] = $shipdt;

        return $this;
    }

    /**
     * Gets shipto
     *
     * @return string
     */
    public function getShipto()
    {
        return $this->container['shipto'];
    }

    /**
     * Sets shipto
     *
     * @param string $shipto shipto
     *
     * @return $this
     */
    public function setShipto($shipto)
    {
        $this->container['shipto'] = $shipto;

        return $this;
    }

    /**
     * Gets shiptocity
     *
     * @return string
     */
    public function getShiptocity()
    {
        return $this->container['shiptocity'];
    }

    /**
     * Sets shiptocity
     *
     * @param string $shiptocity shiptocity
     *
     * @return $this
     */
    public function setShiptocity($shiptocity)
    {
        $this->container['shiptocity'] = $shiptocity;

        return $this;
    }

    /**
     * Gets shiptostate
     *
     * @return string
     */
    public function getShiptostate()
    {
        return $this->container['shiptostate'];
    }

    /**
     * Sets shiptostate
     *
     * @param string $shiptostate shiptostate
     *
     * @return $this
     */
    public function setShiptostate($shiptostate)
    {
        $this->container['shiptostate'] = $shiptostate;

        return $this;
    }

    /**
     * Gets shiptozip
     *
     * @return string
     */
    public function getShiptozip()
    {
        return $this->container['shiptozip'];
    }

    /**
     * Sets shiptozip
     *
     * @param string $shiptozip shiptozip
     *
     * @return $this
     */
    public function setShiptozip($shiptozip)
    {
        $this->container['shiptozip'] = $shiptozip;

        return $this;
    }

    /**
     * Gets shiptocountry
     *
     * @return string
     */
    public function getShiptocountry()
    {
        return $this->container['shiptocountry'];
    }

    /**
     * Sets shiptocountry
     *
     * @param string $shiptocountry shiptocountry
     *
     * @return $this
     */
    public function setShiptocountry($shiptocountry)
    {
        $this->container['shiptocountry'] = $shiptocountry;

        return $this;
    }

    /**
     * Gets shiptoterritory
     *
     * @return string
     */
    public function getShiptoterritory()
    {
        return $this->container['shiptoterritory'];
    }

    /**
     * Sets shiptoterritory
     *
     * @param string $shiptoterritory shiptoterritory
     *
     * @return $this
     */
    public function setShiptoterritory($shiptoterritory)
    {
        $this->container['shiptoterritory'] = $shiptoterritory;

        return $this;
    }

    /**
     * Gets shiptogeocode
     *
     * @return string
     */
    public function getShiptogeocode()
    {
        return $this->container['shiptogeocode'];
    }

    /**
     * Sets shiptogeocode
     *
     * @param string $shiptogeocode shiptogeocode
     *
     * @return $this
     */
    public function setShiptogeocode($shiptogeocode)
    {
        $this->container['shiptogeocode'] = $shiptogeocode;

        return $this;
    }

    /**
     * Gets restrictedflag
     *
     * @return bool
     */
    public function getRestrictedflag()
    {
        return $this->container['restrictedflag'];
    }

    /**
     * Sets restrictedflag
     *
     * @param bool $restrictedflag restrictedflag
     *
     * @return $this
     */
    public function setRestrictedflag($restrictedflag)
    {
        $this->container['restrictedflag'] = $restrictedflag;

        return $this;
    }

    /**
     * Gets userfield
     *
     * @return string
     */
    public function getUserfield()
    {
        return $this->container['userfield'];
    }

    /**
     * Sets userfield
     *
     * @param string $userfield userfield
     *
     * @return $this
     */
    public function setUserfield($userfield)
    {
        $this->container['userfield'] = $userfield;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


