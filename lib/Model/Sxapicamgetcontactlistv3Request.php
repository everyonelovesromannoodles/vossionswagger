<?php
/**
 * Sxapicamgetcontactlistv3Request
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Sxapicamgetcontactlistv3Request Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Sxapicamgetcontactlistv3Request implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapicamgetcontactlistv3_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company_number' => 'int',
        'operator_init' => 'string',
        'operator_password' => 'string',
        'contact_id' => 'double',
        'subject_role_type' => 'string',
        'subject_primary_key' => 'string',
        'subject_secondary_key' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'contact_type' => 'string',
        'priority' => 'int',
        'sort' => 'string',
        'record_limit' => 'int',
        'extract_notes_flag' => 'bool',
        'notes_delimiter' => 'string',
        't_infieldvalue' => '\Swagger\Client\Model\TInfieldvalueReq'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'company_number' => 'int64',
        'operator_init' => null,
        'operator_password' => null,
        'contact_id' => 'double',
        'subject_role_type' => null,
        'subject_primary_key' => null,
        'subject_secondary_key' => null,
        'first_name' => null,
        'last_name' => null,
        'contact_type' => null,
        'priority' => 'int64',
        'sort' => null,
        'record_limit' => 'int64',
        'extract_notes_flag' => null,
        'notes_delimiter' => null,
        't_infieldvalue' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_number' => 'companyNumber',
        'operator_init' => 'operatorInit',
        'operator_password' => 'operatorPassword',
        'contact_id' => 'contactID',
        'subject_role_type' => 'subjectRoleType',
        'subject_primary_key' => 'subjectPrimaryKey',
        'subject_secondary_key' => 'subjectSecondaryKey',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'contact_type' => 'contactType',
        'priority' => 'priority',
        'sort' => 'sort',
        'record_limit' => 'recordLimit',
        'extract_notes_flag' => 'extractNotesFlag',
        'notes_delimiter' => 'notesDelimiter',
        't_infieldvalue' => 'tInfieldvalue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_number' => 'setCompanyNumber',
        'operator_init' => 'setOperatorInit',
        'operator_password' => 'setOperatorPassword',
        'contact_id' => 'setContactId',
        'subject_role_type' => 'setSubjectRoleType',
        'subject_primary_key' => 'setSubjectPrimaryKey',
        'subject_secondary_key' => 'setSubjectSecondaryKey',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'contact_type' => 'setContactType',
        'priority' => 'setPriority',
        'sort' => 'setSort',
        'record_limit' => 'setRecordLimit',
        'extract_notes_flag' => 'setExtractNotesFlag',
        'notes_delimiter' => 'setNotesDelimiter',
        't_infieldvalue' => 'setTInfieldvalue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_number' => 'getCompanyNumber',
        'operator_init' => 'getOperatorInit',
        'operator_password' => 'getOperatorPassword',
        'contact_id' => 'getContactId',
        'subject_role_type' => 'getSubjectRoleType',
        'subject_primary_key' => 'getSubjectPrimaryKey',
        'subject_secondary_key' => 'getSubjectSecondaryKey',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'contact_type' => 'getContactType',
        'priority' => 'getPriority',
        'sort' => 'getSort',
        'record_limit' => 'getRecordLimit',
        'extract_notes_flag' => 'getExtractNotesFlag',
        'notes_delimiter' => 'getNotesDelimiter',
        't_infieldvalue' => 'getTInfieldvalue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_number'] = isset($data['company_number']) ? $data['company_number'] : null;
        $this->container['operator_init'] = isset($data['operator_init']) ? $data['operator_init'] : null;
        $this->container['operator_password'] = isset($data['operator_password']) ? $data['operator_password'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['subject_role_type'] = isset($data['subject_role_type']) ? $data['subject_role_type'] : null;
        $this->container['subject_primary_key'] = isset($data['subject_primary_key']) ? $data['subject_primary_key'] : null;
        $this->container['subject_secondary_key'] = isset($data['subject_secondary_key']) ? $data['subject_secondary_key'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['contact_type'] = isset($data['contact_type']) ? $data['contact_type'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
        $this->container['record_limit'] = isset($data['record_limit']) ? $data['record_limit'] : null;
        $this->container['extract_notes_flag'] = isset($data['extract_notes_flag']) ? $data['extract_notes_flag'] : null;
        $this->container['notes_delimiter'] = isset($data['notes_delimiter']) ? $data['notes_delimiter'] : null;
        $this->container['t_infieldvalue'] = isset($data['t_infieldvalue']) ? $data['t_infieldvalue'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_number
     *
     * @return int
     */
    public function getCompanyNumber()
    {
        return $this->container['company_number'];
    }

    /**
     * Sets company_number
     *
     * @param int $company_number company_number
     *
     * @return $this
     */
    public function setCompanyNumber($company_number)
    {
        $this->container['company_number'] = $company_number;

        return $this;
    }

    /**
     * Gets operator_init
     *
     * @return string
     */
    public function getOperatorInit()
    {
        return $this->container['operator_init'];
    }

    /**
     * Sets operator_init
     *
     * @param string $operator_init operator_init
     *
     * @return $this
     */
    public function setOperatorInit($operator_init)
    {
        $this->container['operator_init'] = $operator_init;

        return $this;
    }

    /**
     * Gets operator_password
     *
     * @return string
     */
    public function getOperatorPassword()
    {
        return $this->container['operator_password'];
    }

    /**
     * Sets operator_password
     *
     * @param string $operator_password operator_password
     *
     * @return $this
     */
    public function setOperatorPassword($operator_password)
    {
        $this->container['operator_password'] = $operator_password;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return double
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param double $contact_id contact_id
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets subject_role_type
     *
     * @return string
     */
    public function getSubjectRoleType()
    {
        return $this->container['subject_role_type'];
    }

    /**
     * Sets subject_role_type
     *
     * @param string $subject_role_type subject_role_type
     *
     * @return $this
     */
    public function setSubjectRoleType($subject_role_type)
    {
        $this->container['subject_role_type'] = $subject_role_type;

        return $this;
    }

    /**
     * Gets subject_primary_key
     *
     * @return string
     */
    public function getSubjectPrimaryKey()
    {
        return $this->container['subject_primary_key'];
    }

    /**
     * Sets subject_primary_key
     *
     * @param string $subject_primary_key subject_primary_key
     *
     * @return $this
     */
    public function setSubjectPrimaryKey($subject_primary_key)
    {
        $this->container['subject_primary_key'] = $subject_primary_key;

        return $this;
    }

    /**
     * Gets subject_secondary_key
     *
     * @return string
     */
    public function getSubjectSecondaryKey()
    {
        return $this->container['subject_secondary_key'];
    }

    /**
     * Sets subject_secondary_key
     *
     * @param string $subject_secondary_key subject_secondary_key
     *
     * @return $this
     */
    public function setSubjectSecondaryKey($subject_secondary_key)
    {
        $this->container['subject_secondary_key'] = $subject_secondary_key;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets contact_type
     *
     * @return string
     */
    public function getContactType()
    {
        return $this->container['contact_type'];
    }

    /**
     * Sets contact_type
     *
     * @param string $contact_type contact_type
     *
     * @return $this
     */
    public function setContactType($contact_type)
    {
        $this->container['contact_type'] = $contact_type;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return string
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param string $sort sort
     *
     * @return $this
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets record_limit
     *
     * @return int
     */
    public function getRecordLimit()
    {
        return $this->container['record_limit'];
    }

    /**
     * Sets record_limit
     *
     * @param int $record_limit record_limit
     *
     * @return $this
     */
    public function setRecordLimit($record_limit)
    {
        $this->container['record_limit'] = $record_limit;

        return $this;
    }

    /**
     * Gets extract_notes_flag
     *
     * @return bool
     */
    public function getExtractNotesFlag()
    {
        return $this->container['extract_notes_flag'];
    }

    /**
     * Sets extract_notes_flag
     *
     * @param bool $extract_notes_flag extract_notes_flag
     *
     * @return $this
     */
    public function setExtractNotesFlag($extract_notes_flag)
    {
        $this->container['extract_notes_flag'] = $extract_notes_flag;

        return $this;
    }

    /**
     * Gets notes_delimiter
     *
     * @return string
     */
    public function getNotesDelimiter()
    {
        return $this->container['notes_delimiter'];
    }

    /**
     * Sets notes_delimiter
     *
     * @param string $notes_delimiter notes_delimiter
     *
     * @return $this
     */
    public function setNotesDelimiter($notes_delimiter)
    {
        $this->container['notes_delimiter'] = $notes_delimiter;

        return $this;
    }

    /**
     * Gets t_infieldvalue
     *
     * @return \Swagger\Client\Model\TInfieldvalueReq
     */
    public function getTInfieldvalue()
    {
        return $this->container['t_infieldvalue'];
    }

    /**
     * Sets t_infieldvalue
     *
     * @param \Swagger\Client\Model\TInfieldvalueReq $t_infieldvalue t_infieldvalue
     *
     * @return $this
     */
    public function setTInfieldvalue($t_infieldvalue)
    {
        $this->container['t_infieldvalue'] = $t_infieldvalue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


