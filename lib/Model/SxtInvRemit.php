<?php
/**
 * SxtInvRemit
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SxtInvRemit Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SxtInvRemit implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxt_inv_remit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'addr1' => 'string',
        'addr2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zipcd' => 'string',
        'phone' => 'string',
        'dunsno' => 'string',
        'erpid' => 'string',
        'user1' => 'string',
        'user2' => 'string',
        'addr3' => 'string',
        'cityexp' => 'string',
        'fedtaxid' => 'string',
        'countrycd' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'addr1' => null,
        'addr2' => null,
        'city' => null,
        'state' => null,
        'zipcd' => null,
        'phone' => null,
        'dunsno' => null,
        'erpid' => null,
        'user1' => null,
        'user2' => null,
        'addr3' => null,
        'cityexp' => null,
        'fedtaxid' => null,
        'countrycd' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'addr1' => 'addr1',
        'addr2' => 'addr2',
        'city' => 'city',
        'state' => 'state',
        'zipcd' => 'zipcd',
        'phone' => 'phone',
        'dunsno' => 'dunsno',
        'erpid' => 'erpid',
        'user1' => 'user1',
        'user2' => 'user2',
        'addr3' => 'addr3',
        'cityexp' => 'cityexp',
        'fedtaxid' => 'fedtaxid',
        'countrycd' => 'countrycd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'addr1' => 'setAddr1',
        'addr2' => 'setAddr2',
        'city' => 'setCity',
        'state' => 'setState',
        'zipcd' => 'setZipcd',
        'phone' => 'setPhone',
        'dunsno' => 'setDunsno',
        'erpid' => 'setErpid',
        'user1' => 'setUser1',
        'user2' => 'setUser2',
        'addr3' => 'setAddr3',
        'cityexp' => 'setCityexp',
        'fedtaxid' => 'setFedtaxid',
        'countrycd' => 'setCountrycd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'addr1' => 'getAddr1',
        'addr2' => 'getAddr2',
        'city' => 'getCity',
        'state' => 'getState',
        'zipcd' => 'getZipcd',
        'phone' => 'getPhone',
        'dunsno' => 'getDunsno',
        'erpid' => 'getErpid',
        'user1' => 'getUser1',
        'user2' => 'getUser2',
        'addr3' => 'getAddr3',
        'cityexp' => 'getCityexp',
        'fedtaxid' => 'getFedtaxid',
        'countrycd' => 'getCountrycd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['addr1'] = isset($data['addr1']) ? $data['addr1'] : null;
        $this->container['addr2'] = isset($data['addr2']) ? $data['addr2'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['zipcd'] = isset($data['zipcd']) ? $data['zipcd'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['dunsno'] = isset($data['dunsno']) ? $data['dunsno'] : null;
        $this->container['erpid'] = isset($data['erpid']) ? $data['erpid'] : null;
        $this->container['user1'] = isset($data['user1']) ? $data['user1'] : null;
        $this->container['user2'] = isset($data['user2']) ? $data['user2'] : null;
        $this->container['addr3'] = isset($data['addr3']) ? $data['addr3'] : null;
        $this->container['cityexp'] = isset($data['cityexp']) ? $data['cityexp'] : null;
        $this->container['fedtaxid'] = isset($data['fedtaxid']) ? $data['fedtaxid'] : null;
        $this->container['countrycd'] = isset($data['countrycd']) ? $data['countrycd'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets addr1
     *
     * @return string
     */
    public function getAddr1()
    {
        return $this->container['addr1'];
    }

    /**
     * Sets addr1
     *
     * @param string $addr1 addr1
     *
     * @return $this
     */
    public function setAddr1($addr1)
    {
        $this->container['addr1'] = $addr1;

        return $this;
    }

    /**
     * Gets addr2
     *
     * @return string
     */
    public function getAddr2()
    {
        return $this->container['addr2'];
    }

    /**
     * Sets addr2
     *
     * @param string $addr2 addr2
     *
     * @return $this
     */
    public function setAddr2($addr2)
    {
        $this->container['addr2'] = $addr2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zipcd
     *
     * @return string
     */
    public function getZipcd()
    {
        return $this->container['zipcd'];
    }

    /**
     * Sets zipcd
     *
     * @param string $zipcd zipcd
     *
     * @return $this
     */
    public function setZipcd($zipcd)
    {
        $this->container['zipcd'] = $zipcd;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets dunsno
     *
     * @return string
     */
    public function getDunsno()
    {
        return $this->container['dunsno'];
    }

    /**
     * Sets dunsno
     *
     * @param string $dunsno dunsno
     *
     * @return $this
     */
    public function setDunsno($dunsno)
    {
        $this->container['dunsno'] = $dunsno;

        return $this;
    }

    /**
     * Gets erpid
     *
     * @return string
     */
    public function getErpid()
    {
        return $this->container['erpid'];
    }

    /**
     * Sets erpid
     *
     * @param string $erpid erpid
     *
     * @return $this
     */
    public function setErpid($erpid)
    {
        $this->container['erpid'] = $erpid;

        return $this;
    }

    /**
     * Gets user1
     *
     * @return string
     */
    public function getUser1()
    {
        return $this->container['user1'];
    }

    /**
     * Sets user1
     *
     * @param string $user1 user1
     *
     * @return $this
     */
    public function setUser1($user1)
    {
        $this->container['user1'] = $user1;

        return $this;
    }

    /**
     * Gets user2
     *
     * @return string
     */
    public function getUser2()
    {
        return $this->container['user2'];
    }

    /**
     * Sets user2
     *
     * @param string $user2 user2
     *
     * @return $this
     */
    public function setUser2($user2)
    {
        $this->container['user2'] = $user2;

        return $this;
    }

    /**
     * Gets addr3
     *
     * @return string
     */
    public function getAddr3()
    {
        return $this->container['addr3'];
    }

    /**
     * Sets addr3
     *
     * @param string $addr3 addr3
     *
     * @return $this
     */
    public function setAddr3($addr3)
    {
        $this->container['addr3'] = $addr3;

        return $this;
    }

    /**
     * Gets cityexp
     *
     * @return string
     */
    public function getCityexp()
    {
        return $this->container['cityexp'];
    }

    /**
     * Sets cityexp
     *
     * @param string $cityexp cityexp
     *
     * @return $this
     */
    public function setCityexp($cityexp)
    {
        $this->container['cityexp'] = $cityexp;

        return $this;
    }

    /**
     * Gets fedtaxid
     *
     * @return string
     */
    public function getFedtaxid()
    {
        return $this->container['fedtaxid'];
    }

    /**
     * Sets fedtaxid
     *
     * @param string $fedtaxid fedtaxid
     *
     * @return $this
     */
    public function setFedtaxid($fedtaxid)
    {
        $this->container['fedtaxid'] = $fedtaxid;

        return $this;
    }

    /**
     * Gets countrycd
     *
     * @return string
     */
    public function getCountrycd()
    {
        return $this->container['countrycd'];
    }

    /**
     * Sets countrycd
     *
     * @param string $countrycd countrycd
     *
     * @return $this
     */
    public function setCountrycd($countrycd)
    {
        $this->container['countrycd'] = $countrycd;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


