<?php
/**
 * TInputccdata
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TInputccdata Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TInputccdata implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-inputccdata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cccustomerid' => 'string',
        'cccreditcardnbr' => 'string',
        'ccpaymenttype' => 'string',
        'cccreditcardexp' => 'string',
        'cccardholder' => 'string',
        'cccvv2' => 'string',
        'ccaddr1' => 'string',
        'ccaddr2' => 'string',
        'ccaddr3' => 'string',
        'ccaddr4' => 'string',
        'cccity' => 'string',
        'ccstate' => 'string',
        'cczip' => 'string',
        'cccountry' => 'string',
        'ccponumber' => 'string',
        'ccshiptozip' => 'string',
        'cctaxamount' => 'double',
        'ccauthorizationamount' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cccustomerid' => null,
        'cccreditcardnbr' => null,
        'ccpaymenttype' => null,
        'cccreditcardexp' => null,
        'cccardholder' => null,
        'cccvv2' => null,
        'ccaddr1' => null,
        'ccaddr2' => null,
        'ccaddr3' => null,
        'ccaddr4' => null,
        'cccity' => null,
        'ccstate' => null,
        'cczip' => null,
        'cccountry' => null,
        'ccponumber' => null,
        'ccshiptozip' => null,
        'cctaxamount' => 'double',
        'ccauthorizationamount' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cccustomerid' => 'cccustomerid',
        'cccreditcardnbr' => 'cccreditcardnbr',
        'ccpaymenttype' => 'ccpaymenttype',
        'cccreditcardexp' => 'cccreditcardexp',
        'cccardholder' => 'cccardholder',
        'cccvv2' => 'cccvv2',
        'ccaddr1' => 'ccaddr1',
        'ccaddr2' => 'ccaddr2',
        'ccaddr3' => 'ccaddr3',
        'ccaddr4' => 'ccaddr4',
        'cccity' => 'cccity',
        'ccstate' => 'ccstate',
        'cczip' => 'cczip',
        'cccountry' => 'cccountry',
        'ccponumber' => 'ccponumber',
        'ccshiptozip' => 'ccshiptozip',
        'cctaxamount' => 'cctaxamount',
        'ccauthorizationamount' => 'ccauthorizationamount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cccustomerid' => 'setCccustomerid',
        'cccreditcardnbr' => 'setCccreditcardnbr',
        'ccpaymenttype' => 'setCcpaymenttype',
        'cccreditcardexp' => 'setCccreditcardexp',
        'cccardholder' => 'setCccardholder',
        'cccvv2' => 'setCccvv2',
        'ccaddr1' => 'setCcaddr1',
        'ccaddr2' => 'setCcaddr2',
        'ccaddr3' => 'setCcaddr3',
        'ccaddr4' => 'setCcaddr4',
        'cccity' => 'setCccity',
        'ccstate' => 'setCcstate',
        'cczip' => 'setCczip',
        'cccountry' => 'setCccountry',
        'ccponumber' => 'setCcponumber',
        'ccshiptozip' => 'setCcshiptozip',
        'cctaxamount' => 'setCctaxamount',
        'ccauthorizationamount' => 'setCcauthorizationamount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cccustomerid' => 'getCccustomerid',
        'cccreditcardnbr' => 'getCccreditcardnbr',
        'ccpaymenttype' => 'getCcpaymenttype',
        'cccreditcardexp' => 'getCccreditcardexp',
        'cccardholder' => 'getCccardholder',
        'cccvv2' => 'getCccvv2',
        'ccaddr1' => 'getCcaddr1',
        'ccaddr2' => 'getCcaddr2',
        'ccaddr3' => 'getCcaddr3',
        'ccaddr4' => 'getCcaddr4',
        'cccity' => 'getCccity',
        'ccstate' => 'getCcstate',
        'cczip' => 'getCczip',
        'cccountry' => 'getCccountry',
        'ccponumber' => 'getCcponumber',
        'ccshiptozip' => 'getCcshiptozip',
        'cctaxamount' => 'getCctaxamount',
        'ccauthorizationamount' => 'getCcauthorizationamount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cccustomerid'] = isset($data['cccustomerid']) ? $data['cccustomerid'] : null;
        $this->container['cccreditcardnbr'] = isset($data['cccreditcardnbr']) ? $data['cccreditcardnbr'] : null;
        $this->container['ccpaymenttype'] = isset($data['ccpaymenttype']) ? $data['ccpaymenttype'] : null;
        $this->container['cccreditcardexp'] = isset($data['cccreditcardexp']) ? $data['cccreditcardexp'] : null;
        $this->container['cccardholder'] = isset($data['cccardholder']) ? $data['cccardholder'] : null;
        $this->container['cccvv2'] = isset($data['cccvv2']) ? $data['cccvv2'] : null;
        $this->container['ccaddr1'] = isset($data['ccaddr1']) ? $data['ccaddr1'] : null;
        $this->container['ccaddr2'] = isset($data['ccaddr2']) ? $data['ccaddr2'] : null;
        $this->container['ccaddr3'] = isset($data['ccaddr3']) ? $data['ccaddr3'] : null;
        $this->container['ccaddr4'] = isset($data['ccaddr4']) ? $data['ccaddr4'] : null;
        $this->container['cccity'] = isset($data['cccity']) ? $data['cccity'] : null;
        $this->container['ccstate'] = isset($data['ccstate']) ? $data['ccstate'] : null;
        $this->container['cczip'] = isset($data['cczip']) ? $data['cczip'] : null;
        $this->container['cccountry'] = isset($data['cccountry']) ? $data['cccountry'] : null;
        $this->container['ccponumber'] = isset($data['ccponumber']) ? $data['ccponumber'] : null;
        $this->container['ccshiptozip'] = isset($data['ccshiptozip']) ? $data['ccshiptozip'] : null;
        $this->container['cctaxamount'] = isset($data['cctaxamount']) ? $data['cctaxamount'] : null;
        $this->container['ccauthorizationamount'] = isset($data['ccauthorizationamount']) ? $data['ccauthorizationamount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cccustomerid
     *
     * @return string
     */
    public function getCccustomerid()
    {
        return $this->container['cccustomerid'];
    }

    /**
     * Sets cccustomerid
     *
     * @param string $cccustomerid cccustomerid
     *
     * @return $this
     */
    public function setCccustomerid($cccustomerid)
    {
        $this->container['cccustomerid'] = $cccustomerid;

        return $this;
    }

    /**
     * Gets cccreditcardnbr
     *
     * @return string
     */
    public function getCccreditcardnbr()
    {
        return $this->container['cccreditcardnbr'];
    }

    /**
     * Sets cccreditcardnbr
     *
     * @param string $cccreditcardnbr cccreditcardnbr
     *
     * @return $this
     */
    public function setCccreditcardnbr($cccreditcardnbr)
    {
        $this->container['cccreditcardnbr'] = $cccreditcardnbr;

        return $this;
    }

    /**
     * Gets ccpaymenttype
     *
     * @return string
     */
    public function getCcpaymenttype()
    {
        return $this->container['ccpaymenttype'];
    }

    /**
     * Sets ccpaymenttype
     *
     * @param string $ccpaymenttype ccpaymenttype
     *
     * @return $this
     */
    public function setCcpaymenttype($ccpaymenttype)
    {
        $this->container['ccpaymenttype'] = $ccpaymenttype;

        return $this;
    }

    /**
     * Gets cccreditcardexp
     *
     * @return string
     */
    public function getCccreditcardexp()
    {
        return $this->container['cccreditcardexp'];
    }

    /**
     * Sets cccreditcardexp
     *
     * @param string $cccreditcardexp cccreditcardexp
     *
     * @return $this
     */
    public function setCccreditcardexp($cccreditcardexp)
    {
        $this->container['cccreditcardexp'] = $cccreditcardexp;

        return $this;
    }

    /**
     * Gets cccardholder
     *
     * @return string
     */
    public function getCccardholder()
    {
        return $this->container['cccardholder'];
    }

    /**
     * Sets cccardholder
     *
     * @param string $cccardholder cccardholder
     *
     * @return $this
     */
    public function setCccardholder($cccardholder)
    {
        $this->container['cccardholder'] = $cccardholder;

        return $this;
    }

    /**
     * Gets cccvv2
     *
     * @return string
     */
    public function getCccvv2()
    {
        return $this->container['cccvv2'];
    }

    /**
     * Sets cccvv2
     *
     * @param string $cccvv2 cccvv2
     *
     * @return $this
     */
    public function setCccvv2($cccvv2)
    {
        $this->container['cccvv2'] = $cccvv2;

        return $this;
    }

    /**
     * Gets ccaddr1
     *
     * @return string
     */
    public function getCcaddr1()
    {
        return $this->container['ccaddr1'];
    }

    /**
     * Sets ccaddr1
     *
     * @param string $ccaddr1 ccaddr1
     *
     * @return $this
     */
    public function setCcaddr1($ccaddr1)
    {
        $this->container['ccaddr1'] = $ccaddr1;

        return $this;
    }

    /**
     * Gets ccaddr2
     *
     * @return string
     */
    public function getCcaddr2()
    {
        return $this->container['ccaddr2'];
    }

    /**
     * Sets ccaddr2
     *
     * @param string $ccaddr2 ccaddr2
     *
     * @return $this
     */
    public function setCcaddr2($ccaddr2)
    {
        $this->container['ccaddr2'] = $ccaddr2;

        return $this;
    }

    /**
     * Gets ccaddr3
     *
     * @return string
     */
    public function getCcaddr3()
    {
        return $this->container['ccaddr3'];
    }

    /**
     * Sets ccaddr3
     *
     * @param string $ccaddr3 ccaddr3
     *
     * @return $this
     */
    public function setCcaddr3($ccaddr3)
    {
        $this->container['ccaddr3'] = $ccaddr3;

        return $this;
    }

    /**
     * Gets ccaddr4
     *
     * @return string
     */
    public function getCcaddr4()
    {
        return $this->container['ccaddr4'];
    }

    /**
     * Sets ccaddr4
     *
     * @param string $ccaddr4 ccaddr4
     *
     * @return $this
     */
    public function setCcaddr4($ccaddr4)
    {
        $this->container['ccaddr4'] = $ccaddr4;

        return $this;
    }

    /**
     * Gets cccity
     *
     * @return string
     */
    public function getCccity()
    {
        return $this->container['cccity'];
    }

    /**
     * Sets cccity
     *
     * @param string $cccity cccity
     *
     * @return $this
     */
    public function setCccity($cccity)
    {
        $this->container['cccity'] = $cccity;

        return $this;
    }

    /**
     * Gets ccstate
     *
     * @return string
     */
    public function getCcstate()
    {
        return $this->container['ccstate'];
    }

    /**
     * Sets ccstate
     *
     * @param string $ccstate ccstate
     *
     * @return $this
     */
    public function setCcstate($ccstate)
    {
        $this->container['ccstate'] = $ccstate;

        return $this;
    }

    /**
     * Gets cczip
     *
     * @return string
     */
    public function getCczip()
    {
        return $this->container['cczip'];
    }

    /**
     * Sets cczip
     *
     * @param string $cczip cczip
     *
     * @return $this
     */
    public function setCczip($cczip)
    {
        $this->container['cczip'] = $cczip;

        return $this;
    }

    /**
     * Gets cccountry
     *
     * @return string
     */
    public function getCccountry()
    {
        return $this->container['cccountry'];
    }

    /**
     * Sets cccountry
     *
     * @param string $cccountry cccountry
     *
     * @return $this
     */
    public function setCccountry($cccountry)
    {
        $this->container['cccountry'] = $cccountry;

        return $this;
    }

    /**
     * Gets ccponumber
     *
     * @return string
     */
    public function getCcponumber()
    {
        return $this->container['ccponumber'];
    }

    /**
     * Sets ccponumber
     *
     * @param string $ccponumber ccponumber
     *
     * @return $this
     */
    public function setCcponumber($ccponumber)
    {
        $this->container['ccponumber'] = $ccponumber;

        return $this;
    }

    /**
     * Gets ccshiptozip
     *
     * @return string
     */
    public function getCcshiptozip()
    {
        return $this->container['ccshiptozip'];
    }

    /**
     * Sets ccshiptozip
     *
     * @param string $ccshiptozip ccshiptozip
     *
     * @return $this
     */
    public function setCcshiptozip($ccshiptozip)
    {
        $this->container['ccshiptozip'] = $ccshiptozip;

        return $this;
    }

    /**
     * Gets cctaxamount
     *
     * @return double
     */
    public function getCctaxamount()
    {
        return $this->container['cctaxamount'];
    }

    /**
     * Sets cctaxamount
     *
     * @param double $cctaxamount cctaxamount
     *
     * @return $this
     */
    public function setCctaxamount($cctaxamount)
    {
        $this->container['cctaxamount'] = $cctaxamount;

        return $this;
    }

    /**
     * Gets ccauthorizationamount
     *
     * @return double
     */
    public function getCcauthorizationamount()
    {
        return $this->container['ccauthorizationamount'];
    }

    /**
     * Sets ccauthorizationamount
     *
     * @param double $ccauthorizationamount ccauthorizationamount
     *
     * @return $this
     */
    public function setCcauthorizationamount($ccauthorizationamount)
    {
        $this->container['ccauthorizationamount'] = $ccauthorizationamount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


