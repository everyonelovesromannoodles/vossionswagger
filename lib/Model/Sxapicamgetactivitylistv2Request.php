<?php
/**
 * Sxapicamgetactivitylistv2Request
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Sxapicamgetactivitylistv2Request Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Sxapicamgetactivitylistv2Request implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapicamgetactivitylistv2_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company_number' => 'int',
        'operator_init' => 'string',
        'operator_password' => 'string',
        'operators' => 'string',
        'activity_code' => 'string',
        'result_code' => 'string',
        'contact_id' => 'double',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'start_time' => 'string',
        'end_time' => 'string',
        'status_code' => 'string',
        'subject_primary_key' => 'string',
        'subject_second_key' => 'string',
        'subject_type' => 'string',
        'update_type' => 'string',
        'event_manager_only' => 'bool',
        'include_note_data' => 'bool',
        'note_data_line_feed' => 'bool',
        'sort' => 'string',
        'record_limit' => 'int',
        't_infieldvalue' => '\Swagger\Client\Model\TInfieldvalueReq'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'company_number' => 'int64',
        'operator_init' => null,
        'operator_password' => null,
        'operators' => null,
        'activity_code' => null,
        'result_code' => null,
        'contact_id' => 'double',
        'start_date' => 'date',
        'end_date' => 'date',
        'start_time' => null,
        'end_time' => null,
        'status_code' => null,
        'subject_primary_key' => null,
        'subject_second_key' => null,
        'subject_type' => null,
        'update_type' => null,
        'event_manager_only' => null,
        'include_note_data' => null,
        'note_data_line_feed' => null,
        'sort' => null,
        'record_limit' => 'int64',
        't_infieldvalue' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_number' => 'companyNumber',
        'operator_init' => 'operatorInit',
        'operator_password' => 'operatorPassword',
        'operators' => 'operators',
        'activity_code' => 'activityCode',
        'result_code' => 'resultCode',
        'contact_id' => 'contactID',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'status_code' => 'statusCode',
        'subject_primary_key' => 'subjectPrimaryKey',
        'subject_second_key' => 'subjectSecondKey',
        'subject_type' => 'subjectType',
        'update_type' => 'updateType',
        'event_manager_only' => 'eventManagerOnly',
        'include_note_data' => 'includeNoteData',
        'note_data_line_feed' => 'noteDataLineFeed',
        'sort' => 'sort',
        'record_limit' => 'recordLimit',
        't_infieldvalue' => 'tInfieldvalue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_number' => 'setCompanyNumber',
        'operator_init' => 'setOperatorInit',
        'operator_password' => 'setOperatorPassword',
        'operators' => 'setOperators',
        'activity_code' => 'setActivityCode',
        'result_code' => 'setResultCode',
        'contact_id' => 'setContactId',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'status_code' => 'setStatusCode',
        'subject_primary_key' => 'setSubjectPrimaryKey',
        'subject_second_key' => 'setSubjectSecondKey',
        'subject_type' => 'setSubjectType',
        'update_type' => 'setUpdateType',
        'event_manager_only' => 'setEventManagerOnly',
        'include_note_data' => 'setIncludeNoteData',
        'note_data_line_feed' => 'setNoteDataLineFeed',
        'sort' => 'setSort',
        'record_limit' => 'setRecordLimit',
        't_infieldvalue' => 'setTInfieldvalue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_number' => 'getCompanyNumber',
        'operator_init' => 'getOperatorInit',
        'operator_password' => 'getOperatorPassword',
        'operators' => 'getOperators',
        'activity_code' => 'getActivityCode',
        'result_code' => 'getResultCode',
        'contact_id' => 'getContactId',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'status_code' => 'getStatusCode',
        'subject_primary_key' => 'getSubjectPrimaryKey',
        'subject_second_key' => 'getSubjectSecondKey',
        'subject_type' => 'getSubjectType',
        'update_type' => 'getUpdateType',
        'event_manager_only' => 'getEventManagerOnly',
        'include_note_data' => 'getIncludeNoteData',
        'note_data_line_feed' => 'getNoteDataLineFeed',
        'sort' => 'getSort',
        'record_limit' => 'getRecordLimit',
        't_infieldvalue' => 'getTInfieldvalue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_number'] = isset($data['company_number']) ? $data['company_number'] : null;
        $this->container['operator_init'] = isset($data['operator_init']) ? $data['operator_init'] : null;
        $this->container['operator_password'] = isset($data['operator_password']) ? $data['operator_password'] : null;
        $this->container['operators'] = isset($data['operators']) ? $data['operators'] : null;
        $this->container['activity_code'] = isset($data['activity_code']) ? $data['activity_code'] : null;
        $this->container['result_code'] = isset($data['result_code']) ? $data['result_code'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['status_code'] = isset($data['status_code']) ? $data['status_code'] : null;
        $this->container['subject_primary_key'] = isset($data['subject_primary_key']) ? $data['subject_primary_key'] : null;
        $this->container['subject_second_key'] = isset($data['subject_second_key']) ? $data['subject_second_key'] : null;
        $this->container['subject_type'] = isset($data['subject_type']) ? $data['subject_type'] : null;
        $this->container['update_type'] = isset($data['update_type']) ? $data['update_type'] : null;
        $this->container['event_manager_only'] = isset($data['event_manager_only']) ? $data['event_manager_only'] : null;
        $this->container['include_note_data'] = isset($data['include_note_data']) ? $data['include_note_data'] : null;
        $this->container['note_data_line_feed'] = isset($data['note_data_line_feed']) ? $data['note_data_line_feed'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
        $this->container['record_limit'] = isset($data['record_limit']) ? $data['record_limit'] : null;
        $this->container['t_infieldvalue'] = isset($data['t_infieldvalue']) ? $data['t_infieldvalue'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_number
     *
     * @return int
     */
    public function getCompanyNumber()
    {
        return $this->container['company_number'];
    }

    /**
     * Sets company_number
     *
     * @param int $company_number company_number
     *
     * @return $this
     */
    public function setCompanyNumber($company_number)
    {
        $this->container['company_number'] = $company_number;

        return $this;
    }

    /**
     * Gets operator_init
     *
     * @return string
     */
    public function getOperatorInit()
    {
        return $this->container['operator_init'];
    }

    /**
     * Sets operator_init
     *
     * @param string $operator_init operator_init
     *
     * @return $this
     */
    public function setOperatorInit($operator_init)
    {
        $this->container['operator_init'] = $operator_init;

        return $this;
    }

    /**
     * Gets operator_password
     *
     * @return string
     */
    public function getOperatorPassword()
    {
        return $this->container['operator_password'];
    }

    /**
     * Sets operator_password
     *
     * @param string $operator_password operator_password
     *
     * @return $this
     */
    public function setOperatorPassword($operator_password)
    {
        $this->container['operator_password'] = $operator_password;

        return $this;
    }

    /**
     * Gets operators
     *
     * @return string
     */
    public function getOperators()
    {
        return $this->container['operators'];
    }

    /**
     * Sets operators
     *
     * @param string $operators operators
     *
     * @return $this
     */
    public function setOperators($operators)
    {
        $this->container['operators'] = $operators;

        return $this;
    }

    /**
     * Gets activity_code
     *
     * @return string
     */
    public function getActivityCode()
    {
        return $this->container['activity_code'];
    }

    /**
     * Sets activity_code
     *
     * @param string $activity_code activity_code
     *
     * @return $this
     */
    public function setActivityCode($activity_code)
    {
        $this->container['activity_code'] = $activity_code;

        return $this;
    }

    /**
     * Gets result_code
     *
     * @return string
     */
    public function getResultCode()
    {
        return $this->container['result_code'];
    }

    /**
     * Sets result_code
     *
     * @param string $result_code result_code
     *
     * @return $this
     */
    public function setResultCode($result_code)
    {
        $this->container['result_code'] = $result_code;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return double
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param double $contact_id contact_id
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string $end_time end_time
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return string
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param string $status_code status_code
     *
     * @return $this
     */
    public function setStatusCode($status_code)
    {
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets subject_primary_key
     *
     * @return string
     */
    public function getSubjectPrimaryKey()
    {
        return $this->container['subject_primary_key'];
    }

    /**
     * Sets subject_primary_key
     *
     * @param string $subject_primary_key subject_primary_key
     *
     * @return $this
     */
    public function setSubjectPrimaryKey($subject_primary_key)
    {
        $this->container['subject_primary_key'] = $subject_primary_key;

        return $this;
    }

    /**
     * Gets subject_second_key
     *
     * @return string
     */
    public function getSubjectSecondKey()
    {
        return $this->container['subject_second_key'];
    }

    /**
     * Sets subject_second_key
     *
     * @param string $subject_second_key subject_second_key
     *
     * @return $this
     */
    public function setSubjectSecondKey($subject_second_key)
    {
        $this->container['subject_second_key'] = $subject_second_key;

        return $this;
    }

    /**
     * Gets subject_type
     *
     * @return string
     */
    public function getSubjectType()
    {
        return $this->container['subject_type'];
    }

    /**
     * Sets subject_type
     *
     * @param string $subject_type subject_type
     *
     * @return $this
     */
    public function setSubjectType($subject_type)
    {
        $this->container['subject_type'] = $subject_type;

        return $this;
    }

    /**
     * Gets update_type
     *
     * @return string
     */
    public function getUpdateType()
    {
        return $this->container['update_type'];
    }

    /**
     * Sets update_type
     *
     * @param string $update_type update_type
     *
     * @return $this
     */
    public function setUpdateType($update_type)
    {
        $this->container['update_type'] = $update_type;

        return $this;
    }

    /**
     * Gets event_manager_only
     *
     * @return bool
     */
    public function getEventManagerOnly()
    {
        return $this->container['event_manager_only'];
    }

    /**
     * Sets event_manager_only
     *
     * @param bool $event_manager_only event_manager_only
     *
     * @return $this
     */
    public function setEventManagerOnly($event_manager_only)
    {
        $this->container['event_manager_only'] = $event_manager_only;

        return $this;
    }

    /**
     * Gets include_note_data
     *
     * @return bool
     */
    public function getIncludeNoteData()
    {
        return $this->container['include_note_data'];
    }

    /**
     * Sets include_note_data
     *
     * @param bool $include_note_data include_note_data
     *
     * @return $this
     */
    public function setIncludeNoteData($include_note_data)
    {
        $this->container['include_note_data'] = $include_note_data;

        return $this;
    }

    /**
     * Gets note_data_line_feed
     *
     * @return bool
     */
    public function getNoteDataLineFeed()
    {
        return $this->container['note_data_line_feed'];
    }

    /**
     * Sets note_data_line_feed
     *
     * @param bool $note_data_line_feed note_data_line_feed
     *
     * @return $this
     */
    public function setNoteDataLineFeed($note_data_line_feed)
    {
        $this->container['note_data_line_feed'] = $note_data_line_feed;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return string
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param string $sort sort
     *
     * @return $this
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets record_limit
     *
     * @return int
     */
    public function getRecordLimit()
    {
        return $this->container['record_limit'];
    }

    /**
     * Sets record_limit
     *
     * @param int $record_limit record_limit
     *
     * @return $this
     */
    public function setRecordLimit($record_limit)
    {
        $this->container['record_limit'] = $record_limit;

        return $this;
    }

    /**
     * Gets t_infieldvalue
     *
     * @return \Swagger\Client\Model\TInfieldvalueReq
     */
    public function getTInfieldvalue()
    {
        return $this->container['t_infieldvalue'];
    }

    /**
     * Sets t_infieldvalue
     *
     * @param \Swagger\Client\Model\TInfieldvalueReq $t_infieldvalue t_infieldvalue
     *
     * @return $this
     */
    public function setTInfieldvalue($t_infieldvalue)
    {
        $this->container['t_infieldvalue'] = $t_infieldvalue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


