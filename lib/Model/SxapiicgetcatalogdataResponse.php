<?php
/**
 * SxapiicgetcatalogdataResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SxapiicgetcatalogdataResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SxapiicgetcatalogdataResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapiicgetcatalogdata_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'c_error_message' => 'string',
        'base_price' => 'double',
        'units_per_stocking' => 'double',
        'cubes' => 'double',
        'description1' => 'string',
        'description2' => 'string',
        'height' => 'double',
        'special_cost_record_number' => 'int',
        'length' => 'double',
        'list_price' => 'double',
        'long_description' => 'string',
        'model' => 'string',
        'notes_flag' => 'string',
        'price_cost_per' => 'string',
        'price_type' => 'string',
        'price_type_description' => 'string',
        'product_category' => 'string',
        'product_category_description' => 'string',
        'product_cost' => 'double',
        'product_line' => 'string',
        'special_cost_type' => 'string',
        'standard_cost' => 'double',
        'unit_standard' => 'string',
        'unit_stocking' => 'string',
        'vendor_number' => 'double',
        'weight' => 'double',
        'width' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'c_error_message' => null,
        'base_price' => 'double',
        'units_per_stocking' => 'double',
        'cubes' => 'double',
        'description1' => null,
        'description2' => null,
        'height' => 'double',
        'special_cost_record_number' => 'int64',
        'length' => 'double',
        'list_price' => 'double',
        'long_description' => null,
        'model' => null,
        'notes_flag' => null,
        'price_cost_per' => null,
        'price_type' => null,
        'price_type_description' => null,
        'product_category' => null,
        'product_category_description' => null,
        'product_cost' => 'double',
        'product_line' => null,
        'special_cost_type' => null,
        'standard_cost' => 'double',
        'unit_standard' => null,
        'unit_stocking' => null,
        'vendor_number' => 'double',
        'weight' => 'double',
        'width' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c_error_message' => 'cErrorMessage',
        'base_price' => 'basePrice',
        'units_per_stocking' => 'unitsPerStocking',
        'cubes' => 'cubes',
        'description1' => 'description1',
        'description2' => 'description2',
        'height' => 'height',
        'special_cost_record_number' => 'specialCostRecordNumber',
        'length' => 'length',
        'list_price' => 'listPrice',
        'long_description' => 'longDescription',
        'model' => 'model',
        'notes_flag' => 'notesFlag',
        'price_cost_per' => 'priceCostPer',
        'price_type' => 'priceType',
        'price_type_description' => 'priceTypeDescription',
        'product_category' => 'productCategory',
        'product_category_description' => 'productCategoryDescription',
        'product_cost' => 'productCost',
        'product_line' => 'productLine',
        'special_cost_type' => 'specialCostType',
        'standard_cost' => 'standardCost',
        'unit_standard' => 'unitStandard',
        'unit_stocking' => 'unitStocking',
        'vendor_number' => 'vendorNumber',
        'weight' => 'weight',
        'width' => 'width'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c_error_message' => 'setCErrorMessage',
        'base_price' => 'setBasePrice',
        'units_per_stocking' => 'setUnitsPerStocking',
        'cubes' => 'setCubes',
        'description1' => 'setDescription1',
        'description2' => 'setDescription2',
        'height' => 'setHeight',
        'special_cost_record_number' => 'setSpecialCostRecordNumber',
        'length' => 'setLength',
        'list_price' => 'setListPrice',
        'long_description' => 'setLongDescription',
        'model' => 'setModel',
        'notes_flag' => 'setNotesFlag',
        'price_cost_per' => 'setPriceCostPer',
        'price_type' => 'setPriceType',
        'price_type_description' => 'setPriceTypeDescription',
        'product_category' => 'setProductCategory',
        'product_category_description' => 'setProductCategoryDescription',
        'product_cost' => 'setProductCost',
        'product_line' => 'setProductLine',
        'special_cost_type' => 'setSpecialCostType',
        'standard_cost' => 'setStandardCost',
        'unit_standard' => 'setUnitStandard',
        'unit_stocking' => 'setUnitStocking',
        'vendor_number' => 'setVendorNumber',
        'weight' => 'setWeight',
        'width' => 'setWidth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c_error_message' => 'getCErrorMessage',
        'base_price' => 'getBasePrice',
        'units_per_stocking' => 'getUnitsPerStocking',
        'cubes' => 'getCubes',
        'description1' => 'getDescription1',
        'description2' => 'getDescription2',
        'height' => 'getHeight',
        'special_cost_record_number' => 'getSpecialCostRecordNumber',
        'length' => 'getLength',
        'list_price' => 'getListPrice',
        'long_description' => 'getLongDescription',
        'model' => 'getModel',
        'notes_flag' => 'getNotesFlag',
        'price_cost_per' => 'getPriceCostPer',
        'price_type' => 'getPriceType',
        'price_type_description' => 'getPriceTypeDescription',
        'product_category' => 'getProductCategory',
        'product_category_description' => 'getProductCategoryDescription',
        'product_cost' => 'getProductCost',
        'product_line' => 'getProductLine',
        'special_cost_type' => 'getSpecialCostType',
        'standard_cost' => 'getStandardCost',
        'unit_standard' => 'getUnitStandard',
        'unit_stocking' => 'getUnitStocking',
        'vendor_number' => 'getVendorNumber',
        'weight' => 'getWeight',
        'width' => 'getWidth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['c_error_message'] = isset($data['c_error_message']) ? $data['c_error_message'] : null;
        $this->container['base_price'] = isset($data['base_price']) ? $data['base_price'] : null;
        $this->container['units_per_stocking'] = isset($data['units_per_stocking']) ? $data['units_per_stocking'] : null;
        $this->container['cubes'] = isset($data['cubes']) ? $data['cubes'] : null;
        $this->container['description1'] = isset($data['description1']) ? $data['description1'] : null;
        $this->container['description2'] = isset($data['description2']) ? $data['description2'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['special_cost_record_number'] = isset($data['special_cost_record_number']) ? $data['special_cost_record_number'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['list_price'] = isset($data['list_price']) ? $data['list_price'] : null;
        $this->container['long_description'] = isset($data['long_description']) ? $data['long_description'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['notes_flag'] = isset($data['notes_flag']) ? $data['notes_flag'] : null;
        $this->container['price_cost_per'] = isset($data['price_cost_per']) ? $data['price_cost_per'] : null;
        $this->container['price_type'] = isset($data['price_type']) ? $data['price_type'] : null;
        $this->container['price_type_description'] = isset($data['price_type_description']) ? $data['price_type_description'] : null;
        $this->container['product_category'] = isset($data['product_category']) ? $data['product_category'] : null;
        $this->container['product_category_description'] = isset($data['product_category_description']) ? $data['product_category_description'] : null;
        $this->container['product_cost'] = isset($data['product_cost']) ? $data['product_cost'] : null;
        $this->container['product_line'] = isset($data['product_line']) ? $data['product_line'] : null;
        $this->container['special_cost_type'] = isset($data['special_cost_type']) ? $data['special_cost_type'] : null;
        $this->container['standard_cost'] = isset($data['standard_cost']) ? $data['standard_cost'] : null;
        $this->container['unit_standard'] = isset($data['unit_standard']) ? $data['unit_standard'] : null;
        $this->container['unit_stocking'] = isset($data['unit_stocking']) ? $data['unit_stocking'] : null;
        $this->container['vendor_number'] = isset($data['vendor_number']) ? $data['vendor_number'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c_error_message
     *
     * @return string
     */
    public function getCErrorMessage()
    {
        return $this->container['c_error_message'];
    }

    /**
     * Sets c_error_message
     *
     * @param string $c_error_message c_error_message
     *
     * @return $this
     */
    public function setCErrorMessage($c_error_message)
    {
        $this->container['c_error_message'] = $c_error_message;

        return $this;
    }

    /**
     * Gets base_price
     *
     * @return double
     */
    public function getBasePrice()
    {
        return $this->container['base_price'];
    }

    /**
     * Sets base_price
     *
     * @param double $base_price base_price
     *
     * @return $this
     */
    public function setBasePrice($base_price)
    {
        $this->container['base_price'] = $base_price;

        return $this;
    }

    /**
     * Gets units_per_stocking
     *
     * @return double
     */
    public function getUnitsPerStocking()
    {
        return $this->container['units_per_stocking'];
    }

    /**
     * Sets units_per_stocking
     *
     * @param double $units_per_stocking units_per_stocking
     *
     * @return $this
     */
    public function setUnitsPerStocking($units_per_stocking)
    {
        $this->container['units_per_stocking'] = $units_per_stocking;

        return $this;
    }

    /**
     * Gets cubes
     *
     * @return double
     */
    public function getCubes()
    {
        return $this->container['cubes'];
    }

    /**
     * Sets cubes
     *
     * @param double $cubes cubes
     *
     * @return $this
     */
    public function setCubes($cubes)
    {
        $this->container['cubes'] = $cubes;

        return $this;
    }

    /**
     * Gets description1
     *
     * @return string
     */
    public function getDescription1()
    {
        return $this->container['description1'];
    }

    /**
     * Sets description1
     *
     * @param string $description1 description1
     *
     * @return $this
     */
    public function setDescription1($description1)
    {
        $this->container['description1'] = $description1;

        return $this;
    }

    /**
     * Gets description2
     *
     * @return string
     */
    public function getDescription2()
    {
        return $this->container['description2'];
    }

    /**
     * Sets description2
     *
     * @param string $description2 description2
     *
     * @return $this
     */
    public function setDescription2($description2)
    {
        $this->container['description2'] = $description2;

        return $this;
    }

    /**
     * Gets height
     *
     * @return double
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param double $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets special_cost_record_number
     *
     * @return int
     */
    public function getSpecialCostRecordNumber()
    {
        return $this->container['special_cost_record_number'];
    }

    /**
     * Sets special_cost_record_number
     *
     * @param int $special_cost_record_number special_cost_record_number
     *
     * @return $this
     */
    public function setSpecialCostRecordNumber($special_cost_record_number)
    {
        $this->container['special_cost_record_number'] = $special_cost_record_number;

        return $this;
    }

    /**
     * Gets length
     *
     * @return double
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param double $length length
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets list_price
     *
     * @return double
     */
    public function getListPrice()
    {
        return $this->container['list_price'];
    }

    /**
     * Sets list_price
     *
     * @param double $list_price list_price
     *
     * @return $this
     */
    public function setListPrice($list_price)
    {
        $this->container['list_price'] = $list_price;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param string $long_description long_description
     *
     * @return $this
     */
    public function setLongDescription($long_description)
    {
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets notes_flag
     *
     * @return string
     */
    public function getNotesFlag()
    {
        return $this->container['notes_flag'];
    }

    /**
     * Sets notes_flag
     *
     * @param string $notes_flag notes_flag
     *
     * @return $this
     */
    public function setNotesFlag($notes_flag)
    {
        $this->container['notes_flag'] = $notes_flag;

        return $this;
    }

    /**
     * Gets price_cost_per
     *
     * @return string
     */
    public function getPriceCostPer()
    {
        return $this->container['price_cost_per'];
    }

    /**
     * Sets price_cost_per
     *
     * @param string $price_cost_per price_cost_per
     *
     * @return $this
     */
    public function setPriceCostPer($price_cost_per)
    {
        $this->container['price_cost_per'] = $price_cost_per;

        return $this;
    }

    /**
     * Gets price_type
     *
     * @return string
     */
    public function getPriceType()
    {
        return $this->container['price_type'];
    }

    /**
     * Sets price_type
     *
     * @param string $price_type price_type
     *
     * @return $this
     */
    public function setPriceType($price_type)
    {
        $this->container['price_type'] = $price_type;

        return $this;
    }

    /**
     * Gets price_type_description
     *
     * @return string
     */
    public function getPriceTypeDescription()
    {
        return $this->container['price_type_description'];
    }

    /**
     * Sets price_type_description
     *
     * @param string $price_type_description price_type_description
     *
     * @return $this
     */
    public function setPriceTypeDescription($price_type_description)
    {
        $this->container['price_type_description'] = $price_type_description;

        return $this;
    }

    /**
     * Gets product_category
     *
     * @return string
     */
    public function getProductCategory()
    {
        return $this->container['product_category'];
    }

    /**
     * Sets product_category
     *
     * @param string $product_category product_category
     *
     * @return $this
     */
    public function setProductCategory($product_category)
    {
        $this->container['product_category'] = $product_category;

        return $this;
    }

    /**
     * Gets product_category_description
     *
     * @return string
     */
    public function getProductCategoryDescription()
    {
        return $this->container['product_category_description'];
    }

    /**
     * Sets product_category_description
     *
     * @param string $product_category_description product_category_description
     *
     * @return $this
     */
    public function setProductCategoryDescription($product_category_description)
    {
        $this->container['product_category_description'] = $product_category_description;

        return $this;
    }

    /**
     * Gets product_cost
     *
     * @return double
     */
    public function getProductCost()
    {
        return $this->container['product_cost'];
    }

    /**
     * Sets product_cost
     *
     * @param double $product_cost product_cost
     *
     * @return $this
     */
    public function setProductCost($product_cost)
    {
        $this->container['product_cost'] = $product_cost;

        return $this;
    }

    /**
     * Gets product_line
     *
     * @return string
     */
    public function getProductLine()
    {
        return $this->container['product_line'];
    }

    /**
     * Sets product_line
     *
     * @param string $product_line product_line
     *
     * @return $this
     */
    public function setProductLine($product_line)
    {
        $this->container['product_line'] = $product_line;

        return $this;
    }

    /**
     * Gets special_cost_type
     *
     * @return string
     */
    public function getSpecialCostType()
    {
        return $this->container['special_cost_type'];
    }

    /**
     * Sets special_cost_type
     *
     * @param string $special_cost_type special_cost_type
     *
     * @return $this
     */
    public function setSpecialCostType($special_cost_type)
    {
        $this->container['special_cost_type'] = $special_cost_type;

        return $this;
    }

    /**
     * Gets standard_cost
     *
     * @return double
     */
    public function getStandardCost()
    {
        return $this->container['standard_cost'];
    }

    /**
     * Sets standard_cost
     *
     * @param double $standard_cost standard_cost
     *
     * @return $this
     */
    public function setStandardCost($standard_cost)
    {
        $this->container['standard_cost'] = $standard_cost;

        return $this;
    }

    /**
     * Gets unit_standard
     *
     * @return string
     */
    public function getUnitStandard()
    {
        return $this->container['unit_standard'];
    }

    /**
     * Sets unit_standard
     *
     * @param string $unit_standard unit_standard
     *
     * @return $this
     */
    public function setUnitStandard($unit_standard)
    {
        $this->container['unit_standard'] = $unit_standard;

        return $this;
    }

    /**
     * Gets unit_stocking
     *
     * @return string
     */
    public function getUnitStocking()
    {
        return $this->container['unit_stocking'];
    }

    /**
     * Sets unit_stocking
     *
     * @param string $unit_stocking unit_stocking
     *
     * @return $this
     */
    public function setUnitStocking($unit_stocking)
    {
        $this->container['unit_stocking'] = $unit_stocking;

        return $this;
    }

    /**
     * Gets vendor_number
     *
     * @return double
     */
    public function getVendorNumber()
    {
        return $this->container['vendor_number'];
    }

    /**
     * Sets vendor_number
     *
     * @param double $vendor_number vendor_number
     *
     * @return $this
     */
    public function setVendorNumber($vendor_number)
    {
        $this->container['vendor_number'] = $vendor_number;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return double
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param double $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets width
     *
     * @return double
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param double $width width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


