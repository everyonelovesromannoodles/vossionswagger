<?php
/**
 * TSrchgordlinein
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TSrchgordlinein Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TSrchgordlinein implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-srchgordlinein';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'newrecordfl' => 'bool',
        'deleterecordfl' => 'bool',
        'changerecordfl' => 'bool',
        'lineno' => 'int',
        'processinglineno' => 'int',
        'itemnumber' => 'string',
        'custitem' => 'string',
        'orderqty' => 'double',
        'unitofmeasure' => 'string',
        'unitconv' => 'double',
        'warehouseid' => 'string',
        'lineitemtype' => 'string',
        'itemdesc1' => 'string',
        'itemdesc2' => 'string',
        'actualsellprice' => 'double',
        'cost' => 'double',
        'nonstockflag' => 'string',
        'listprice' => 'string',
        'seqno' => 'int',
        'vendno' => 'double',
        'prodline' => 'string',
        'prodcat' => 'string',
        'retorderno' => 'int',
        'retordersuf' => 'int',
        'retlineno' => 'int',
        'retreason' => 'string',
        'inventoryty' => 'string',
        'comments' => 'string',
        'createpo' => 'string',
        'backorder' => 'string',
        'issueqty' => 'double',
        'invtypeoverfl' => 'string',
        'taxablefl' => 'bool',
        'nontaxtype' => 'string',
        'copycommentfl' => 'bool',
        'reqshipdt' => '\DateTime',
        'promisedt' => '\DateTime',
        'department' => 'string',
        'custglno' => 'string',
        'chargeno' => 'string',
        'lastpricepd' => 'double',
        'origdt' => '\DateTime',
        'approvedt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'newrecordfl' => null,
        'deleterecordfl' => null,
        'changerecordfl' => null,
        'lineno' => 'int64',
        'processinglineno' => 'int64',
        'itemnumber' => null,
        'custitem' => null,
        'orderqty' => 'double',
        'unitofmeasure' => null,
        'unitconv' => 'double',
        'warehouseid' => null,
        'lineitemtype' => null,
        'itemdesc1' => null,
        'itemdesc2' => null,
        'actualsellprice' => 'double',
        'cost' => 'double',
        'nonstockflag' => null,
        'listprice' => null,
        'seqno' => 'int64',
        'vendno' => 'double',
        'prodline' => null,
        'prodcat' => null,
        'retorderno' => 'int64',
        'retordersuf' => 'int64',
        'retlineno' => 'int64',
        'retreason' => null,
        'inventoryty' => null,
        'comments' => null,
        'createpo' => null,
        'backorder' => null,
        'issueqty' => 'double',
        'invtypeoverfl' => null,
        'taxablefl' => null,
        'nontaxtype' => null,
        'copycommentfl' => null,
        'reqshipdt' => 'date',
        'promisedt' => 'date',
        'department' => null,
        'custglno' => null,
        'chargeno' => null,
        'lastpricepd' => 'double',
        'origdt' => 'date',
        'approvedt' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'newrecordfl' => 'newrecordfl',
        'deleterecordfl' => 'deleterecordfl',
        'changerecordfl' => 'changerecordfl',
        'lineno' => 'lineno',
        'processinglineno' => 'processinglineno',
        'itemnumber' => 'itemnumber',
        'custitem' => 'custitem',
        'orderqty' => 'orderqty',
        'unitofmeasure' => 'unitofmeasure',
        'unitconv' => 'unitconv',
        'warehouseid' => 'warehouseid',
        'lineitemtype' => 'lineitemtype',
        'itemdesc1' => 'itemdesc1',
        'itemdesc2' => 'itemdesc2',
        'actualsellprice' => 'actualsellprice',
        'cost' => 'cost',
        'nonstockflag' => 'nonstockflag',
        'listprice' => 'listprice',
        'seqno' => 'seqno',
        'vendno' => 'vendno',
        'prodline' => 'prodline',
        'prodcat' => 'prodcat',
        'retorderno' => 'retorderno',
        'retordersuf' => 'retordersuf',
        'retlineno' => 'retlineno',
        'retreason' => 'retreason',
        'inventoryty' => 'inventoryty',
        'comments' => 'comments',
        'createpo' => 'createpo',
        'backorder' => 'backorder',
        'issueqty' => 'issueqty',
        'invtypeoverfl' => 'invtypeoverfl',
        'taxablefl' => 'taxablefl',
        'nontaxtype' => 'nontaxtype',
        'copycommentfl' => 'copycommentfl',
        'reqshipdt' => 'reqshipdt',
        'promisedt' => 'promisedt',
        'department' => 'department',
        'custglno' => 'custglno',
        'chargeno' => 'chargeno',
        'lastpricepd' => 'lastpricepd',
        'origdt' => 'origdt',
        'approvedt' => 'approvedt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'newrecordfl' => 'setNewrecordfl',
        'deleterecordfl' => 'setDeleterecordfl',
        'changerecordfl' => 'setChangerecordfl',
        'lineno' => 'setLineno',
        'processinglineno' => 'setProcessinglineno',
        'itemnumber' => 'setItemnumber',
        'custitem' => 'setCustitem',
        'orderqty' => 'setOrderqty',
        'unitofmeasure' => 'setUnitofmeasure',
        'unitconv' => 'setUnitconv',
        'warehouseid' => 'setWarehouseid',
        'lineitemtype' => 'setLineitemtype',
        'itemdesc1' => 'setItemdesc1',
        'itemdesc2' => 'setItemdesc2',
        'actualsellprice' => 'setActualsellprice',
        'cost' => 'setCost',
        'nonstockflag' => 'setNonstockflag',
        'listprice' => 'setListprice',
        'seqno' => 'setSeqno',
        'vendno' => 'setVendno',
        'prodline' => 'setProdline',
        'prodcat' => 'setProdcat',
        'retorderno' => 'setRetorderno',
        'retordersuf' => 'setRetordersuf',
        'retlineno' => 'setRetlineno',
        'retreason' => 'setRetreason',
        'inventoryty' => 'setInventoryty',
        'comments' => 'setComments',
        'createpo' => 'setCreatepo',
        'backorder' => 'setBackorder',
        'issueqty' => 'setIssueqty',
        'invtypeoverfl' => 'setInvtypeoverfl',
        'taxablefl' => 'setTaxablefl',
        'nontaxtype' => 'setNontaxtype',
        'copycommentfl' => 'setCopycommentfl',
        'reqshipdt' => 'setReqshipdt',
        'promisedt' => 'setPromisedt',
        'department' => 'setDepartment',
        'custglno' => 'setCustglno',
        'chargeno' => 'setChargeno',
        'lastpricepd' => 'setLastpricepd',
        'origdt' => 'setOrigdt',
        'approvedt' => 'setApprovedt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'newrecordfl' => 'getNewrecordfl',
        'deleterecordfl' => 'getDeleterecordfl',
        'changerecordfl' => 'getChangerecordfl',
        'lineno' => 'getLineno',
        'processinglineno' => 'getProcessinglineno',
        'itemnumber' => 'getItemnumber',
        'custitem' => 'getCustitem',
        'orderqty' => 'getOrderqty',
        'unitofmeasure' => 'getUnitofmeasure',
        'unitconv' => 'getUnitconv',
        'warehouseid' => 'getWarehouseid',
        'lineitemtype' => 'getLineitemtype',
        'itemdesc1' => 'getItemdesc1',
        'itemdesc2' => 'getItemdesc2',
        'actualsellprice' => 'getActualsellprice',
        'cost' => 'getCost',
        'nonstockflag' => 'getNonstockflag',
        'listprice' => 'getListprice',
        'seqno' => 'getSeqno',
        'vendno' => 'getVendno',
        'prodline' => 'getProdline',
        'prodcat' => 'getProdcat',
        'retorderno' => 'getRetorderno',
        'retordersuf' => 'getRetordersuf',
        'retlineno' => 'getRetlineno',
        'retreason' => 'getRetreason',
        'inventoryty' => 'getInventoryty',
        'comments' => 'getComments',
        'createpo' => 'getCreatepo',
        'backorder' => 'getBackorder',
        'issueqty' => 'getIssueqty',
        'invtypeoverfl' => 'getInvtypeoverfl',
        'taxablefl' => 'getTaxablefl',
        'nontaxtype' => 'getNontaxtype',
        'copycommentfl' => 'getCopycommentfl',
        'reqshipdt' => 'getReqshipdt',
        'promisedt' => 'getPromisedt',
        'department' => 'getDepartment',
        'custglno' => 'getCustglno',
        'chargeno' => 'getChargeno',
        'lastpricepd' => 'getLastpricepd',
        'origdt' => 'getOrigdt',
        'approvedt' => 'getApprovedt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['newrecordfl'] = isset($data['newrecordfl']) ? $data['newrecordfl'] : null;
        $this->container['deleterecordfl'] = isset($data['deleterecordfl']) ? $data['deleterecordfl'] : null;
        $this->container['changerecordfl'] = isset($data['changerecordfl']) ? $data['changerecordfl'] : null;
        $this->container['lineno'] = isset($data['lineno']) ? $data['lineno'] : null;
        $this->container['processinglineno'] = isset($data['processinglineno']) ? $data['processinglineno'] : null;
        $this->container['itemnumber'] = isset($data['itemnumber']) ? $data['itemnumber'] : null;
        $this->container['custitem'] = isset($data['custitem']) ? $data['custitem'] : null;
        $this->container['orderqty'] = isset($data['orderqty']) ? $data['orderqty'] : null;
        $this->container['unitofmeasure'] = isset($data['unitofmeasure']) ? $data['unitofmeasure'] : null;
        $this->container['unitconv'] = isset($data['unitconv']) ? $data['unitconv'] : null;
        $this->container['warehouseid'] = isset($data['warehouseid']) ? $data['warehouseid'] : null;
        $this->container['lineitemtype'] = isset($data['lineitemtype']) ? $data['lineitemtype'] : null;
        $this->container['itemdesc1'] = isset($data['itemdesc1']) ? $data['itemdesc1'] : null;
        $this->container['itemdesc2'] = isset($data['itemdesc2']) ? $data['itemdesc2'] : null;
        $this->container['actualsellprice'] = isset($data['actualsellprice']) ? $data['actualsellprice'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['nonstockflag'] = isset($data['nonstockflag']) ? $data['nonstockflag'] : null;
        $this->container['listprice'] = isset($data['listprice']) ? $data['listprice'] : null;
        $this->container['seqno'] = isset($data['seqno']) ? $data['seqno'] : null;
        $this->container['vendno'] = isset($data['vendno']) ? $data['vendno'] : null;
        $this->container['prodline'] = isset($data['prodline']) ? $data['prodline'] : null;
        $this->container['prodcat'] = isset($data['prodcat']) ? $data['prodcat'] : null;
        $this->container['retorderno'] = isset($data['retorderno']) ? $data['retorderno'] : null;
        $this->container['retordersuf'] = isset($data['retordersuf']) ? $data['retordersuf'] : null;
        $this->container['retlineno'] = isset($data['retlineno']) ? $data['retlineno'] : null;
        $this->container['retreason'] = isset($data['retreason']) ? $data['retreason'] : null;
        $this->container['inventoryty'] = isset($data['inventoryty']) ? $data['inventoryty'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['createpo'] = isset($data['createpo']) ? $data['createpo'] : null;
        $this->container['backorder'] = isset($data['backorder']) ? $data['backorder'] : null;
        $this->container['issueqty'] = isset($data['issueqty']) ? $data['issueqty'] : null;
        $this->container['invtypeoverfl'] = isset($data['invtypeoverfl']) ? $data['invtypeoverfl'] : null;
        $this->container['taxablefl'] = isset($data['taxablefl']) ? $data['taxablefl'] : null;
        $this->container['nontaxtype'] = isset($data['nontaxtype']) ? $data['nontaxtype'] : null;
        $this->container['copycommentfl'] = isset($data['copycommentfl']) ? $data['copycommentfl'] : null;
        $this->container['reqshipdt'] = isset($data['reqshipdt']) ? $data['reqshipdt'] : null;
        $this->container['promisedt'] = isset($data['promisedt']) ? $data['promisedt'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['custglno'] = isset($data['custglno']) ? $data['custglno'] : null;
        $this->container['chargeno'] = isset($data['chargeno']) ? $data['chargeno'] : null;
        $this->container['lastpricepd'] = isset($data['lastpricepd']) ? $data['lastpricepd'] : null;
        $this->container['origdt'] = isset($data['origdt']) ? $data['origdt'] : null;
        $this->container['approvedt'] = isset($data['approvedt']) ? $data['approvedt'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets newrecordfl
     *
     * @return bool
     */
    public function getNewrecordfl()
    {
        return $this->container['newrecordfl'];
    }

    /**
     * Sets newrecordfl
     *
     * @param bool $newrecordfl newrecordfl
     *
     * @return $this
     */
    public function setNewrecordfl($newrecordfl)
    {
        $this->container['newrecordfl'] = $newrecordfl;

        return $this;
    }

    /**
     * Gets deleterecordfl
     *
     * @return bool
     */
    public function getDeleterecordfl()
    {
        return $this->container['deleterecordfl'];
    }

    /**
     * Sets deleterecordfl
     *
     * @param bool $deleterecordfl deleterecordfl
     *
     * @return $this
     */
    public function setDeleterecordfl($deleterecordfl)
    {
        $this->container['deleterecordfl'] = $deleterecordfl;

        return $this;
    }

    /**
     * Gets changerecordfl
     *
     * @return bool
     */
    public function getChangerecordfl()
    {
        return $this->container['changerecordfl'];
    }

    /**
     * Sets changerecordfl
     *
     * @param bool $changerecordfl changerecordfl
     *
     * @return $this
     */
    public function setChangerecordfl($changerecordfl)
    {
        $this->container['changerecordfl'] = $changerecordfl;

        return $this;
    }

    /**
     * Gets lineno
     *
     * @return int
     */
    public function getLineno()
    {
        return $this->container['lineno'];
    }

    /**
     * Sets lineno
     *
     * @param int $lineno lineno
     *
     * @return $this
     */
    public function setLineno($lineno)
    {
        $this->container['lineno'] = $lineno;

        return $this;
    }

    /**
     * Gets processinglineno
     *
     * @return int
     */
    public function getProcessinglineno()
    {
        return $this->container['processinglineno'];
    }

    /**
     * Sets processinglineno
     *
     * @param int $processinglineno processinglineno
     *
     * @return $this
     */
    public function setProcessinglineno($processinglineno)
    {
        $this->container['processinglineno'] = $processinglineno;

        return $this;
    }

    /**
     * Gets itemnumber
     *
     * @return string
     */
    public function getItemnumber()
    {
        return $this->container['itemnumber'];
    }

    /**
     * Sets itemnumber
     *
     * @param string $itemnumber itemnumber
     *
     * @return $this
     */
    public function setItemnumber($itemnumber)
    {
        $this->container['itemnumber'] = $itemnumber;

        return $this;
    }

    /**
     * Gets custitem
     *
     * @return string
     */
    public function getCustitem()
    {
        return $this->container['custitem'];
    }

    /**
     * Sets custitem
     *
     * @param string $custitem custitem
     *
     * @return $this
     */
    public function setCustitem($custitem)
    {
        $this->container['custitem'] = $custitem;

        return $this;
    }

    /**
     * Gets orderqty
     *
     * @return double
     */
    public function getOrderqty()
    {
        return $this->container['orderqty'];
    }

    /**
     * Sets orderqty
     *
     * @param double $orderqty orderqty
     *
     * @return $this
     */
    public function setOrderqty($orderqty)
    {
        $this->container['orderqty'] = $orderqty;

        return $this;
    }

    /**
     * Gets unitofmeasure
     *
     * @return string
     */
    public function getUnitofmeasure()
    {
        return $this->container['unitofmeasure'];
    }

    /**
     * Sets unitofmeasure
     *
     * @param string $unitofmeasure unitofmeasure
     *
     * @return $this
     */
    public function setUnitofmeasure($unitofmeasure)
    {
        $this->container['unitofmeasure'] = $unitofmeasure;

        return $this;
    }

    /**
     * Gets unitconv
     *
     * @return double
     */
    public function getUnitconv()
    {
        return $this->container['unitconv'];
    }

    /**
     * Sets unitconv
     *
     * @param double $unitconv unitconv
     *
     * @return $this
     */
    public function setUnitconv($unitconv)
    {
        $this->container['unitconv'] = $unitconv;

        return $this;
    }

    /**
     * Gets warehouseid
     *
     * @return string
     */
    public function getWarehouseid()
    {
        return $this->container['warehouseid'];
    }

    /**
     * Sets warehouseid
     *
     * @param string $warehouseid warehouseid
     *
     * @return $this
     */
    public function setWarehouseid($warehouseid)
    {
        $this->container['warehouseid'] = $warehouseid;

        return $this;
    }

    /**
     * Gets lineitemtype
     *
     * @return string
     */
    public function getLineitemtype()
    {
        return $this->container['lineitemtype'];
    }

    /**
     * Sets lineitemtype
     *
     * @param string $lineitemtype lineitemtype
     *
     * @return $this
     */
    public function setLineitemtype($lineitemtype)
    {
        $this->container['lineitemtype'] = $lineitemtype;

        return $this;
    }

    /**
     * Gets itemdesc1
     *
     * @return string
     */
    public function getItemdesc1()
    {
        return $this->container['itemdesc1'];
    }

    /**
     * Sets itemdesc1
     *
     * @param string $itemdesc1 itemdesc1
     *
     * @return $this
     */
    public function setItemdesc1($itemdesc1)
    {
        $this->container['itemdesc1'] = $itemdesc1;

        return $this;
    }

    /**
     * Gets itemdesc2
     *
     * @return string
     */
    public function getItemdesc2()
    {
        return $this->container['itemdesc2'];
    }

    /**
     * Sets itemdesc2
     *
     * @param string $itemdesc2 itemdesc2
     *
     * @return $this
     */
    public function setItemdesc2($itemdesc2)
    {
        $this->container['itemdesc2'] = $itemdesc2;

        return $this;
    }

    /**
     * Gets actualsellprice
     *
     * @return double
     */
    public function getActualsellprice()
    {
        return $this->container['actualsellprice'];
    }

    /**
     * Sets actualsellprice
     *
     * @param double $actualsellprice actualsellprice
     *
     * @return $this
     */
    public function setActualsellprice($actualsellprice)
    {
        $this->container['actualsellprice'] = $actualsellprice;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return double
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param double $cost cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets nonstockflag
     *
     * @return string
     */
    public function getNonstockflag()
    {
        return $this->container['nonstockflag'];
    }

    /**
     * Sets nonstockflag
     *
     * @param string $nonstockflag nonstockflag
     *
     * @return $this
     */
    public function setNonstockflag($nonstockflag)
    {
        $this->container['nonstockflag'] = $nonstockflag;

        return $this;
    }

    /**
     * Gets listprice
     *
     * @return string
     */
    public function getListprice()
    {
        return $this->container['listprice'];
    }

    /**
     * Sets listprice
     *
     * @param string $listprice listprice
     *
     * @return $this
     */
    public function setListprice($listprice)
    {
        $this->container['listprice'] = $listprice;

        return $this;
    }

    /**
     * Gets seqno
     *
     * @return int
     */
    public function getSeqno()
    {
        return $this->container['seqno'];
    }

    /**
     * Sets seqno
     *
     * @param int $seqno seqno
     *
     * @return $this
     */
    public function setSeqno($seqno)
    {
        $this->container['seqno'] = $seqno;

        return $this;
    }

    /**
     * Gets vendno
     *
     * @return double
     */
    public function getVendno()
    {
        return $this->container['vendno'];
    }

    /**
     * Sets vendno
     *
     * @param double $vendno vendno
     *
     * @return $this
     */
    public function setVendno($vendno)
    {
        $this->container['vendno'] = $vendno;

        return $this;
    }

    /**
     * Gets prodline
     *
     * @return string
     */
    public function getProdline()
    {
        return $this->container['prodline'];
    }

    /**
     * Sets prodline
     *
     * @param string $prodline prodline
     *
     * @return $this
     */
    public function setProdline($prodline)
    {
        $this->container['prodline'] = $prodline;

        return $this;
    }

    /**
     * Gets prodcat
     *
     * @return string
     */
    public function getProdcat()
    {
        return $this->container['prodcat'];
    }

    /**
     * Sets prodcat
     *
     * @param string $prodcat prodcat
     *
     * @return $this
     */
    public function setProdcat($prodcat)
    {
        $this->container['prodcat'] = $prodcat;

        return $this;
    }

    /**
     * Gets retorderno
     *
     * @return int
     */
    public function getRetorderno()
    {
        return $this->container['retorderno'];
    }

    /**
     * Sets retorderno
     *
     * @param int $retorderno retorderno
     *
     * @return $this
     */
    public function setRetorderno($retorderno)
    {
        $this->container['retorderno'] = $retorderno;

        return $this;
    }

    /**
     * Gets retordersuf
     *
     * @return int
     */
    public function getRetordersuf()
    {
        return $this->container['retordersuf'];
    }

    /**
     * Sets retordersuf
     *
     * @param int $retordersuf retordersuf
     *
     * @return $this
     */
    public function setRetordersuf($retordersuf)
    {
        $this->container['retordersuf'] = $retordersuf;

        return $this;
    }

    /**
     * Gets retlineno
     *
     * @return int
     */
    public function getRetlineno()
    {
        return $this->container['retlineno'];
    }

    /**
     * Sets retlineno
     *
     * @param int $retlineno retlineno
     *
     * @return $this
     */
    public function setRetlineno($retlineno)
    {
        $this->container['retlineno'] = $retlineno;

        return $this;
    }

    /**
     * Gets retreason
     *
     * @return string
     */
    public function getRetreason()
    {
        return $this->container['retreason'];
    }

    /**
     * Sets retreason
     *
     * @param string $retreason retreason
     *
     * @return $this
     */
    public function setRetreason($retreason)
    {
        $this->container['retreason'] = $retreason;

        return $this;
    }

    /**
     * Gets inventoryty
     *
     * @return string
     */
    public function getInventoryty()
    {
        return $this->container['inventoryty'];
    }

    /**
     * Sets inventoryty
     *
     * @param string $inventoryty inventoryty
     *
     * @return $this
     */
    public function setInventoryty($inventoryty)
    {
        $this->container['inventoryty'] = $inventoryty;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets createpo
     *
     * @return string
     */
    public function getCreatepo()
    {
        return $this->container['createpo'];
    }

    /**
     * Sets createpo
     *
     * @param string $createpo createpo
     *
     * @return $this
     */
    public function setCreatepo($createpo)
    {
        $this->container['createpo'] = $createpo;

        return $this;
    }

    /**
     * Gets backorder
     *
     * @return string
     */
    public function getBackorder()
    {
        return $this->container['backorder'];
    }

    /**
     * Sets backorder
     *
     * @param string $backorder backorder
     *
     * @return $this
     */
    public function setBackorder($backorder)
    {
        $this->container['backorder'] = $backorder;

        return $this;
    }

    /**
     * Gets issueqty
     *
     * @return double
     */
    public function getIssueqty()
    {
        return $this->container['issueqty'];
    }

    /**
     * Sets issueqty
     *
     * @param double $issueqty issueqty
     *
     * @return $this
     */
    public function setIssueqty($issueqty)
    {
        $this->container['issueqty'] = $issueqty;

        return $this;
    }

    /**
     * Gets invtypeoverfl
     *
     * @return string
     */
    public function getInvtypeoverfl()
    {
        return $this->container['invtypeoverfl'];
    }

    /**
     * Sets invtypeoverfl
     *
     * @param string $invtypeoverfl invtypeoverfl
     *
     * @return $this
     */
    public function setInvtypeoverfl($invtypeoverfl)
    {
        $this->container['invtypeoverfl'] = $invtypeoverfl;

        return $this;
    }

    /**
     * Gets taxablefl
     *
     * @return bool
     */
    public function getTaxablefl()
    {
        return $this->container['taxablefl'];
    }

    /**
     * Sets taxablefl
     *
     * @param bool $taxablefl taxablefl
     *
     * @return $this
     */
    public function setTaxablefl($taxablefl)
    {
        $this->container['taxablefl'] = $taxablefl;

        return $this;
    }

    /**
     * Gets nontaxtype
     *
     * @return string
     */
    public function getNontaxtype()
    {
        return $this->container['nontaxtype'];
    }

    /**
     * Sets nontaxtype
     *
     * @param string $nontaxtype nontaxtype
     *
     * @return $this
     */
    public function setNontaxtype($nontaxtype)
    {
        $this->container['nontaxtype'] = $nontaxtype;

        return $this;
    }

    /**
     * Gets copycommentfl
     *
     * @return bool
     */
    public function getCopycommentfl()
    {
        return $this->container['copycommentfl'];
    }

    /**
     * Sets copycommentfl
     *
     * @param bool $copycommentfl copycommentfl
     *
     * @return $this
     */
    public function setCopycommentfl($copycommentfl)
    {
        $this->container['copycommentfl'] = $copycommentfl;

        return $this;
    }

    /**
     * Gets reqshipdt
     *
     * @return \DateTime
     */
    public function getReqshipdt()
    {
        return $this->container['reqshipdt'];
    }

    /**
     * Sets reqshipdt
     *
     * @param \DateTime $reqshipdt reqshipdt
     *
     * @return $this
     */
    public function setReqshipdt($reqshipdt)
    {
        $this->container['reqshipdt'] = $reqshipdt;

        return $this;
    }

    /**
     * Gets promisedt
     *
     * @return \DateTime
     */
    public function getPromisedt()
    {
        return $this->container['promisedt'];
    }

    /**
     * Sets promisedt
     *
     * @param \DateTime $promisedt promisedt
     *
     * @return $this
     */
    public function setPromisedt($promisedt)
    {
        $this->container['promisedt'] = $promisedt;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string $department department
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets custglno
     *
     * @return string
     */
    public function getCustglno()
    {
        return $this->container['custglno'];
    }

    /**
     * Sets custglno
     *
     * @param string $custglno custglno
     *
     * @return $this
     */
    public function setCustglno($custglno)
    {
        $this->container['custglno'] = $custglno;

        return $this;
    }

    /**
     * Gets chargeno
     *
     * @return string
     */
    public function getChargeno()
    {
        return $this->container['chargeno'];
    }

    /**
     * Sets chargeno
     *
     * @param string $chargeno chargeno
     *
     * @return $this
     */
    public function setChargeno($chargeno)
    {
        $this->container['chargeno'] = $chargeno;

        return $this;
    }

    /**
     * Gets lastpricepd
     *
     * @return double
     */
    public function getLastpricepd()
    {
        return $this->container['lastpricepd'];
    }

    /**
     * Sets lastpricepd
     *
     * @param double $lastpricepd lastpricepd
     *
     * @return $this
     */
    public function setLastpricepd($lastpricepd)
    {
        $this->container['lastpricepd'] = $lastpricepd;

        return $this;
    }

    /**
     * Gets origdt
     *
     * @return \DateTime
     */
    public function getOrigdt()
    {
        return $this->container['origdt'];
    }

    /**
     * Sets origdt
     *
     * @param \DateTime $origdt origdt
     *
     * @return $this
     */
    public function setOrigdt($origdt)
    {
        $this->container['origdt'] = $origdt;

        return $this;
    }

    /**
     * Gets approvedt
     *
     * @return \DateTime
     */
    public function getApprovedt()
    {
        return $this->container['approvedt'];
    }

    /**
     * Sets approvedt
     *
     * @param \DateTime $approvedt approvedt
     *
     * @return $this
     */
    public function setApprovedt($approvedt)
    {
        $this->container['approvedt'] = $approvedt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


