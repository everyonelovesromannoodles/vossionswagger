<?php
/**
 * SxapiicgetwhseproductdatataxingResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SxapiicgetwhseproductdatataxingResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SxapiicgetwhseproductdatataxingResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapiicgetwhseproductdatataxing_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'c_error_message' => 'string',
        'cross_reference_product' => 'string',
        'cross_reference_type' => 'string',
        'gst_status' => 'bool',
        'non_tax_type' => 'string',
        'non_tax_type_desc' => 'string',
        'tariff_code' => 'string',
        'taxable_type' => 'string',
        'tax_group' => 'int',
        'tax_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'c_error_message' => null,
        'cross_reference_product' => null,
        'cross_reference_type' => null,
        'gst_status' => null,
        'non_tax_type' => null,
        'non_tax_type_desc' => null,
        'tariff_code' => null,
        'taxable_type' => null,
        'tax_group' => 'int64',
        'tax_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c_error_message' => 'cErrorMessage',
        'cross_reference_product' => 'crossReferenceProduct',
        'cross_reference_type' => 'crossReferenceType',
        'gst_status' => 'gstStatus',
        'non_tax_type' => 'nonTaxType',
        'non_tax_type_desc' => 'nonTaxTypeDesc',
        'tariff_code' => 'tariffCode',
        'taxable_type' => 'taxableType',
        'tax_group' => 'taxGroup',
        'tax_type' => 'taxType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c_error_message' => 'setCErrorMessage',
        'cross_reference_product' => 'setCrossReferenceProduct',
        'cross_reference_type' => 'setCrossReferenceType',
        'gst_status' => 'setGstStatus',
        'non_tax_type' => 'setNonTaxType',
        'non_tax_type_desc' => 'setNonTaxTypeDesc',
        'tariff_code' => 'setTariffCode',
        'taxable_type' => 'setTaxableType',
        'tax_group' => 'setTaxGroup',
        'tax_type' => 'setTaxType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c_error_message' => 'getCErrorMessage',
        'cross_reference_product' => 'getCrossReferenceProduct',
        'cross_reference_type' => 'getCrossReferenceType',
        'gst_status' => 'getGstStatus',
        'non_tax_type' => 'getNonTaxType',
        'non_tax_type_desc' => 'getNonTaxTypeDesc',
        'tariff_code' => 'getTariffCode',
        'taxable_type' => 'getTaxableType',
        'tax_group' => 'getTaxGroup',
        'tax_type' => 'getTaxType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['c_error_message'] = isset($data['c_error_message']) ? $data['c_error_message'] : null;
        $this->container['cross_reference_product'] = isset($data['cross_reference_product']) ? $data['cross_reference_product'] : null;
        $this->container['cross_reference_type'] = isset($data['cross_reference_type']) ? $data['cross_reference_type'] : null;
        $this->container['gst_status'] = isset($data['gst_status']) ? $data['gst_status'] : null;
        $this->container['non_tax_type'] = isset($data['non_tax_type']) ? $data['non_tax_type'] : null;
        $this->container['non_tax_type_desc'] = isset($data['non_tax_type_desc']) ? $data['non_tax_type_desc'] : null;
        $this->container['tariff_code'] = isset($data['tariff_code']) ? $data['tariff_code'] : null;
        $this->container['taxable_type'] = isset($data['taxable_type']) ? $data['taxable_type'] : null;
        $this->container['tax_group'] = isset($data['tax_group']) ? $data['tax_group'] : null;
        $this->container['tax_type'] = isset($data['tax_type']) ? $data['tax_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c_error_message
     *
     * @return string
     */
    public function getCErrorMessage()
    {
        return $this->container['c_error_message'];
    }

    /**
     * Sets c_error_message
     *
     * @param string $c_error_message c_error_message
     *
     * @return $this
     */
    public function setCErrorMessage($c_error_message)
    {
        $this->container['c_error_message'] = $c_error_message;

        return $this;
    }

    /**
     * Gets cross_reference_product
     *
     * @return string
     */
    public function getCrossReferenceProduct()
    {
        return $this->container['cross_reference_product'];
    }

    /**
     * Sets cross_reference_product
     *
     * @param string $cross_reference_product cross_reference_product
     *
     * @return $this
     */
    public function setCrossReferenceProduct($cross_reference_product)
    {
        $this->container['cross_reference_product'] = $cross_reference_product;

        return $this;
    }

    /**
     * Gets cross_reference_type
     *
     * @return string
     */
    public function getCrossReferenceType()
    {
        return $this->container['cross_reference_type'];
    }

    /**
     * Sets cross_reference_type
     *
     * @param string $cross_reference_type cross_reference_type
     *
     * @return $this
     */
    public function setCrossReferenceType($cross_reference_type)
    {
        $this->container['cross_reference_type'] = $cross_reference_type;

        return $this;
    }

    /**
     * Gets gst_status
     *
     * @return bool
     */
    public function getGstStatus()
    {
        return $this->container['gst_status'];
    }

    /**
     * Sets gst_status
     *
     * @param bool $gst_status gst_status
     *
     * @return $this
     */
    public function setGstStatus($gst_status)
    {
        $this->container['gst_status'] = $gst_status;

        return $this;
    }

    /**
     * Gets non_tax_type
     *
     * @return string
     */
    public function getNonTaxType()
    {
        return $this->container['non_tax_type'];
    }

    /**
     * Sets non_tax_type
     *
     * @param string $non_tax_type non_tax_type
     *
     * @return $this
     */
    public function setNonTaxType($non_tax_type)
    {
        $this->container['non_tax_type'] = $non_tax_type;

        return $this;
    }

    /**
     * Gets non_tax_type_desc
     *
     * @return string
     */
    public function getNonTaxTypeDesc()
    {
        return $this->container['non_tax_type_desc'];
    }

    /**
     * Sets non_tax_type_desc
     *
     * @param string $non_tax_type_desc non_tax_type_desc
     *
     * @return $this
     */
    public function setNonTaxTypeDesc($non_tax_type_desc)
    {
        $this->container['non_tax_type_desc'] = $non_tax_type_desc;

        return $this;
    }

    /**
     * Gets tariff_code
     *
     * @return string
     */
    public function getTariffCode()
    {
        return $this->container['tariff_code'];
    }

    /**
     * Sets tariff_code
     *
     * @param string $tariff_code tariff_code
     *
     * @return $this
     */
    public function setTariffCode($tariff_code)
    {
        $this->container['tariff_code'] = $tariff_code;

        return $this;
    }

    /**
     * Gets taxable_type
     *
     * @return string
     */
    public function getTaxableType()
    {
        return $this->container['taxable_type'];
    }

    /**
     * Sets taxable_type
     *
     * @param string $taxable_type taxable_type
     *
     * @return $this
     */
    public function setTaxableType($taxable_type)
    {
        $this->container['taxable_type'] = $taxable_type;

        return $this;
    }

    /**
     * Gets tax_group
     *
     * @return int
     */
    public function getTaxGroup()
    {
        return $this->container['tax_group'];
    }

    /**
     * Sets tax_group
     *
     * @param int $tax_group tax_group
     *
     * @return $this
     */
    public function setTaxGroup($tax_group)
    {
        $this->container['tax_group'] = $tax_group;

        return $this;
    }

    /**
     * Gets tax_type
     *
     * @return string
     */
    public function getTaxType()
    {
        return $this->container['tax_type'];
    }

    /**
     * Sets tax_type
     *
     * @param string $tax_type tax_type
     *
     * @return $this
     */
    public function setTaxType($tax_type)
    {
        $this->container['tax_type'] = $tax_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


