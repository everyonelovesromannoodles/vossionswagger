<?php
/**
 * TCustcontact
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TCustcontact Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TCustcontact implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-custcontact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contactid' => 'double',
        'firstnm' => 'string',
        'notesfl' => 'string',
        'middlenm' => 'string',
        'lastnm' => 'string',
        'cotitle' => 'string',
        'comment' => 'string',
        'priority' => 'int',
        'salutation' => 'string',
        'groupcd' => 'string',
        'contacttype' => 'string',
        'contacttypedesc' => 'string',
        'phoneno' => 'string',
        'emailaddr' => 'string',
        'addr1' => 'string',
        'addr2' => 'string',
        'city' => 'string',
        'faxphoneno' => 'string',
        'state' => 'string',
        'zipcd' => 'string',
        'ccno' => 'string',
        'others' => 'string',
        'c_name' => 'string',
        'c_addr' => 'string',
        'c_city_state_zip' => 'string',
        'contactsrecid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contactid' => 'double',
        'firstnm' => null,
        'notesfl' => null,
        'middlenm' => null,
        'lastnm' => null,
        'cotitle' => null,
        'comment' => null,
        'priority' => 'int64',
        'salutation' => null,
        'groupcd' => null,
        'contacttype' => null,
        'contacttypedesc' => null,
        'phoneno' => null,
        'emailaddr' => null,
        'addr1' => null,
        'addr2' => null,
        'city' => null,
        'faxphoneno' => null,
        'state' => null,
        'zipcd' => null,
        'ccno' => null,
        'others' => null,
        'c_name' => null,
        'c_addr' => null,
        'c_city_state_zip' => null,
        'contactsrecid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contactid' => 'contactid',
        'firstnm' => 'firstnm',
        'notesfl' => 'notesfl',
        'middlenm' => 'middlenm',
        'lastnm' => 'lastnm',
        'cotitle' => 'cotitle',
        'comment' => 'comment',
        'priority' => 'priority',
        'salutation' => 'salutation',
        'groupcd' => 'groupcd',
        'contacttype' => 'contacttype',
        'contacttypedesc' => 'contacttypedesc',
        'phoneno' => 'phoneno',
        'emailaddr' => 'emailaddr',
        'addr1' => 'addr1',
        'addr2' => 'addr2',
        'city' => 'city',
        'faxphoneno' => 'faxphoneno',
        'state' => 'state',
        'zipcd' => 'zipcd',
        'ccno' => 'ccno',
        'others' => 'others',
        'c_name' => 'cName',
        'c_addr' => 'cAddr',
        'c_city_state_zip' => 'cCityStateZip',
        'contactsrecid' => 'contactsrecid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contactid' => 'setContactid',
        'firstnm' => 'setFirstnm',
        'notesfl' => 'setNotesfl',
        'middlenm' => 'setMiddlenm',
        'lastnm' => 'setLastnm',
        'cotitle' => 'setCotitle',
        'comment' => 'setComment',
        'priority' => 'setPriority',
        'salutation' => 'setSalutation',
        'groupcd' => 'setGroupcd',
        'contacttype' => 'setContacttype',
        'contacttypedesc' => 'setContacttypedesc',
        'phoneno' => 'setPhoneno',
        'emailaddr' => 'setEmailaddr',
        'addr1' => 'setAddr1',
        'addr2' => 'setAddr2',
        'city' => 'setCity',
        'faxphoneno' => 'setFaxphoneno',
        'state' => 'setState',
        'zipcd' => 'setZipcd',
        'ccno' => 'setCcno',
        'others' => 'setOthers',
        'c_name' => 'setCName',
        'c_addr' => 'setCAddr',
        'c_city_state_zip' => 'setCCityStateZip',
        'contactsrecid' => 'setContactsrecid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contactid' => 'getContactid',
        'firstnm' => 'getFirstnm',
        'notesfl' => 'getNotesfl',
        'middlenm' => 'getMiddlenm',
        'lastnm' => 'getLastnm',
        'cotitle' => 'getCotitle',
        'comment' => 'getComment',
        'priority' => 'getPriority',
        'salutation' => 'getSalutation',
        'groupcd' => 'getGroupcd',
        'contacttype' => 'getContacttype',
        'contacttypedesc' => 'getContacttypedesc',
        'phoneno' => 'getPhoneno',
        'emailaddr' => 'getEmailaddr',
        'addr1' => 'getAddr1',
        'addr2' => 'getAddr2',
        'city' => 'getCity',
        'faxphoneno' => 'getFaxphoneno',
        'state' => 'getState',
        'zipcd' => 'getZipcd',
        'ccno' => 'getCcno',
        'others' => 'getOthers',
        'c_name' => 'getCName',
        'c_addr' => 'getCAddr',
        'c_city_state_zip' => 'getCCityStateZip',
        'contactsrecid' => 'getContactsrecid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contactid'] = isset($data['contactid']) ? $data['contactid'] : null;
        $this->container['firstnm'] = isset($data['firstnm']) ? $data['firstnm'] : null;
        $this->container['notesfl'] = isset($data['notesfl']) ? $data['notesfl'] : null;
        $this->container['middlenm'] = isset($data['middlenm']) ? $data['middlenm'] : null;
        $this->container['lastnm'] = isset($data['lastnm']) ? $data['lastnm'] : null;
        $this->container['cotitle'] = isset($data['cotitle']) ? $data['cotitle'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['salutation'] = isset($data['salutation']) ? $data['salutation'] : null;
        $this->container['groupcd'] = isset($data['groupcd']) ? $data['groupcd'] : null;
        $this->container['contacttype'] = isset($data['contacttype']) ? $data['contacttype'] : null;
        $this->container['contacttypedesc'] = isset($data['contacttypedesc']) ? $data['contacttypedesc'] : null;
        $this->container['phoneno'] = isset($data['phoneno']) ? $data['phoneno'] : null;
        $this->container['emailaddr'] = isset($data['emailaddr']) ? $data['emailaddr'] : null;
        $this->container['addr1'] = isset($data['addr1']) ? $data['addr1'] : null;
        $this->container['addr2'] = isset($data['addr2']) ? $data['addr2'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['faxphoneno'] = isset($data['faxphoneno']) ? $data['faxphoneno'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['zipcd'] = isset($data['zipcd']) ? $data['zipcd'] : null;
        $this->container['ccno'] = isset($data['ccno']) ? $data['ccno'] : null;
        $this->container['others'] = isset($data['others']) ? $data['others'] : null;
        $this->container['c_name'] = isset($data['c_name']) ? $data['c_name'] : null;
        $this->container['c_addr'] = isset($data['c_addr']) ? $data['c_addr'] : null;
        $this->container['c_city_state_zip'] = isset($data['c_city_state_zip']) ? $data['c_city_state_zip'] : null;
        $this->container['contactsrecid'] = isset($data['contactsrecid']) ? $data['contactsrecid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contactid
     *
     * @return double
     */
    public function getContactid()
    {
        return $this->container['contactid'];
    }

    /**
     * Sets contactid
     *
     * @param double $contactid contactid
     *
     * @return $this
     */
    public function setContactid($contactid)
    {
        $this->container['contactid'] = $contactid;

        return $this;
    }

    /**
     * Gets firstnm
     *
     * @return string
     */
    public function getFirstnm()
    {
        return $this->container['firstnm'];
    }

    /**
     * Sets firstnm
     *
     * @param string $firstnm firstnm
     *
     * @return $this
     */
    public function setFirstnm($firstnm)
    {
        $this->container['firstnm'] = $firstnm;

        return $this;
    }

    /**
     * Gets notesfl
     *
     * @return string
     */
    public function getNotesfl()
    {
        return $this->container['notesfl'];
    }

    /**
     * Sets notesfl
     *
     * @param string $notesfl notesfl
     *
     * @return $this
     */
    public function setNotesfl($notesfl)
    {
        $this->container['notesfl'] = $notesfl;

        return $this;
    }

    /**
     * Gets middlenm
     *
     * @return string
     */
    public function getMiddlenm()
    {
        return $this->container['middlenm'];
    }

    /**
     * Sets middlenm
     *
     * @param string $middlenm middlenm
     *
     * @return $this
     */
    public function setMiddlenm($middlenm)
    {
        $this->container['middlenm'] = $middlenm;

        return $this;
    }

    /**
     * Gets lastnm
     *
     * @return string
     */
    public function getLastnm()
    {
        return $this->container['lastnm'];
    }

    /**
     * Sets lastnm
     *
     * @param string $lastnm lastnm
     *
     * @return $this
     */
    public function setLastnm($lastnm)
    {
        $this->container['lastnm'] = $lastnm;

        return $this;
    }

    /**
     * Gets cotitle
     *
     * @return string
     */
    public function getCotitle()
    {
        return $this->container['cotitle'];
    }

    /**
     * Sets cotitle
     *
     * @param string $cotitle cotitle
     *
     * @return $this
     */
    public function setCotitle($cotitle)
    {
        $this->container['cotitle'] = $cotitle;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets salutation
     *
     * @return string
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param string $salutation salutation
     *
     * @return $this
     */
    public function setSalutation($salutation)
    {
        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets groupcd
     *
     * @return string
     */
    public function getGroupcd()
    {
        return $this->container['groupcd'];
    }

    /**
     * Sets groupcd
     *
     * @param string $groupcd groupcd
     *
     * @return $this
     */
    public function setGroupcd($groupcd)
    {
        $this->container['groupcd'] = $groupcd;

        return $this;
    }

    /**
     * Gets contacttype
     *
     * @return string
     */
    public function getContacttype()
    {
        return $this->container['contacttype'];
    }

    /**
     * Sets contacttype
     *
     * @param string $contacttype contacttype
     *
     * @return $this
     */
    public function setContacttype($contacttype)
    {
        $this->container['contacttype'] = $contacttype;

        return $this;
    }

    /**
     * Gets contacttypedesc
     *
     * @return string
     */
    public function getContacttypedesc()
    {
        return $this->container['contacttypedesc'];
    }

    /**
     * Sets contacttypedesc
     *
     * @param string $contacttypedesc contacttypedesc
     *
     * @return $this
     */
    public function setContacttypedesc($contacttypedesc)
    {
        $this->container['contacttypedesc'] = $contacttypedesc;

        return $this;
    }

    /**
     * Gets phoneno
     *
     * @return string
     */
    public function getPhoneno()
    {
        return $this->container['phoneno'];
    }

    /**
     * Sets phoneno
     *
     * @param string $phoneno phoneno
     *
     * @return $this
     */
    public function setPhoneno($phoneno)
    {
        $this->container['phoneno'] = $phoneno;

        return $this;
    }

    /**
     * Gets emailaddr
     *
     * @return string
     */
    public function getEmailaddr()
    {
        return $this->container['emailaddr'];
    }

    /**
     * Sets emailaddr
     *
     * @param string $emailaddr emailaddr
     *
     * @return $this
     */
    public function setEmailaddr($emailaddr)
    {
        $this->container['emailaddr'] = $emailaddr;

        return $this;
    }

    /**
     * Gets addr1
     *
     * @return string
     */
    public function getAddr1()
    {
        return $this->container['addr1'];
    }

    /**
     * Sets addr1
     *
     * @param string $addr1 addr1
     *
     * @return $this
     */
    public function setAddr1($addr1)
    {
        $this->container['addr1'] = $addr1;

        return $this;
    }

    /**
     * Gets addr2
     *
     * @return string
     */
    public function getAddr2()
    {
        return $this->container['addr2'];
    }

    /**
     * Sets addr2
     *
     * @param string $addr2 addr2
     *
     * @return $this
     */
    public function setAddr2($addr2)
    {
        $this->container['addr2'] = $addr2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets faxphoneno
     *
     * @return string
     */
    public function getFaxphoneno()
    {
        return $this->container['faxphoneno'];
    }

    /**
     * Sets faxphoneno
     *
     * @param string $faxphoneno faxphoneno
     *
     * @return $this
     */
    public function setFaxphoneno($faxphoneno)
    {
        $this->container['faxphoneno'] = $faxphoneno;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zipcd
     *
     * @return string
     */
    public function getZipcd()
    {
        return $this->container['zipcd'];
    }

    /**
     * Sets zipcd
     *
     * @param string $zipcd zipcd
     *
     * @return $this
     */
    public function setZipcd($zipcd)
    {
        $this->container['zipcd'] = $zipcd;

        return $this;
    }

    /**
     * Gets ccno
     *
     * @return string
     */
    public function getCcno()
    {
        return $this->container['ccno'];
    }

    /**
     * Sets ccno
     *
     * @param string $ccno ccno
     *
     * @return $this
     */
    public function setCcno($ccno)
    {
        $this->container['ccno'] = $ccno;

        return $this;
    }

    /**
     * Gets others
     *
     * @return string
     */
    public function getOthers()
    {
        return $this->container['others'];
    }

    /**
     * Sets others
     *
     * @param string $others others
     *
     * @return $this
     */
    public function setOthers($others)
    {
        $this->container['others'] = $others;

        return $this;
    }

    /**
     * Gets c_name
     *
     * @return string
     */
    public function getCName()
    {
        return $this->container['c_name'];
    }

    /**
     * Sets c_name
     *
     * @param string $c_name c_name
     *
     * @return $this
     */
    public function setCName($c_name)
    {
        $this->container['c_name'] = $c_name;

        return $this;
    }

    /**
     * Gets c_addr
     *
     * @return string
     */
    public function getCAddr()
    {
        return $this->container['c_addr'];
    }

    /**
     * Sets c_addr
     *
     * @param string $c_addr c_addr
     *
     * @return $this
     */
    public function setCAddr($c_addr)
    {
        $this->container['c_addr'] = $c_addr;

        return $this;
    }

    /**
     * Gets c_city_state_zip
     *
     * @return string
     */
    public function getCCityStateZip()
    {
        return $this->container['c_city_state_zip'];
    }

    /**
     * Sets c_city_state_zip
     *
     * @param string $c_city_state_zip c_city_state_zip
     *
     * @return $this
     */
    public function setCCityStateZip($c_city_state_zip)
    {
        $this->container['c_city_state_zip'] = $c_city_state_zip;

        return $this;
    }

    /**
     * Gets contactsrecid
     *
     * @return string
     */
    public function getContactsrecid()
    {
        return $this->container['contactsrecid'];
    }

    /**
     * Sets contactsrecid
     *
     * @param string $contactsrecid contactsrecid
     *
     * @return $this
     */
    public function setContactsrecid($contactsrecid)
    {
        $this->container['contactsrecid'] = $contactsrecid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


