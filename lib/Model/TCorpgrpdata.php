<?php
/**
 * TCorpgrpdata
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TCorpgrpdata Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TCorpgrpdata implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-corpgrpdata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'custno' => 'double',
        'name' => 'string',
        'addr1' => 'string',
        'addr2' => 'string',
        'addr3' => 'string',
        'addr4' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zipcd' => 'string',
        'country' => 'string',
        'phoneno' => 'string',
        'faxphoneno' => 'string',
        'whse' => 'string',
        'class' => 'string',
        'pricebucket' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'custno' => 'double',
        'name' => null,
        'addr1' => null,
        'addr2' => null,
        'addr3' => null,
        'addr4' => null,
        'city' => null,
        'state' => null,
        'zipcd' => null,
        'country' => null,
        'phoneno' => null,
        'faxphoneno' => null,
        'whse' => null,
        'class' => null,
        'pricebucket' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'custno' => 'custno',
        'name' => 'name',
        'addr1' => 'addr1',
        'addr2' => 'addr2',
        'addr3' => 'addr3',
        'addr4' => 'addr4',
        'city' => 'city',
        'state' => 'state',
        'zipcd' => 'zipcd',
        'country' => 'country',
        'phoneno' => 'phoneno',
        'faxphoneno' => 'faxphoneno',
        'whse' => 'whse',
        'class' => 'class',
        'pricebucket' => 'pricebucket'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'custno' => 'setCustno',
        'name' => 'setName',
        'addr1' => 'setAddr1',
        'addr2' => 'setAddr2',
        'addr3' => 'setAddr3',
        'addr4' => 'setAddr4',
        'city' => 'setCity',
        'state' => 'setState',
        'zipcd' => 'setZipcd',
        'country' => 'setCountry',
        'phoneno' => 'setPhoneno',
        'faxphoneno' => 'setFaxphoneno',
        'whse' => 'setWhse',
        'class' => 'setClass',
        'pricebucket' => 'setPricebucket'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'custno' => 'getCustno',
        'name' => 'getName',
        'addr1' => 'getAddr1',
        'addr2' => 'getAddr2',
        'addr3' => 'getAddr3',
        'addr4' => 'getAddr4',
        'city' => 'getCity',
        'state' => 'getState',
        'zipcd' => 'getZipcd',
        'country' => 'getCountry',
        'phoneno' => 'getPhoneno',
        'faxphoneno' => 'getFaxphoneno',
        'whse' => 'getWhse',
        'class' => 'getClass',
        'pricebucket' => 'getPricebucket'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['custno'] = isset($data['custno']) ? $data['custno'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['addr1'] = isset($data['addr1']) ? $data['addr1'] : null;
        $this->container['addr2'] = isset($data['addr2']) ? $data['addr2'] : null;
        $this->container['addr3'] = isset($data['addr3']) ? $data['addr3'] : null;
        $this->container['addr4'] = isset($data['addr4']) ? $data['addr4'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['zipcd'] = isset($data['zipcd']) ? $data['zipcd'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['phoneno'] = isset($data['phoneno']) ? $data['phoneno'] : null;
        $this->container['faxphoneno'] = isset($data['faxphoneno']) ? $data['faxphoneno'] : null;
        $this->container['whse'] = isset($data['whse']) ? $data['whse'] : null;
        $this->container['class'] = isset($data['class']) ? $data['class'] : null;
        $this->container['pricebucket'] = isset($data['pricebucket']) ? $data['pricebucket'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets custno
     *
     * @return double
     */
    public function getCustno()
    {
        return $this->container['custno'];
    }

    /**
     * Sets custno
     *
     * @param double $custno custno
     *
     * @return $this
     */
    public function setCustno($custno)
    {
        $this->container['custno'] = $custno;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets addr1
     *
     * @return string
     */
    public function getAddr1()
    {
        return $this->container['addr1'];
    }

    /**
     * Sets addr1
     *
     * @param string $addr1 addr1
     *
     * @return $this
     */
    public function setAddr1($addr1)
    {
        $this->container['addr1'] = $addr1;

        return $this;
    }

    /**
     * Gets addr2
     *
     * @return string
     */
    public function getAddr2()
    {
        return $this->container['addr2'];
    }

    /**
     * Sets addr2
     *
     * @param string $addr2 addr2
     *
     * @return $this
     */
    public function setAddr2($addr2)
    {
        $this->container['addr2'] = $addr2;

        return $this;
    }

    /**
     * Gets addr3
     *
     * @return string
     */
    public function getAddr3()
    {
        return $this->container['addr3'];
    }

    /**
     * Sets addr3
     *
     * @param string $addr3 addr3
     *
     * @return $this
     */
    public function setAddr3($addr3)
    {
        $this->container['addr3'] = $addr3;

        return $this;
    }

    /**
     * Gets addr4
     *
     * @return string
     */
    public function getAddr4()
    {
        return $this->container['addr4'];
    }

    /**
     * Sets addr4
     *
     * @param string $addr4 addr4
     *
     * @return $this
     */
    public function setAddr4($addr4)
    {
        $this->container['addr4'] = $addr4;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zipcd
     *
     * @return string
     */
    public function getZipcd()
    {
        return $this->container['zipcd'];
    }

    /**
     * Sets zipcd
     *
     * @param string $zipcd zipcd
     *
     * @return $this
     */
    public function setZipcd($zipcd)
    {
        $this->container['zipcd'] = $zipcd;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets phoneno
     *
     * @return string
     */
    public function getPhoneno()
    {
        return $this->container['phoneno'];
    }

    /**
     * Sets phoneno
     *
     * @param string $phoneno phoneno
     *
     * @return $this
     */
    public function setPhoneno($phoneno)
    {
        $this->container['phoneno'] = $phoneno;

        return $this;
    }

    /**
     * Gets faxphoneno
     *
     * @return string
     */
    public function getFaxphoneno()
    {
        return $this->container['faxphoneno'];
    }

    /**
     * Sets faxphoneno
     *
     * @param string $faxphoneno faxphoneno
     *
     * @return $this
     */
    public function setFaxphoneno($faxphoneno)
    {
        $this->container['faxphoneno'] = $faxphoneno;

        return $this;
    }

    /**
     * Gets whse
     *
     * @return string
     */
    public function getWhse()
    {
        return $this->container['whse'];
    }

    /**
     * Sets whse
     *
     * @param string $whse whse
     *
     * @return $this
     */
    public function setWhse($whse)
    {
        $this->container['whse'] = $whse;

        return $this;
    }

    /**
     * Gets class
     *
     * @return string
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param string $class class
     *
     * @return $this
     */
    public function setClass($class)
    {
        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets pricebucket
     *
     * @return string
     */
    public function getPricebucket()
    {
        return $this->container['pricebucket'];
    }

    /**
     * Sets pricebucket
     *
     * @param string $pricebucket pricebucket
     *
     * @return $this
     */
    public function setPricebucket($pricebucket)
    {
        $this->container['pricebucket'] = $pricebucket;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


