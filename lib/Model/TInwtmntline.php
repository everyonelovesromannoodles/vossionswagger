<?php
/**
 * TInwtmntline
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TInwtmntline Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TInwtmntline implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-inwtmntline';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'lineno' => 'int',
        'newrecordfl' => 'bool',
        'deleterecordfl' => 'bool',
        'changerecordfl' => 'bool',
        'origshipprod' => 'string',
        'commentdata' => 'string',
        'cubes' => 'double',
        'duedt' => '\DateTime',
        'enterdt' => '\DateTime',
        'ignoreltty' => 'string',
        'nonstockty' => 'string',
        'price' => 'double',
        'printty' => 'string',
        'prodcat' => 'string',
        'proddesc' => 'string',
        'proddesc2' => 'string',
        'qtyord' => 'double',
        'qtyunavail' => 'double',
        'reasunavty' => 'string',
        'reqprod' => 'string',
        'approvedt' => '\DateTime',
        'shipprod' => 'string',
        'subupgrdty' => 'string',
        'unit' => 'string',
        'unitconv' => 'double',
        'warrantyty' => 'string',
        'weight' => 'double',
        'user1' => 'string',
        'user2' => 'string',
        'user3' => 'string',
        'user4' => 'string',
        'user5' => 'string',
        'user6' => 'double',
        'user7' => 'double',
        'user8' => '\DateTime',
        'user9' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'lineno' => 'int64',
        'newrecordfl' => null,
        'deleterecordfl' => null,
        'changerecordfl' => null,
        'origshipprod' => null,
        'commentdata' => null,
        'cubes' => 'double',
        'duedt' => 'date',
        'enterdt' => 'date',
        'ignoreltty' => null,
        'nonstockty' => null,
        'price' => 'double',
        'printty' => null,
        'prodcat' => null,
        'proddesc' => null,
        'proddesc2' => null,
        'qtyord' => 'double',
        'qtyunavail' => 'double',
        'reasunavty' => null,
        'reqprod' => null,
        'approvedt' => 'date',
        'shipprod' => null,
        'subupgrdty' => null,
        'unit' => null,
        'unitconv' => 'double',
        'warrantyty' => null,
        'weight' => 'double',
        'user1' => null,
        'user2' => null,
        'user3' => null,
        'user4' => null,
        'user5' => null,
        'user6' => 'double',
        'user7' => 'double',
        'user8' => 'date',
        'user9' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lineno' => 'lineno',
        'newrecordfl' => 'newrecordfl',
        'deleterecordfl' => 'deleterecordfl',
        'changerecordfl' => 'changerecordfl',
        'origshipprod' => 'origshipprod',
        'commentdata' => 'commentdata',
        'cubes' => 'cubes',
        'duedt' => 'duedt',
        'enterdt' => 'enterdt',
        'ignoreltty' => 'ignoreltty',
        'nonstockty' => 'nonstockty',
        'price' => 'price',
        'printty' => 'printty',
        'prodcat' => 'prodcat',
        'proddesc' => 'proddesc',
        'proddesc2' => 'proddesc2',
        'qtyord' => 'qtyord',
        'qtyunavail' => 'qtyunavail',
        'reasunavty' => 'reasunavty',
        'reqprod' => 'reqprod',
        'approvedt' => 'approvedt',
        'shipprod' => 'shipprod',
        'subupgrdty' => 'subupgrdty',
        'unit' => 'unit',
        'unitconv' => 'unitconv',
        'warrantyty' => 'warrantyty',
        'weight' => 'weight',
        'user1' => 'user1',
        'user2' => 'user2',
        'user3' => 'user3',
        'user4' => 'user4',
        'user5' => 'user5',
        'user6' => 'user6',
        'user7' => 'user7',
        'user8' => 'user8',
        'user9' => 'user9'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lineno' => 'setLineno',
        'newrecordfl' => 'setNewrecordfl',
        'deleterecordfl' => 'setDeleterecordfl',
        'changerecordfl' => 'setChangerecordfl',
        'origshipprod' => 'setOrigshipprod',
        'commentdata' => 'setCommentdata',
        'cubes' => 'setCubes',
        'duedt' => 'setDuedt',
        'enterdt' => 'setEnterdt',
        'ignoreltty' => 'setIgnoreltty',
        'nonstockty' => 'setNonstockty',
        'price' => 'setPrice',
        'printty' => 'setPrintty',
        'prodcat' => 'setProdcat',
        'proddesc' => 'setProddesc',
        'proddesc2' => 'setProddesc2',
        'qtyord' => 'setQtyord',
        'qtyunavail' => 'setQtyunavail',
        'reasunavty' => 'setReasunavty',
        'reqprod' => 'setReqprod',
        'approvedt' => 'setApprovedt',
        'shipprod' => 'setShipprod',
        'subupgrdty' => 'setSubupgrdty',
        'unit' => 'setUnit',
        'unitconv' => 'setUnitconv',
        'warrantyty' => 'setWarrantyty',
        'weight' => 'setWeight',
        'user1' => 'setUser1',
        'user2' => 'setUser2',
        'user3' => 'setUser3',
        'user4' => 'setUser4',
        'user5' => 'setUser5',
        'user6' => 'setUser6',
        'user7' => 'setUser7',
        'user8' => 'setUser8',
        'user9' => 'setUser9'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lineno' => 'getLineno',
        'newrecordfl' => 'getNewrecordfl',
        'deleterecordfl' => 'getDeleterecordfl',
        'changerecordfl' => 'getChangerecordfl',
        'origshipprod' => 'getOrigshipprod',
        'commentdata' => 'getCommentdata',
        'cubes' => 'getCubes',
        'duedt' => 'getDuedt',
        'enterdt' => 'getEnterdt',
        'ignoreltty' => 'getIgnoreltty',
        'nonstockty' => 'getNonstockty',
        'price' => 'getPrice',
        'printty' => 'getPrintty',
        'prodcat' => 'getProdcat',
        'proddesc' => 'getProddesc',
        'proddesc2' => 'getProddesc2',
        'qtyord' => 'getQtyord',
        'qtyunavail' => 'getQtyunavail',
        'reasunavty' => 'getReasunavty',
        'reqprod' => 'getReqprod',
        'approvedt' => 'getApprovedt',
        'shipprod' => 'getShipprod',
        'subupgrdty' => 'getSubupgrdty',
        'unit' => 'getUnit',
        'unitconv' => 'getUnitconv',
        'warrantyty' => 'getWarrantyty',
        'weight' => 'getWeight',
        'user1' => 'getUser1',
        'user2' => 'getUser2',
        'user3' => 'getUser3',
        'user4' => 'getUser4',
        'user5' => 'getUser5',
        'user6' => 'getUser6',
        'user7' => 'getUser7',
        'user8' => 'getUser8',
        'user9' => 'getUser9'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lineno'] = isset($data['lineno']) ? $data['lineno'] : null;
        $this->container['newrecordfl'] = isset($data['newrecordfl']) ? $data['newrecordfl'] : null;
        $this->container['deleterecordfl'] = isset($data['deleterecordfl']) ? $data['deleterecordfl'] : null;
        $this->container['changerecordfl'] = isset($data['changerecordfl']) ? $data['changerecordfl'] : null;
        $this->container['origshipprod'] = isset($data['origshipprod']) ? $data['origshipprod'] : null;
        $this->container['commentdata'] = isset($data['commentdata']) ? $data['commentdata'] : null;
        $this->container['cubes'] = isset($data['cubes']) ? $data['cubes'] : null;
        $this->container['duedt'] = isset($data['duedt']) ? $data['duedt'] : null;
        $this->container['enterdt'] = isset($data['enterdt']) ? $data['enterdt'] : null;
        $this->container['ignoreltty'] = isset($data['ignoreltty']) ? $data['ignoreltty'] : null;
        $this->container['nonstockty'] = isset($data['nonstockty']) ? $data['nonstockty'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['printty'] = isset($data['printty']) ? $data['printty'] : null;
        $this->container['prodcat'] = isset($data['prodcat']) ? $data['prodcat'] : null;
        $this->container['proddesc'] = isset($data['proddesc']) ? $data['proddesc'] : null;
        $this->container['proddesc2'] = isset($data['proddesc2']) ? $data['proddesc2'] : null;
        $this->container['qtyord'] = isset($data['qtyord']) ? $data['qtyord'] : null;
        $this->container['qtyunavail'] = isset($data['qtyunavail']) ? $data['qtyunavail'] : null;
        $this->container['reasunavty'] = isset($data['reasunavty']) ? $data['reasunavty'] : null;
        $this->container['reqprod'] = isset($data['reqprod']) ? $data['reqprod'] : null;
        $this->container['approvedt'] = isset($data['approvedt']) ? $data['approvedt'] : null;
        $this->container['shipprod'] = isset($data['shipprod']) ? $data['shipprod'] : null;
        $this->container['subupgrdty'] = isset($data['subupgrdty']) ? $data['subupgrdty'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['unitconv'] = isset($data['unitconv']) ? $data['unitconv'] : null;
        $this->container['warrantyty'] = isset($data['warrantyty']) ? $data['warrantyty'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['user1'] = isset($data['user1']) ? $data['user1'] : null;
        $this->container['user2'] = isset($data['user2']) ? $data['user2'] : null;
        $this->container['user3'] = isset($data['user3']) ? $data['user3'] : null;
        $this->container['user4'] = isset($data['user4']) ? $data['user4'] : null;
        $this->container['user5'] = isset($data['user5']) ? $data['user5'] : null;
        $this->container['user6'] = isset($data['user6']) ? $data['user6'] : null;
        $this->container['user7'] = isset($data['user7']) ? $data['user7'] : null;
        $this->container['user8'] = isset($data['user8']) ? $data['user8'] : null;
        $this->container['user9'] = isset($data['user9']) ? $data['user9'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lineno
     *
     * @return int
     */
    public function getLineno()
    {
        return $this->container['lineno'];
    }

    /**
     * Sets lineno
     *
     * @param int $lineno lineno
     *
     * @return $this
     */
    public function setLineno($lineno)
    {
        $this->container['lineno'] = $lineno;

        return $this;
    }

    /**
     * Gets newrecordfl
     *
     * @return bool
     */
    public function getNewrecordfl()
    {
        return $this->container['newrecordfl'];
    }

    /**
     * Sets newrecordfl
     *
     * @param bool $newrecordfl newrecordfl
     *
     * @return $this
     */
    public function setNewrecordfl($newrecordfl)
    {
        $this->container['newrecordfl'] = $newrecordfl;

        return $this;
    }

    /**
     * Gets deleterecordfl
     *
     * @return bool
     */
    public function getDeleterecordfl()
    {
        return $this->container['deleterecordfl'];
    }

    /**
     * Sets deleterecordfl
     *
     * @param bool $deleterecordfl deleterecordfl
     *
     * @return $this
     */
    public function setDeleterecordfl($deleterecordfl)
    {
        $this->container['deleterecordfl'] = $deleterecordfl;

        return $this;
    }

    /**
     * Gets changerecordfl
     *
     * @return bool
     */
    public function getChangerecordfl()
    {
        return $this->container['changerecordfl'];
    }

    /**
     * Sets changerecordfl
     *
     * @param bool $changerecordfl changerecordfl
     *
     * @return $this
     */
    public function setChangerecordfl($changerecordfl)
    {
        $this->container['changerecordfl'] = $changerecordfl;

        return $this;
    }

    /**
     * Gets origshipprod
     *
     * @return string
     */
    public function getOrigshipprod()
    {
        return $this->container['origshipprod'];
    }

    /**
     * Sets origshipprod
     *
     * @param string $origshipprod origshipprod
     *
     * @return $this
     */
    public function setOrigshipprod($origshipprod)
    {
        $this->container['origshipprod'] = $origshipprod;

        return $this;
    }

    /**
     * Gets commentdata
     *
     * @return string
     */
    public function getCommentdata()
    {
        return $this->container['commentdata'];
    }

    /**
     * Sets commentdata
     *
     * @param string $commentdata commentdata
     *
     * @return $this
     */
    public function setCommentdata($commentdata)
    {
        $this->container['commentdata'] = $commentdata;

        return $this;
    }

    /**
     * Gets cubes
     *
     * @return double
     */
    public function getCubes()
    {
        return $this->container['cubes'];
    }

    /**
     * Sets cubes
     *
     * @param double $cubes cubes
     *
     * @return $this
     */
    public function setCubes($cubes)
    {
        $this->container['cubes'] = $cubes;

        return $this;
    }

    /**
     * Gets duedt
     *
     * @return \DateTime
     */
    public function getDuedt()
    {
        return $this->container['duedt'];
    }

    /**
     * Sets duedt
     *
     * @param \DateTime $duedt duedt
     *
     * @return $this
     */
    public function setDuedt($duedt)
    {
        $this->container['duedt'] = $duedt;

        return $this;
    }

    /**
     * Gets enterdt
     *
     * @return \DateTime
     */
    public function getEnterdt()
    {
        return $this->container['enterdt'];
    }

    /**
     * Sets enterdt
     *
     * @param \DateTime $enterdt enterdt
     *
     * @return $this
     */
    public function setEnterdt($enterdt)
    {
        $this->container['enterdt'] = $enterdt;

        return $this;
    }

    /**
     * Gets ignoreltty
     *
     * @return string
     */
    public function getIgnoreltty()
    {
        return $this->container['ignoreltty'];
    }

    /**
     * Sets ignoreltty
     *
     * @param string $ignoreltty ignoreltty
     *
     * @return $this
     */
    public function setIgnoreltty($ignoreltty)
    {
        $this->container['ignoreltty'] = $ignoreltty;

        return $this;
    }

    /**
     * Gets nonstockty
     *
     * @return string
     */
    public function getNonstockty()
    {
        return $this->container['nonstockty'];
    }

    /**
     * Sets nonstockty
     *
     * @param string $nonstockty nonstockty
     *
     * @return $this
     */
    public function setNonstockty($nonstockty)
    {
        $this->container['nonstockty'] = $nonstockty;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets printty
     *
     * @return string
     */
    public function getPrintty()
    {
        return $this->container['printty'];
    }

    /**
     * Sets printty
     *
     * @param string $printty printty
     *
     * @return $this
     */
    public function setPrintty($printty)
    {
        $this->container['printty'] = $printty;

        return $this;
    }

    /**
     * Gets prodcat
     *
     * @return string
     */
    public function getProdcat()
    {
        return $this->container['prodcat'];
    }

    /**
     * Sets prodcat
     *
     * @param string $prodcat prodcat
     *
     * @return $this
     */
    public function setProdcat($prodcat)
    {
        $this->container['prodcat'] = $prodcat;

        return $this;
    }

    /**
     * Gets proddesc
     *
     * @return string
     */
    public function getProddesc()
    {
        return $this->container['proddesc'];
    }

    /**
     * Sets proddesc
     *
     * @param string $proddesc proddesc
     *
     * @return $this
     */
    public function setProddesc($proddesc)
    {
        $this->container['proddesc'] = $proddesc;

        return $this;
    }

    /**
     * Gets proddesc2
     *
     * @return string
     */
    public function getProddesc2()
    {
        return $this->container['proddesc2'];
    }

    /**
     * Sets proddesc2
     *
     * @param string $proddesc2 proddesc2
     *
     * @return $this
     */
    public function setProddesc2($proddesc2)
    {
        $this->container['proddesc2'] = $proddesc2;

        return $this;
    }

    /**
     * Gets qtyord
     *
     * @return double
     */
    public function getQtyord()
    {
        return $this->container['qtyord'];
    }

    /**
     * Sets qtyord
     *
     * @param double $qtyord qtyord
     *
     * @return $this
     */
    public function setQtyord($qtyord)
    {
        $this->container['qtyord'] = $qtyord;

        return $this;
    }

    /**
     * Gets qtyunavail
     *
     * @return double
     */
    public function getQtyunavail()
    {
        return $this->container['qtyunavail'];
    }

    /**
     * Sets qtyunavail
     *
     * @param double $qtyunavail qtyunavail
     *
     * @return $this
     */
    public function setQtyunavail($qtyunavail)
    {
        $this->container['qtyunavail'] = $qtyunavail;

        return $this;
    }

    /**
     * Gets reasunavty
     *
     * @return string
     */
    public function getReasunavty()
    {
        return $this->container['reasunavty'];
    }

    /**
     * Sets reasunavty
     *
     * @param string $reasunavty reasunavty
     *
     * @return $this
     */
    public function setReasunavty($reasunavty)
    {
        $this->container['reasunavty'] = $reasunavty;

        return $this;
    }

    /**
     * Gets reqprod
     *
     * @return string
     */
    public function getReqprod()
    {
        return $this->container['reqprod'];
    }

    /**
     * Sets reqprod
     *
     * @param string $reqprod reqprod
     *
     * @return $this
     */
    public function setReqprod($reqprod)
    {
        $this->container['reqprod'] = $reqprod;

        return $this;
    }

    /**
     * Gets approvedt
     *
     * @return \DateTime
     */
    public function getApprovedt()
    {
        return $this->container['approvedt'];
    }

    /**
     * Sets approvedt
     *
     * @param \DateTime $approvedt approvedt
     *
     * @return $this
     */
    public function setApprovedt($approvedt)
    {
        $this->container['approvedt'] = $approvedt;

        return $this;
    }

    /**
     * Gets shipprod
     *
     * @return string
     */
    public function getShipprod()
    {
        return $this->container['shipprod'];
    }

    /**
     * Sets shipprod
     *
     * @param string $shipprod shipprod
     *
     * @return $this
     */
    public function setShipprod($shipprod)
    {
        $this->container['shipprod'] = $shipprod;

        return $this;
    }

    /**
     * Gets subupgrdty
     *
     * @return string
     */
    public function getSubupgrdty()
    {
        return $this->container['subupgrdty'];
    }

    /**
     * Sets subupgrdty
     *
     * @param string $subupgrdty subupgrdty
     *
     * @return $this
     */
    public function setSubupgrdty($subupgrdty)
    {
        $this->container['subupgrdty'] = $subupgrdty;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets unitconv
     *
     * @return double
     */
    public function getUnitconv()
    {
        return $this->container['unitconv'];
    }

    /**
     * Sets unitconv
     *
     * @param double $unitconv unitconv
     *
     * @return $this
     */
    public function setUnitconv($unitconv)
    {
        $this->container['unitconv'] = $unitconv;

        return $this;
    }

    /**
     * Gets warrantyty
     *
     * @return string
     */
    public function getWarrantyty()
    {
        return $this->container['warrantyty'];
    }

    /**
     * Sets warrantyty
     *
     * @param string $warrantyty warrantyty
     *
     * @return $this
     */
    public function setWarrantyty($warrantyty)
    {
        $this->container['warrantyty'] = $warrantyty;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return double
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param double $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets user1
     *
     * @return string
     */
    public function getUser1()
    {
        return $this->container['user1'];
    }

    /**
     * Sets user1
     *
     * @param string $user1 user1
     *
     * @return $this
     */
    public function setUser1($user1)
    {
        $this->container['user1'] = $user1;

        return $this;
    }

    /**
     * Gets user2
     *
     * @return string
     */
    public function getUser2()
    {
        return $this->container['user2'];
    }

    /**
     * Sets user2
     *
     * @param string $user2 user2
     *
     * @return $this
     */
    public function setUser2($user2)
    {
        $this->container['user2'] = $user2;

        return $this;
    }

    /**
     * Gets user3
     *
     * @return string
     */
    public function getUser3()
    {
        return $this->container['user3'];
    }

    /**
     * Sets user3
     *
     * @param string $user3 user3
     *
     * @return $this
     */
    public function setUser3($user3)
    {
        $this->container['user3'] = $user3;

        return $this;
    }

    /**
     * Gets user4
     *
     * @return string
     */
    public function getUser4()
    {
        return $this->container['user4'];
    }

    /**
     * Sets user4
     *
     * @param string $user4 user4
     *
     * @return $this
     */
    public function setUser4($user4)
    {
        $this->container['user4'] = $user4;

        return $this;
    }

    /**
     * Gets user5
     *
     * @return string
     */
    public function getUser5()
    {
        return $this->container['user5'];
    }

    /**
     * Sets user5
     *
     * @param string $user5 user5
     *
     * @return $this
     */
    public function setUser5($user5)
    {
        $this->container['user5'] = $user5;

        return $this;
    }

    /**
     * Gets user6
     *
     * @return double
     */
    public function getUser6()
    {
        return $this->container['user6'];
    }

    /**
     * Sets user6
     *
     * @param double $user6 user6
     *
     * @return $this
     */
    public function setUser6($user6)
    {
        $this->container['user6'] = $user6;

        return $this;
    }

    /**
     * Gets user7
     *
     * @return double
     */
    public function getUser7()
    {
        return $this->container['user7'];
    }

    /**
     * Sets user7
     *
     * @param double $user7 user7
     *
     * @return $this
     */
    public function setUser7($user7)
    {
        $this->container['user7'] = $user7;

        return $this;
    }

    /**
     * Gets user8
     *
     * @return \DateTime
     */
    public function getUser8()
    {
        return $this->container['user8'];
    }

    /**
     * Sets user8
     *
     * @param \DateTime $user8 user8
     *
     * @return $this
     */
    public function setUser8($user8)
    {
        $this->container['user8'] = $user8;

        return $this;
    }

    /**
     * Gets user9
     *
     * @return \DateTime
     */
    public function getUser9()
    {
        return $this->container['user9'];
    }

    /**
     * Sets user9
     *
     * @param \DateTime $user9 user9
     *
     * @return $this
     */
    public function setUser9($user9)
    {
        $this->container['user9'] = $user9;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


