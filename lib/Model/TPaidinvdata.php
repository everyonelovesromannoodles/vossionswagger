<?php
/**
 * TPaidinvdata
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TPaidinvdata Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TPaidinvdata implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-paidinvdata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'invoiceno' => 'int',
        'invoicesuf' => 'int',
        'invoicety' => 'string',
        'agedt' => '\DateTime',
        'invoiceamt' => 'double',
        'adjustamt' => 'double',
        'paymentamt' => 'double',
        'tradeinvamt' => 'double',
        'tradeadjamt' => 'double',
        'tradepayamt' => 'double',
        'currencycd' => 'string',
        'lasttransdt' => '\DateTime',
        'paydays' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'invoiceno' => 'int64',
        'invoicesuf' => 'int64',
        'invoicety' => null,
        'agedt' => 'date',
        'invoiceamt' => 'double',
        'adjustamt' => 'double',
        'paymentamt' => 'double',
        'tradeinvamt' => 'double',
        'tradeadjamt' => 'double',
        'tradepayamt' => 'double',
        'currencycd' => null,
        'lasttransdt' => 'date',
        'paydays' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoiceno' => 'invoiceno',
        'invoicesuf' => 'invoicesuf',
        'invoicety' => 'invoicety',
        'agedt' => 'agedt',
        'invoiceamt' => 'invoiceamt',
        'adjustamt' => 'adjustamt',
        'paymentamt' => 'paymentamt',
        'tradeinvamt' => 'tradeinvamt',
        'tradeadjamt' => 'tradeadjamt',
        'tradepayamt' => 'tradepayamt',
        'currencycd' => 'currencycd',
        'lasttransdt' => 'lasttransdt',
        'paydays' => 'paydays'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoiceno' => 'setInvoiceno',
        'invoicesuf' => 'setInvoicesuf',
        'invoicety' => 'setInvoicety',
        'agedt' => 'setAgedt',
        'invoiceamt' => 'setInvoiceamt',
        'adjustamt' => 'setAdjustamt',
        'paymentamt' => 'setPaymentamt',
        'tradeinvamt' => 'setTradeinvamt',
        'tradeadjamt' => 'setTradeadjamt',
        'tradepayamt' => 'setTradepayamt',
        'currencycd' => 'setCurrencycd',
        'lasttransdt' => 'setLasttransdt',
        'paydays' => 'setPaydays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoiceno' => 'getInvoiceno',
        'invoicesuf' => 'getInvoicesuf',
        'invoicety' => 'getInvoicety',
        'agedt' => 'getAgedt',
        'invoiceamt' => 'getInvoiceamt',
        'adjustamt' => 'getAdjustamt',
        'paymentamt' => 'getPaymentamt',
        'tradeinvamt' => 'getTradeinvamt',
        'tradeadjamt' => 'getTradeadjamt',
        'tradepayamt' => 'getTradepayamt',
        'currencycd' => 'getCurrencycd',
        'lasttransdt' => 'getLasttransdt',
        'paydays' => 'getPaydays'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['invoiceno'] = isset($data['invoiceno']) ? $data['invoiceno'] : null;
        $this->container['invoicesuf'] = isset($data['invoicesuf']) ? $data['invoicesuf'] : null;
        $this->container['invoicety'] = isset($data['invoicety']) ? $data['invoicety'] : null;
        $this->container['agedt'] = isset($data['agedt']) ? $data['agedt'] : null;
        $this->container['invoiceamt'] = isset($data['invoiceamt']) ? $data['invoiceamt'] : null;
        $this->container['adjustamt'] = isset($data['adjustamt']) ? $data['adjustamt'] : null;
        $this->container['paymentamt'] = isset($data['paymentamt']) ? $data['paymentamt'] : null;
        $this->container['tradeinvamt'] = isset($data['tradeinvamt']) ? $data['tradeinvamt'] : null;
        $this->container['tradeadjamt'] = isset($data['tradeadjamt']) ? $data['tradeadjamt'] : null;
        $this->container['tradepayamt'] = isset($data['tradepayamt']) ? $data['tradepayamt'] : null;
        $this->container['currencycd'] = isset($data['currencycd']) ? $data['currencycd'] : null;
        $this->container['lasttransdt'] = isset($data['lasttransdt']) ? $data['lasttransdt'] : null;
        $this->container['paydays'] = isset($data['paydays']) ? $data['paydays'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoiceno
     *
     * @return int
     */
    public function getInvoiceno()
    {
        return $this->container['invoiceno'];
    }

    /**
     * Sets invoiceno
     *
     * @param int $invoiceno invoiceno
     *
     * @return $this
     */
    public function setInvoiceno($invoiceno)
    {
        $this->container['invoiceno'] = $invoiceno;

        return $this;
    }

    /**
     * Gets invoicesuf
     *
     * @return int
     */
    public function getInvoicesuf()
    {
        return $this->container['invoicesuf'];
    }

    /**
     * Sets invoicesuf
     *
     * @param int $invoicesuf invoicesuf
     *
     * @return $this
     */
    public function setInvoicesuf($invoicesuf)
    {
        $this->container['invoicesuf'] = $invoicesuf;

        return $this;
    }

    /**
     * Gets invoicety
     *
     * @return string
     */
    public function getInvoicety()
    {
        return $this->container['invoicety'];
    }

    /**
     * Sets invoicety
     *
     * @param string $invoicety invoicety
     *
     * @return $this
     */
    public function setInvoicety($invoicety)
    {
        $this->container['invoicety'] = $invoicety;

        return $this;
    }

    /**
     * Gets agedt
     *
     * @return \DateTime
     */
    public function getAgedt()
    {
        return $this->container['agedt'];
    }

    /**
     * Sets agedt
     *
     * @param \DateTime $agedt agedt
     *
     * @return $this
     */
    public function setAgedt($agedt)
    {
        $this->container['agedt'] = $agedt;

        return $this;
    }

    /**
     * Gets invoiceamt
     *
     * @return double
     */
    public function getInvoiceamt()
    {
        return $this->container['invoiceamt'];
    }

    /**
     * Sets invoiceamt
     *
     * @param double $invoiceamt invoiceamt
     *
     * @return $this
     */
    public function setInvoiceamt($invoiceamt)
    {
        $this->container['invoiceamt'] = $invoiceamt;

        return $this;
    }

    /**
     * Gets adjustamt
     *
     * @return double
     */
    public function getAdjustamt()
    {
        return $this->container['adjustamt'];
    }

    /**
     * Sets adjustamt
     *
     * @param double $adjustamt adjustamt
     *
     * @return $this
     */
    public function setAdjustamt($adjustamt)
    {
        $this->container['adjustamt'] = $adjustamt;

        return $this;
    }

    /**
     * Gets paymentamt
     *
     * @return double
     */
    public function getPaymentamt()
    {
        return $this->container['paymentamt'];
    }

    /**
     * Sets paymentamt
     *
     * @param double $paymentamt paymentamt
     *
     * @return $this
     */
    public function setPaymentamt($paymentamt)
    {
        $this->container['paymentamt'] = $paymentamt;

        return $this;
    }

    /**
     * Gets tradeinvamt
     *
     * @return double
     */
    public function getTradeinvamt()
    {
        return $this->container['tradeinvamt'];
    }

    /**
     * Sets tradeinvamt
     *
     * @param double $tradeinvamt tradeinvamt
     *
     * @return $this
     */
    public function setTradeinvamt($tradeinvamt)
    {
        $this->container['tradeinvamt'] = $tradeinvamt;

        return $this;
    }

    /**
     * Gets tradeadjamt
     *
     * @return double
     */
    public function getTradeadjamt()
    {
        return $this->container['tradeadjamt'];
    }

    /**
     * Sets tradeadjamt
     *
     * @param double $tradeadjamt tradeadjamt
     *
     * @return $this
     */
    public function setTradeadjamt($tradeadjamt)
    {
        $this->container['tradeadjamt'] = $tradeadjamt;

        return $this;
    }

    /**
     * Gets tradepayamt
     *
     * @return double
     */
    public function getTradepayamt()
    {
        return $this->container['tradepayamt'];
    }

    /**
     * Sets tradepayamt
     *
     * @param double $tradepayamt tradepayamt
     *
     * @return $this
     */
    public function setTradepayamt($tradepayamt)
    {
        $this->container['tradepayamt'] = $tradepayamt;

        return $this;
    }

    /**
     * Gets currencycd
     *
     * @return string
     */
    public function getCurrencycd()
    {
        return $this->container['currencycd'];
    }

    /**
     * Sets currencycd
     *
     * @param string $currencycd currencycd
     *
     * @return $this
     */
    public function setCurrencycd($currencycd)
    {
        $this->container['currencycd'] = $currencycd;

        return $this;
    }

    /**
     * Gets lasttransdt
     *
     * @return \DateTime
     */
    public function getLasttransdt()
    {
        return $this->container['lasttransdt'];
    }

    /**
     * Sets lasttransdt
     *
     * @param \DateTime $lasttransdt lasttransdt
     *
     * @return $this
     */
    public function setLasttransdt($lasttransdt)
    {
        $this->container['lasttransdt'] = $lasttransdt;

        return $this;
    }

    /**
     * Gets paydays
     *
     * @return int
     */
    public function getPaydays()
    {
        return $this->container['paydays'];
    }

    /**
     * Sets paydays
     *
     * @param int $paydays paydays
     *
     * @return $this
     */
    public function setPaydays($paydays)
    {
        $this->container['paydays'] = $paydays;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


