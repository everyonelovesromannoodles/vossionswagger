<?php
/**
 * TNotes
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TNotes Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TNotes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-notes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'notestype' => 'string',
        'primarykey' => 'string',
        'secondarykey' => 'string',
        'pageno' => 'int',
        'printfl' => 'bool',
        'printfl2' => 'bool',
        'printfl3' => 'bool',
        'printfl4' => 'bool',
        'printfl5' => 'bool',
        'requirefl' => 'bool',
        'securefl' => 'bool',
        'notetext' => 'string',
        'transdt' => '\DateTime',
        'transtm' => 'string',
        'type' => 'string',
        'firstline' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'notestype' => null,
        'primarykey' => null,
        'secondarykey' => null,
        'pageno' => 'int64',
        'printfl' => null,
        'printfl2' => null,
        'printfl3' => null,
        'printfl4' => null,
        'printfl5' => null,
        'requirefl' => null,
        'securefl' => null,
        'notetext' => null,
        'transdt' => 'date',
        'transtm' => null,
        'type' => null,
        'firstline' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'notestype' => 'notestype',
        'primarykey' => 'primarykey',
        'secondarykey' => 'secondarykey',
        'pageno' => 'pageno',
        'printfl' => 'printfl',
        'printfl2' => 'printfl2',
        'printfl3' => 'printfl3',
        'printfl4' => 'printfl4',
        'printfl5' => 'printfl5',
        'requirefl' => 'requirefl',
        'securefl' => 'securefl',
        'notetext' => 'notetext',
        'transdt' => 'transdt',
        'transtm' => 'transtm',
        'type' => 'type',
        'firstline' => 'firstline'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'notestype' => 'setNotestype',
        'primarykey' => 'setPrimarykey',
        'secondarykey' => 'setSecondarykey',
        'pageno' => 'setPageno',
        'printfl' => 'setPrintfl',
        'printfl2' => 'setPrintfl2',
        'printfl3' => 'setPrintfl3',
        'printfl4' => 'setPrintfl4',
        'printfl5' => 'setPrintfl5',
        'requirefl' => 'setRequirefl',
        'securefl' => 'setSecurefl',
        'notetext' => 'setNotetext',
        'transdt' => 'setTransdt',
        'transtm' => 'setTranstm',
        'type' => 'setType',
        'firstline' => 'setFirstline'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'notestype' => 'getNotestype',
        'primarykey' => 'getPrimarykey',
        'secondarykey' => 'getSecondarykey',
        'pageno' => 'getPageno',
        'printfl' => 'getPrintfl',
        'printfl2' => 'getPrintfl2',
        'printfl3' => 'getPrintfl3',
        'printfl4' => 'getPrintfl4',
        'printfl5' => 'getPrintfl5',
        'requirefl' => 'getRequirefl',
        'securefl' => 'getSecurefl',
        'notetext' => 'getNotetext',
        'transdt' => 'getTransdt',
        'transtm' => 'getTranstm',
        'type' => 'getType',
        'firstline' => 'getFirstline'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['notestype'] = isset($data['notestype']) ? $data['notestype'] : null;
        $this->container['primarykey'] = isset($data['primarykey']) ? $data['primarykey'] : null;
        $this->container['secondarykey'] = isset($data['secondarykey']) ? $data['secondarykey'] : null;
        $this->container['pageno'] = isset($data['pageno']) ? $data['pageno'] : null;
        $this->container['printfl'] = isset($data['printfl']) ? $data['printfl'] : null;
        $this->container['printfl2'] = isset($data['printfl2']) ? $data['printfl2'] : null;
        $this->container['printfl3'] = isset($data['printfl3']) ? $data['printfl3'] : null;
        $this->container['printfl4'] = isset($data['printfl4']) ? $data['printfl4'] : null;
        $this->container['printfl5'] = isset($data['printfl5']) ? $data['printfl5'] : null;
        $this->container['requirefl'] = isset($data['requirefl']) ? $data['requirefl'] : null;
        $this->container['securefl'] = isset($data['securefl']) ? $data['securefl'] : null;
        $this->container['notetext'] = isset($data['notetext']) ? $data['notetext'] : null;
        $this->container['transdt'] = isset($data['transdt']) ? $data['transdt'] : null;
        $this->container['transtm'] = isset($data['transtm']) ? $data['transtm'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['firstline'] = isset($data['firstline']) ? $data['firstline'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets notestype
     *
     * @return string
     */
    public function getNotestype()
    {
        return $this->container['notestype'];
    }

    /**
     * Sets notestype
     *
     * @param string $notestype notestype
     *
     * @return $this
     */
    public function setNotestype($notestype)
    {
        $this->container['notestype'] = $notestype;

        return $this;
    }

    /**
     * Gets primarykey
     *
     * @return string
     */
    public function getPrimarykey()
    {
        return $this->container['primarykey'];
    }

    /**
     * Sets primarykey
     *
     * @param string $primarykey primarykey
     *
     * @return $this
     */
    public function setPrimarykey($primarykey)
    {
        $this->container['primarykey'] = $primarykey;

        return $this;
    }

    /**
     * Gets secondarykey
     *
     * @return string
     */
    public function getSecondarykey()
    {
        return $this->container['secondarykey'];
    }

    /**
     * Sets secondarykey
     *
     * @param string $secondarykey secondarykey
     *
     * @return $this
     */
    public function setSecondarykey($secondarykey)
    {
        $this->container['secondarykey'] = $secondarykey;

        return $this;
    }

    /**
     * Gets pageno
     *
     * @return int
     */
    public function getPageno()
    {
        return $this->container['pageno'];
    }

    /**
     * Sets pageno
     *
     * @param int $pageno pageno
     *
     * @return $this
     */
    public function setPageno($pageno)
    {
        $this->container['pageno'] = $pageno;

        return $this;
    }

    /**
     * Gets printfl
     *
     * @return bool
     */
    public function getPrintfl()
    {
        return $this->container['printfl'];
    }

    /**
     * Sets printfl
     *
     * @param bool $printfl printfl
     *
     * @return $this
     */
    public function setPrintfl($printfl)
    {
        $this->container['printfl'] = $printfl;

        return $this;
    }

    /**
     * Gets printfl2
     *
     * @return bool
     */
    public function getPrintfl2()
    {
        return $this->container['printfl2'];
    }

    /**
     * Sets printfl2
     *
     * @param bool $printfl2 printfl2
     *
     * @return $this
     */
    public function setPrintfl2($printfl2)
    {
        $this->container['printfl2'] = $printfl2;

        return $this;
    }

    /**
     * Gets printfl3
     *
     * @return bool
     */
    public function getPrintfl3()
    {
        return $this->container['printfl3'];
    }

    /**
     * Sets printfl3
     *
     * @param bool $printfl3 printfl3
     *
     * @return $this
     */
    public function setPrintfl3($printfl3)
    {
        $this->container['printfl3'] = $printfl3;

        return $this;
    }

    /**
     * Gets printfl4
     *
     * @return bool
     */
    public function getPrintfl4()
    {
        return $this->container['printfl4'];
    }

    /**
     * Sets printfl4
     *
     * @param bool $printfl4 printfl4
     *
     * @return $this
     */
    public function setPrintfl4($printfl4)
    {
        $this->container['printfl4'] = $printfl4;

        return $this;
    }

    /**
     * Gets printfl5
     *
     * @return bool
     */
    public function getPrintfl5()
    {
        return $this->container['printfl5'];
    }

    /**
     * Sets printfl5
     *
     * @param bool $printfl5 printfl5
     *
     * @return $this
     */
    public function setPrintfl5($printfl5)
    {
        $this->container['printfl5'] = $printfl5;

        return $this;
    }

    /**
     * Gets requirefl
     *
     * @return bool
     */
    public function getRequirefl()
    {
        return $this->container['requirefl'];
    }

    /**
     * Sets requirefl
     *
     * @param bool $requirefl requirefl
     *
     * @return $this
     */
    public function setRequirefl($requirefl)
    {
        $this->container['requirefl'] = $requirefl;

        return $this;
    }

    /**
     * Gets securefl
     *
     * @return bool
     */
    public function getSecurefl()
    {
        return $this->container['securefl'];
    }

    /**
     * Sets securefl
     *
     * @param bool $securefl securefl
     *
     * @return $this
     */
    public function setSecurefl($securefl)
    {
        $this->container['securefl'] = $securefl;

        return $this;
    }

    /**
     * Gets notetext
     *
     * @return string
     */
    public function getNotetext()
    {
        return $this->container['notetext'];
    }

    /**
     * Sets notetext
     *
     * @param string $notetext notetext
     *
     * @return $this
     */
    public function setNotetext($notetext)
    {
        $this->container['notetext'] = $notetext;

        return $this;
    }

    /**
     * Gets transdt
     *
     * @return \DateTime
     */
    public function getTransdt()
    {
        return $this->container['transdt'];
    }

    /**
     * Sets transdt
     *
     * @param \DateTime $transdt transdt
     *
     * @return $this
     */
    public function setTransdt($transdt)
    {
        $this->container['transdt'] = $transdt;

        return $this;
    }

    /**
     * Gets transtm
     *
     * @return string
     */
    public function getTranstm()
    {
        return $this->container['transtm'];
    }

    /**
     * Sets transtm
     *
     * @param string $transtm transtm
     *
     * @return $this
     */
    public function setTranstm($transtm)
    {
        $this->container['transtm'] = $transtm;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets firstline
     *
     * @return string
     */
    public function getFirstline()
    {
        return $this->container['firstline'];
    }

    /**
     * Sets firstline
     *
     * @param string $firstline firstline
     *
     * @return $this
     */
    public function setFirstline($firstline)
    {
        $this->container['firstline'] = $firstline;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


