<?php
/**
 * SxapiargetcustomerdatataxingResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SxapiargetcustomerdatataxingResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SxapiargetcustomerdatataxingResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapiargetcustomerdatataxing_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'c_error_message' => 'string',
        'city' => 'string',
        'city_description' => 'string',
        'county' => 'string',
        'county_description' => 'string',
        'gst_certificate' => 'string',
        'gst_registration' => 'string',
        'non_tax_type' => 'string',
        'non_tax_type_description' => 'string',
        'other1' => 'string',
        'other1_description' => 'string',
        'other2' => 'string',
        'other2_description' => 'string',
        'state' => 'string',
        'state_description' => 'string',
        'taxable_type' => 'string',
        'tax_authority' => 'string',
        'tax_authority_description' => 'string',
        'tax_certificate' => 'string',
        'tax_date' => '\DateTime',
        'tax_registration' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'c_error_message' => null,
        'city' => null,
        'city_description' => null,
        'county' => null,
        'county_description' => null,
        'gst_certificate' => null,
        'gst_registration' => null,
        'non_tax_type' => null,
        'non_tax_type_description' => null,
        'other1' => null,
        'other1_description' => null,
        'other2' => null,
        'other2_description' => null,
        'state' => null,
        'state_description' => null,
        'taxable_type' => null,
        'tax_authority' => null,
        'tax_authority_description' => null,
        'tax_certificate' => null,
        'tax_date' => 'date',
        'tax_registration' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c_error_message' => 'cErrorMessage',
        'city' => 'city',
        'city_description' => 'cityDescription',
        'county' => 'county',
        'county_description' => 'countyDescription',
        'gst_certificate' => 'gstCertificate',
        'gst_registration' => 'gstRegistration',
        'non_tax_type' => 'nonTaxType',
        'non_tax_type_description' => 'nonTaxTypeDescription',
        'other1' => 'other1',
        'other1_description' => 'other1Description',
        'other2' => 'other2',
        'other2_description' => 'other2Description',
        'state' => 'state',
        'state_description' => 'stateDescription',
        'taxable_type' => 'taxableType',
        'tax_authority' => 'taxAuthority',
        'tax_authority_description' => 'taxAuthorityDescription',
        'tax_certificate' => 'taxCertificate',
        'tax_date' => 'taxDate',
        'tax_registration' => 'taxRegistration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c_error_message' => 'setCErrorMessage',
        'city' => 'setCity',
        'city_description' => 'setCityDescription',
        'county' => 'setCounty',
        'county_description' => 'setCountyDescription',
        'gst_certificate' => 'setGstCertificate',
        'gst_registration' => 'setGstRegistration',
        'non_tax_type' => 'setNonTaxType',
        'non_tax_type_description' => 'setNonTaxTypeDescription',
        'other1' => 'setOther1',
        'other1_description' => 'setOther1Description',
        'other2' => 'setOther2',
        'other2_description' => 'setOther2Description',
        'state' => 'setState',
        'state_description' => 'setStateDescription',
        'taxable_type' => 'setTaxableType',
        'tax_authority' => 'setTaxAuthority',
        'tax_authority_description' => 'setTaxAuthorityDescription',
        'tax_certificate' => 'setTaxCertificate',
        'tax_date' => 'setTaxDate',
        'tax_registration' => 'setTaxRegistration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c_error_message' => 'getCErrorMessage',
        'city' => 'getCity',
        'city_description' => 'getCityDescription',
        'county' => 'getCounty',
        'county_description' => 'getCountyDescription',
        'gst_certificate' => 'getGstCertificate',
        'gst_registration' => 'getGstRegistration',
        'non_tax_type' => 'getNonTaxType',
        'non_tax_type_description' => 'getNonTaxTypeDescription',
        'other1' => 'getOther1',
        'other1_description' => 'getOther1Description',
        'other2' => 'getOther2',
        'other2_description' => 'getOther2Description',
        'state' => 'getState',
        'state_description' => 'getStateDescription',
        'taxable_type' => 'getTaxableType',
        'tax_authority' => 'getTaxAuthority',
        'tax_authority_description' => 'getTaxAuthorityDescription',
        'tax_certificate' => 'getTaxCertificate',
        'tax_date' => 'getTaxDate',
        'tax_registration' => 'getTaxRegistration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['c_error_message'] = isset($data['c_error_message']) ? $data['c_error_message'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['city_description'] = isset($data['city_description']) ? $data['city_description'] : null;
        $this->container['county'] = isset($data['county']) ? $data['county'] : null;
        $this->container['county_description'] = isset($data['county_description']) ? $data['county_description'] : null;
        $this->container['gst_certificate'] = isset($data['gst_certificate']) ? $data['gst_certificate'] : null;
        $this->container['gst_registration'] = isset($data['gst_registration']) ? $data['gst_registration'] : null;
        $this->container['non_tax_type'] = isset($data['non_tax_type']) ? $data['non_tax_type'] : null;
        $this->container['non_tax_type_description'] = isset($data['non_tax_type_description']) ? $data['non_tax_type_description'] : null;
        $this->container['other1'] = isset($data['other1']) ? $data['other1'] : null;
        $this->container['other1_description'] = isset($data['other1_description']) ? $data['other1_description'] : null;
        $this->container['other2'] = isset($data['other2']) ? $data['other2'] : null;
        $this->container['other2_description'] = isset($data['other2_description']) ? $data['other2_description'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['state_description'] = isset($data['state_description']) ? $data['state_description'] : null;
        $this->container['taxable_type'] = isset($data['taxable_type']) ? $data['taxable_type'] : null;
        $this->container['tax_authority'] = isset($data['tax_authority']) ? $data['tax_authority'] : null;
        $this->container['tax_authority_description'] = isset($data['tax_authority_description']) ? $data['tax_authority_description'] : null;
        $this->container['tax_certificate'] = isset($data['tax_certificate']) ? $data['tax_certificate'] : null;
        $this->container['tax_date'] = isset($data['tax_date']) ? $data['tax_date'] : null;
        $this->container['tax_registration'] = isset($data['tax_registration']) ? $data['tax_registration'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c_error_message
     *
     * @return string
     */
    public function getCErrorMessage()
    {
        return $this->container['c_error_message'];
    }

    /**
     * Sets c_error_message
     *
     * @param string $c_error_message c_error_message
     *
     * @return $this
     */
    public function setCErrorMessage($c_error_message)
    {
        $this->container['c_error_message'] = $c_error_message;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets city_description
     *
     * @return string
     */
    public function getCityDescription()
    {
        return $this->container['city_description'];
    }

    /**
     * Sets city_description
     *
     * @param string $city_description city_description
     *
     * @return $this
     */
    public function setCityDescription($city_description)
    {
        $this->container['city_description'] = $city_description;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string $county county
     *
     * @return $this
     */
    public function setCounty($county)
    {
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets county_description
     *
     * @return string
     */
    public function getCountyDescription()
    {
        return $this->container['county_description'];
    }

    /**
     * Sets county_description
     *
     * @param string $county_description county_description
     *
     * @return $this
     */
    public function setCountyDescription($county_description)
    {
        $this->container['county_description'] = $county_description;

        return $this;
    }

    /**
     * Gets gst_certificate
     *
     * @return string
     */
    public function getGstCertificate()
    {
        return $this->container['gst_certificate'];
    }

    /**
     * Sets gst_certificate
     *
     * @param string $gst_certificate gst_certificate
     *
     * @return $this
     */
    public function setGstCertificate($gst_certificate)
    {
        $this->container['gst_certificate'] = $gst_certificate;

        return $this;
    }

    /**
     * Gets gst_registration
     *
     * @return string
     */
    public function getGstRegistration()
    {
        return $this->container['gst_registration'];
    }

    /**
     * Sets gst_registration
     *
     * @param string $gst_registration gst_registration
     *
     * @return $this
     */
    public function setGstRegistration($gst_registration)
    {
        $this->container['gst_registration'] = $gst_registration;

        return $this;
    }

    /**
     * Gets non_tax_type
     *
     * @return string
     */
    public function getNonTaxType()
    {
        return $this->container['non_tax_type'];
    }

    /**
     * Sets non_tax_type
     *
     * @param string $non_tax_type non_tax_type
     *
     * @return $this
     */
    public function setNonTaxType($non_tax_type)
    {
        $this->container['non_tax_type'] = $non_tax_type;

        return $this;
    }

    /**
     * Gets non_tax_type_description
     *
     * @return string
     */
    public function getNonTaxTypeDescription()
    {
        return $this->container['non_tax_type_description'];
    }

    /**
     * Sets non_tax_type_description
     *
     * @param string $non_tax_type_description non_tax_type_description
     *
     * @return $this
     */
    public function setNonTaxTypeDescription($non_tax_type_description)
    {
        $this->container['non_tax_type_description'] = $non_tax_type_description;

        return $this;
    }

    /**
     * Gets other1
     *
     * @return string
     */
    public function getOther1()
    {
        return $this->container['other1'];
    }

    /**
     * Sets other1
     *
     * @param string $other1 other1
     *
     * @return $this
     */
    public function setOther1($other1)
    {
        $this->container['other1'] = $other1;

        return $this;
    }

    /**
     * Gets other1_description
     *
     * @return string
     */
    public function getOther1Description()
    {
        return $this->container['other1_description'];
    }

    /**
     * Sets other1_description
     *
     * @param string $other1_description other1_description
     *
     * @return $this
     */
    public function setOther1Description($other1_description)
    {
        $this->container['other1_description'] = $other1_description;

        return $this;
    }

    /**
     * Gets other2
     *
     * @return string
     */
    public function getOther2()
    {
        return $this->container['other2'];
    }

    /**
     * Sets other2
     *
     * @param string $other2 other2
     *
     * @return $this
     */
    public function setOther2($other2)
    {
        $this->container['other2'] = $other2;

        return $this;
    }

    /**
     * Gets other2_description
     *
     * @return string
     */
    public function getOther2Description()
    {
        return $this->container['other2_description'];
    }

    /**
     * Sets other2_description
     *
     * @param string $other2_description other2_description
     *
     * @return $this
     */
    public function setOther2Description($other2_description)
    {
        $this->container['other2_description'] = $other2_description;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets state_description
     *
     * @return string
     */
    public function getStateDescription()
    {
        return $this->container['state_description'];
    }

    /**
     * Sets state_description
     *
     * @param string $state_description state_description
     *
     * @return $this
     */
    public function setStateDescription($state_description)
    {
        $this->container['state_description'] = $state_description;

        return $this;
    }

    /**
     * Gets taxable_type
     *
     * @return string
     */
    public function getTaxableType()
    {
        return $this->container['taxable_type'];
    }

    /**
     * Sets taxable_type
     *
     * @param string $taxable_type taxable_type
     *
     * @return $this
     */
    public function setTaxableType($taxable_type)
    {
        $this->container['taxable_type'] = $taxable_type;

        return $this;
    }

    /**
     * Gets tax_authority
     *
     * @return string
     */
    public function getTaxAuthority()
    {
        return $this->container['tax_authority'];
    }

    /**
     * Sets tax_authority
     *
     * @param string $tax_authority tax_authority
     *
     * @return $this
     */
    public function setTaxAuthority($tax_authority)
    {
        $this->container['tax_authority'] = $tax_authority;

        return $this;
    }

    /**
     * Gets tax_authority_description
     *
     * @return string
     */
    public function getTaxAuthorityDescription()
    {
        return $this->container['tax_authority_description'];
    }

    /**
     * Sets tax_authority_description
     *
     * @param string $tax_authority_description tax_authority_description
     *
     * @return $this
     */
    public function setTaxAuthorityDescription($tax_authority_description)
    {
        $this->container['tax_authority_description'] = $tax_authority_description;

        return $this;
    }

    /**
     * Gets tax_certificate
     *
     * @return string
     */
    public function getTaxCertificate()
    {
        return $this->container['tax_certificate'];
    }

    /**
     * Sets tax_certificate
     *
     * @param string $tax_certificate tax_certificate
     *
     * @return $this
     */
    public function setTaxCertificate($tax_certificate)
    {
        $this->container['tax_certificate'] = $tax_certificate;

        return $this;
    }

    /**
     * Gets tax_date
     *
     * @return \DateTime
     */
    public function getTaxDate()
    {
        return $this->container['tax_date'];
    }

    /**
     * Sets tax_date
     *
     * @param \DateTime $tax_date tax_date
     *
     * @return $this
     */
    public function setTaxDate($tax_date)
    {
        $this->container['tax_date'] = $tax_date;

        return $this;
    }

    /**
     * Gets tax_registration
     *
     * @return string
     */
    public function getTaxRegistration()
    {
        return $this->container['tax_registration'];
    }

    /**
     * Sets tax_registration
     *
     * @param string $tax_registration tax_registration
     *
     * @return $this
     */
    public function setTaxRegistration($tax_registration)
    {
        $this->container['tax_registration'] = $tax_registration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


