<?php
/**
 * TCustLstV2
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TCustLstV2 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TCustLstV2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-custLstV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cust_no' => 'double',
        'ship_to' => 'string',
        'name' => 'string',
        'addr1' => 'string',
        'addr2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip_cd' => 'string',
        'ord_bal' => 'double',
        'total_bal' => 'double',
        'sort_fld' => 'string',
        'salesytd' => 'double',
        'costytd' => 'double',
        'marginytd' => 'double',
        'lastsalesytd' => 'double',
        'lastcostytd' => 'double',
        'lastmarginytd' => 'double',
        'periodbal1' => 'double',
        'periodbal2' => 'double',
        'periodbal3' => 'double',
        'periodbal4' => 'double',
        'periodbal5' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cust_no' => 'double',
        'ship_to' => null,
        'name' => null,
        'addr1' => null,
        'addr2' => null,
        'city' => null,
        'state' => null,
        'zip_cd' => null,
        'ord_bal' => 'double',
        'total_bal' => 'double',
        'sort_fld' => null,
        'salesytd' => 'double',
        'costytd' => 'double',
        'marginytd' => 'double',
        'lastsalesytd' => 'double',
        'lastcostytd' => 'double',
        'lastmarginytd' => 'double',
        'periodbal1' => 'double',
        'periodbal2' => 'double',
        'periodbal3' => 'double',
        'periodbal4' => 'double',
        'periodbal5' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cust_no' => 'custNo',
        'ship_to' => 'shipTo',
        'name' => 'name',
        'addr1' => 'addr1',
        'addr2' => 'addr2',
        'city' => 'city',
        'state' => 'state',
        'zip_cd' => 'zipCd',
        'ord_bal' => 'ordBal',
        'total_bal' => 'totalBal',
        'sort_fld' => 'sortFld',
        'salesytd' => 'salesytd',
        'costytd' => 'costytd',
        'marginytd' => 'marginytd',
        'lastsalesytd' => 'lastsalesytd',
        'lastcostytd' => 'lastcostytd',
        'lastmarginytd' => 'lastmarginytd',
        'periodbal1' => 'periodbal1',
        'periodbal2' => 'periodbal2',
        'periodbal3' => 'periodbal3',
        'periodbal4' => 'periodbal4',
        'periodbal5' => 'periodbal5'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cust_no' => 'setCustNo',
        'ship_to' => 'setShipTo',
        'name' => 'setName',
        'addr1' => 'setAddr1',
        'addr2' => 'setAddr2',
        'city' => 'setCity',
        'state' => 'setState',
        'zip_cd' => 'setZipCd',
        'ord_bal' => 'setOrdBal',
        'total_bal' => 'setTotalBal',
        'sort_fld' => 'setSortFld',
        'salesytd' => 'setSalesytd',
        'costytd' => 'setCostytd',
        'marginytd' => 'setMarginytd',
        'lastsalesytd' => 'setLastsalesytd',
        'lastcostytd' => 'setLastcostytd',
        'lastmarginytd' => 'setLastmarginytd',
        'periodbal1' => 'setPeriodbal1',
        'periodbal2' => 'setPeriodbal2',
        'periodbal3' => 'setPeriodbal3',
        'periodbal4' => 'setPeriodbal4',
        'periodbal5' => 'setPeriodbal5'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cust_no' => 'getCustNo',
        'ship_to' => 'getShipTo',
        'name' => 'getName',
        'addr1' => 'getAddr1',
        'addr2' => 'getAddr2',
        'city' => 'getCity',
        'state' => 'getState',
        'zip_cd' => 'getZipCd',
        'ord_bal' => 'getOrdBal',
        'total_bal' => 'getTotalBal',
        'sort_fld' => 'getSortFld',
        'salesytd' => 'getSalesytd',
        'costytd' => 'getCostytd',
        'marginytd' => 'getMarginytd',
        'lastsalesytd' => 'getLastsalesytd',
        'lastcostytd' => 'getLastcostytd',
        'lastmarginytd' => 'getLastmarginytd',
        'periodbal1' => 'getPeriodbal1',
        'periodbal2' => 'getPeriodbal2',
        'periodbal3' => 'getPeriodbal3',
        'periodbal4' => 'getPeriodbal4',
        'periodbal5' => 'getPeriodbal5'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cust_no'] = isset($data['cust_no']) ? $data['cust_no'] : null;
        $this->container['ship_to'] = isset($data['ship_to']) ? $data['ship_to'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['addr1'] = isset($data['addr1']) ? $data['addr1'] : null;
        $this->container['addr2'] = isset($data['addr2']) ? $data['addr2'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['zip_cd'] = isset($data['zip_cd']) ? $data['zip_cd'] : null;
        $this->container['ord_bal'] = isset($data['ord_bal']) ? $data['ord_bal'] : null;
        $this->container['total_bal'] = isset($data['total_bal']) ? $data['total_bal'] : null;
        $this->container['sort_fld'] = isset($data['sort_fld']) ? $data['sort_fld'] : null;
        $this->container['salesytd'] = isset($data['salesytd']) ? $data['salesytd'] : null;
        $this->container['costytd'] = isset($data['costytd']) ? $data['costytd'] : null;
        $this->container['marginytd'] = isset($data['marginytd']) ? $data['marginytd'] : null;
        $this->container['lastsalesytd'] = isset($data['lastsalesytd']) ? $data['lastsalesytd'] : null;
        $this->container['lastcostytd'] = isset($data['lastcostytd']) ? $data['lastcostytd'] : null;
        $this->container['lastmarginytd'] = isset($data['lastmarginytd']) ? $data['lastmarginytd'] : null;
        $this->container['periodbal1'] = isset($data['periodbal1']) ? $data['periodbal1'] : null;
        $this->container['periodbal2'] = isset($data['periodbal2']) ? $data['periodbal2'] : null;
        $this->container['periodbal3'] = isset($data['periodbal3']) ? $data['periodbal3'] : null;
        $this->container['periodbal4'] = isset($data['periodbal4']) ? $data['periodbal4'] : null;
        $this->container['periodbal5'] = isset($data['periodbal5']) ? $data['periodbal5'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cust_no
     *
     * @return double
     */
    public function getCustNo()
    {
        return $this->container['cust_no'];
    }

    /**
     * Sets cust_no
     *
     * @param double $cust_no cust_no
     *
     * @return $this
     */
    public function setCustNo($cust_no)
    {
        $this->container['cust_no'] = $cust_no;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return string
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param string $ship_to ship_to
     *
     * @return $this
     */
    public function setShipTo($ship_to)
    {
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets addr1
     *
     * @return string
     */
    public function getAddr1()
    {
        return $this->container['addr1'];
    }

    /**
     * Sets addr1
     *
     * @param string $addr1 addr1
     *
     * @return $this
     */
    public function setAddr1($addr1)
    {
        $this->container['addr1'] = $addr1;

        return $this;
    }

    /**
     * Gets addr2
     *
     * @return string
     */
    public function getAddr2()
    {
        return $this->container['addr2'];
    }

    /**
     * Sets addr2
     *
     * @param string $addr2 addr2
     *
     * @return $this
     */
    public function setAddr2($addr2)
    {
        $this->container['addr2'] = $addr2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip_cd
     *
     * @return string
     */
    public function getZipCd()
    {
        return $this->container['zip_cd'];
    }

    /**
     * Sets zip_cd
     *
     * @param string $zip_cd zip_cd
     *
     * @return $this
     */
    public function setZipCd($zip_cd)
    {
        $this->container['zip_cd'] = $zip_cd;

        return $this;
    }

    /**
     * Gets ord_bal
     *
     * @return double
     */
    public function getOrdBal()
    {
        return $this->container['ord_bal'];
    }

    /**
     * Sets ord_bal
     *
     * @param double $ord_bal ord_bal
     *
     * @return $this
     */
    public function setOrdBal($ord_bal)
    {
        $this->container['ord_bal'] = $ord_bal;

        return $this;
    }

    /**
     * Gets total_bal
     *
     * @return double
     */
    public function getTotalBal()
    {
        return $this->container['total_bal'];
    }

    /**
     * Sets total_bal
     *
     * @param double $total_bal total_bal
     *
     * @return $this
     */
    public function setTotalBal($total_bal)
    {
        $this->container['total_bal'] = $total_bal;

        return $this;
    }

    /**
     * Gets sort_fld
     *
     * @return string
     */
    public function getSortFld()
    {
        return $this->container['sort_fld'];
    }

    /**
     * Sets sort_fld
     *
     * @param string $sort_fld sort_fld
     *
     * @return $this
     */
    public function setSortFld($sort_fld)
    {
        $this->container['sort_fld'] = $sort_fld;

        return $this;
    }

    /**
     * Gets salesytd
     *
     * @return double
     */
    public function getSalesytd()
    {
        return $this->container['salesytd'];
    }

    /**
     * Sets salesytd
     *
     * @param double $salesytd salesytd
     *
     * @return $this
     */
    public function setSalesytd($salesytd)
    {
        $this->container['salesytd'] = $salesytd;

        return $this;
    }

    /**
     * Gets costytd
     *
     * @return double
     */
    public function getCostytd()
    {
        return $this->container['costytd'];
    }

    /**
     * Sets costytd
     *
     * @param double $costytd costytd
     *
     * @return $this
     */
    public function setCostytd($costytd)
    {
        $this->container['costytd'] = $costytd;

        return $this;
    }

    /**
     * Gets marginytd
     *
     * @return double
     */
    public function getMarginytd()
    {
        return $this->container['marginytd'];
    }

    /**
     * Sets marginytd
     *
     * @param double $marginytd marginytd
     *
     * @return $this
     */
    public function setMarginytd($marginytd)
    {
        $this->container['marginytd'] = $marginytd;

        return $this;
    }

    /**
     * Gets lastsalesytd
     *
     * @return double
     */
    public function getLastsalesytd()
    {
        return $this->container['lastsalesytd'];
    }

    /**
     * Sets lastsalesytd
     *
     * @param double $lastsalesytd lastsalesytd
     *
     * @return $this
     */
    public function setLastsalesytd($lastsalesytd)
    {
        $this->container['lastsalesytd'] = $lastsalesytd;

        return $this;
    }

    /**
     * Gets lastcostytd
     *
     * @return double
     */
    public function getLastcostytd()
    {
        return $this->container['lastcostytd'];
    }

    /**
     * Sets lastcostytd
     *
     * @param double $lastcostytd lastcostytd
     *
     * @return $this
     */
    public function setLastcostytd($lastcostytd)
    {
        $this->container['lastcostytd'] = $lastcostytd;

        return $this;
    }

    /**
     * Gets lastmarginytd
     *
     * @return double
     */
    public function getLastmarginytd()
    {
        return $this->container['lastmarginytd'];
    }

    /**
     * Sets lastmarginytd
     *
     * @param double $lastmarginytd lastmarginytd
     *
     * @return $this
     */
    public function setLastmarginytd($lastmarginytd)
    {
        $this->container['lastmarginytd'] = $lastmarginytd;

        return $this;
    }

    /**
     * Gets periodbal1
     *
     * @return double
     */
    public function getPeriodbal1()
    {
        return $this->container['periodbal1'];
    }

    /**
     * Sets periodbal1
     *
     * @param double $periodbal1 periodbal1
     *
     * @return $this
     */
    public function setPeriodbal1($periodbal1)
    {
        $this->container['periodbal1'] = $periodbal1;

        return $this;
    }

    /**
     * Gets periodbal2
     *
     * @return double
     */
    public function getPeriodbal2()
    {
        return $this->container['periodbal2'];
    }

    /**
     * Sets periodbal2
     *
     * @param double $periodbal2 periodbal2
     *
     * @return $this
     */
    public function setPeriodbal2($periodbal2)
    {
        $this->container['periodbal2'] = $periodbal2;

        return $this;
    }

    /**
     * Gets periodbal3
     *
     * @return double
     */
    public function getPeriodbal3()
    {
        return $this->container['periodbal3'];
    }

    /**
     * Sets periodbal3
     *
     * @param double $periodbal3 periodbal3
     *
     * @return $this
     */
    public function setPeriodbal3($periodbal3)
    {
        $this->container['periodbal3'] = $periodbal3;

        return $this;
    }

    /**
     * Gets periodbal4
     *
     * @return double
     */
    public function getPeriodbal4()
    {
        return $this->container['periodbal4'];
    }

    /**
     * Sets periodbal4
     *
     * @param double $periodbal4 periodbal4
     *
     * @return $this
     */
    public function setPeriodbal4($periodbal4)
    {
        $this->container['periodbal4'] = $periodbal4;

        return $this;
    }

    /**
     * Gets periodbal5
     *
     * @return double
     */
    public function getPeriodbal5()
    {
        return $this->container['periodbal5'];
    }

    /**
     * Sets periodbal5
     *
     * @param double $periodbal5 periodbal5
     *
     * @return $this
     */
    public function setPeriodbal5($periodbal5)
    {
        $this->container['periodbal5'] = $periodbal5;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


