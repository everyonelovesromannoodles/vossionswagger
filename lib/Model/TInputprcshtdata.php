<?php
/**
 * TInputprcshtdata
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TInputprcshtdata Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TInputprcshtdata implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-inputprcshtdata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'actiontype' => 'string',
        'seqno' => 'int',
        'prod' => 'string',
        'whse' => 'string',
        'region' => 'string',
        'divnogroup' => 'string',
        'pricesheet' => 'string',
        'effectivedt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'actiontype' => null,
        'seqno' => 'int64',
        'prod' => null,
        'whse' => null,
        'region' => null,
        'divnogroup' => null,
        'pricesheet' => null,
        'effectivedt' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actiontype' => 'actiontype',
        'seqno' => 'seqno',
        'prod' => 'prod',
        'whse' => 'whse',
        'region' => 'region',
        'divnogroup' => 'divnogroup',
        'pricesheet' => 'pricesheet',
        'effectivedt' => 'effectivedt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actiontype' => 'setActiontype',
        'seqno' => 'setSeqno',
        'prod' => 'setProd',
        'whse' => 'setWhse',
        'region' => 'setRegion',
        'divnogroup' => 'setDivnogroup',
        'pricesheet' => 'setPricesheet',
        'effectivedt' => 'setEffectivedt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actiontype' => 'getActiontype',
        'seqno' => 'getSeqno',
        'prod' => 'getProd',
        'whse' => 'getWhse',
        'region' => 'getRegion',
        'divnogroup' => 'getDivnogroup',
        'pricesheet' => 'getPricesheet',
        'effectivedt' => 'getEffectivedt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actiontype'] = isset($data['actiontype']) ? $data['actiontype'] : null;
        $this->container['seqno'] = isset($data['seqno']) ? $data['seqno'] : null;
        $this->container['prod'] = isset($data['prod']) ? $data['prod'] : null;
        $this->container['whse'] = isset($data['whse']) ? $data['whse'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['divnogroup'] = isset($data['divnogroup']) ? $data['divnogroup'] : null;
        $this->container['pricesheet'] = isset($data['pricesheet']) ? $data['pricesheet'] : null;
        $this->container['effectivedt'] = isset($data['effectivedt']) ? $data['effectivedt'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actiontype
     *
     * @return string
     */
    public function getActiontype()
    {
        return $this->container['actiontype'];
    }

    /**
     * Sets actiontype
     *
     * @param string $actiontype actiontype
     *
     * @return $this
     */
    public function setActiontype($actiontype)
    {
        $this->container['actiontype'] = $actiontype;

        return $this;
    }

    /**
     * Gets seqno
     *
     * @return int
     */
    public function getSeqno()
    {
        return $this->container['seqno'];
    }

    /**
     * Sets seqno
     *
     * @param int $seqno seqno
     *
     * @return $this
     */
    public function setSeqno($seqno)
    {
        $this->container['seqno'] = $seqno;

        return $this;
    }

    /**
     * Gets prod
     *
     * @return string
     */
    public function getProd()
    {
        return $this->container['prod'];
    }

    /**
     * Sets prod
     *
     * @param string $prod prod
     *
     * @return $this
     */
    public function setProd($prod)
    {
        $this->container['prod'] = $prod;

        return $this;
    }

    /**
     * Gets whse
     *
     * @return string
     */
    public function getWhse()
    {
        return $this->container['whse'];
    }

    /**
     * Sets whse
     *
     * @param string $whse whse
     *
     * @return $this
     */
    public function setWhse($whse)
    {
        $this->container['whse'] = $whse;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets divnogroup
     *
     * @return string
     */
    public function getDivnogroup()
    {
        return $this->container['divnogroup'];
    }

    /**
     * Sets divnogroup
     *
     * @param string $divnogroup divnogroup
     *
     * @return $this
     */
    public function setDivnogroup($divnogroup)
    {
        $this->container['divnogroup'] = $divnogroup;

        return $this;
    }

    /**
     * Gets pricesheet
     *
     * @return string
     */
    public function getPricesheet()
    {
        return $this->container['pricesheet'];
    }

    /**
     * Sets pricesheet
     *
     * @param string $pricesheet pricesheet
     *
     * @return $this
     */
    public function setPricesheet($pricesheet)
    {
        $this->container['pricesheet'] = $pricesheet;

        return $this;
    }

    /**
     * Gets effectivedt
     *
     * @return \DateTime
     */
    public function getEffectivedt()
    {
        return $this->container['effectivedt'];
    }

    /**
     * Sets effectivedt
     *
     * @param \DateTime $effectivedt effectivedt
     *
     * @return $this
     */
    public function setEffectivedt($effectivedt)
    {
        $this->container['effectivedt'] = $effectivedt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


