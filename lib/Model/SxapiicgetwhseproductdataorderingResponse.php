<?php
/**
 * SxapiicgetwhseproductdataorderingResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SxapiicgetwhseproductdataorderingResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SxapiicgetwhseproductdataorderingResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapiicgetwhseproductdataordering_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'c_error_message' => 'string',
        'cross_reference_product' => 'string',
        'cross_reference_type' => 'string',
        'available_stock_date' => '\DateTime',
        'average_lead_time_date' => '\DateTime',
        'class_type' => 'int',
        'class_frozen_flag' => 'bool',
        'frozen_by_type' => 'bool',
        'frozen_lead_time_type' => 'int',
        'frozen_months' => 'int',
        'frozen_type' => 'string',
        'frozen_type_desc' => 'string',
        'last_lead_time_date' => '\DateTime',
        'last_stock_out_date' => '\DateTime',
        'lead_time_last' => 'int',
        'lead_time_prior' => 'int',
        'line_point' => 'double',
        'number_of_days_season' => 'int',
        'number_of_days_stock_out' => 'int',
        'number_of_times_stock_out' => 'int',
        'order_calculation_type' => 'string',
        'order_point' => 'double',
        'quantity_ordered_in' => 'double',
        'quantity_ordered_out' => 'double',
        'override_reason_in' => 'string',
        'override_reason_in_desc' => 'string',
        'override_reason_out' => 'string',
        'override_reason_out_desc' => 'string',
        'prior_lead_time_date' => '\DateTime',
        'safety_allowance_amount' => 'double',
        'safety_allowance_days' => 'int',
        'safety_allowance_type' => 'string',
        'safety_frozen_flag' => 'bool',
        'season_begin' => 'int',
        'season_end' => 'int',
        'stock_out15_flag' => 'bool',
        'usage_control' => 'string',
        'usage_rate' => 'double',
        'usage_months' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'c_error_message' => null,
        'cross_reference_product' => null,
        'cross_reference_type' => null,
        'available_stock_date' => 'date',
        'average_lead_time_date' => 'date',
        'class_type' => 'int64',
        'class_frozen_flag' => null,
        'frozen_by_type' => null,
        'frozen_lead_time_type' => 'int64',
        'frozen_months' => 'int64',
        'frozen_type' => null,
        'frozen_type_desc' => null,
        'last_lead_time_date' => 'date',
        'last_stock_out_date' => 'date',
        'lead_time_last' => 'int64',
        'lead_time_prior' => 'int64',
        'line_point' => 'double',
        'number_of_days_season' => 'int64',
        'number_of_days_stock_out' => 'int64',
        'number_of_times_stock_out' => 'int64',
        'order_calculation_type' => null,
        'order_point' => 'double',
        'quantity_ordered_in' => 'double',
        'quantity_ordered_out' => 'double',
        'override_reason_in' => null,
        'override_reason_in_desc' => null,
        'override_reason_out' => null,
        'override_reason_out_desc' => null,
        'prior_lead_time_date' => 'date',
        'safety_allowance_amount' => 'double',
        'safety_allowance_days' => 'int64',
        'safety_allowance_type' => null,
        'safety_frozen_flag' => null,
        'season_begin' => 'int64',
        'season_end' => 'int64',
        'stock_out15_flag' => null,
        'usage_control' => null,
        'usage_rate' => 'double',
        'usage_months' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c_error_message' => 'cErrorMessage',
        'cross_reference_product' => 'crossReferenceProduct',
        'cross_reference_type' => 'crossReferenceType',
        'available_stock_date' => 'availableStockDate',
        'average_lead_time_date' => 'averageLeadTimeDate',
        'class_type' => 'classType',
        'class_frozen_flag' => 'classFrozenFlag',
        'frozen_by_type' => 'frozenByType',
        'frozen_lead_time_type' => 'frozenLeadTimeType',
        'frozen_months' => 'frozenMonths',
        'frozen_type' => 'frozenType',
        'frozen_type_desc' => 'frozenTypeDesc',
        'last_lead_time_date' => 'lastLeadTimeDate',
        'last_stock_out_date' => 'lastStockOutDate',
        'lead_time_last' => 'leadTimeLast',
        'lead_time_prior' => 'leadTimePrior',
        'line_point' => 'linePoint',
        'number_of_days_season' => 'numberOfDaysSeason',
        'number_of_days_stock_out' => 'numberOfDaysStockOut',
        'number_of_times_stock_out' => 'numberOfTimesStockOut',
        'order_calculation_type' => 'orderCalculationType',
        'order_point' => 'orderPoint',
        'quantity_ordered_in' => 'quantityOrderedIn',
        'quantity_ordered_out' => 'quantityOrderedOut',
        'override_reason_in' => 'overrideReasonIn',
        'override_reason_in_desc' => 'overrideReasonInDesc',
        'override_reason_out' => 'overrideReasonOut',
        'override_reason_out_desc' => 'overrideReasonOutDesc',
        'prior_lead_time_date' => 'priorLeadTimeDate',
        'safety_allowance_amount' => 'safetyAllowanceAmount',
        'safety_allowance_days' => 'safetyAllowanceDays',
        'safety_allowance_type' => 'safetyAllowanceType',
        'safety_frozen_flag' => 'safetyFrozenFlag',
        'season_begin' => 'seasonBegin',
        'season_end' => 'seasonEnd',
        'stock_out15_flag' => 'stockOut15Flag',
        'usage_control' => 'usageControl',
        'usage_rate' => 'usageRate',
        'usage_months' => 'usageMonths'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c_error_message' => 'setCErrorMessage',
        'cross_reference_product' => 'setCrossReferenceProduct',
        'cross_reference_type' => 'setCrossReferenceType',
        'available_stock_date' => 'setAvailableStockDate',
        'average_lead_time_date' => 'setAverageLeadTimeDate',
        'class_type' => 'setClassType',
        'class_frozen_flag' => 'setClassFrozenFlag',
        'frozen_by_type' => 'setFrozenByType',
        'frozen_lead_time_type' => 'setFrozenLeadTimeType',
        'frozen_months' => 'setFrozenMonths',
        'frozen_type' => 'setFrozenType',
        'frozen_type_desc' => 'setFrozenTypeDesc',
        'last_lead_time_date' => 'setLastLeadTimeDate',
        'last_stock_out_date' => 'setLastStockOutDate',
        'lead_time_last' => 'setLeadTimeLast',
        'lead_time_prior' => 'setLeadTimePrior',
        'line_point' => 'setLinePoint',
        'number_of_days_season' => 'setNumberOfDaysSeason',
        'number_of_days_stock_out' => 'setNumberOfDaysStockOut',
        'number_of_times_stock_out' => 'setNumberOfTimesStockOut',
        'order_calculation_type' => 'setOrderCalculationType',
        'order_point' => 'setOrderPoint',
        'quantity_ordered_in' => 'setQuantityOrderedIn',
        'quantity_ordered_out' => 'setQuantityOrderedOut',
        'override_reason_in' => 'setOverrideReasonIn',
        'override_reason_in_desc' => 'setOverrideReasonInDesc',
        'override_reason_out' => 'setOverrideReasonOut',
        'override_reason_out_desc' => 'setOverrideReasonOutDesc',
        'prior_lead_time_date' => 'setPriorLeadTimeDate',
        'safety_allowance_amount' => 'setSafetyAllowanceAmount',
        'safety_allowance_days' => 'setSafetyAllowanceDays',
        'safety_allowance_type' => 'setSafetyAllowanceType',
        'safety_frozen_flag' => 'setSafetyFrozenFlag',
        'season_begin' => 'setSeasonBegin',
        'season_end' => 'setSeasonEnd',
        'stock_out15_flag' => 'setStockOut15Flag',
        'usage_control' => 'setUsageControl',
        'usage_rate' => 'setUsageRate',
        'usage_months' => 'setUsageMonths'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c_error_message' => 'getCErrorMessage',
        'cross_reference_product' => 'getCrossReferenceProduct',
        'cross_reference_type' => 'getCrossReferenceType',
        'available_stock_date' => 'getAvailableStockDate',
        'average_lead_time_date' => 'getAverageLeadTimeDate',
        'class_type' => 'getClassType',
        'class_frozen_flag' => 'getClassFrozenFlag',
        'frozen_by_type' => 'getFrozenByType',
        'frozen_lead_time_type' => 'getFrozenLeadTimeType',
        'frozen_months' => 'getFrozenMonths',
        'frozen_type' => 'getFrozenType',
        'frozen_type_desc' => 'getFrozenTypeDesc',
        'last_lead_time_date' => 'getLastLeadTimeDate',
        'last_stock_out_date' => 'getLastStockOutDate',
        'lead_time_last' => 'getLeadTimeLast',
        'lead_time_prior' => 'getLeadTimePrior',
        'line_point' => 'getLinePoint',
        'number_of_days_season' => 'getNumberOfDaysSeason',
        'number_of_days_stock_out' => 'getNumberOfDaysStockOut',
        'number_of_times_stock_out' => 'getNumberOfTimesStockOut',
        'order_calculation_type' => 'getOrderCalculationType',
        'order_point' => 'getOrderPoint',
        'quantity_ordered_in' => 'getQuantityOrderedIn',
        'quantity_ordered_out' => 'getQuantityOrderedOut',
        'override_reason_in' => 'getOverrideReasonIn',
        'override_reason_in_desc' => 'getOverrideReasonInDesc',
        'override_reason_out' => 'getOverrideReasonOut',
        'override_reason_out_desc' => 'getOverrideReasonOutDesc',
        'prior_lead_time_date' => 'getPriorLeadTimeDate',
        'safety_allowance_amount' => 'getSafetyAllowanceAmount',
        'safety_allowance_days' => 'getSafetyAllowanceDays',
        'safety_allowance_type' => 'getSafetyAllowanceType',
        'safety_frozen_flag' => 'getSafetyFrozenFlag',
        'season_begin' => 'getSeasonBegin',
        'season_end' => 'getSeasonEnd',
        'stock_out15_flag' => 'getStockOut15Flag',
        'usage_control' => 'getUsageControl',
        'usage_rate' => 'getUsageRate',
        'usage_months' => 'getUsageMonths'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['c_error_message'] = isset($data['c_error_message']) ? $data['c_error_message'] : null;
        $this->container['cross_reference_product'] = isset($data['cross_reference_product']) ? $data['cross_reference_product'] : null;
        $this->container['cross_reference_type'] = isset($data['cross_reference_type']) ? $data['cross_reference_type'] : null;
        $this->container['available_stock_date'] = isset($data['available_stock_date']) ? $data['available_stock_date'] : null;
        $this->container['average_lead_time_date'] = isset($data['average_lead_time_date']) ? $data['average_lead_time_date'] : null;
        $this->container['class_type'] = isset($data['class_type']) ? $data['class_type'] : null;
        $this->container['class_frozen_flag'] = isset($data['class_frozen_flag']) ? $data['class_frozen_flag'] : null;
        $this->container['frozen_by_type'] = isset($data['frozen_by_type']) ? $data['frozen_by_type'] : null;
        $this->container['frozen_lead_time_type'] = isset($data['frozen_lead_time_type']) ? $data['frozen_lead_time_type'] : null;
        $this->container['frozen_months'] = isset($data['frozen_months']) ? $data['frozen_months'] : null;
        $this->container['frozen_type'] = isset($data['frozen_type']) ? $data['frozen_type'] : null;
        $this->container['frozen_type_desc'] = isset($data['frozen_type_desc']) ? $data['frozen_type_desc'] : null;
        $this->container['last_lead_time_date'] = isset($data['last_lead_time_date']) ? $data['last_lead_time_date'] : null;
        $this->container['last_stock_out_date'] = isset($data['last_stock_out_date']) ? $data['last_stock_out_date'] : null;
        $this->container['lead_time_last'] = isset($data['lead_time_last']) ? $data['lead_time_last'] : null;
        $this->container['lead_time_prior'] = isset($data['lead_time_prior']) ? $data['lead_time_prior'] : null;
        $this->container['line_point'] = isset($data['line_point']) ? $data['line_point'] : null;
        $this->container['number_of_days_season'] = isset($data['number_of_days_season']) ? $data['number_of_days_season'] : null;
        $this->container['number_of_days_stock_out'] = isset($data['number_of_days_stock_out']) ? $data['number_of_days_stock_out'] : null;
        $this->container['number_of_times_stock_out'] = isset($data['number_of_times_stock_out']) ? $data['number_of_times_stock_out'] : null;
        $this->container['order_calculation_type'] = isset($data['order_calculation_type']) ? $data['order_calculation_type'] : null;
        $this->container['order_point'] = isset($data['order_point']) ? $data['order_point'] : null;
        $this->container['quantity_ordered_in'] = isset($data['quantity_ordered_in']) ? $data['quantity_ordered_in'] : null;
        $this->container['quantity_ordered_out'] = isset($data['quantity_ordered_out']) ? $data['quantity_ordered_out'] : null;
        $this->container['override_reason_in'] = isset($data['override_reason_in']) ? $data['override_reason_in'] : null;
        $this->container['override_reason_in_desc'] = isset($data['override_reason_in_desc']) ? $data['override_reason_in_desc'] : null;
        $this->container['override_reason_out'] = isset($data['override_reason_out']) ? $data['override_reason_out'] : null;
        $this->container['override_reason_out_desc'] = isset($data['override_reason_out_desc']) ? $data['override_reason_out_desc'] : null;
        $this->container['prior_lead_time_date'] = isset($data['prior_lead_time_date']) ? $data['prior_lead_time_date'] : null;
        $this->container['safety_allowance_amount'] = isset($data['safety_allowance_amount']) ? $data['safety_allowance_amount'] : null;
        $this->container['safety_allowance_days'] = isset($data['safety_allowance_days']) ? $data['safety_allowance_days'] : null;
        $this->container['safety_allowance_type'] = isset($data['safety_allowance_type']) ? $data['safety_allowance_type'] : null;
        $this->container['safety_frozen_flag'] = isset($data['safety_frozen_flag']) ? $data['safety_frozen_flag'] : null;
        $this->container['season_begin'] = isset($data['season_begin']) ? $data['season_begin'] : null;
        $this->container['season_end'] = isset($data['season_end']) ? $data['season_end'] : null;
        $this->container['stock_out15_flag'] = isset($data['stock_out15_flag']) ? $data['stock_out15_flag'] : null;
        $this->container['usage_control'] = isset($data['usage_control']) ? $data['usage_control'] : null;
        $this->container['usage_rate'] = isset($data['usage_rate']) ? $data['usage_rate'] : null;
        $this->container['usage_months'] = isset($data['usage_months']) ? $data['usage_months'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c_error_message
     *
     * @return string
     */
    public function getCErrorMessage()
    {
        return $this->container['c_error_message'];
    }

    /**
     * Sets c_error_message
     *
     * @param string $c_error_message c_error_message
     *
     * @return $this
     */
    public function setCErrorMessage($c_error_message)
    {
        $this->container['c_error_message'] = $c_error_message;

        return $this;
    }

    /**
     * Gets cross_reference_product
     *
     * @return string
     */
    public function getCrossReferenceProduct()
    {
        return $this->container['cross_reference_product'];
    }

    /**
     * Sets cross_reference_product
     *
     * @param string $cross_reference_product cross_reference_product
     *
     * @return $this
     */
    public function setCrossReferenceProduct($cross_reference_product)
    {
        $this->container['cross_reference_product'] = $cross_reference_product;

        return $this;
    }

    /**
     * Gets cross_reference_type
     *
     * @return string
     */
    public function getCrossReferenceType()
    {
        return $this->container['cross_reference_type'];
    }

    /**
     * Sets cross_reference_type
     *
     * @param string $cross_reference_type cross_reference_type
     *
     * @return $this
     */
    public function setCrossReferenceType($cross_reference_type)
    {
        $this->container['cross_reference_type'] = $cross_reference_type;

        return $this;
    }

    /**
     * Gets available_stock_date
     *
     * @return \DateTime
     */
    public function getAvailableStockDate()
    {
        return $this->container['available_stock_date'];
    }

    /**
     * Sets available_stock_date
     *
     * @param \DateTime $available_stock_date available_stock_date
     *
     * @return $this
     */
    public function setAvailableStockDate($available_stock_date)
    {
        $this->container['available_stock_date'] = $available_stock_date;

        return $this;
    }

    /**
     * Gets average_lead_time_date
     *
     * @return \DateTime
     */
    public function getAverageLeadTimeDate()
    {
        return $this->container['average_lead_time_date'];
    }

    /**
     * Sets average_lead_time_date
     *
     * @param \DateTime $average_lead_time_date average_lead_time_date
     *
     * @return $this
     */
    public function setAverageLeadTimeDate($average_lead_time_date)
    {
        $this->container['average_lead_time_date'] = $average_lead_time_date;

        return $this;
    }

    /**
     * Gets class_type
     *
     * @return int
     */
    public function getClassType()
    {
        return $this->container['class_type'];
    }

    /**
     * Sets class_type
     *
     * @param int $class_type class_type
     *
     * @return $this
     */
    public function setClassType($class_type)
    {
        $this->container['class_type'] = $class_type;

        return $this;
    }

    /**
     * Gets class_frozen_flag
     *
     * @return bool
     */
    public function getClassFrozenFlag()
    {
        return $this->container['class_frozen_flag'];
    }

    /**
     * Sets class_frozen_flag
     *
     * @param bool $class_frozen_flag class_frozen_flag
     *
     * @return $this
     */
    public function setClassFrozenFlag($class_frozen_flag)
    {
        $this->container['class_frozen_flag'] = $class_frozen_flag;

        return $this;
    }

    /**
     * Gets frozen_by_type
     *
     * @return bool
     */
    public function getFrozenByType()
    {
        return $this->container['frozen_by_type'];
    }

    /**
     * Sets frozen_by_type
     *
     * @param bool $frozen_by_type frozen_by_type
     *
     * @return $this
     */
    public function setFrozenByType($frozen_by_type)
    {
        $this->container['frozen_by_type'] = $frozen_by_type;

        return $this;
    }

    /**
     * Gets frozen_lead_time_type
     *
     * @return int
     */
    public function getFrozenLeadTimeType()
    {
        return $this->container['frozen_lead_time_type'];
    }

    /**
     * Sets frozen_lead_time_type
     *
     * @param int $frozen_lead_time_type frozen_lead_time_type
     *
     * @return $this
     */
    public function setFrozenLeadTimeType($frozen_lead_time_type)
    {
        $this->container['frozen_lead_time_type'] = $frozen_lead_time_type;

        return $this;
    }

    /**
     * Gets frozen_months
     *
     * @return int
     */
    public function getFrozenMonths()
    {
        return $this->container['frozen_months'];
    }

    /**
     * Sets frozen_months
     *
     * @param int $frozen_months frozen_months
     *
     * @return $this
     */
    public function setFrozenMonths($frozen_months)
    {
        $this->container['frozen_months'] = $frozen_months;

        return $this;
    }

    /**
     * Gets frozen_type
     *
     * @return string
     */
    public function getFrozenType()
    {
        return $this->container['frozen_type'];
    }

    /**
     * Sets frozen_type
     *
     * @param string $frozen_type frozen_type
     *
     * @return $this
     */
    public function setFrozenType($frozen_type)
    {
        $this->container['frozen_type'] = $frozen_type;

        return $this;
    }

    /**
     * Gets frozen_type_desc
     *
     * @return string
     */
    public function getFrozenTypeDesc()
    {
        return $this->container['frozen_type_desc'];
    }

    /**
     * Sets frozen_type_desc
     *
     * @param string $frozen_type_desc frozen_type_desc
     *
     * @return $this
     */
    public function setFrozenTypeDesc($frozen_type_desc)
    {
        $this->container['frozen_type_desc'] = $frozen_type_desc;

        return $this;
    }

    /**
     * Gets last_lead_time_date
     *
     * @return \DateTime
     */
    public function getLastLeadTimeDate()
    {
        return $this->container['last_lead_time_date'];
    }

    /**
     * Sets last_lead_time_date
     *
     * @param \DateTime $last_lead_time_date last_lead_time_date
     *
     * @return $this
     */
    public function setLastLeadTimeDate($last_lead_time_date)
    {
        $this->container['last_lead_time_date'] = $last_lead_time_date;

        return $this;
    }

    /**
     * Gets last_stock_out_date
     *
     * @return \DateTime
     */
    public function getLastStockOutDate()
    {
        return $this->container['last_stock_out_date'];
    }

    /**
     * Sets last_stock_out_date
     *
     * @param \DateTime $last_stock_out_date last_stock_out_date
     *
     * @return $this
     */
    public function setLastStockOutDate($last_stock_out_date)
    {
        $this->container['last_stock_out_date'] = $last_stock_out_date;

        return $this;
    }

    /**
     * Gets lead_time_last
     *
     * @return int
     */
    public function getLeadTimeLast()
    {
        return $this->container['lead_time_last'];
    }

    /**
     * Sets lead_time_last
     *
     * @param int $lead_time_last lead_time_last
     *
     * @return $this
     */
    public function setLeadTimeLast($lead_time_last)
    {
        $this->container['lead_time_last'] = $lead_time_last;

        return $this;
    }

    /**
     * Gets lead_time_prior
     *
     * @return int
     */
    public function getLeadTimePrior()
    {
        return $this->container['lead_time_prior'];
    }

    /**
     * Sets lead_time_prior
     *
     * @param int $lead_time_prior lead_time_prior
     *
     * @return $this
     */
    public function setLeadTimePrior($lead_time_prior)
    {
        $this->container['lead_time_prior'] = $lead_time_prior;

        return $this;
    }

    /**
     * Gets line_point
     *
     * @return double
     */
    public function getLinePoint()
    {
        return $this->container['line_point'];
    }

    /**
     * Sets line_point
     *
     * @param double $line_point line_point
     *
     * @return $this
     */
    public function setLinePoint($line_point)
    {
        $this->container['line_point'] = $line_point;

        return $this;
    }

    /**
     * Gets number_of_days_season
     *
     * @return int
     */
    public function getNumberOfDaysSeason()
    {
        return $this->container['number_of_days_season'];
    }

    /**
     * Sets number_of_days_season
     *
     * @param int $number_of_days_season number_of_days_season
     *
     * @return $this
     */
    public function setNumberOfDaysSeason($number_of_days_season)
    {
        $this->container['number_of_days_season'] = $number_of_days_season;

        return $this;
    }

    /**
     * Gets number_of_days_stock_out
     *
     * @return int
     */
    public function getNumberOfDaysStockOut()
    {
        return $this->container['number_of_days_stock_out'];
    }

    /**
     * Sets number_of_days_stock_out
     *
     * @param int $number_of_days_stock_out number_of_days_stock_out
     *
     * @return $this
     */
    public function setNumberOfDaysStockOut($number_of_days_stock_out)
    {
        $this->container['number_of_days_stock_out'] = $number_of_days_stock_out;

        return $this;
    }

    /**
     * Gets number_of_times_stock_out
     *
     * @return int
     */
    public function getNumberOfTimesStockOut()
    {
        return $this->container['number_of_times_stock_out'];
    }

    /**
     * Sets number_of_times_stock_out
     *
     * @param int $number_of_times_stock_out number_of_times_stock_out
     *
     * @return $this
     */
    public function setNumberOfTimesStockOut($number_of_times_stock_out)
    {
        $this->container['number_of_times_stock_out'] = $number_of_times_stock_out;

        return $this;
    }

    /**
     * Gets order_calculation_type
     *
     * @return string
     */
    public function getOrderCalculationType()
    {
        return $this->container['order_calculation_type'];
    }

    /**
     * Sets order_calculation_type
     *
     * @param string $order_calculation_type order_calculation_type
     *
     * @return $this
     */
    public function setOrderCalculationType($order_calculation_type)
    {
        $this->container['order_calculation_type'] = $order_calculation_type;

        return $this;
    }

    /**
     * Gets order_point
     *
     * @return double
     */
    public function getOrderPoint()
    {
        return $this->container['order_point'];
    }

    /**
     * Sets order_point
     *
     * @param double $order_point order_point
     *
     * @return $this
     */
    public function setOrderPoint($order_point)
    {
        $this->container['order_point'] = $order_point;

        return $this;
    }

    /**
     * Gets quantity_ordered_in
     *
     * @return double
     */
    public function getQuantityOrderedIn()
    {
        return $this->container['quantity_ordered_in'];
    }

    /**
     * Sets quantity_ordered_in
     *
     * @param double $quantity_ordered_in quantity_ordered_in
     *
     * @return $this
     */
    public function setQuantityOrderedIn($quantity_ordered_in)
    {
        $this->container['quantity_ordered_in'] = $quantity_ordered_in;

        return $this;
    }

    /**
     * Gets quantity_ordered_out
     *
     * @return double
     */
    public function getQuantityOrderedOut()
    {
        return $this->container['quantity_ordered_out'];
    }

    /**
     * Sets quantity_ordered_out
     *
     * @param double $quantity_ordered_out quantity_ordered_out
     *
     * @return $this
     */
    public function setQuantityOrderedOut($quantity_ordered_out)
    {
        $this->container['quantity_ordered_out'] = $quantity_ordered_out;

        return $this;
    }

    /**
     * Gets override_reason_in
     *
     * @return string
     */
    public function getOverrideReasonIn()
    {
        return $this->container['override_reason_in'];
    }

    /**
     * Sets override_reason_in
     *
     * @param string $override_reason_in override_reason_in
     *
     * @return $this
     */
    public function setOverrideReasonIn($override_reason_in)
    {
        $this->container['override_reason_in'] = $override_reason_in;

        return $this;
    }

    /**
     * Gets override_reason_in_desc
     *
     * @return string
     */
    public function getOverrideReasonInDesc()
    {
        return $this->container['override_reason_in_desc'];
    }

    /**
     * Sets override_reason_in_desc
     *
     * @param string $override_reason_in_desc override_reason_in_desc
     *
     * @return $this
     */
    public function setOverrideReasonInDesc($override_reason_in_desc)
    {
        $this->container['override_reason_in_desc'] = $override_reason_in_desc;

        return $this;
    }

    /**
     * Gets override_reason_out
     *
     * @return string
     */
    public function getOverrideReasonOut()
    {
        return $this->container['override_reason_out'];
    }

    /**
     * Sets override_reason_out
     *
     * @param string $override_reason_out override_reason_out
     *
     * @return $this
     */
    public function setOverrideReasonOut($override_reason_out)
    {
        $this->container['override_reason_out'] = $override_reason_out;

        return $this;
    }

    /**
     * Gets override_reason_out_desc
     *
     * @return string
     */
    public function getOverrideReasonOutDesc()
    {
        return $this->container['override_reason_out_desc'];
    }

    /**
     * Sets override_reason_out_desc
     *
     * @param string $override_reason_out_desc override_reason_out_desc
     *
     * @return $this
     */
    public function setOverrideReasonOutDesc($override_reason_out_desc)
    {
        $this->container['override_reason_out_desc'] = $override_reason_out_desc;

        return $this;
    }

    /**
     * Gets prior_lead_time_date
     *
     * @return \DateTime
     */
    public function getPriorLeadTimeDate()
    {
        return $this->container['prior_lead_time_date'];
    }

    /**
     * Sets prior_lead_time_date
     *
     * @param \DateTime $prior_lead_time_date prior_lead_time_date
     *
     * @return $this
     */
    public function setPriorLeadTimeDate($prior_lead_time_date)
    {
        $this->container['prior_lead_time_date'] = $prior_lead_time_date;

        return $this;
    }

    /**
     * Gets safety_allowance_amount
     *
     * @return double
     */
    public function getSafetyAllowanceAmount()
    {
        return $this->container['safety_allowance_amount'];
    }

    /**
     * Sets safety_allowance_amount
     *
     * @param double $safety_allowance_amount safety_allowance_amount
     *
     * @return $this
     */
    public function setSafetyAllowanceAmount($safety_allowance_amount)
    {
        $this->container['safety_allowance_amount'] = $safety_allowance_amount;

        return $this;
    }

    /**
     * Gets safety_allowance_days
     *
     * @return int
     */
    public function getSafetyAllowanceDays()
    {
        return $this->container['safety_allowance_days'];
    }

    /**
     * Sets safety_allowance_days
     *
     * @param int $safety_allowance_days safety_allowance_days
     *
     * @return $this
     */
    public function setSafetyAllowanceDays($safety_allowance_days)
    {
        $this->container['safety_allowance_days'] = $safety_allowance_days;

        return $this;
    }

    /**
     * Gets safety_allowance_type
     *
     * @return string
     */
    public function getSafetyAllowanceType()
    {
        return $this->container['safety_allowance_type'];
    }

    /**
     * Sets safety_allowance_type
     *
     * @param string $safety_allowance_type safety_allowance_type
     *
     * @return $this
     */
    public function setSafetyAllowanceType($safety_allowance_type)
    {
        $this->container['safety_allowance_type'] = $safety_allowance_type;

        return $this;
    }

    /**
     * Gets safety_frozen_flag
     *
     * @return bool
     */
    public function getSafetyFrozenFlag()
    {
        return $this->container['safety_frozen_flag'];
    }

    /**
     * Sets safety_frozen_flag
     *
     * @param bool $safety_frozen_flag safety_frozen_flag
     *
     * @return $this
     */
    public function setSafetyFrozenFlag($safety_frozen_flag)
    {
        $this->container['safety_frozen_flag'] = $safety_frozen_flag;

        return $this;
    }

    /**
     * Gets season_begin
     *
     * @return int
     */
    public function getSeasonBegin()
    {
        return $this->container['season_begin'];
    }

    /**
     * Sets season_begin
     *
     * @param int $season_begin season_begin
     *
     * @return $this
     */
    public function setSeasonBegin($season_begin)
    {
        $this->container['season_begin'] = $season_begin;

        return $this;
    }

    /**
     * Gets season_end
     *
     * @return int
     */
    public function getSeasonEnd()
    {
        return $this->container['season_end'];
    }

    /**
     * Sets season_end
     *
     * @param int $season_end season_end
     *
     * @return $this
     */
    public function setSeasonEnd($season_end)
    {
        $this->container['season_end'] = $season_end;

        return $this;
    }

    /**
     * Gets stock_out15_flag
     *
     * @return bool
     */
    public function getStockOut15Flag()
    {
        return $this->container['stock_out15_flag'];
    }

    /**
     * Sets stock_out15_flag
     *
     * @param bool $stock_out15_flag stock_out15_flag
     *
     * @return $this
     */
    public function setStockOut15Flag($stock_out15_flag)
    {
        $this->container['stock_out15_flag'] = $stock_out15_flag;

        return $this;
    }

    /**
     * Gets usage_control
     *
     * @return string
     */
    public function getUsageControl()
    {
        return $this->container['usage_control'];
    }

    /**
     * Sets usage_control
     *
     * @param string $usage_control usage_control
     *
     * @return $this
     */
    public function setUsageControl($usage_control)
    {
        $this->container['usage_control'] = $usage_control;

        return $this;
    }

    /**
     * Gets usage_rate
     *
     * @return double
     */
    public function getUsageRate()
    {
        return $this->container['usage_rate'];
    }

    /**
     * Sets usage_rate
     *
     * @param double $usage_rate usage_rate
     *
     * @return $this
     */
    public function setUsageRate($usage_rate)
    {
        $this->container['usage_rate'] = $usage_rate;

        return $this;
    }

    /**
     * Gets usage_months
     *
     * @return int
     */
    public function getUsageMonths()
    {
        return $this->container['usage_months'];
    }

    /**
     * Sets usage_months
     *
     * @param int $usage_months usage_months
     *
     * @return $this
     */
    public function setUsageMonths($usage_months)
    {
        $this->container['usage_months'] = $usage_months;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


