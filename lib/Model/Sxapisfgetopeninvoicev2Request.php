<?php
/**
 * Sxapisfgetopeninvoicev2Request
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Sxapisfgetopeninvoicev2Request Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Sxapisfgetopeninvoicev2Request implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapisfgetopeninvoicev2_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company_number' => 'int',
        'operator_init' => 'string',
        'operator_password' => 'string',
        'customer_number' => 'double',
        'record_limit' => 'int',
        'from_invoice_number' => 'int',
        'to_invoice_number' => 'int',
        'from_invoice_date' => '\DateTime',
        'to_invoice_date' => '\DateTime',
        'from_aging_date' => '\DateTime',
        'to_aging_date' => '\DateTime',
        'from_amount' => 'double',
        'to_amount' => 'double',
        't_infieldvalue' => '\Swagger\Client\Model\TInfieldvalueReq'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'company_number' => 'int64',
        'operator_init' => null,
        'operator_password' => null,
        'customer_number' => 'double',
        'record_limit' => 'int64',
        'from_invoice_number' => 'int64',
        'to_invoice_number' => 'int64',
        'from_invoice_date' => 'date',
        'to_invoice_date' => 'date',
        'from_aging_date' => 'date',
        'to_aging_date' => 'date',
        'from_amount' => 'double',
        'to_amount' => 'double',
        't_infieldvalue' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_number' => 'companyNumber',
        'operator_init' => 'operatorInit',
        'operator_password' => 'operatorPassword',
        'customer_number' => 'customerNumber',
        'record_limit' => 'recordLimit',
        'from_invoice_number' => 'fromInvoiceNumber',
        'to_invoice_number' => 'toInvoiceNumber',
        'from_invoice_date' => 'fromInvoiceDate',
        'to_invoice_date' => 'toInvoiceDate',
        'from_aging_date' => 'fromAgingDate',
        'to_aging_date' => 'toAgingDate',
        'from_amount' => 'fromAmount',
        'to_amount' => 'toAmount',
        't_infieldvalue' => 'tInfieldvalue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_number' => 'setCompanyNumber',
        'operator_init' => 'setOperatorInit',
        'operator_password' => 'setOperatorPassword',
        'customer_number' => 'setCustomerNumber',
        'record_limit' => 'setRecordLimit',
        'from_invoice_number' => 'setFromInvoiceNumber',
        'to_invoice_number' => 'setToInvoiceNumber',
        'from_invoice_date' => 'setFromInvoiceDate',
        'to_invoice_date' => 'setToInvoiceDate',
        'from_aging_date' => 'setFromAgingDate',
        'to_aging_date' => 'setToAgingDate',
        'from_amount' => 'setFromAmount',
        'to_amount' => 'setToAmount',
        't_infieldvalue' => 'setTInfieldvalue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_number' => 'getCompanyNumber',
        'operator_init' => 'getOperatorInit',
        'operator_password' => 'getOperatorPassword',
        'customer_number' => 'getCustomerNumber',
        'record_limit' => 'getRecordLimit',
        'from_invoice_number' => 'getFromInvoiceNumber',
        'to_invoice_number' => 'getToInvoiceNumber',
        'from_invoice_date' => 'getFromInvoiceDate',
        'to_invoice_date' => 'getToInvoiceDate',
        'from_aging_date' => 'getFromAgingDate',
        'to_aging_date' => 'getToAgingDate',
        'from_amount' => 'getFromAmount',
        'to_amount' => 'getToAmount',
        't_infieldvalue' => 'getTInfieldvalue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_number'] = isset($data['company_number']) ? $data['company_number'] : null;
        $this->container['operator_init'] = isset($data['operator_init']) ? $data['operator_init'] : null;
        $this->container['operator_password'] = isset($data['operator_password']) ? $data['operator_password'] : null;
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['record_limit'] = isset($data['record_limit']) ? $data['record_limit'] : null;
        $this->container['from_invoice_number'] = isset($data['from_invoice_number']) ? $data['from_invoice_number'] : null;
        $this->container['to_invoice_number'] = isset($data['to_invoice_number']) ? $data['to_invoice_number'] : null;
        $this->container['from_invoice_date'] = isset($data['from_invoice_date']) ? $data['from_invoice_date'] : null;
        $this->container['to_invoice_date'] = isset($data['to_invoice_date']) ? $data['to_invoice_date'] : null;
        $this->container['from_aging_date'] = isset($data['from_aging_date']) ? $data['from_aging_date'] : null;
        $this->container['to_aging_date'] = isset($data['to_aging_date']) ? $data['to_aging_date'] : null;
        $this->container['from_amount'] = isset($data['from_amount']) ? $data['from_amount'] : null;
        $this->container['to_amount'] = isset($data['to_amount']) ? $data['to_amount'] : null;
        $this->container['t_infieldvalue'] = isset($data['t_infieldvalue']) ? $data['t_infieldvalue'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_number
     *
     * @return int
     */
    public function getCompanyNumber()
    {
        return $this->container['company_number'];
    }

    /**
     * Sets company_number
     *
     * @param int $company_number company_number
     *
     * @return $this
     */
    public function setCompanyNumber($company_number)
    {
        $this->container['company_number'] = $company_number;

        return $this;
    }

    /**
     * Gets operator_init
     *
     * @return string
     */
    public function getOperatorInit()
    {
        return $this->container['operator_init'];
    }

    /**
     * Sets operator_init
     *
     * @param string $operator_init operator_init
     *
     * @return $this
     */
    public function setOperatorInit($operator_init)
    {
        $this->container['operator_init'] = $operator_init;

        return $this;
    }

    /**
     * Gets operator_password
     *
     * @return string
     */
    public function getOperatorPassword()
    {
        return $this->container['operator_password'];
    }

    /**
     * Sets operator_password
     *
     * @param string $operator_password operator_password
     *
     * @return $this
     */
    public function setOperatorPassword($operator_password)
    {
        $this->container['operator_password'] = $operator_password;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return double
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param double $customer_number customer_number
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets record_limit
     *
     * @return int
     */
    public function getRecordLimit()
    {
        return $this->container['record_limit'];
    }

    /**
     * Sets record_limit
     *
     * @param int $record_limit record_limit
     *
     * @return $this
     */
    public function setRecordLimit($record_limit)
    {
        $this->container['record_limit'] = $record_limit;

        return $this;
    }

    /**
     * Gets from_invoice_number
     *
     * @return int
     */
    public function getFromInvoiceNumber()
    {
        return $this->container['from_invoice_number'];
    }

    /**
     * Sets from_invoice_number
     *
     * @param int $from_invoice_number from_invoice_number
     *
     * @return $this
     */
    public function setFromInvoiceNumber($from_invoice_number)
    {
        $this->container['from_invoice_number'] = $from_invoice_number;

        return $this;
    }

    /**
     * Gets to_invoice_number
     *
     * @return int
     */
    public function getToInvoiceNumber()
    {
        return $this->container['to_invoice_number'];
    }

    /**
     * Sets to_invoice_number
     *
     * @param int $to_invoice_number to_invoice_number
     *
     * @return $this
     */
    public function setToInvoiceNumber($to_invoice_number)
    {
        $this->container['to_invoice_number'] = $to_invoice_number;

        return $this;
    }

    /**
     * Gets from_invoice_date
     *
     * @return \DateTime
     */
    public function getFromInvoiceDate()
    {
        return $this->container['from_invoice_date'];
    }

    /**
     * Sets from_invoice_date
     *
     * @param \DateTime $from_invoice_date from_invoice_date
     *
     * @return $this
     */
    public function setFromInvoiceDate($from_invoice_date)
    {
        $this->container['from_invoice_date'] = $from_invoice_date;

        return $this;
    }

    /**
     * Gets to_invoice_date
     *
     * @return \DateTime
     */
    public function getToInvoiceDate()
    {
        return $this->container['to_invoice_date'];
    }

    /**
     * Sets to_invoice_date
     *
     * @param \DateTime $to_invoice_date to_invoice_date
     *
     * @return $this
     */
    public function setToInvoiceDate($to_invoice_date)
    {
        $this->container['to_invoice_date'] = $to_invoice_date;

        return $this;
    }

    /**
     * Gets from_aging_date
     *
     * @return \DateTime
     */
    public function getFromAgingDate()
    {
        return $this->container['from_aging_date'];
    }

    /**
     * Sets from_aging_date
     *
     * @param \DateTime $from_aging_date from_aging_date
     *
     * @return $this
     */
    public function setFromAgingDate($from_aging_date)
    {
        $this->container['from_aging_date'] = $from_aging_date;

        return $this;
    }

    /**
     * Gets to_aging_date
     *
     * @return \DateTime
     */
    public function getToAgingDate()
    {
        return $this->container['to_aging_date'];
    }

    /**
     * Sets to_aging_date
     *
     * @param \DateTime $to_aging_date to_aging_date
     *
     * @return $this
     */
    public function setToAgingDate($to_aging_date)
    {
        $this->container['to_aging_date'] = $to_aging_date;

        return $this;
    }

    /**
     * Gets from_amount
     *
     * @return double
     */
    public function getFromAmount()
    {
        return $this->container['from_amount'];
    }

    /**
     * Sets from_amount
     *
     * @param double $from_amount from_amount
     *
     * @return $this
     */
    public function setFromAmount($from_amount)
    {
        $this->container['from_amount'] = $from_amount;

        return $this;
    }

    /**
     * Gets to_amount
     *
     * @return double
     */
    public function getToAmount()
    {
        return $this->container['to_amount'];
    }

    /**
     * Sets to_amount
     *
     * @param double $to_amount to_amount
     *
     * @return $this
     */
    public function setToAmount($to_amount)
    {
        $this->container['to_amount'] = $to_amount;

        return $this;
    }

    /**
     * Gets t_infieldvalue
     *
     * @return \Swagger\Client\Model\TInfieldvalueReq
     */
    public function getTInfieldvalue()
    {
        return $this->container['t_infieldvalue'];
    }

    /**
     * Sets t_infieldvalue
     *
     * @param \Swagger\Client\Model\TInfieldvalueReq $t_infieldvalue t_infieldvalue
     *
     * @return $this
     */
    public function setTInfieldvalue($t_infieldvalue)
    {
        $this->container['t_infieldvalue'] = $t_infieldvalue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


