<?php
/**
 * Sxapiicgetwarehousedatageneralv2Response
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Sxapiicgetwarehousedatageneralv2Response Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Sxapiicgetwarehousedatageneralv2Response implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapiicgetwarehousedatageneralv2_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'c_error_message' => 'string',
        'name' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'address3' => 'string',
        'city' => 'string',
        'state' => 'string',
        'postal_code' => 'string',
        'managed_flag' => 'bool',
        'customer_number' => 'double',
        'ship_to' => 'string',
        'printer_name' => 'string',
        'cycle_count_show_expected_flag' => 'bool',
        'phys_inv_show_expected_flag' => 'bool',
        'auto_receive_wt_flag' => 'bool',
        'storeroom_wtarp_whse' => 'string',
        't_outfieldvalue' => '\Swagger\Client\Model\TOutfieldvalueResp'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'c_error_message' => null,
        'name' => null,
        'address1' => null,
        'address2' => null,
        'address3' => null,
        'city' => null,
        'state' => null,
        'postal_code' => null,
        'managed_flag' => null,
        'customer_number' => 'double',
        'ship_to' => null,
        'printer_name' => null,
        'cycle_count_show_expected_flag' => null,
        'phys_inv_show_expected_flag' => null,
        'auto_receive_wt_flag' => null,
        'storeroom_wtarp_whse' => null,
        't_outfieldvalue' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c_error_message' => 'cErrorMessage',
        'name' => 'name',
        'address1' => 'address1',
        'address2' => 'address2',
        'address3' => 'address3',
        'city' => 'city',
        'state' => 'state',
        'postal_code' => 'postalCode',
        'managed_flag' => 'managedFlag',
        'customer_number' => 'customerNumber',
        'ship_to' => 'shipTo',
        'printer_name' => 'printerName',
        'cycle_count_show_expected_flag' => 'cycleCountShowExpectedFlag',
        'phys_inv_show_expected_flag' => 'physInvShowExpectedFlag',
        'auto_receive_wt_flag' => 'autoReceiveWTFlag',
        'storeroom_wtarp_whse' => 'storeroomWTARPWhse',
        't_outfieldvalue' => 'tOutfieldvalue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c_error_message' => 'setCErrorMessage',
        'name' => 'setName',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'address3' => 'setAddress3',
        'city' => 'setCity',
        'state' => 'setState',
        'postal_code' => 'setPostalCode',
        'managed_flag' => 'setManagedFlag',
        'customer_number' => 'setCustomerNumber',
        'ship_to' => 'setShipTo',
        'printer_name' => 'setPrinterName',
        'cycle_count_show_expected_flag' => 'setCycleCountShowExpectedFlag',
        'phys_inv_show_expected_flag' => 'setPhysInvShowExpectedFlag',
        'auto_receive_wt_flag' => 'setAutoReceiveWtFlag',
        'storeroom_wtarp_whse' => 'setStoreroomWtarpWhse',
        't_outfieldvalue' => 'setTOutfieldvalue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c_error_message' => 'getCErrorMessage',
        'name' => 'getName',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'address3' => 'getAddress3',
        'city' => 'getCity',
        'state' => 'getState',
        'postal_code' => 'getPostalCode',
        'managed_flag' => 'getManagedFlag',
        'customer_number' => 'getCustomerNumber',
        'ship_to' => 'getShipTo',
        'printer_name' => 'getPrinterName',
        'cycle_count_show_expected_flag' => 'getCycleCountShowExpectedFlag',
        'phys_inv_show_expected_flag' => 'getPhysInvShowExpectedFlag',
        'auto_receive_wt_flag' => 'getAutoReceiveWtFlag',
        'storeroom_wtarp_whse' => 'getStoreroomWtarpWhse',
        't_outfieldvalue' => 'getTOutfieldvalue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['c_error_message'] = isset($data['c_error_message']) ? $data['c_error_message'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['address1'] = isset($data['address1']) ? $data['address1'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['address3'] = isset($data['address3']) ? $data['address3'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['managed_flag'] = isset($data['managed_flag']) ? $data['managed_flag'] : null;
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['ship_to'] = isset($data['ship_to']) ? $data['ship_to'] : null;
        $this->container['printer_name'] = isset($data['printer_name']) ? $data['printer_name'] : null;
        $this->container['cycle_count_show_expected_flag'] = isset($data['cycle_count_show_expected_flag']) ? $data['cycle_count_show_expected_flag'] : null;
        $this->container['phys_inv_show_expected_flag'] = isset($data['phys_inv_show_expected_flag']) ? $data['phys_inv_show_expected_flag'] : null;
        $this->container['auto_receive_wt_flag'] = isset($data['auto_receive_wt_flag']) ? $data['auto_receive_wt_flag'] : null;
        $this->container['storeroom_wtarp_whse'] = isset($data['storeroom_wtarp_whse']) ? $data['storeroom_wtarp_whse'] : null;
        $this->container['t_outfieldvalue'] = isset($data['t_outfieldvalue']) ? $data['t_outfieldvalue'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c_error_message
     *
     * @return string
     */
    public function getCErrorMessage()
    {
        return $this->container['c_error_message'];
    }

    /**
     * Sets c_error_message
     *
     * @param string $c_error_message c_error_message
     *
     * @return $this
     */
    public function setCErrorMessage($c_error_message)
    {
        $this->container['c_error_message'] = $c_error_message;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string $address1 address1
     *
     * @return $this
     */
    public function setAddress1($address1)
    {
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string $address2 address2
     *
     * @return $this
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets address3
     *
     * @return string
     */
    public function getAddress3()
    {
        return $this->container['address3'];
    }

    /**
     * Sets address3
     *
     * @param string $address3 address3
     *
     * @return $this
     */
    public function setAddress3($address3)
    {
        $this->container['address3'] = $address3;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code postal_code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets managed_flag
     *
     * @return bool
     */
    public function getManagedFlag()
    {
        return $this->container['managed_flag'];
    }

    /**
     * Sets managed_flag
     *
     * @param bool $managed_flag managed_flag
     *
     * @return $this
     */
    public function setManagedFlag($managed_flag)
    {
        $this->container['managed_flag'] = $managed_flag;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return double
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param double $customer_number customer_number
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return string
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param string $ship_to ship_to
     *
     * @return $this
     */
    public function setShipTo($ship_to)
    {
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets printer_name
     *
     * @return string
     */
    public function getPrinterName()
    {
        return $this->container['printer_name'];
    }

    /**
     * Sets printer_name
     *
     * @param string $printer_name printer_name
     *
     * @return $this
     */
    public function setPrinterName($printer_name)
    {
        $this->container['printer_name'] = $printer_name;

        return $this;
    }

    /**
     * Gets cycle_count_show_expected_flag
     *
     * @return bool
     */
    public function getCycleCountShowExpectedFlag()
    {
        return $this->container['cycle_count_show_expected_flag'];
    }

    /**
     * Sets cycle_count_show_expected_flag
     *
     * @param bool $cycle_count_show_expected_flag cycle_count_show_expected_flag
     *
     * @return $this
     */
    public function setCycleCountShowExpectedFlag($cycle_count_show_expected_flag)
    {
        $this->container['cycle_count_show_expected_flag'] = $cycle_count_show_expected_flag;

        return $this;
    }

    /**
     * Gets phys_inv_show_expected_flag
     *
     * @return bool
     */
    public function getPhysInvShowExpectedFlag()
    {
        return $this->container['phys_inv_show_expected_flag'];
    }

    /**
     * Sets phys_inv_show_expected_flag
     *
     * @param bool $phys_inv_show_expected_flag phys_inv_show_expected_flag
     *
     * @return $this
     */
    public function setPhysInvShowExpectedFlag($phys_inv_show_expected_flag)
    {
        $this->container['phys_inv_show_expected_flag'] = $phys_inv_show_expected_flag;

        return $this;
    }

    /**
     * Gets auto_receive_wt_flag
     *
     * @return bool
     */
    public function getAutoReceiveWtFlag()
    {
        return $this->container['auto_receive_wt_flag'];
    }

    /**
     * Sets auto_receive_wt_flag
     *
     * @param bool $auto_receive_wt_flag auto_receive_wt_flag
     *
     * @return $this
     */
    public function setAutoReceiveWtFlag($auto_receive_wt_flag)
    {
        $this->container['auto_receive_wt_flag'] = $auto_receive_wt_flag;

        return $this;
    }

    /**
     * Gets storeroom_wtarp_whse
     *
     * @return string
     */
    public function getStoreroomWtarpWhse()
    {
        return $this->container['storeroom_wtarp_whse'];
    }

    /**
     * Sets storeroom_wtarp_whse
     *
     * @param string $storeroom_wtarp_whse storeroom_wtarp_whse
     *
     * @return $this
     */
    public function setStoreroomWtarpWhse($storeroom_wtarp_whse)
    {
        $this->container['storeroom_wtarp_whse'] = $storeroom_wtarp_whse;

        return $this;
    }

    /**
     * Gets t_outfieldvalue
     *
     * @return \Swagger\Client\Model\TOutfieldvalueResp
     */
    public function getTOutfieldvalue()
    {
        return $this->container['t_outfieldvalue'];
    }

    /**
     * Sets t_outfieldvalue
     *
     * @param \Swagger\Client\Model\TOutfieldvalueResp $t_outfieldvalue t_outfieldvalue
     *
     * @return $this
     */
    public function setTOutfieldvalue($t_outfieldvalue)
    {
        $this->container['t_outfieldvalue'] = $t_outfieldvalue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


