<?php
/**
 * Sxapiicgetproductlistv2Request
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Sxapiicgetproductlistv2Request Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Sxapiicgetproductlistv2Request implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapiicgetproductlistv2_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company_number' => 'int',
        'operator_init' => 'string',
        'operator_password' => 'string',
        'product_code' => 'string',
        'product_category' => 'string',
        'kit_type' => 'string',
        'key_word1' => 'string',
        'key_word2' => 'string',
        'key_word3' => 'string',
        'key_word4' => 'string',
        'key_word5' => 'string',
        'include_inactive_records' => 'bool',
        'record_limit' => 'int',
        'status_type' => 'string',
        'regrind_only_flag' => 'bool',
        'regrind_warehouse' => 'string',
        'custom_param' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'company_number' => 'int64',
        'operator_init' => null,
        'operator_password' => null,
        'product_code' => null,
        'product_category' => null,
        'kit_type' => null,
        'key_word1' => null,
        'key_word2' => null,
        'key_word3' => null,
        'key_word4' => null,
        'key_word5' => null,
        'include_inactive_records' => null,
        'record_limit' => 'int64',
        'status_type' => null,
        'regrind_only_flag' => null,
        'regrind_warehouse' => null,
        'custom_param' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_number' => 'companyNumber',
        'operator_init' => 'operatorInit',
        'operator_password' => 'operatorPassword',
        'product_code' => 'productCode',
        'product_category' => 'productCategory',
        'kit_type' => 'kitType',
        'key_word1' => 'keyWord1',
        'key_word2' => 'keyWord2',
        'key_word3' => 'keyWord3',
        'key_word4' => 'keyWord4',
        'key_word5' => 'keyWord5',
        'include_inactive_records' => 'includeInactiveRecords',
        'record_limit' => 'recordLimit',
        'status_type' => 'statusType',
        'regrind_only_flag' => 'regrindOnlyFlag',
        'regrind_warehouse' => 'regrindWarehouse',
        'custom_param' => 'customParam'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_number' => 'setCompanyNumber',
        'operator_init' => 'setOperatorInit',
        'operator_password' => 'setOperatorPassword',
        'product_code' => 'setProductCode',
        'product_category' => 'setProductCategory',
        'kit_type' => 'setKitType',
        'key_word1' => 'setKeyWord1',
        'key_word2' => 'setKeyWord2',
        'key_word3' => 'setKeyWord3',
        'key_word4' => 'setKeyWord4',
        'key_word5' => 'setKeyWord5',
        'include_inactive_records' => 'setIncludeInactiveRecords',
        'record_limit' => 'setRecordLimit',
        'status_type' => 'setStatusType',
        'regrind_only_flag' => 'setRegrindOnlyFlag',
        'regrind_warehouse' => 'setRegrindWarehouse',
        'custom_param' => 'setCustomParam'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_number' => 'getCompanyNumber',
        'operator_init' => 'getOperatorInit',
        'operator_password' => 'getOperatorPassword',
        'product_code' => 'getProductCode',
        'product_category' => 'getProductCategory',
        'kit_type' => 'getKitType',
        'key_word1' => 'getKeyWord1',
        'key_word2' => 'getKeyWord2',
        'key_word3' => 'getKeyWord3',
        'key_word4' => 'getKeyWord4',
        'key_word5' => 'getKeyWord5',
        'include_inactive_records' => 'getIncludeInactiveRecords',
        'record_limit' => 'getRecordLimit',
        'status_type' => 'getStatusType',
        'regrind_only_flag' => 'getRegrindOnlyFlag',
        'regrind_warehouse' => 'getRegrindWarehouse',
        'custom_param' => 'getCustomParam'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_number'] = isset($data['company_number']) ? $data['company_number'] : null;
        $this->container['operator_init'] = isset($data['operator_init']) ? $data['operator_init'] : null;
        $this->container['operator_password'] = isset($data['operator_password']) ? $data['operator_password'] : null;
        $this->container['product_code'] = isset($data['product_code']) ? $data['product_code'] : null;
        $this->container['product_category'] = isset($data['product_category']) ? $data['product_category'] : null;
        $this->container['kit_type'] = isset($data['kit_type']) ? $data['kit_type'] : null;
        $this->container['key_word1'] = isset($data['key_word1']) ? $data['key_word1'] : null;
        $this->container['key_word2'] = isset($data['key_word2']) ? $data['key_word2'] : null;
        $this->container['key_word3'] = isset($data['key_word3']) ? $data['key_word3'] : null;
        $this->container['key_word4'] = isset($data['key_word4']) ? $data['key_word4'] : null;
        $this->container['key_word5'] = isset($data['key_word5']) ? $data['key_word5'] : null;
        $this->container['include_inactive_records'] = isset($data['include_inactive_records']) ? $data['include_inactive_records'] : null;
        $this->container['record_limit'] = isset($data['record_limit']) ? $data['record_limit'] : null;
        $this->container['status_type'] = isset($data['status_type']) ? $data['status_type'] : null;
        $this->container['regrind_only_flag'] = isset($data['regrind_only_flag']) ? $data['regrind_only_flag'] : null;
        $this->container['regrind_warehouse'] = isset($data['regrind_warehouse']) ? $data['regrind_warehouse'] : null;
        $this->container['custom_param'] = isset($data['custom_param']) ? $data['custom_param'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_number
     *
     * @return int
     */
    public function getCompanyNumber()
    {
        return $this->container['company_number'];
    }

    /**
     * Sets company_number
     *
     * @param int $company_number company_number
     *
     * @return $this
     */
    public function setCompanyNumber($company_number)
    {
        $this->container['company_number'] = $company_number;

        return $this;
    }

    /**
     * Gets operator_init
     *
     * @return string
     */
    public function getOperatorInit()
    {
        return $this->container['operator_init'];
    }

    /**
     * Sets operator_init
     *
     * @param string $operator_init operator_init
     *
     * @return $this
     */
    public function setOperatorInit($operator_init)
    {
        $this->container['operator_init'] = $operator_init;

        return $this;
    }

    /**
     * Gets operator_password
     *
     * @return string
     */
    public function getOperatorPassword()
    {
        return $this->container['operator_password'];
    }

    /**
     * Sets operator_password
     *
     * @param string $operator_password operator_password
     *
     * @return $this
     */
    public function setOperatorPassword($operator_password)
    {
        $this->container['operator_password'] = $operator_password;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string $product_code product_code
     *
     * @return $this
     */
    public function setProductCode($product_code)
    {
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets product_category
     *
     * @return string
     */
    public function getProductCategory()
    {
        return $this->container['product_category'];
    }

    /**
     * Sets product_category
     *
     * @param string $product_category product_category
     *
     * @return $this
     */
    public function setProductCategory($product_category)
    {
        $this->container['product_category'] = $product_category;

        return $this;
    }

    /**
     * Gets kit_type
     *
     * @return string
     */
    public function getKitType()
    {
        return $this->container['kit_type'];
    }

    /**
     * Sets kit_type
     *
     * @param string $kit_type kit_type
     *
     * @return $this
     */
    public function setKitType($kit_type)
    {
        $this->container['kit_type'] = $kit_type;

        return $this;
    }

    /**
     * Gets key_word1
     *
     * @return string
     */
    public function getKeyWord1()
    {
        return $this->container['key_word1'];
    }

    /**
     * Sets key_word1
     *
     * @param string $key_word1 key_word1
     *
     * @return $this
     */
    public function setKeyWord1($key_word1)
    {
        $this->container['key_word1'] = $key_word1;

        return $this;
    }

    /**
     * Gets key_word2
     *
     * @return string
     */
    public function getKeyWord2()
    {
        return $this->container['key_word2'];
    }

    /**
     * Sets key_word2
     *
     * @param string $key_word2 key_word2
     *
     * @return $this
     */
    public function setKeyWord2($key_word2)
    {
        $this->container['key_word2'] = $key_word2;

        return $this;
    }

    /**
     * Gets key_word3
     *
     * @return string
     */
    public function getKeyWord3()
    {
        return $this->container['key_word3'];
    }

    /**
     * Sets key_word3
     *
     * @param string $key_word3 key_word3
     *
     * @return $this
     */
    public function setKeyWord3($key_word3)
    {
        $this->container['key_word3'] = $key_word3;

        return $this;
    }

    /**
     * Gets key_word4
     *
     * @return string
     */
    public function getKeyWord4()
    {
        return $this->container['key_word4'];
    }

    /**
     * Sets key_word4
     *
     * @param string $key_word4 key_word4
     *
     * @return $this
     */
    public function setKeyWord4($key_word4)
    {
        $this->container['key_word4'] = $key_word4;

        return $this;
    }

    /**
     * Gets key_word5
     *
     * @return string
     */
    public function getKeyWord5()
    {
        return $this->container['key_word5'];
    }

    /**
     * Sets key_word5
     *
     * @param string $key_word5 key_word5
     *
     * @return $this
     */
    public function setKeyWord5($key_word5)
    {
        $this->container['key_word5'] = $key_word5;

        return $this;
    }

    /**
     * Gets include_inactive_records
     *
     * @return bool
     */
    public function getIncludeInactiveRecords()
    {
        return $this->container['include_inactive_records'];
    }

    /**
     * Sets include_inactive_records
     *
     * @param bool $include_inactive_records include_inactive_records
     *
     * @return $this
     */
    public function setIncludeInactiveRecords($include_inactive_records)
    {
        $this->container['include_inactive_records'] = $include_inactive_records;

        return $this;
    }

    /**
     * Gets record_limit
     *
     * @return int
     */
    public function getRecordLimit()
    {
        return $this->container['record_limit'];
    }

    /**
     * Sets record_limit
     *
     * @param int $record_limit record_limit
     *
     * @return $this
     */
    public function setRecordLimit($record_limit)
    {
        $this->container['record_limit'] = $record_limit;

        return $this;
    }

    /**
     * Gets status_type
     *
     * @return string
     */
    public function getStatusType()
    {
        return $this->container['status_type'];
    }

    /**
     * Sets status_type
     *
     * @param string $status_type status_type
     *
     * @return $this
     */
    public function setStatusType($status_type)
    {
        $this->container['status_type'] = $status_type;

        return $this;
    }

    /**
     * Gets regrind_only_flag
     *
     * @return bool
     */
    public function getRegrindOnlyFlag()
    {
        return $this->container['regrind_only_flag'];
    }

    /**
     * Sets regrind_only_flag
     *
     * @param bool $regrind_only_flag regrind_only_flag
     *
     * @return $this
     */
    public function setRegrindOnlyFlag($regrind_only_flag)
    {
        $this->container['regrind_only_flag'] = $regrind_only_flag;

        return $this;
    }

    /**
     * Gets regrind_warehouse
     *
     * @return string
     */
    public function getRegrindWarehouse()
    {
        return $this->container['regrind_warehouse'];
    }

    /**
     * Sets regrind_warehouse
     *
     * @param string $regrind_warehouse regrind_warehouse
     *
     * @return $this
     */
    public function setRegrindWarehouse($regrind_warehouse)
    {
        $this->container['regrind_warehouse'] = $regrind_warehouse;

        return $this;
    }

    /**
     * Gets custom_param
     *
     * @return string
     */
    public function getCustomParam()
    {
        return $this->container['custom_param'];
    }

    /**
     * Sets custom_param
     *
     * @param string $custom_param custom_param
     *
     * @return $this
     */
    public function setCustomParam($custom_param)
    {
        $this->container['custom_param'] = $custom_param;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


