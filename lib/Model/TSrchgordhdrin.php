<?php
/**
 * TSrchgordhdrin
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TSrchgordhdrin Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TSrchgordhdrin implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-srchgordhdrin';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'orderno' => 'int',
        'ordersuf' => 'int',
        'ponumber' => 'string',
        'backorder' => 'string',
        'carriercode' => 'string',
        'ordertype' => 'string',
        'employeeid' => 'string',
        'employeename' => 'string',
        'department' => 'string',
        'project' => 'string',
        'workordernum' => 'string',
        'machinenum' => 'string',
        'notes' => 'string',
        'srnotesprntfl' => 'string',
        'pickprtfl' => 'string',
        'promisedt' => '\DateTime',
        'reqshipdt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'orderno' => 'int64',
        'ordersuf' => 'int64',
        'ponumber' => null,
        'backorder' => null,
        'carriercode' => null,
        'ordertype' => null,
        'employeeid' => null,
        'employeename' => null,
        'department' => null,
        'project' => null,
        'workordernum' => null,
        'machinenum' => null,
        'notes' => null,
        'srnotesprntfl' => null,
        'pickprtfl' => null,
        'promisedt' => 'date',
        'reqshipdt' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orderno' => 'orderno',
        'ordersuf' => 'ordersuf',
        'ponumber' => 'ponumber',
        'backorder' => 'backorder',
        'carriercode' => 'carriercode',
        'ordertype' => 'ordertype',
        'employeeid' => 'employeeid',
        'employeename' => 'employeename',
        'department' => 'department',
        'project' => 'project',
        'workordernum' => 'workordernum',
        'machinenum' => 'machinenum',
        'notes' => 'notes',
        'srnotesprntfl' => 'srnotesprntfl',
        'pickprtfl' => 'pickprtfl',
        'promisedt' => 'promisedt',
        'reqshipdt' => 'reqshipdt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'orderno' => 'setOrderno',
        'ordersuf' => 'setOrdersuf',
        'ponumber' => 'setPonumber',
        'backorder' => 'setBackorder',
        'carriercode' => 'setCarriercode',
        'ordertype' => 'setOrdertype',
        'employeeid' => 'setEmployeeid',
        'employeename' => 'setEmployeename',
        'department' => 'setDepartment',
        'project' => 'setProject',
        'workordernum' => 'setWorkordernum',
        'machinenum' => 'setMachinenum',
        'notes' => 'setNotes',
        'srnotesprntfl' => 'setSrnotesprntfl',
        'pickprtfl' => 'setPickprtfl',
        'promisedt' => 'setPromisedt',
        'reqshipdt' => 'setReqshipdt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'orderno' => 'getOrderno',
        'ordersuf' => 'getOrdersuf',
        'ponumber' => 'getPonumber',
        'backorder' => 'getBackorder',
        'carriercode' => 'getCarriercode',
        'ordertype' => 'getOrdertype',
        'employeeid' => 'getEmployeeid',
        'employeename' => 'getEmployeename',
        'department' => 'getDepartment',
        'project' => 'getProject',
        'workordernum' => 'getWorkordernum',
        'machinenum' => 'getMachinenum',
        'notes' => 'getNotes',
        'srnotesprntfl' => 'getSrnotesprntfl',
        'pickprtfl' => 'getPickprtfl',
        'promisedt' => 'getPromisedt',
        'reqshipdt' => 'getReqshipdt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['orderno'] = isset($data['orderno']) ? $data['orderno'] : null;
        $this->container['ordersuf'] = isset($data['ordersuf']) ? $data['ordersuf'] : null;
        $this->container['ponumber'] = isset($data['ponumber']) ? $data['ponumber'] : null;
        $this->container['backorder'] = isset($data['backorder']) ? $data['backorder'] : null;
        $this->container['carriercode'] = isset($data['carriercode']) ? $data['carriercode'] : null;
        $this->container['ordertype'] = isset($data['ordertype']) ? $data['ordertype'] : null;
        $this->container['employeeid'] = isset($data['employeeid']) ? $data['employeeid'] : null;
        $this->container['employeename'] = isset($data['employeename']) ? $data['employeename'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['workordernum'] = isset($data['workordernum']) ? $data['workordernum'] : null;
        $this->container['machinenum'] = isset($data['machinenum']) ? $data['machinenum'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['srnotesprntfl'] = isset($data['srnotesprntfl']) ? $data['srnotesprntfl'] : null;
        $this->container['pickprtfl'] = isset($data['pickprtfl']) ? $data['pickprtfl'] : null;
        $this->container['promisedt'] = isset($data['promisedt']) ? $data['promisedt'] : null;
        $this->container['reqshipdt'] = isset($data['reqshipdt']) ? $data['reqshipdt'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets orderno
     *
     * @return int
     */
    public function getOrderno()
    {
        return $this->container['orderno'];
    }

    /**
     * Sets orderno
     *
     * @param int $orderno orderno
     *
     * @return $this
     */
    public function setOrderno($orderno)
    {
        $this->container['orderno'] = $orderno;

        return $this;
    }

    /**
     * Gets ordersuf
     *
     * @return int
     */
    public function getOrdersuf()
    {
        return $this->container['ordersuf'];
    }

    /**
     * Sets ordersuf
     *
     * @param int $ordersuf ordersuf
     *
     * @return $this
     */
    public function setOrdersuf($ordersuf)
    {
        $this->container['ordersuf'] = $ordersuf;

        return $this;
    }

    /**
     * Gets ponumber
     *
     * @return string
     */
    public function getPonumber()
    {
        return $this->container['ponumber'];
    }

    /**
     * Sets ponumber
     *
     * @param string $ponumber ponumber
     *
     * @return $this
     */
    public function setPonumber($ponumber)
    {
        $this->container['ponumber'] = $ponumber;

        return $this;
    }

    /**
     * Gets backorder
     *
     * @return string
     */
    public function getBackorder()
    {
        return $this->container['backorder'];
    }

    /**
     * Sets backorder
     *
     * @param string $backorder backorder
     *
     * @return $this
     */
    public function setBackorder($backorder)
    {
        $this->container['backorder'] = $backorder;

        return $this;
    }

    /**
     * Gets carriercode
     *
     * @return string
     */
    public function getCarriercode()
    {
        return $this->container['carriercode'];
    }

    /**
     * Sets carriercode
     *
     * @param string $carriercode carriercode
     *
     * @return $this
     */
    public function setCarriercode($carriercode)
    {
        $this->container['carriercode'] = $carriercode;

        return $this;
    }

    /**
     * Gets ordertype
     *
     * @return string
     */
    public function getOrdertype()
    {
        return $this->container['ordertype'];
    }

    /**
     * Sets ordertype
     *
     * @param string $ordertype ordertype
     *
     * @return $this
     */
    public function setOrdertype($ordertype)
    {
        $this->container['ordertype'] = $ordertype;

        return $this;
    }

    /**
     * Gets employeeid
     *
     * @return string
     */
    public function getEmployeeid()
    {
        return $this->container['employeeid'];
    }

    /**
     * Sets employeeid
     *
     * @param string $employeeid employeeid
     *
     * @return $this
     */
    public function setEmployeeid($employeeid)
    {
        $this->container['employeeid'] = $employeeid;

        return $this;
    }

    /**
     * Gets employeename
     *
     * @return string
     */
    public function getEmployeename()
    {
        return $this->container['employeename'];
    }

    /**
     * Sets employeename
     *
     * @param string $employeename employeename
     *
     * @return $this
     */
    public function setEmployeename($employeename)
    {
        $this->container['employeename'] = $employeename;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string $department department
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets project
     *
     * @return string
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param string $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets workordernum
     *
     * @return string
     */
    public function getWorkordernum()
    {
        return $this->container['workordernum'];
    }

    /**
     * Sets workordernum
     *
     * @param string $workordernum workordernum
     *
     * @return $this
     */
    public function setWorkordernum($workordernum)
    {
        $this->container['workordernum'] = $workordernum;

        return $this;
    }

    /**
     * Gets machinenum
     *
     * @return string
     */
    public function getMachinenum()
    {
        return $this->container['machinenum'];
    }

    /**
     * Sets machinenum
     *
     * @param string $machinenum machinenum
     *
     * @return $this
     */
    public function setMachinenum($machinenum)
    {
        $this->container['machinenum'] = $machinenum;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets srnotesprntfl
     *
     * @return string
     */
    public function getSrnotesprntfl()
    {
        return $this->container['srnotesprntfl'];
    }

    /**
     * Sets srnotesprntfl
     *
     * @param string $srnotesprntfl srnotesprntfl
     *
     * @return $this
     */
    public function setSrnotesprntfl($srnotesprntfl)
    {
        $this->container['srnotesprntfl'] = $srnotesprntfl;

        return $this;
    }

    /**
     * Gets pickprtfl
     *
     * @return string
     */
    public function getPickprtfl()
    {
        return $this->container['pickprtfl'];
    }

    /**
     * Sets pickprtfl
     *
     * @param string $pickprtfl pickprtfl
     *
     * @return $this
     */
    public function setPickprtfl($pickprtfl)
    {
        $this->container['pickprtfl'] = $pickprtfl;

        return $this;
    }

    /**
     * Gets promisedt
     *
     * @return \DateTime
     */
    public function getPromisedt()
    {
        return $this->container['promisedt'];
    }

    /**
     * Sets promisedt
     *
     * @param \DateTime $promisedt promisedt
     *
     * @return $this
     */
    public function setPromisedt($promisedt)
    {
        $this->container['promisedt'] = $promisedt;

        return $this;
    }

    /**
     * Gets reqshipdt
     *
     * @return \DateTime
     */
    public function getReqshipdt()
    {
        return $this->container['reqshipdt'];
    }

    /**
     * Sets reqshipdt
     *
     * @param \DateTime $reqshipdt reqshipdt
     *
     * @return $this
     */
    public function setReqshipdt($reqshipdt)
    {
        $this->container['reqshipdt'] = $reqshipdt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


