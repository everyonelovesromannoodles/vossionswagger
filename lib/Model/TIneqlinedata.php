<?php
/**
 * TIneqlinedata
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TIneqlinedata Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TIneqlinedata implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-ineqlinedata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'warehouseid' => 'string',
        'orderno' => 'int',
        'ordersuf' => 'int',
        'lineno' => 'int',
        'seqno' => 'int',
        'itemnumber' => 'string',
        'itemdesc1' => 'string',
        'itemdesc2' => 'string',
        'orderqty' => 'double',
        'unitofmeasure' => 'string',
        'vendor' => 'double',
        'productline' => 'string',
        'productcategory' => 'string',
        'manualpriceflag' => 'bool',
        'manualprice' => 'double',
        'regularprice' => 'double',
        'baseprice' => 'double',
        'listprice' => 'double',
        'minimumprice' => 'double',
        'lookupprice' => 'double',
        'lookuppricetype' => 'int',
        'sellingprice' => 'double',
        'sellingpricetype' => 'int',
        'pricematchflag' => 'bool',
        'returnflag' => 'bool',
        'nonstockflag' => 'string',
        'origin' => 'int',
        'accountnumber' => 'string',
        'taxrate' => 'double',
        'shippingamount' => 'double',
        'associatediscpct' => 'double',
        'associatediscamt' => 'double',
        'associatediscinelegible' => 'bool',
        'nopromofl' => 'bool',
        'eligiblefordiscounts' => 'bool',
        'userfield' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'warehouseid' => null,
        'orderno' => 'int64',
        'ordersuf' => 'int64',
        'lineno' => 'int64',
        'seqno' => 'int64',
        'itemnumber' => null,
        'itemdesc1' => null,
        'itemdesc2' => null,
        'orderqty' => 'double',
        'unitofmeasure' => null,
        'vendor' => 'double',
        'productline' => null,
        'productcategory' => null,
        'manualpriceflag' => null,
        'manualprice' => 'double',
        'regularprice' => 'double',
        'baseprice' => 'double',
        'listprice' => 'double',
        'minimumprice' => 'double',
        'lookupprice' => 'double',
        'lookuppricetype' => 'int64',
        'sellingprice' => 'double',
        'sellingpricetype' => 'int64',
        'pricematchflag' => null,
        'returnflag' => null,
        'nonstockflag' => null,
        'origin' => 'int64',
        'accountnumber' => null,
        'taxrate' => 'double',
        'shippingamount' => 'double',
        'associatediscpct' => 'double',
        'associatediscamt' => 'double',
        'associatediscinelegible' => null,
        'nopromofl' => null,
        'eligiblefordiscounts' => null,
        'userfield' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'warehouseid' => 'warehouseid',
        'orderno' => 'orderno',
        'ordersuf' => 'ordersuf',
        'lineno' => 'lineno',
        'seqno' => 'seqno',
        'itemnumber' => 'itemnumber',
        'itemdesc1' => 'itemdesc1',
        'itemdesc2' => 'itemdesc2',
        'orderqty' => 'orderqty',
        'unitofmeasure' => 'unitofmeasure',
        'vendor' => 'vendor',
        'productline' => 'productline',
        'productcategory' => 'productcategory',
        'manualpriceflag' => 'manualpriceflag',
        'manualprice' => 'manualprice',
        'regularprice' => 'regularprice',
        'baseprice' => 'baseprice',
        'listprice' => 'listprice',
        'minimumprice' => 'minimumprice',
        'lookupprice' => 'lookupprice',
        'lookuppricetype' => 'lookuppricetype',
        'sellingprice' => 'sellingprice',
        'sellingpricetype' => 'sellingpricetype',
        'pricematchflag' => 'pricematchflag',
        'returnflag' => 'returnflag',
        'nonstockflag' => 'nonstockflag',
        'origin' => 'origin',
        'accountnumber' => 'accountnumber',
        'taxrate' => 'taxrate',
        'shippingamount' => 'shippingamount',
        'associatediscpct' => 'associatediscpct',
        'associatediscamt' => 'associatediscamt',
        'associatediscinelegible' => 'associatediscinelegible',
        'nopromofl' => 'nopromofl',
        'eligiblefordiscounts' => 'eligiblefordiscounts',
        'userfield' => 'userfield'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'warehouseid' => 'setWarehouseid',
        'orderno' => 'setOrderno',
        'ordersuf' => 'setOrdersuf',
        'lineno' => 'setLineno',
        'seqno' => 'setSeqno',
        'itemnumber' => 'setItemnumber',
        'itemdesc1' => 'setItemdesc1',
        'itemdesc2' => 'setItemdesc2',
        'orderqty' => 'setOrderqty',
        'unitofmeasure' => 'setUnitofmeasure',
        'vendor' => 'setVendor',
        'productline' => 'setProductline',
        'productcategory' => 'setProductcategory',
        'manualpriceflag' => 'setManualpriceflag',
        'manualprice' => 'setManualprice',
        'regularprice' => 'setRegularprice',
        'baseprice' => 'setBaseprice',
        'listprice' => 'setListprice',
        'minimumprice' => 'setMinimumprice',
        'lookupprice' => 'setLookupprice',
        'lookuppricetype' => 'setLookuppricetype',
        'sellingprice' => 'setSellingprice',
        'sellingpricetype' => 'setSellingpricetype',
        'pricematchflag' => 'setPricematchflag',
        'returnflag' => 'setReturnflag',
        'nonstockflag' => 'setNonstockflag',
        'origin' => 'setOrigin',
        'accountnumber' => 'setAccountnumber',
        'taxrate' => 'setTaxrate',
        'shippingamount' => 'setShippingamount',
        'associatediscpct' => 'setAssociatediscpct',
        'associatediscamt' => 'setAssociatediscamt',
        'associatediscinelegible' => 'setAssociatediscinelegible',
        'nopromofl' => 'setNopromofl',
        'eligiblefordiscounts' => 'setEligiblefordiscounts',
        'userfield' => 'setUserfield'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'warehouseid' => 'getWarehouseid',
        'orderno' => 'getOrderno',
        'ordersuf' => 'getOrdersuf',
        'lineno' => 'getLineno',
        'seqno' => 'getSeqno',
        'itemnumber' => 'getItemnumber',
        'itemdesc1' => 'getItemdesc1',
        'itemdesc2' => 'getItemdesc2',
        'orderqty' => 'getOrderqty',
        'unitofmeasure' => 'getUnitofmeasure',
        'vendor' => 'getVendor',
        'productline' => 'getProductline',
        'productcategory' => 'getProductcategory',
        'manualpriceflag' => 'getManualpriceflag',
        'manualprice' => 'getManualprice',
        'regularprice' => 'getRegularprice',
        'baseprice' => 'getBaseprice',
        'listprice' => 'getListprice',
        'minimumprice' => 'getMinimumprice',
        'lookupprice' => 'getLookupprice',
        'lookuppricetype' => 'getLookuppricetype',
        'sellingprice' => 'getSellingprice',
        'sellingpricetype' => 'getSellingpricetype',
        'pricematchflag' => 'getPricematchflag',
        'returnflag' => 'getReturnflag',
        'nonstockflag' => 'getNonstockflag',
        'origin' => 'getOrigin',
        'accountnumber' => 'getAccountnumber',
        'taxrate' => 'getTaxrate',
        'shippingamount' => 'getShippingamount',
        'associatediscpct' => 'getAssociatediscpct',
        'associatediscamt' => 'getAssociatediscamt',
        'associatediscinelegible' => 'getAssociatediscinelegible',
        'nopromofl' => 'getNopromofl',
        'eligiblefordiscounts' => 'getEligiblefordiscounts',
        'userfield' => 'getUserfield'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['warehouseid'] = isset($data['warehouseid']) ? $data['warehouseid'] : null;
        $this->container['orderno'] = isset($data['orderno']) ? $data['orderno'] : null;
        $this->container['ordersuf'] = isset($data['ordersuf']) ? $data['ordersuf'] : null;
        $this->container['lineno'] = isset($data['lineno']) ? $data['lineno'] : null;
        $this->container['seqno'] = isset($data['seqno']) ? $data['seqno'] : null;
        $this->container['itemnumber'] = isset($data['itemnumber']) ? $data['itemnumber'] : null;
        $this->container['itemdesc1'] = isset($data['itemdesc1']) ? $data['itemdesc1'] : null;
        $this->container['itemdesc2'] = isset($data['itemdesc2']) ? $data['itemdesc2'] : null;
        $this->container['orderqty'] = isset($data['orderqty']) ? $data['orderqty'] : null;
        $this->container['unitofmeasure'] = isset($data['unitofmeasure']) ? $data['unitofmeasure'] : null;
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
        $this->container['productline'] = isset($data['productline']) ? $data['productline'] : null;
        $this->container['productcategory'] = isset($data['productcategory']) ? $data['productcategory'] : null;
        $this->container['manualpriceflag'] = isset($data['manualpriceflag']) ? $data['manualpriceflag'] : null;
        $this->container['manualprice'] = isset($data['manualprice']) ? $data['manualprice'] : null;
        $this->container['regularprice'] = isset($data['regularprice']) ? $data['regularprice'] : null;
        $this->container['baseprice'] = isset($data['baseprice']) ? $data['baseprice'] : null;
        $this->container['listprice'] = isset($data['listprice']) ? $data['listprice'] : null;
        $this->container['minimumprice'] = isset($data['minimumprice']) ? $data['minimumprice'] : null;
        $this->container['lookupprice'] = isset($data['lookupprice']) ? $data['lookupprice'] : null;
        $this->container['lookuppricetype'] = isset($data['lookuppricetype']) ? $data['lookuppricetype'] : null;
        $this->container['sellingprice'] = isset($data['sellingprice']) ? $data['sellingprice'] : null;
        $this->container['sellingpricetype'] = isset($data['sellingpricetype']) ? $data['sellingpricetype'] : null;
        $this->container['pricematchflag'] = isset($data['pricematchflag']) ? $data['pricematchflag'] : null;
        $this->container['returnflag'] = isset($data['returnflag']) ? $data['returnflag'] : null;
        $this->container['nonstockflag'] = isset($data['nonstockflag']) ? $data['nonstockflag'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['accountnumber'] = isset($data['accountnumber']) ? $data['accountnumber'] : null;
        $this->container['taxrate'] = isset($data['taxrate']) ? $data['taxrate'] : null;
        $this->container['shippingamount'] = isset($data['shippingamount']) ? $data['shippingamount'] : null;
        $this->container['associatediscpct'] = isset($data['associatediscpct']) ? $data['associatediscpct'] : null;
        $this->container['associatediscamt'] = isset($data['associatediscamt']) ? $data['associatediscamt'] : null;
        $this->container['associatediscinelegible'] = isset($data['associatediscinelegible']) ? $data['associatediscinelegible'] : null;
        $this->container['nopromofl'] = isset($data['nopromofl']) ? $data['nopromofl'] : null;
        $this->container['eligiblefordiscounts'] = isset($data['eligiblefordiscounts']) ? $data['eligiblefordiscounts'] : null;
        $this->container['userfield'] = isset($data['userfield']) ? $data['userfield'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets warehouseid
     *
     * @return string
     */
    public function getWarehouseid()
    {
        return $this->container['warehouseid'];
    }

    /**
     * Sets warehouseid
     *
     * @param string $warehouseid warehouseid
     *
     * @return $this
     */
    public function setWarehouseid($warehouseid)
    {
        $this->container['warehouseid'] = $warehouseid;

        return $this;
    }

    /**
     * Gets orderno
     *
     * @return int
     */
    public function getOrderno()
    {
        return $this->container['orderno'];
    }

    /**
     * Sets orderno
     *
     * @param int $orderno orderno
     *
     * @return $this
     */
    public function setOrderno($orderno)
    {
        $this->container['orderno'] = $orderno;

        return $this;
    }

    /**
     * Gets ordersuf
     *
     * @return int
     */
    public function getOrdersuf()
    {
        return $this->container['ordersuf'];
    }

    /**
     * Sets ordersuf
     *
     * @param int $ordersuf ordersuf
     *
     * @return $this
     */
    public function setOrdersuf($ordersuf)
    {
        $this->container['ordersuf'] = $ordersuf;

        return $this;
    }

    /**
     * Gets lineno
     *
     * @return int
     */
    public function getLineno()
    {
        return $this->container['lineno'];
    }

    /**
     * Sets lineno
     *
     * @param int $lineno lineno
     *
     * @return $this
     */
    public function setLineno($lineno)
    {
        $this->container['lineno'] = $lineno;

        return $this;
    }

    /**
     * Gets seqno
     *
     * @return int
     */
    public function getSeqno()
    {
        return $this->container['seqno'];
    }

    /**
     * Sets seqno
     *
     * @param int $seqno seqno
     *
     * @return $this
     */
    public function setSeqno($seqno)
    {
        $this->container['seqno'] = $seqno;

        return $this;
    }

    /**
     * Gets itemnumber
     *
     * @return string
     */
    public function getItemnumber()
    {
        return $this->container['itemnumber'];
    }

    /**
     * Sets itemnumber
     *
     * @param string $itemnumber itemnumber
     *
     * @return $this
     */
    public function setItemnumber($itemnumber)
    {
        $this->container['itemnumber'] = $itemnumber;

        return $this;
    }

    /**
     * Gets itemdesc1
     *
     * @return string
     */
    public function getItemdesc1()
    {
        return $this->container['itemdesc1'];
    }

    /**
     * Sets itemdesc1
     *
     * @param string $itemdesc1 itemdesc1
     *
     * @return $this
     */
    public function setItemdesc1($itemdesc1)
    {
        $this->container['itemdesc1'] = $itemdesc1;

        return $this;
    }

    /**
     * Gets itemdesc2
     *
     * @return string
     */
    public function getItemdesc2()
    {
        return $this->container['itemdesc2'];
    }

    /**
     * Sets itemdesc2
     *
     * @param string $itemdesc2 itemdesc2
     *
     * @return $this
     */
    public function setItemdesc2($itemdesc2)
    {
        $this->container['itemdesc2'] = $itemdesc2;

        return $this;
    }

    /**
     * Gets orderqty
     *
     * @return double
     */
    public function getOrderqty()
    {
        return $this->container['orderqty'];
    }

    /**
     * Sets orderqty
     *
     * @param double $orderqty orderqty
     *
     * @return $this
     */
    public function setOrderqty($orderqty)
    {
        $this->container['orderqty'] = $orderqty;

        return $this;
    }

    /**
     * Gets unitofmeasure
     *
     * @return string
     */
    public function getUnitofmeasure()
    {
        return $this->container['unitofmeasure'];
    }

    /**
     * Sets unitofmeasure
     *
     * @param string $unitofmeasure unitofmeasure
     *
     * @return $this
     */
    public function setUnitofmeasure($unitofmeasure)
    {
        $this->container['unitofmeasure'] = $unitofmeasure;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return double
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param double $vendor vendor
     *
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets productline
     *
     * @return string
     */
    public function getProductline()
    {
        return $this->container['productline'];
    }

    /**
     * Sets productline
     *
     * @param string $productline productline
     *
     * @return $this
     */
    public function setProductline($productline)
    {
        $this->container['productline'] = $productline;

        return $this;
    }

    /**
     * Gets productcategory
     *
     * @return string
     */
    public function getProductcategory()
    {
        return $this->container['productcategory'];
    }

    /**
     * Sets productcategory
     *
     * @param string $productcategory productcategory
     *
     * @return $this
     */
    public function setProductcategory($productcategory)
    {
        $this->container['productcategory'] = $productcategory;

        return $this;
    }

    /**
     * Gets manualpriceflag
     *
     * @return bool
     */
    public function getManualpriceflag()
    {
        return $this->container['manualpriceflag'];
    }

    /**
     * Sets manualpriceflag
     *
     * @param bool $manualpriceflag manualpriceflag
     *
     * @return $this
     */
    public function setManualpriceflag($manualpriceflag)
    {
        $this->container['manualpriceflag'] = $manualpriceflag;

        return $this;
    }

    /**
     * Gets manualprice
     *
     * @return double
     */
    public function getManualprice()
    {
        return $this->container['manualprice'];
    }

    /**
     * Sets manualprice
     *
     * @param double $manualprice manualprice
     *
     * @return $this
     */
    public function setManualprice($manualprice)
    {
        $this->container['manualprice'] = $manualprice;

        return $this;
    }

    /**
     * Gets regularprice
     *
     * @return double
     */
    public function getRegularprice()
    {
        return $this->container['regularprice'];
    }

    /**
     * Sets regularprice
     *
     * @param double $regularprice regularprice
     *
     * @return $this
     */
    public function setRegularprice($regularprice)
    {
        $this->container['regularprice'] = $regularprice;

        return $this;
    }

    /**
     * Gets baseprice
     *
     * @return double
     */
    public function getBaseprice()
    {
        return $this->container['baseprice'];
    }

    /**
     * Sets baseprice
     *
     * @param double $baseprice baseprice
     *
     * @return $this
     */
    public function setBaseprice($baseprice)
    {
        $this->container['baseprice'] = $baseprice;

        return $this;
    }

    /**
     * Gets listprice
     *
     * @return double
     */
    public function getListprice()
    {
        return $this->container['listprice'];
    }

    /**
     * Sets listprice
     *
     * @param double $listprice listprice
     *
     * @return $this
     */
    public function setListprice($listprice)
    {
        $this->container['listprice'] = $listprice;

        return $this;
    }

    /**
     * Gets minimumprice
     *
     * @return double
     */
    public function getMinimumprice()
    {
        return $this->container['minimumprice'];
    }

    /**
     * Sets minimumprice
     *
     * @param double $minimumprice minimumprice
     *
     * @return $this
     */
    public function setMinimumprice($minimumprice)
    {
        $this->container['minimumprice'] = $minimumprice;

        return $this;
    }

    /**
     * Gets lookupprice
     *
     * @return double
     */
    public function getLookupprice()
    {
        return $this->container['lookupprice'];
    }

    /**
     * Sets lookupprice
     *
     * @param double $lookupprice lookupprice
     *
     * @return $this
     */
    public function setLookupprice($lookupprice)
    {
        $this->container['lookupprice'] = $lookupprice;

        return $this;
    }

    /**
     * Gets lookuppricetype
     *
     * @return int
     */
    public function getLookuppricetype()
    {
        return $this->container['lookuppricetype'];
    }

    /**
     * Sets lookuppricetype
     *
     * @param int $lookuppricetype lookuppricetype
     *
     * @return $this
     */
    public function setLookuppricetype($lookuppricetype)
    {
        $this->container['lookuppricetype'] = $lookuppricetype;

        return $this;
    }

    /**
     * Gets sellingprice
     *
     * @return double
     */
    public function getSellingprice()
    {
        return $this->container['sellingprice'];
    }

    /**
     * Sets sellingprice
     *
     * @param double $sellingprice sellingprice
     *
     * @return $this
     */
    public function setSellingprice($sellingprice)
    {
        $this->container['sellingprice'] = $sellingprice;

        return $this;
    }

    /**
     * Gets sellingpricetype
     *
     * @return int
     */
    public function getSellingpricetype()
    {
        return $this->container['sellingpricetype'];
    }

    /**
     * Sets sellingpricetype
     *
     * @param int $sellingpricetype sellingpricetype
     *
     * @return $this
     */
    public function setSellingpricetype($sellingpricetype)
    {
        $this->container['sellingpricetype'] = $sellingpricetype;

        return $this;
    }

    /**
     * Gets pricematchflag
     *
     * @return bool
     */
    public function getPricematchflag()
    {
        return $this->container['pricematchflag'];
    }

    /**
     * Sets pricematchflag
     *
     * @param bool $pricematchflag pricematchflag
     *
     * @return $this
     */
    public function setPricematchflag($pricematchflag)
    {
        $this->container['pricematchflag'] = $pricematchflag;

        return $this;
    }

    /**
     * Gets returnflag
     *
     * @return bool
     */
    public function getReturnflag()
    {
        return $this->container['returnflag'];
    }

    /**
     * Sets returnflag
     *
     * @param bool $returnflag returnflag
     *
     * @return $this
     */
    public function setReturnflag($returnflag)
    {
        $this->container['returnflag'] = $returnflag;

        return $this;
    }

    /**
     * Gets nonstockflag
     *
     * @return string
     */
    public function getNonstockflag()
    {
        return $this->container['nonstockflag'];
    }

    /**
     * Sets nonstockflag
     *
     * @param string $nonstockflag nonstockflag
     *
     * @return $this
     */
    public function setNonstockflag($nonstockflag)
    {
        $this->container['nonstockflag'] = $nonstockflag;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return int
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param int $origin origin
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets accountnumber
     *
     * @return string
     */
    public function getAccountnumber()
    {
        return $this->container['accountnumber'];
    }

    /**
     * Sets accountnumber
     *
     * @param string $accountnumber accountnumber
     *
     * @return $this
     */
    public function setAccountnumber($accountnumber)
    {
        $this->container['accountnumber'] = $accountnumber;

        return $this;
    }

    /**
     * Gets taxrate
     *
     * @return double
     */
    public function getTaxrate()
    {
        return $this->container['taxrate'];
    }

    /**
     * Sets taxrate
     *
     * @param double $taxrate taxrate
     *
     * @return $this
     */
    public function setTaxrate($taxrate)
    {
        $this->container['taxrate'] = $taxrate;

        return $this;
    }

    /**
     * Gets shippingamount
     *
     * @return double
     */
    public function getShippingamount()
    {
        return $this->container['shippingamount'];
    }

    /**
     * Sets shippingamount
     *
     * @param double $shippingamount shippingamount
     *
     * @return $this
     */
    public function setShippingamount($shippingamount)
    {
        $this->container['shippingamount'] = $shippingamount;

        return $this;
    }

    /**
     * Gets associatediscpct
     *
     * @return double
     */
    public function getAssociatediscpct()
    {
        return $this->container['associatediscpct'];
    }

    /**
     * Sets associatediscpct
     *
     * @param double $associatediscpct associatediscpct
     *
     * @return $this
     */
    public function setAssociatediscpct($associatediscpct)
    {
        $this->container['associatediscpct'] = $associatediscpct;

        return $this;
    }

    /**
     * Gets associatediscamt
     *
     * @return double
     */
    public function getAssociatediscamt()
    {
        return $this->container['associatediscamt'];
    }

    /**
     * Sets associatediscamt
     *
     * @param double $associatediscamt associatediscamt
     *
     * @return $this
     */
    public function setAssociatediscamt($associatediscamt)
    {
        $this->container['associatediscamt'] = $associatediscamt;

        return $this;
    }

    /**
     * Gets associatediscinelegible
     *
     * @return bool
     */
    public function getAssociatediscinelegible()
    {
        return $this->container['associatediscinelegible'];
    }

    /**
     * Sets associatediscinelegible
     *
     * @param bool $associatediscinelegible associatediscinelegible
     *
     * @return $this
     */
    public function setAssociatediscinelegible($associatediscinelegible)
    {
        $this->container['associatediscinelegible'] = $associatediscinelegible;

        return $this;
    }

    /**
     * Gets nopromofl
     *
     * @return bool
     */
    public function getNopromofl()
    {
        return $this->container['nopromofl'];
    }

    /**
     * Sets nopromofl
     *
     * @param bool $nopromofl nopromofl
     *
     * @return $this
     */
    public function setNopromofl($nopromofl)
    {
        $this->container['nopromofl'] = $nopromofl;

        return $this;
    }

    /**
     * Gets eligiblefordiscounts
     *
     * @return bool
     */
    public function getEligiblefordiscounts()
    {
        return $this->container['eligiblefordiscounts'];
    }

    /**
     * Sets eligiblefordiscounts
     *
     * @param bool $eligiblefordiscounts eligiblefordiscounts
     *
     * @return $this
     */
    public function setEligiblefordiscounts($eligiblefordiscounts)
    {
        $this->container['eligiblefordiscounts'] = $eligiblefordiscounts;

        return $this;
    }

    /**
     * Gets userfield
     *
     * @return string
     */
    public function getUserfield()
    {
        return $this->container['userfield'];
    }

    /**
     * Sets userfield
     *
     * @param string $userfield userfield
     *
     * @return $this
     */
    public function setUserfield($userfield)
    {
        $this->container['userfield'] = $userfield;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


