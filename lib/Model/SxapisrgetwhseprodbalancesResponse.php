<?php
/**
 * SxapisrgetwhseprodbalancesResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SxapisrgetwhseprodbalancesResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SxapisrgetwhseprodbalancesResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapisrgetwhseprodbalances_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'c_error_message' => 'string',
        'cross_reference_product' => 'string',
        'cross_reference_type' => 'string',
        'return_unit_of_measure' => 'string',
        'customer_quantity_on_hand' => 'double',
        'customer_quantity_on_order' => 'double',
        'customer_quantity_unavailable' => 'double',
        'customer_net_available' => 'double',
        'distributor_quantity_on_hand' => 'double',
        'distributor_quantity_on_order' => 'double',
        'distributor_quantity_unavailable' => 'double',
        'distributor_net_available' => 'double',
        'total_quantity_on_hand' => 'double',
        'total_quantity_on_order' => 'double',
        'total_quantity_unavailable' => 'double',
        'total_net_available' => 'double',
        'customer_only_flag' => 'bool',
        't_unavaildetail' => '\Swagger\Client\Model\TUnavaildetailResp',
        't_outfieldvalue' => '\Swagger\Client\Model\TOutfieldvalueResp'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'c_error_message' => null,
        'cross_reference_product' => null,
        'cross_reference_type' => null,
        'return_unit_of_measure' => null,
        'customer_quantity_on_hand' => 'double',
        'customer_quantity_on_order' => 'double',
        'customer_quantity_unavailable' => 'double',
        'customer_net_available' => 'double',
        'distributor_quantity_on_hand' => 'double',
        'distributor_quantity_on_order' => 'double',
        'distributor_quantity_unavailable' => 'double',
        'distributor_net_available' => 'double',
        'total_quantity_on_hand' => 'double',
        'total_quantity_on_order' => 'double',
        'total_quantity_unavailable' => 'double',
        'total_net_available' => 'double',
        'customer_only_flag' => null,
        't_unavaildetail' => null,
        't_outfieldvalue' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c_error_message' => 'cErrorMessage',
        'cross_reference_product' => 'crossReferenceProduct',
        'cross_reference_type' => 'crossReferenceType',
        'return_unit_of_measure' => 'returnUnitOfMeasure',
        'customer_quantity_on_hand' => 'customerQuantityOnHand',
        'customer_quantity_on_order' => 'customerQuantityOnOrder',
        'customer_quantity_unavailable' => 'customerQuantityUnavailable',
        'customer_net_available' => 'customerNetAvailable',
        'distributor_quantity_on_hand' => 'distributorQuantityOnHand',
        'distributor_quantity_on_order' => 'distributorQuantityOnOrder',
        'distributor_quantity_unavailable' => 'distributorQuantityUnavailable',
        'distributor_net_available' => 'distributorNetAvailable',
        'total_quantity_on_hand' => 'totalQuantityOnHand',
        'total_quantity_on_order' => 'totalQuantityOnOrder',
        'total_quantity_unavailable' => 'totalQuantityUnavailable',
        'total_net_available' => 'totalNetAvailable',
        'customer_only_flag' => 'customerOnlyFlag',
        't_unavaildetail' => 'tUnavaildetail',
        't_outfieldvalue' => 'tOutfieldvalue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c_error_message' => 'setCErrorMessage',
        'cross_reference_product' => 'setCrossReferenceProduct',
        'cross_reference_type' => 'setCrossReferenceType',
        'return_unit_of_measure' => 'setReturnUnitOfMeasure',
        'customer_quantity_on_hand' => 'setCustomerQuantityOnHand',
        'customer_quantity_on_order' => 'setCustomerQuantityOnOrder',
        'customer_quantity_unavailable' => 'setCustomerQuantityUnavailable',
        'customer_net_available' => 'setCustomerNetAvailable',
        'distributor_quantity_on_hand' => 'setDistributorQuantityOnHand',
        'distributor_quantity_on_order' => 'setDistributorQuantityOnOrder',
        'distributor_quantity_unavailable' => 'setDistributorQuantityUnavailable',
        'distributor_net_available' => 'setDistributorNetAvailable',
        'total_quantity_on_hand' => 'setTotalQuantityOnHand',
        'total_quantity_on_order' => 'setTotalQuantityOnOrder',
        'total_quantity_unavailable' => 'setTotalQuantityUnavailable',
        'total_net_available' => 'setTotalNetAvailable',
        'customer_only_flag' => 'setCustomerOnlyFlag',
        't_unavaildetail' => 'setTUnavaildetail',
        't_outfieldvalue' => 'setTOutfieldvalue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c_error_message' => 'getCErrorMessage',
        'cross_reference_product' => 'getCrossReferenceProduct',
        'cross_reference_type' => 'getCrossReferenceType',
        'return_unit_of_measure' => 'getReturnUnitOfMeasure',
        'customer_quantity_on_hand' => 'getCustomerQuantityOnHand',
        'customer_quantity_on_order' => 'getCustomerQuantityOnOrder',
        'customer_quantity_unavailable' => 'getCustomerQuantityUnavailable',
        'customer_net_available' => 'getCustomerNetAvailable',
        'distributor_quantity_on_hand' => 'getDistributorQuantityOnHand',
        'distributor_quantity_on_order' => 'getDistributorQuantityOnOrder',
        'distributor_quantity_unavailable' => 'getDistributorQuantityUnavailable',
        'distributor_net_available' => 'getDistributorNetAvailable',
        'total_quantity_on_hand' => 'getTotalQuantityOnHand',
        'total_quantity_on_order' => 'getTotalQuantityOnOrder',
        'total_quantity_unavailable' => 'getTotalQuantityUnavailable',
        'total_net_available' => 'getTotalNetAvailable',
        'customer_only_flag' => 'getCustomerOnlyFlag',
        't_unavaildetail' => 'getTUnavaildetail',
        't_outfieldvalue' => 'getTOutfieldvalue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['c_error_message'] = isset($data['c_error_message']) ? $data['c_error_message'] : null;
        $this->container['cross_reference_product'] = isset($data['cross_reference_product']) ? $data['cross_reference_product'] : null;
        $this->container['cross_reference_type'] = isset($data['cross_reference_type']) ? $data['cross_reference_type'] : null;
        $this->container['return_unit_of_measure'] = isset($data['return_unit_of_measure']) ? $data['return_unit_of_measure'] : null;
        $this->container['customer_quantity_on_hand'] = isset($data['customer_quantity_on_hand']) ? $data['customer_quantity_on_hand'] : null;
        $this->container['customer_quantity_on_order'] = isset($data['customer_quantity_on_order']) ? $data['customer_quantity_on_order'] : null;
        $this->container['customer_quantity_unavailable'] = isset($data['customer_quantity_unavailable']) ? $data['customer_quantity_unavailable'] : null;
        $this->container['customer_net_available'] = isset($data['customer_net_available']) ? $data['customer_net_available'] : null;
        $this->container['distributor_quantity_on_hand'] = isset($data['distributor_quantity_on_hand']) ? $data['distributor_quantity_on_hand'] : null;
        $this->container['distributor_quantity_on_order'] = isset($data['distributor_quantity_on_order']) ? $data['distributor_quantity_on_order'] : null;
        $this->container['distributor_quantity_unavailable'] = isset($data['distributor_quantity_unavailable']) ? $data['distributor_quantity_unavailable'] : null;
        $this->container['distributor_net_available'] = isset($data['distributor_net_available']) ? $data['distributor_net_available'] : null;
        $this->container['total_quantity_on_hand'] = isset($data['total_quantity_on_hand']) ? $data['total_quantity_on_hand'] : null;
        $this->container['total_quantity_on_order'] = isset($data['total_quantity_on_order']) ? $data['total_quantity_on_order'] : null;
        $this->container['total_quantity_unavailable'] = isset($data['total_quantity_unavailable']) ? $data['total_quantity_unavailable'] : null;
        $this->container['total_net_available'] = isset($data['total_net_available']) ? $data['total_net_available'] : null;
        $this->container['customer_only_flag'] = isset($data['customer_only_flag']) ? $data['customer_only_flag'] : null;
        $this->container['t_unavaildetail'] = isset($data['t_unavaildetail']) ? $data['t_unavaildetail'] : null;
        $this->container['t_outfieldvalue'] = isset($data['t_outfieldvalue']) ? $data['t_outfieldvalue'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c_error_message
     *
     * @return string
     */
    public function getCErrorMessage()
    {
        return $this->container['c_error_message'];
    }

    /**
     * Sets c_error_message
     *
     * @param string $c_error_message c_error_message
     *
     * @return $this
     */
    public function setCErrorMessage($c_error_message)
    {
        $this->container['c_error_message'] = $c_error_message;

        return $this;
    }

    /**
     * Gets cross_reference_product
     *
     * @return string
     */
    public function getCrossReferenceProduct()
    {
        return $this->container['cross_reference_product'];
    }

    /**
     * Sets cross_reference_product
     *
     * @param string $cross_reference_product cross_reference_product
     *
     * @return $this
     */
    public function setCrossReferenceProduct($cross_reference_product)
    {
        $this->container['cross_reference_product'] = $cross_reference_product;

        return $this;
    }

    /**
     * Gets cross_reference_type
     *
     * @return string
     */
    public function getCrossReferenceType()
    {
        return $this->container['cross_reference_type'];
    }

    /**
     * Sets cross_reference_type
     *
     * @param string $cross_reference_type cross_reference_type
     *
     * @return $this
     */
    public function setCrossReferenceType($cross_reference_type)
    {
        $this->container['cross_reference_type'] = $cross_reference_type;

        return $this;
    }

    /**
     * Gets return_unit_of_measure
     *
     * @return string
     */
    public function getReturnUnitOfMeasure()
    {
        return $this->container['return_unit_of_measure'];
    }

    /**
     * Sets return_unit_of_measure
     *
     * @param string $return_unit_of_measure return_unit_of_measure
     *
     * @return $this
     */
    public function setReturnUnitOfMeasure($return_unit_of_measure)
    {
        $this->container['return_unit_of_measure'] = $return_unit_of_measure;

        return $this;
    }

    /**
     * Gets customer_quantity_on_hand
     *
     * @return double
     */
    public function getCustomerQuantityOnHand()
    {
        return $this->container['customer_quantity_on_hand'];
    }

    /**
     * Sets customer_quantity_on_hand
     *
     * @param double $customer_quantity_on_hand customer_quantity_on_hand
     *
     * @return $this
     */
    public function setCustomerQuantityOnHand($customer_quantity_on_hand)
    {
        $this->container['customer_quantity_on_hand'] = $customer_quantity_on_hand;

        return $this;
    }

    /**
     * Gets customer_quantity_on_order
     *
     * @return double
     */
    public function getCustomerQuantityOnOrder()
    {
        return $this->container['customer_quantity_on_order'];
    }

    /**
     * Sets customer_quantity_on_order
     *
     * @param double $customer_quantity_on_order customer_quantity_on_order
     *
     * @return $this
     */
    public function setCustomerQuantityOnOrder($customer_quantity_on_order)
    {
        $this->container['customer_quantity_on_order'] = $customer_quantity_on_order;

        return $this;
    }

    /**
     * Gets customer_quantity_unavailable
     *
     * @return double
     */
    public function getCustomerQuantityUnavailable()
    {
        return $this->container['customer_quantity_unavailable'];
    }

    /**
     * Sets customer_quantity_unavailable
     *
     * @param double $customer_quantity_unavailable customer_quantity_unavailable
     *
     * @return $this
     */
    public function setCustomerQuantityUnavailable($customer_quantity_unavailable)
    {
        $this->container['customer_quantity_unavailable'] = $customer_quantity_unavailable;

        return $this;
    }

    /**
     * Gets customer_net_available
     *
     * @return double
     */
    public function getCustomerNetAvailable()
    {
        return $this->container['customer_net_available'];
    }

    /**
     * Sets customer_net_available
     *
     * @param double $customer_net_available customer_net_available
     *
     * @return $this
     */
    public function setCustomerNetAvailable($customer_net_available)
    {
        $this->container['customer_net_available'] = $customer_net_available;

        return $this;
    }

    /**
     * Gets distributor_quantity_on_hand
     *
     * @return double
     */
    public function getDistributorQuantityOnHand()
    {
        return $this->container['distributor_quantity_on_hand'];
    }

    /**
     * Sets distributor_quantity_on_hand
     *
     * @param double $distributor_quantity_on_hand distributor_quantity_on_hand
     *
     * @return $this
     */
    public function setDistributorQuantityOnHand($distributor_quantity_on_hand)
    {
        $this->container['distributor_quantity_on_hand'] = $distributor_quantity_on_hand;

        return $this;
    }

    /**
     * Gets distributor_quantity_on_order
     *
     * @return double
     */
    public function getDistributorQuantityOnOrder()
    {
        return $this->container['distributor_quantity_on_order'];
    }

    /**
     * Sets distributor_quantity_on_order
     *
     * @param double $distributor_quantity_on_order distributor_quantity_on_order
     *
     * @return $this
     */
    public function setDistributorQuantityOnOrder($distributor_quantity_on_order)
    {
        $this->container['distributor_quantity_on_order'] = $distributor_quantity_on_order;

        return $this;
    }

    /**
     * Gets distributor_quantity_unavailable
     *
     * @return double
     */
    public function getDistributorQuantityUnavailable()
    {
        return $this->container['distributor_quantity_unavailable'];
    }

    /**
     * Sets distributor_quantity_unavailable
     *
     * @param double $distributor_quantity_unavailable distributor_quantity_unavailable
     *
     * @return $this
     */
    public function setDistributorQuantityUnavailable($distributor_quantity_unavailable)
    {
        $this->container['distributor_quantity_unavailable'] = $distributor_quantity_unavailable;

        return $this;
    }

    /**
     * Gets distributor_net_available
     *
     * @return double
     */
    public function getDistributorNetAvailable()
    {
        return $this->container['distributor_net_available'];
    }

    /**
     * Sets distributor_net_available
     *
     * @param double $distributor_net_available distributor_net_available
     *
     * @return $this
     */
    public function setDistributorNetAvailable($distributor_net_available)
    {
        $this->container['distributor_net_available'] = $distributor_net_available;

        return $this;
    }

    /**
     * Gets total_quantity_on_hand
     *
     * @return double
     */
    public function getTotalQuantityOnHand()
    {
        return $this->container['total_quantity_on_hand'];
    }

    /**
     * Sets total_quantity_on_hand
     *
     * @param double $total_quantity_on_hand total_quantity_on_hand
     *
     * @return $this
     */
    public function setTotalQuantityOnHand($total_quantity_on_hand)
    {
        $this->container['total_quantity_on_hand'] = $total_quantity_on_hand;

        return $this;
    }

    /**
     * Gets total_quantity_on_order
     *
     * @return double
     */
    public function getTotalQuantityOnOrder()
    {
        return $this->container['total_quantity_on_order'];
    }

    /**
     * Sets total_quantity_on_order
     *
     * @param double $total_quantity_on_order total_quantity_on_order
     *
     * @return $this
     */
    public function setTotalQuantityOnOrder($total_quantity_on_order)
    {
        $this->container['total_quantity_on_order'] = $total_quantity_on_order;

        return $this;
    }

    /**
     * Gets total_quantity_unavailable
     *
     * @return double
     */
    public function getTotalQuantityUnavailable()
    {
        return $this->container['total_quantity_unavailable'];
    }

    /**
     * Sets total_quantity_unavailable
     *
     * @param double $total_quantity_unavailable total_quantity_unavailable
     *
     * @return $this
     */
    public function setTotalQuantityUnavailable($total_quantity_unavailable)
    {
        $this->container['total_quantity_unavailable'] = $total_quantity_unavailable;

        return $this;
    }

    /**
     * Gets total_net_available
     *
     * @return double
     */
    public function getTotalNetAvailable()
    {
        return $this->container['total_net_available'];
    }

    /**
     * Sets total_net_available
     *
     * @param double $total_net_available total_net_available
     *
     * @return $this
     */
    public function setTotalNetAvailable($total_net_available)
    {
        $this->container['total_net_available'] = $total_net_available;

        return $this;
    }

    /**
     * Gets customer_only_flag
     *
     * @return bool
     */
    public function getCustomerOnlyFlag()
    {
        return $this->container['customer_only_flag'];
    }

    /**
     * Sets customer_only_flag
     *
     * @param bool $customer_only_flag customer_only_flag
     *
     * @return $this
     */
    public function setCustomerOnlyFlag($customer_only_flag)
    {
        $this->container['customer_only_flag'] = $customer_only_flag;

        return $this;
    }

    /**
     * Gets t_unavaildetail
     *
     * @return \Swagger\Client\Model\TUnavaildetailResp
     */
    public function getTUnavaildetail()
    {
        return $this->container['t_unavaildetail'];
    }

    /**
     * Sets t_unavaildetail
     *
     * @param \Swagger\Client\Model\TUnavaildetailResp $t_unavaildetail t_unavaildetail
     *
     * @return $this
     */
    public function setTUnavaildetail($t_unavaildetail)
    {
        $this->container['t_unavaildetail'] = $t_unavaildetail;

        return $this;
    }

    /**
     * Gets t_outfieldvalue
     *
     * @return \Swagger\Client\Model\TOutfieldvalueResp
     */
    public function getTOutfieldvalue()
    {
        return $this->container['t_outfieldvalue'];
    }

    /**
     * Sets t_outfieldvalue
     *
     * @param \Swagger\Client\Model\TOutfieldvalueResp $t_outfieldvalue t_outfieldvalue
     *
     * @return $this
     */
    public function setTOutfieldvalue($t_outfieldvalue)
    {
        $this->container['t_outfieldvalue'] = $t_outfieldvalue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


