<?php
/**
 * SxapiargetcustomerdatageneralrestResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SxapiargetcustomerdatageneralrestResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SxapiargetcustomerdatageneralrestResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapiargetcustomerdatageneralrest_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'c_error_message' => 'string',
        'bank_number' => 'int',
        'class_number' => 'int',
        'currency_type' => 'string',
        'statement_customer_number' => 'double',
        'customer_type' => 'string',
        'cycle_code' => 'string',
        'division_number' => 'int',
        'dunning_flag' => 'bool',
        'email' => 'string',
        'floor_plan_customer_flag' => 'bool',
        'geo_code' => 'int',
        'language_code' => 'string',
        'lookup_name' => 'string',
        'purchasing_agent' => 'string',
        'purchasing_agent_phone_no' => 'string',
        'service_charge_flag' => 'bool',
        'ship_label' => 'string',
        'statement_type' => 'string',
        'unearned_disc_flag' => 'bool',
        'terms_type' => 'string',
        'terms_type_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'c_error_message' => null,
        'bank_number' => 'int64',
        'class_number' => 'int64',
        'currency_type' => null,
        'statement_customer_number' => 'double',
        'customer_type' => null,
        'cycle_code' => null,
        'division_number' => 'int64',
        'dunning_flag' => null,
        'email' => null,
        'floor_plan_customer_flag' => null,
        'geo_code' => 'int64',
        'language_code' => null,
        'lookup_name' => null,
        'purchasing_agent' => null,
        'purchasing_agent_phone_no' => null,
        'service_charge_flag' => null,
        'ship_label' => null,
        'statement_type' => null,
        'unearned_disc_flag' => null,
        'terms_type' => null,
        'terms_type_description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c_error_message' => 'cErrorMessage',
        'bank_number' => 'bankNumber',
        'class_number' => 'classNumber',
        'currency_type' => 'currencyType',
        'statement_customer_number' => 'statementCustomerNumber',
        'customer_type' => 'customerType',
        'cycle_code' => 'cycleCode',
        'division_number' => 'divisionNumber',
        'dunning_flag' => 'dunningFlag',
        'email' => 'email',
        'floor_plan_customer_flag' => 'floorPlanCustomerFlag',
        'geo_code' => 'geoCode',
        'language_code' => 'languageCode',
        'lookup_name' => 'lookupName',
        'purchasing_agent' => 'purchasingAgent',
        'purchasing_agent_phone_no' => 'purchasingAgentPhoneNo',
        'service_charge_flag' => 'serviceChargeFlag',
        'ship_label' => 'shipLabel',
        'statement_type' => 'statementType',
        'unearned_disc_flag' => 'unearnedDiscFlag',
        'terms_type' => 'termsType',
        'terms_type_description' => 'termsTypeDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c_error_message' => 'setCErrorMessage',
        'bank_number' => 'setBankNumber',
        'class_number' => 'setClassNumber',
        'currency_type' => 'setCurrencyType',
        'statement_customer_number' => 'setStatementCustomerNumber',
        'customer_type' => 'setCustomerType',
        'cycle_code' => 'setCycleCode',
        'division_number' => 'setDivisionNumber',
        'dunning_flag' => 'setDunningFlag',
        'email' => 'setEmail',
        'floor_plan_customer_flag' => 'setFloorPlanCustomerFlag',
        'geo_code' => 'setGeoCode',
        'language_code' => 'setLanguageCode',
        'lookup_name' => 'setLookupName',
        'purchasing_agent' => 'setPurchasingAgent',
        'purchasing_agent_phone_no' => 'setPurchasingAgentPhoneNo',
        'service_charge_flag' => 'setServiceChargeFlag',
        'ship_label' => 'setShipLabel',
        'statement_type' => 'setStatementType',
        'unearned_disc_flag' => 'setUnearnedDiscFlag',
        'terms_type' => 'setTermsType',
        'terms_type_description' => 'setTermsTypeDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c_error_message' => 'getCErrorMessage',
        'bank_number' => 'getBankNumber',
        'class_number' => 'getClassNumber',
        'currency_type' => 'getCurrencyType',
        'statement_customer_number' => 'getStatementCustomerNumber',
        'customer_type' => 'getCustomerType',
        'cycle_code' => 'getCycleCode',
        'division_number' => 'getDivisionNumber',
        'dunning_flag' => 'getDunningFlag',
        'email' => 'getEmail',
        'floor_plan_customer_flag' => 'getFloorPlanCustomerFlag',
        'geo_code' => 'getGeoCode',
        'language_code' => 'getLanguageCode',
        'lookup_name' => 'getLookupName',
        'purchasing_agent' => 'getPurchasingAgent',
        'purchasing_agent_phone_no' => 'getPurchasingAgentPhoneNo',
        'service_charge_flag' => 'getServiceChargeFlag',
        'ship_label' => 'getShipLabel',
        'statement_type' => 'getStatementType',
        'unearned_disc_flag' => 'getUnearnedDiscFlag',
        'terms_type' => 'getTermsType',
        'terms_type_description' => 'getTermsTypeDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['c_error_message'] = isset($data['c_error_message']) ? $data['c_error_message'] : null;
        $this->container['bank_number'] = isset($data['bank_number']) ? $data['bank_number'] : null;
        $this->container['class_number'] = isset($data['class_number']) ? $data['class_number'] : null;
        $this->container['currency_type'] = isset($data['currency_type']) ? $data['currency_type'] : null;
        $this->container['statement_customer_number'] = isset($data['statement_customer_number']) ? $data['statement_customer_number'] : null;
        $this->container['customer_type'] = isset($data['customer_type']) ? $data['customer_type'] : null;
        $this->container['cycle_code'] = isset($data['cycle_code']) ? $data['cycle_code'] : null;
        $this->container['division_number'] = isset($data['division_number']) ? $data['division_number'] : null;
        $this->container['dunning_flag'] = isset($data['dunning_flag']) ? $data['dunning_flag'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['floor_plan_customer_flag'] = isset($data['floor_plan_customer_flag']) ? $data['floor_plan_customer_flag'] : null;
        $this->container['geo_code'] = isset($data['geo_code']) ? $data['geo_code'] : null;
        $this->container['language_code'] = isset($data['language_code']) ? $data['language_code'] : null;
        $this->container['lookup_name'] = isset($data['lookup_name']) ? $data['lookup_name'] : null;
        $this->container['purchasing_agent'] = isset($data['purchasing_agent']) ? $data['purchasing_agent'] : null;
        $this->container['purchasing_agent_phone_no'] = isset($data['purchasing_agent_phone_no']) ? $data['purchasing_agent_phone_no'] : null;
        $this->container['service_charge_flag'] = isset($data['service_charge_flag']) ? $data['service_charge_flag'] : null;
        $this->container['ship_label'] = isset($data['ship_label']) ? $data['ship_label'] : null;
        $this->container['statement_type'] = isset($data['statement_type']) ? $data['statement_type'] : null;
        $this->container['unearned_disc_flag'] = isset($data['unearned_disc_flag']) ? $data['unearned_disc_flag'] : null;
        $this->container['terms_type'] = isset($data['terms_type']) ? $data['terms_type'] : null;
        $this->container['terms_type_description'] = isset($data['terms_type_description']) ? $data['terms_type_description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c_error_message
     *
     * @return string
     */
    public function getCErrorMessage()
    {
        return $this->container['c_error_message'];
    }

    /**
     * Sets c_error_message
     *
     * @param string $c_error_message c_error_message
     *
     * @return $this
     */
    public function setCErrorMessage($c_error_message)
    {
        $this->container['c_error_message'] = $c_error_message;

        return $this;
    }

    /**
     * Gets bank_number
     *
     * @return int
     */
    public function getBankNumber()
    {
        return $this->container['bank_number'];
    }

    /**
     * Sets bank_number
     *
     * @param int $bank_number bank_number
     *
     * @return $this
     */
    public function setBankNumber($bank_number)
    {
        $this->container['bank_number'] = $bank_number;

        return $this;
    }

    /**
     * Gets class_number
     *
     * @return int
     */
    public function getClassNumber()
    {
        return $this->container['class_number'];
    }

    /**
     * Sets class_number
     *
     * @param int $class_number class_number
     *
     * @return $this
     */
    public function setClassNumber($class_number)
    {
        $this->container['class_number'] = $class_number;

        return $this;
    }

    /**
     * Gets currency_type
     *
     * @return string
     */
    public function getCurrencyType()
    {
        return $this->container['currency_type'];
    }

    /**
     * Sets currency_type
     *
     * @param string $currency_type currency_type
     *
     * @return $this
     */
    public function setCurrencyType($currency_type)
    {
        $this->container['currency_type'] = $currency_type;

        return $this;
    }

    /**
     * Gets statement_customer_number
     *
     * @return double
     */
    public function getStatementCustomerNumber()
    {
        return $this->container['statement_customer_number'];
    }

    /**
     * Sets statement_customer_number
     *
     * @param double $statement_customer_number statement_customer_number
     *
     * @return $this
     */
    public function setStatementCustomerNumber($statement_customer_number)
    {
        $this->container['statement_customer_number'] = $statement_customer_number;

        return $this;
    }

    /**
     * Gets customer_type
     *
     * @return string
     */
    public function getCustomerType()
    {
        return $this->container['customer_type'];
    }

    /**
     * Sets customer_type
     *
     * @param string $customer_type customer_type
     *
     * @return $this
     */
    public function setCustomerType($customer_type)
    {
        $this->container['customer_type'] = $customer_type;

        return $this;
    }

    /**
     * Gets cycle_code
     *
     * @return string
     */
    public function getCycleCode()
    {
        return $this->container['cycle_code'];
    }

    /**
     * Sets cycle_code
     *
     * @param string $cycle_code cycle_code
     *
     * @return $this
     */
    public function setCycleCode($cycle_code)
    {
        $this->container['cycle_code'] = $cycle_code;

        return $this;
    }

    /**
     * Gets division_number
     *
     * @return int
     */
    public function getDivisionNumber()
    {
        return $this->container['division_number'];
    }

    /**
     * Sets division_number
     *
     * @param int $division_number division_number
     *
     * @return $this
     */
    public function setDivisionNumber($division_number)
    {
        $this->container['division_number'] = $division_number;

        return $this;
    }

    /**
     * Gets dunning_flag
     *
     * @return bool
     */
    public function getDunningFlag()
    {
        return $this->container['dunning_flag'];
    }

    /**
     * Sets dunning_flag
     *
     * @param bool $dunning_flag dunning_flag
     *
     * @return $this
     */
    public function setDunningFlag($dunning_flag)
    {
        $this->container['dunning_flag'] = $dunning_flag;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets floor_plan_customer_flag
     *
     * @return bool
     */
    public function getFloorPlanCustomerFlag()
    {
        return $this->container['floor_plan_customer_flag'];
    }

    /**
     * Sets floor_plan_customer_flag
     *
     * @param bool $floor_plan_customer_flag floor_plan_customer_flag
     *
     * @return $this
     */
    public function setFloorPlanCustomerFlag($floor_plan_customer_flag)
    {
        $this->container['floor_plan_customer_flag'] = $floor_plan_customer_flag;

        return $this;
    }

    /**
     * Gets geo_code
     *
     * @return int
     */
    public function getGeoCode()
    {
        return $this->container['geo_code'];
    }

    /**
     * Sets geo_code
     *
     * @param int $geo_code geo_code
     *
     * @return $this
     */
    public function setGeoCode($geo_code)
    {
        $this->container['geo_code'] = $geo_code;

        return $this;
    }

    /**
     * Gets language_code
     *
     * @return string
     */
    public function getLanguageCode()
    {
        return $this->container['language_code'];
    }

    /**
     * Sets language_code
     *
     * @param string $language_code language_code
     *
     * @return $this
     */
    public function setLanguageCode($language_code)
    {
        $this->container['language_code'] = $language_code;

        return $this;
    }

    /**
     * Gets lookup_name
     *
     * @return string
     */
    public function getLookupName()
    {
        return $this->container['lookup_name'];
    }

    /**
     * Sets lookup_name
     *
     * @param string $lookup_name lookup_name
     *
     * @return $this
     */
    public function setLookupName($lookup_name)
    {
        $this->container['lookup_name'] = $lookup_name;

        return $this;
    }

    /**
     * Gets purchasing_agent
     *
     * @return string
     */
    public function getPurchasingAgent()
    {
        return $this->container['purchasing_agent'];
    }

    /**
     * Sets purchasing_agent
     *
     * @param string $purchasing_agent purchasing_agent
     *
     * @return $this
     */
    public function setPurchasingAgent($purchasing_agent)
    {
        $this->container['purchasing_agent'] = $purchasing_agent;

        return $this;
    }

    /**
     * Gets purchasing_agent_phone_no
     *
     * @return string
     */
    public function getPurchasingAgentPhoneNo()
    {
        return $this->container['purchasing_agent_phone_no'];
    }

    /**
     * Sets purchasing_agent_phone_no
     *
     * @param string $purchasing_agent_phone_no purchasing_agent_phone_no
     *
     * @return $this
     */
    public function setPurchasingAgentPhoneNo($purchasing_agent_phone_no)
    {
        $this->container['purchasing_agent_phone_no'] = $purchasing_agent_phone_no;

        return $this;
    }

    /**
     * Gets service_charge_flag
     *
     * @return bool
     */
    public function getServiceChargeFlag()
    {
        return $this->container['service_charge_flag'];
    }

    /**
     * Sets service_charge_flag
     *
     * @param bool $service_charge_flag service_charge_flag
     *
     * @return $this
     */
    public function setServiceChargeFlag($service_charge_flag)
    {
        $this->container['service_charge_flag'] = $service_charge_flag;

        return $this;
    }

    /**
     * Gets ship_label
     *
     * @return string
     */
    public function getShipLabel()
    {
        return $this->container['ship_label'];
    }

    /**
     * Sets ship_label
     *
     * @param string $ship_label ship_label
     *
     * @return $this
     */
    public function setShipLabel($ship_label)
    {
        $this->container['ship_label'] = $ship_label;

        return $this;
    }

    /**
     * Gets statement_type
     *
     * @return string
     */
    public function getStatementType()
    {
        return $this->container['statement_type'];
    }

    /**
     * Sets statement_type
     *
     * @param string $statement_type statement_type
     *
     * @return $this
     */
    public function setStatementType($statement_type)
    {
        $this->container['statement_type'] = $statement_type;

        return $this;
    }

    /**
     * Gets unearned_disc_flag
     *
     * @return bool
     */
    public function getUnearnedDiscFlag()
    {
        return $this->container['unearned_disc_flag'];
    }

    /**
     * Sets unearned_disc_flag
     *
     * @param bool $unearned_disc_flag unearned_disc_flag
     *
     * @return $this
     */
    public function setUnearnedDiscFlag($unearned_disc_flag)
    {
        $this->container['unearned_disc_flag'] = $unearned_disc_flag;

        return $this;
    }

    /**
     * Gets terms_type
     *
     * @return string
     */
    public function getTermsType()
    {
        return $this->container['terms_type'];
    }

    /**
     * Sets terms_type
     *
     * @param string $terms_type terms_type
     *
     * @return $this
     */
    public function setTermsType($terms_type)
    {
        $this->container['terms_type'] = $terms_type;

        return $this;
    }

    /**
     * Gets terms_type_description
     *
     * @return string
     */
    public function getTermsTypeDescription()
    {
        return $this->container['terms_type_description'];
    }

    /**
     * Sets terms_type_description
     *
     * @param string $terms_type_description terms_type_description
     *
     * @return $this
     */
    public function setTermsTypeDescription($terms_type_description)
    {
        $this->container['terms_type_description'] = $terms_type_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


