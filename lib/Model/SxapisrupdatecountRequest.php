<?php
/**
 * SxapisrupdatecountRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SxapisrupdatecountRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SxapisrupdatecountRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapisrupdatecount_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company_number' => 'int',
        'operator_init' => 'string',
        'operator_password' => 'string',
        'run_number' => 'int',
        'warehouse' => 'string',
        'employee_id' => 'string',
        'employee_name' => 'string',
        'department_id' => 'string',
        'project' => 'string',
        'work_order' => 'string',
        'equipment' => 'string',
        'charge_number' => 'string',
        'burn_off' => 'string',
        'pick_ticket_print_flag' => 'string',
        't_infieldvalue' => '\Swagger\Client\Model\TInfieldvalueReq'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'company_number' => 'int64',
        'operator_init' => null,
        'operator_password' => null,
        'run_number' => 'int64',
        'warehouse' => null,
        'employee_id' => null,
        'employee_name' => null,
        'department_id' => null,
        'project' => null,
        'work_order' => null,
        'equipment' => null,
        'charge_number' => null,
        'burn_off' => null,
        'pick_ticket_print_flag' => null,
        't_infieldvalue' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_number' => 'companyNumber',
        'operator_init' => 'operatorInit',
        'operator_password' => 'operatorPassword',
        'run_number' => 'runNumber',
        'warehouse' => 'warehouse',
        'employee_id' => 'employeeID',
        'employee_name' => 'employeeName',
        'department_id' => 'departmentID',
        'project' => 'project',
        'work_order' => 'workOrder',
        'equipment' => 'equipment',
        'charge_number' => 'chargeNumber',
        'burn_off' => 'burnOff',
        'pick_ticket_print_flag' => 'pickTicketPrintFlag',
        't_infieldvalue' => 'tInfieldvalue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_number' => 'setCompanyNumber',
        'operator_init' => 'setOperatorInit',
        'operator_password' => 'setOperatorPassword',
        'run_number' => 'setRunNumber',
        'warehouse' => 'setWarehouse',
        'employee_id' => 'setEmployeeId',
        'employee_name' => 'setEmployeeName',
        'department_id' => 'setDepartmentId',
        'project' => 'setProject',
        'work_order' => 'setWorkOrder',
        'equipment' => 'setEquipment',
        'charge_number' => 'setChargeNumber',
        'burn_off' => 'setBurnOff',
        'pick_ticket_print_flag' => 'setPickTicketPrintFlag',
        't_infieldvalue' => 'setTInfieldvalue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_number' => 'getCompanyNumber',
        'operator_init' => 'getOperatorInit',
        'operator_password' => 'getOperatorPassword',
        'run_number' => 'getRunNumber',
        'warehouse' => 'getWarehouse',
        'employee_id' => 'getEmployeeId',
        'employee_name' => 'getEmployeeName',
        'department_id' => 'getDepartmentId',
        'project' => 'getProject',
        'work_order' => 'getWorkOrder',
        'equipment' => 'getEquipment',
        'charge_number' => 'getChargeNumber',
        'burn_off' => 'getBurnOff',
        'pick_ticket_print_flag' => 'getPickTicketPrintFlag',
        't_infieldvalue' => 'getTInfieldvalue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_number'] = isset($data['company_number']) ? $data['company_number'] : null;
        $this->container['operator_init'] = isset($data['operator_init']) ? $data['operator_init'] : null;
        $this->container['operator_password'] = isset($data['operator_password']) ? $data['operator_password'] : null;
        $this->container['run_number'] = isset($data['run_number']) ? $data['run_number'] : null;
        $this->container['warehouse'] = isset($data['warehouse']) ? $data['warehouse'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['employee_name'] = isset($data['employee_name']) ? $data['employee_name'] : null;
        $this->container['department_id'] = isset($data['department_id']) ? $data['department_id'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['work_order'] = isset($data['work_order']) ? $data['work_order'] : null;
        $this->container['equipment'] = isset($data['equipment']) ? $data['equipment'] : null;
        $this->container['charge_number'] = isset($data['charge_number']) ? $data['charge_number'] : null;
        $this->container['burn_off'] = isset($data['burn_off']) ? $data['burn_off'] : null;
        $this->container['pick_ticket_print_flag'] = isset($data['pick_ticket_print_flag']) ? $data['pick_ticket_print_flag'] : null;
        $this->container['t_infieldvalue'] = isset($data['t_infieldvalue']) ? $data['t_infieldvalue'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_number
     *
     * @return int
     */
    public function getCompanyNumber()
    {
        return $this->container['company_number'];
    }

    /**
     * Sets company_number
     *
     * @param int $company_number company_number
     *
     * @return $this
     */
    public function setCompanyNumber($company_number)
    {
        $this->container['company_number'] = $company_number;

        return $this;
    }

    /**
     * Gets operator_init
     *
     * @return string
     */
    public function getOperatorInit()
    {
        return $this->container['operator_init'];
    }

    /**
     * Sets operator_init
     *
     * @param string $operator_init operator_init
     *
     * @return $this
     */
    public function setOperatorInit($operator_init)
    {
        $this->container['operator_init'] = $operator_init;

        return $this;
    }

    /**
     * Gets operator_password
     *
     * @return string
     */
    public function getOperatorPassword()
    {
        return $this->container['operator_password'];
    }

    /**
     * Sets operator_password
     *
     * @param string $operator_password operator_password
     *
     * @return $this
     */
    public function setOperatorPassword($operator_password)
    {
        $this->container['operator_password'] = $operator_password;

        return $this;
    }

    /**
     * Gets run_number
     *
     * @return int
     */
    public function getRunNumber()
    {
        return $this->container['run_number'];
    }

    /**
     * Sets run_number
     *
     * @param int $run_number run_number
     *
     * @return $this
     */
    public function setRunNumber($run_number)
    {
        $this->container['run_number'] = $run_number;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return string
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param string $warehouse warehouse
     *
     * @return $this
     */
    public function setWarehouse($warehouse)
    {
        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return string
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string $employee_id employee_id
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets employee_name
     *
     * @return string
     */
    public function getEmployeeName()
    {
        return $this->container['employee_name'];
    }

    /**
     * Sets employee_name
     *
     * @param string $employee_name employee_name
     *
     * @return $this
     */
    public function setEmployeeName($employee_name)
    {
        $this->container['employee_name'] = $employee_name;

        return $this;
    }

    /**
     * Gets department_id
     *
     * @return string
     */
    public function getDepartmentId()
    {
        return $this->container['department_id'];
    }

    /**
     * Sets department_id
     *
     * @param string $department_id department_id
     *
     * @return $this
     */
    public function setDepartmentId($department_id)
    {
        $this->container['department_id'] = $department_id;

        return $this;
    }

    /**
     * Gets project
     *
     * @return string
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param string $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets work_order
     *
     * @return string
     */
    public function getWorkOrder()
    {
        return $this->container['work_order'];
    }

    /**
     * Sets work_order
     *
     * @param string $work_order work_order
     *
     * @return $this
     */
    public function setWorkOrder($work_order)
    {
        $this->container['work_order'] = $work_order;

        return $this;
    }

    /**
     * Gets equipment
     *
     * @return string
     */
    public function getEquipment()
    {
        return $this->container['equipment'];
    }

    /**
     * Sets equipment
     *
     * @param string $equipment equipment
     *
     * @return $this
     */
    public function setEquipment($equipment)
    {
        $this->container['equipment'] = $equipment;

        return $this;
    }

    /**
     * Gets charge_number
     *
     * @return string
     */
    public function getChargeNumber()
    {
        return $this->container['charge_number'];
    }

    /**
     * Sets charge_number
     *
     * @param string $charge_number charge_number
     *
     * @return $this
     */
    public function setChargeNumber($charge_number)
    {
        $this->container['charge_number'] = $charge_number;

        return $this;
    }

    /**
     * Gets burn_off
     *
     * @return string
     */
    public function getBurnOff()
    {
        return $this->container['burn_off'];
    }

    /**
     * Sets burn_off
     *
     * @param string $burn_off burn_off
     *
     * @return $this
     */
    public function setBurnOff($burn_off)
    {
        $this->container['burn_off'] = $burn_off;

        return $this;
    }

    /**
     * Gets pick_ticket_print_flag
     *
     * @return string
     */
    public function getPickTicketPrintFlag()
    {
        return $this->container['pick_ticket_print_flag'];
    }

    /**
     * Sets pick_ticket_print_flag
     *
     * @param string $pick_ticket_print_flag pick_ticket_print_flag
     *
     * @return $this
     */
    public function setPickTicketPrintFlag($pick_ticket_print_flag)
    {
        $this->container['pick_ticket_print_flag'] = $pick_ticket_print_flag;

        return $this;
    }

    /**
     * Gets t_infieldvalue
     *
     * @return \Swagger\Client\Model\TInfieldvalueReq
     */
    public function getTInfieldvalue()
    {
        return $this->container['t_infieldvalue'];
    }

    /**
     * Sets t_infieldvalue
     *
     * @param \Swagger\Client\Model\TInfieldvalueReq $t_infieldvalue t_infieldvalue
     *
     * @return $this
     */
    public function setTInfieldvalue($t_infieldvalue)
    {
        $this->container['t_infieldvalue'] = $t_infieldvalue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


