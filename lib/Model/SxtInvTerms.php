<?php
/**
 * SxtInvTerms
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SxtInvTerms Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SxtInvTerms implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxt_inv_terms';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'editpcd' => 'string',
        'edidtcd' => 'string',
        'termspct' => 'string',
        'discdt' => 'string',
        'discdays' => 'string',
        'duedt' => 'string',
        'duedays' => 'string',
        'descrip' => 'string',
        'discproxday' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'editpcd' => null,
        'edidtcd' => null,
        'termspct' => null,
        'discdt' => null,
        'discdays' => null,
        'duedt' => null,
        'duedays' => null,
        'descrip' => null,
        'discproxday' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'editpcd' => 'editpcd',
        'edidtcd' => 'edidtcd',
        'termspct' => 'termspct',
        'discdt' => 'discdt',
        'discdays' => 'discdays',
        'duedt' => 'duedt',
        'duedays' => 'duedays',
        'descrip' => 'descrip',
        'discproxday' => 'discproxday'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'editpcd' => 'setEditpcd',
        'edidtcd' => 'setEdidtcd',
        'termspct' => 'setTermspct',
        'discdt' => 'setDiscdt',
        'discdays' => 'setDiscdays',
        'duedt' => 'setDuedt',
        'duedays' => 'setDuedays',
        'descrip' => 'setDescrip',
        'discproxday' => 'setDiscproxday'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'editpcd' => 'getEditpcd',
        'edidtcd' => 'getEdidtcd',
        'termspct' => 'getTermspct',
        'discdt' => 'getDiscdt',
        'discdays' => 'getDiscdays',
        'duedt' => 'getDuedt',
        'duedays' => 'getDuedays',
        'descrip' => 'getDescrip',
        'discproxday' => 'getDiscproxday'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['editpcd'] = isset($data['editpcd']) ? $data['editpcd'] : null;
        $this->container['edidtcd'] = isset($data['edidtcd']) ? $data['edidtcd'] : null;
        $this->container['termspct'] = isset($data['termspct']) ? $data['termspct'] : null;
        $this->container['discdt'] = isset($data['discdt']) ? $data['discdt'] : null;
        $this->container['discdays'] = isset($data['discdays']) ? $data['discdays'] : null;
        $this->container['duedt'] = isset($data['duedt']) ? $data['duedt'] : null;
        $this->container['duedays'] = isset($data['duedays']) ? $data['duedays'] : null;
        $this->container['descrip'] = isset($data['descrip']) ? $data['descrip'] : null;
        $this->container['discproxday'] = isset($data['discproxday']) ? $data['discproxday'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets editpcd
     *
     * @return string
     */
    public function getEditpcd()
    {
        return $this->container['editpcd'];
    }

    /**
     * Sets editpcd
     *
     * @param string $editpcd editpcd
     *
     * @return $this
     */
    public function setEditpcd($editpcd)
    {
        $this->container['editpcd'] = $editpcd;

        return $this;
    }

    /**
     * Gets edidtcd
     *
     * @return string
     */
    public function getEdidtcd()
    {
        return $this->container['edidtcd'];
    }

    /**
     * Sets edidtcd
     *
     * @param string $edidtcd edidtcd
     *
     * @return $this
     */
    public function setEdidtcd($edidtcd)
    {
        $this->container['edidtcd'] = $edidtcd;

        return $this;
    }

    /**
     * Gets termspct
     *
     * @return string
     */
    public function getTermspct()
    {
        return $this->container['termspct'];
    }

    /**
     * Sets termspct
     *
     * @param string $termspct termspct
     *
     * @return $this
     */
    public function setTermspct($termspct)
    {
        $this->container['termspct'] = $termspct;

        return $this;
    }

    /**
     * Gets discdt
     *
     * @return string
     */
    public function getDiscdt()
    {
        return $this->container['discdt'];
    }

    /**
     * Sets discdt
     *
     * @param string $discdt discdt
     *
     * @return $this
     */
    public function setDiscdt($discdt)
    {
        $this->container['discdt'] = $discdt;

        return $this;
    }

    /**
     * Gets discdays
     *
     * @return string
     */
    public function getDiscdays()
    {
        return $this->container['discdays'];
    }

    /**
     * Sets discdays
     *
     * @param string $discdays discdays
     *
     * @return $this
     */
    public function setDiscdays($discdays)
    {
        $this->container['discdays'] = $discdays;

        return $this;
    }

    /**
     * Gets duedt
     *
     * @return string
     */
    public function getDuedt()
    {
        return $this->container['duedt'];
    }

    /**
     * Sets duedt
     *
     * @param string $duedt duedt
     *
     * @return $this
     */
    public function setDuedt($duedt)
    {
        $this->container['duedt'] = $duedt;

        return $this;
    }

    /**
     * Gets duedays
     *
     * @return string
     */
    public function getDuedays()
    {
        return $this->container['duedays'];
    }

    /**
     * Sets duedays
     *
     * @param string $duedays duedays
     *
     * @return $this
     */
    public function setDuedays($duedays)
    {
        $this->container['duedays'] = $duedays;

        return $this;
    }

    /**
     * Gets descrip
     *
     * @return string
     */
    public function getDescrip()
    {
        return $this->container['descrip'];
    }

    /**
     * Sets descrip
     *
     * @param string $descrip descrip
     *
     * @return $this
     */
    public function setDescrip($descrip)
    {
        $this->container['descrip'] = $descrip;

        return $this;
    }

    /**
     * Gets discproxday
     *
     * @return string
     */
    public function getDiscproxday()
    {
        return $this->container['discproxday'];
    }

    /**
     * Sets discproxday
     *
     * @param string $discproxday discproxday
     *
     * @return $this
     */
    public function setDiscproxday($discproxday)
    {
        $this->container['discproxday'] = $discproxday;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


