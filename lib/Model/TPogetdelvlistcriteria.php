<?php
/**
 * TPogetdelvlistcriteria
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TPogetdelvlistcriteria Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TPogetdelvlistcriteria implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-pogetdelvlistcriteria';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'includewhselist' => 'string',
        'excludewhselist' => 'string',
        'includeshipvialist' => 'string',
        'excludeshipvialist' => 'string',
        'includestagelist' => 'string',
        'excludestagelist' => 'string',
        'includetranstypelist' => 'string',
        'excludetranstypelist' => 'string',
        'recordlimit' => 'int',
        'transdt' => '\DateTime',
        'transtm' => 'string',
        'userfield' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'includewhselist' => null,
        'excludewhselist' => null,
        'includeshipvialist' => null,
        'excludeshipvialist' => null,
        'includestagelist' => null,
        'excludestagelist' => null,
        'includetranstypelist' => null,
        'excludetranstypelist' => null,
        'recordlimit' => 'int64',
        'transdt' => 'date',
        'transtm' => null,
        'userfield' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'includewhselist' => 'includewhselist',
        'excludewhselist' => 'excludewhselist',
        'includeshipvialist' => 'includeshipvialist',
        'excludeshipvialist' => 'excludeshipvialist',
        'includestagelist' => 'includestagelist',
        'excludestagelist' => 'excludestagelist',
        'includetranstypelist' => 'includetranstypelist',
        'excludetranstypelist' => 'excludetranstypelist',
        'recordlimit' => 'recordlimit',
        'transdt' => 'transdt',
        'transtm' => 'transtm',
        'userfield' => 'userfield'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'includewhselist' => 'setIncludewhselist',
        'excludewhselist' => 'setExcludewhselist',
        'includeshipvialist' => 'setIncludeshipvialist',
        'excludeshipvialist' => 'setExcludeshipvialist',
        'includestagelist' => 'setIncludestagelist',
        'excludestagelist' => 'setExcludestagelist',
        'includetranstypelist' => 'setIncludetranstypelist',
        'excludetranstypelist' => 'setExcludetranstypelist',
        'recordlimit' => 'setRecordlimit',
        'transdt' => 'setTransdt',
        'transtm' => 'setTranstm',
        'userfield' => 'setUserfield'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'includewhselist' => 'getIncludewhselist',
        'excludewhselist' => 'getExcludewhselist',
        'includeshipvialist' => 'getIncludeshipvialist',
        'excludeshipvialist' => 'getExcludeshipvialist',
        'includestagelist' => 'getIncludestagelist',
        'excludestagelist' => 'getExcludestagelist',
        'includetranstypelist' => 'getIncludetranstypelist',
        'excludetranstypelist' => 'getExcludetranstypelist',
        'recordlimit' => 'getRecordlimit',
        'transdt' => 'getTransdt',
        'transtm' => 'getTranstm',
        'userfield' => 'getUserfield'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['includewhselist'] = isset($data['includewhselist']) ? $data['includewhselist'] : null;
        $this->container['excludewhselist'] = isset($data['excludewhselist']) ? $data['excludewhselist'] : null;
        $this->container['includeshipvialist'] = isset($data['includeshipvialist']) ? $data['includeshipvialist'] : null;
        $this->container['excludeshipvialist'] = isset($data['excludeshipvialist']) ? $data['excludeshipvialist'] : null;
        $this->container['includestagelist'] = isset($data['includestagelist']) ? $data['includestagelist'] : null;
        $this->container['excludestagelist'] = isset($data['excludestagelist']) ? $data['excludestagelist'] : null;
        $this->container['includetranstypelist'] = isset($data['includetranstypelist']) ? $data['includetranstypelist'] : null;
        $this->container['excludetranstypelist'] = isset($data['excludetranstypelist']) ? $data['excludetranstypelist'] : null;
        $this->container['recordlimit'] = isset($data['recordlimit']) ? $data['recordlimit'] : null;
        $this->container['transdt'] = isset($data['transdt']) ? $data['transdt'] : null;
        $this->container['transtm'] = isset($data['transtm']) ? $data['transtm'] : null;
        $this->container['userfield'] = isset($data['userfield']) ? $data['userfield'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets includewhselist
     *
     * @return string
     */
    public function getIncludewhselist()
    {
        return $this->container['includewhselist'];
    }

    /**
     * Sets includewhselist
     *
     * @param string $includewhselist includewhselist
     *
     * @return $this
     */
    public function setIncludewhselist($includewhselist)
    {
        $this->container['includewhselist'] = $includewhselist;

        return $this;
    }

    /**
     * Gets excludewhselist
     *
     * @return string
     */
    public function getExcludewhselist()
    {
        return $this->container['excludewhselist'];
    }

    /**
     * Sets excludewhselist
     *
     * @param string $excludewhselist excludewhselist
     *
     * @return $this
     */
    public function setExcludewhselist($excludewhselist)
    {
        $this->container['excludewhselist'] = $excludewhselist;

        return $this;
    }

    /**
     * Gets includeshipvialist
     *
     * @return string
     */
    public function getIncludeshipvialist()
    {
        return $this->container['includeshipvialist'];
    }

    /**
     * Sets includeshipvialist
     *
     * @param string $includeshipvialist includeshipvialist
     *
     * @return $this
     */
    public function setIncludeshipvialist($includeshipvialist)
    {
        $this->container['includeshipvialist'] = $includeshipvialist;

        return $this;
    }

    /**
     * Gets excludeshipvialist
     *
     * @return string
     */
    public function getExcludeshipvialist()
    {
        return $this->container['excludeshipvialist'];
    }

    /**
     * Sets excludeshipvialist
     *
     * @param string $excludeshipvialist excludeshipvialist
     *
     * @return $this
     */
    public function setExcludeshipvialist($excludeshipvialist)
    {
        $this->container['excludeshipvialist'] = $excludeshipvialist;

        return $this;
    }

    /**
     * Gets includestagelist
     *
     * @return string
     */
    public function getIncludestagelist()
    {
        return $this->container['includestagelist'];
    }

    /**
     * Sets includestagelist
     *
     * @param string $includestagelist includestagelist
     *
     * @return $this
     */
    public function setIncludestagelist($includestagelist)
    {
        $this->container['includestagelist'] = $includestagelist;

        return $this;
    }

    /**
     * Gets excludestagelist
     *
     * @return string
     */
    public function getExcludestagelist()
    {
        return $this->container['excludestagelist'];
    }

    /**
     * Sets excludestagelist
     *
     * @param string $excludestagelist excludestagelist
     *
     * @return $this
     */
    public function setExcludestagelist($excludestagelist)
    {
        $this->container['excludestagelist'] = $excludestagelist;

        return $this;
    }

    /**
     * Gets includetranstypelist
     *
     * @return string
     */
    public function getIncludetranstypelist()
    {
        return $this->container['includetranstypelist'];
    }

    /**
     * Sets includetranstypelist
     *
     * @param string $includetranstypelist includetranstypelist
     *
     * @return $this
     */
    public function setIncludetranstypelist($includetranstypelist)
    {
        $this->container['includetranstypelist'] = $includetranstypelist;

        return $this;
    }

    /**
     * Gets excludetranstypelist
     *
     * @return string
     */
    public function getExcludetranstypelist()
    {
        return $this->container['excludetranstypelist'];
    }

    /**
     * Sets excludetranstypelist
     *
     * @param string $excludetranstypelist excludetranstypelist
     *
     * @return $this
     */
    public function setExcludetranstypelist($excludetranstypelist)
    {
        $this->container['excludetranstypelist'] = $excludetranstypelist;

        return $this;
    }

    /**
     * Gets recordlimit
     *
     * @return int
     */
    public function getRecordlimit()
    {
        return $this->container['recordlimit'];
    }

    /**
     * Sets recordlimit
     *
     * @param int $recordlimit recordlimit
     *
     * @return $this
     */
    public function setRecordlimit($recordlimit)
    {
        $this->container['recordlimit'] = $recordlimit;

        return $this;
    }

    /**
     * Gets transdt
     *
     * @return \DateTime
     */
    public function getTransdt()
    {
        return $this->container['transdt'];
    }

    /**
     * Sets transdt
     *
     * @param \DateTime $transdt transdt
     *
     * @return $this
     */
    public function setTransdt($transdt)
    {
        $this->container['transdt'] = $transdt;

        return $this;
    }

    /**
     * Gets transtm
     *
     * @return string
     */
    public function getTranstm()
    {
        return $this->container['transtm'];
    }

    /**
     * Sets transtm
     *
     * @param string $transtm transtm
     *
     * @return $this
     */
    public function setTranstm($transtm)
    {
        $this->container['transtm'] = $transtm;

        return $this;
    }

    /**
     * Gets userfield
     *
     * @return string
     */
    public function getUserfield()
    {
        return $this->container['userfield'];
    }

    /**
     * Sets userfield
     *
     * @param string $userfield userfield
     *
     * @return $this
     */
    public function setUserfield($userfield)
    {
        $this->container['userfield'] = $userfield;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


