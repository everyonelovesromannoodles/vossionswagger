<?php
/**
 * SxapioeordercopyconvertRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SxapioeordercopyconvertRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SxapioeordercopyconvertRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapioeordercopyconvert_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company_number' => 'int',
        'operator_init' => 'string',
        'operator_password' => 'string',
        'order_number' => 'int',
        'order_suffix' => 'int',
        'transaction_type' => 'string',
        'reason_unavailable_type' => 'string',
        'customer_number' => 'double',
        'ship_to' => 'string',
        'warehouse' => 'string',
        'floor_plan_customer_number' => 'double',
        'customer_purchase_order_number' => 'string',
        'sales_rep_outside' => 'string',
        'sales_rep_inside' => 'string',
        'order_disposition' => 'string',
        'save_original_order' => 'bool',
        'reprice_order' => 'bool',
        'freeze_prices' => 'bool',
        'recalculate_cost' => 'bool',
        'reset_addons' => 'bool',
        'copy_comments' => 'bool',
        'copy_notes' => 'bool',
        'copy_edi_data' => 'bool',
        'copy_internal_external_subtotals' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'company_number' => 'int64',
        'operator_init' => null,
        'operator_password' => null,
        'order_number' => 'int64',
        'order_suffix' => 'int64',
        'transaction_type' => null,
        'reason_unavailable_type' => null,
        'customer_number' => 'double',
        'ship_to' => null,
        'warehouse' => null,
        'floor_plan_customer_number' => 'double',
        'customer_purchase_order_number' => null,
        'sales_rep_outside' => null,
        'sales_rep_inside' => null,
        'order_disposition' => null,
        'save_original_order' => null,
        'reprice_order' => null,
        'freeze_prices' => null,
        'recalculate_cost' => null,
        'reset_addons' => null,
        'copy_comments' => null,
        'copy_notes' => null,
        'copy_edi_data' => null,
        'copy_internal_external_subtotals' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_number' => 'companyNumber',
        'operator_init' => 'operatorInit',
        'operator_password' => 'operatorPassword',
        'order_number' => 'orderNumber',
        'order_suffix' => 'orderSuffix',
        'transaction_type' => 'transactionType',
        'reason_unavailable_type' => 'reasonUnavailableType',
        'customer_number' => 'customerNumber',
        'ship_to' => 'shipTo',
        'warehouse' => 'warehouse',
        'floor_plan_customer_number' => 'floorPlanCustomerNumber',
        'customer_purchase_order_number' => 'customerPurchaseOrderNumber',
        'sales_rep_outside' => 'salesRepOutside',
        'sales_rep_inside' => 'salesRepInside',
        'order_disposition' => 'orderDisposition',
        'save_original_order' => 'saveOriginalOrder',
        'reprice_order' => 'repriceOrder',
        'freeze_prices' => 'freezePrices',
        'recalculate_cost' => 'recalculateCost',
        'reset_addons' => 'resetAddons',
        'copy_comments' => 'copyComments',
        'copy_notes' => 'copyNotes',
        'copy_edi_data' => 'copyEDIData',
        'copy_internal_external_subtotals' => 'copyInternalExternalSubtotals'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_number' => 'setCompanyNumber',
        'operator_init' => 'setOperatorInit',
        'operator_password' => 'setOperatorPassword',
        'order_number' => 'setOrderNumber',
        'order_suffix' => 'setOrderSuffix',
        'transaction_type' => 'setTransactionType',
        'reason_unavailable_type' => 'setReasonUnavailableType',
        'customer_number' => 'setCustomerNumber',
        'ship_to' => 'setShipTo',
        'warehouse' => 'setWarehouse',
        'floor_plan_customer_number' => 'setFloorPlanCustomerNumber',
        'customer_purchase_order_number' => 'setCustomerPurchaseOrderNumber',
        'sales_rep_outside' => 'setSalesRepOutside',
        'sales_rep_inside' => 'setSalesRepInside',
        'order_disposition' => 'setOrderDisposition',
        'save_original_order' => 'setSaveOriginalOrder',
        'reprice_order' => 'setRepriceOrder',
        'freeze_prices' => 'setFreezePrices',
        'recalculate_cost' => 'setRecalculateCost',
        'reset_addons' => 'setResetAddons',
        'copy_comments' => 'setCopyComments',
        'copy_notes' => 'setCopyNotes',
        'copy_edi_data' => 'setCopyEdiData',
        'copy_internal_external_subtotals' => 'setCopyInternalExternalSubtotals'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_number' => 'getCompanyNumber',
        'operator_init' => 'getOperatorInit',
        'operator_password' => 'getOperatorPassword',
        'order_number' => 'getOrderNumber',
        'order_suffix' => 'getOrderSuffix',
        'transaction_type' => 'getTransactionType',
        'reason_unavailable_type' => 'getReasonUnavailableType',
        'customer_number' => 'getCustomerNumber',
        'ship_to' => 'getShipTo',
        'warehouse' => 'getWarehouse',
        'floor_plan_customer_number' => 'getFloorPlanCustomerNumber',
        'customer_purchase_order_number' => 'getCustomerPurchaseOrderNumber',
        'sales_rep_outside' => 'getSalesRepOutside',
        'sales_rep_inside' => 'getSalesRepInside',
        'order_disposition' => 'getOrderDisposition',
        'save_original_order' => 'getSaveOriginalOrder',
        'reprice_order' => 'getRepriceOrder',
        'freeze_prices' => 'getFreezePrices',
        'recalculate_cost' => 'getRecalculateCost',
        'reset_addons' => 'getResetAddons',
        'copy_comments' => 'getCopyComments',
        'copy_notes' => 'getCopyNotes',
        'copy_edi_data' => 'getCopyEdiData',
        'copy_internal_external_subtotals' => 'getCopyInternalExternalSubtotals'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_number'] = isset($data['company_number']) ? $data['company_number'] : null;
        $this->container['operator_init'] = isset($data['operator_init']) ? $data['operator_init'] : null;
        $this->container['operator_password'] = isset($data['operator_password']) ? $data['operator_password'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['order_suffix'] = isset($data['order_suffix']) ? $data['order_suffix'] : null;
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['reason_unavailable_type'] = isset($data['reason_unavailable_type']) ? $data['reason_unavailable_type'] : null;
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['ship_to'] = isset($data['ship_to']) ? $data['ship_to'] : null;
        $this->container['warehouse'] = isset($data['warehouse']) ? $data['warehouse'] : null;
        $this->container['floor_plan_customer_number'] = isset($data['floor_plan_customer_number']) ? $data['floor_plan_customer_number'] : null;
        $this->container['customer_purchase_order_number'] = isset($data['customer_purchase_order_number']) ? $data['customer_purchase_order_number'] : null;
        $this->container['sales_rep_outside'] = isset($data['sales_rep_outside']) ? $data['sales_rep_outside'] : null;
        $this->container['sales_rep_inside'] = isset($data['sales_rep_inside']) ? $data['sales_rep_inside'] : null;
        $this->container['order_disposition'] = isset($data['order_disposition']) ? $data['order_disposition'] : null;
        $this->container['save_original_order'] = isset($data['save_original_order']) ? $data['save_original_order'] : null;
        $this->container['reprice_order'] = isset($data['reprice_order']) ? $data['reprice_order'] : null;
        $this->container['freeze_prices'] = isset($data['freeze_prices']) ? $data['freeze_prices'] : null;
        $this->container['recalculate_cost'] = isset($data['recalculate_cost']) ? $data['recalculate_cost'] : null;
        $this->container['reset_addons'] = isset($data['reset_addons']) ? $data['reset_addons'] : null;
        $this->container['copy_comments'] = isset($data['copy_comments']) ? $data['copy_comments'] : null;
        $this->container['copy_notes'] = isset($data['copy_notes']) ? $data['copy_notes'] : null;
        $this->container['copy_edi_data'] = isset($data['copy_edi_data']) ? $data['copy_edi_data'] : null;
        $this->container['copy_internal_external_subtotals'] = isset($data['copy_internal_external_subtotals']) ? $data['copy_internal_external_subtotals'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_number
     *
     * @return int
     */
    public function getCompanyNumber()
    {
        return $this->container['company_number'];
    }

    /**
     * Sets company_number
     *
     * @param int $company_number company_number
     *
     * @return $this
     */
    public function setCompanyNumber($company_number)
    {
        $this->container['company_number'] = $company_number;

        return $this;
    }

    /**
     * Gets operator_init
     *
     * @return string
     */
    public function getOperatorInit()
    {
        return $this->container['operator_init'];
    }

    /**
     * Sets operator_init
     *
     * @param string $operator_init operator_init
     *
     * @return $this
     */
    public function setOperatorInit($operator_init)
    {
        $this->container['operator_init'] = $operator_init;

        return $this;
    }

    /**
     * Gets operator_password
     *
     * @return string
     */
    public function getOperatorPassword()
    {
        return $this->container['operator_password'];
    }

    /**
     * Sets operator_password
     *
     * @param string $operator_password operator_password
     *
     * @return $this
     */
    public function setOperatorPassword($operator_password)
    {
        $this->container['operator_password'] = $operator_password;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return int
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param int $order_number order_number
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets order_suffix
     *
     * @return int
     */
    public function getOrderSuffix()
    {
        return $this->container['order_suffix'];
    }

    /**
     * Sets order_suffix
     *
     * @param int $order_suffix order_suffix
     *
     * @return $this
     */
    public function setOrderSuffix($order_suffix)
    {
        $this->container['order_suffix'] = $order_suffix;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string $transaction_type transaction_type
     *
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets reason_unavailable_type
     *
     * @return string
     */
    public function getReasonUnavailableType()
    {
        return $this->container['reason_unavailable_type'];
    }

    /**
     * Sets reason_unavailable_type
     *
     * @param string $reason_unavailable_type reason_unavailable_type
     *
     * @return $this
     */
    public function setReasonUnavailableType($reason_unavailable_type)
    {
        $this->container['reason_unavailable_type'] = $reason_unavailable_type;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return double
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param double $customer_number customer_number
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return string
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param string $ship_to ship_to
     *
     * @return $this
     */
    public function setShipTo($ship_to)
    {
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return string
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param string $warehouse warehouse
     *
     * @return $this
     */
    public function setWarehouse($warehouse)
    {
        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets floor_plan_customer_number
     *
     * @return double
     */
    public function getFloorPlanCustomerNumber()
    {
        return $this->container['floor_plan_customer_number'];
    }

    /**
     * Sets floor_plan_customer_number
     *
     * @param double $floor_plan_customer_number floor_plan_customer_number
     *
     * @return $this
     */
    public function setFloorPlanCustomerNumber($floor_plan_customer_number)
    {
        $this->container['floor_plan_customer_number'] = $floor_plan_customer_number;

        return $this;
    }

    /**
     * Gets customer_purchase_order_number
     *
     * @return string
     */
    public function getCustomerPurchaseOrderNumber()
    {
        return $this->container['customer_purchase_order_number'];
    }

    /**
     * Sets customer_purchase_order_number
     *
     * @param string $customer_purchase_order_number customer_purchase_order_number
     *
     * @return $this
     */
    public function setCustomerPurchaseOrderNumber($customer_purchase_order_number)
    {
        $this->container['customer_purchase_order_number'] = $customer_purchase_order_number;

        return $this;
    }

    /**
     * Gets sales_rep_outside
     *
     * @return string
     */
    public function getSalesRepOutside()
    {
        return $this->container['sales_rep_outside'];
    }

    /**
     * Sets sales_rep_outside
     *
     * @param string $sales_rep_outside sales_rep_outside
     *
     * @return $this
     */
    public function setSalesRepOutside($sales_rep_outside)
    {
        $this->container['sales_rep_outside'] = $sales_rep_outside;

        return $this;
    }

    /**
     * Gets sales_rep_inside
     *
     * @return string
     */
    public function getSalesRepInside()
    {
        return $this->container['sales_rep_inside'];
    }

    /**
     * Sets sales_rep_inside
     *
     * @param string $sales_rep_inside sales_rep_inside
     *
     * @return $this
     */
    public function setSalesRepInside($sales_rep_inside)
    {
        $this->container['sales_rep_inside'] = $sales_rep_inside;

        return $this;
    }

    /**
     * Gets order_disposition
     *
     * @return string
     */
    public function getOrderDisposition()
    {
        return $this->container['order_disposition'];
    }

    /**
     * Sets order_disposition
     *
     * @param string $order_disposition order_disposition
     *
     * @return $this
     */
    public function setOrderDisposition($order_disposition)
    {
        $this->container['order_disposition'] = $order_disposition;

        return $this;
    }

    /**
     * Gets save_original_order
     *
     * @return bool
     */
    public function getSaveOriginalOrder()
    {
        return $this->container['save_original_order'];
    }

    /**
     * Sets save_original_order
     *
     * @param bool $save_original_order save_original_order
     *
     * @return $this
     */
    public function setSaveOriginalOrder($save_original_order)
    {
        $this->container['save_original_order'] = $save_original_order;

        return $this;
    }

    /**
     * Gets reprice_order
     *
     * @return bool
     */
    public function getRepriceOrder()
    {
        return $this->container['reprice_order'];
    }

    /**
     * Sets reprice_order
     *
     * @param bool $reprice_order reprice_order
     *
     * @return $this
     */
    public function setRepriceOrder($reprice_order)
    {
        $this->container['reprice_order'] = $reprice_order;

        return $this;
    }

    /**
     * Gets freeze_prices
     *
     * @return bool
     */
    public function getFreezePrices()
    {
        return $this->container['freeze_prices'];
    }

    /**
     * Sets freeze_prices
     *
     * @param bool $freeze_prices freeze_prices
     *
     * @return $this
     */
    public function setFreezePrices($freeze_prices)
    {
        $this->container['freeze_prices'] = $freeze_prices;

        return $this;
    }

    /**
     * Gets recalculate_cost
     *
     * @return bool
     */
    public function getRecalculateCost()
    {
        return $this->container['recalculate_cost'];
    }

    /**
     * Sets recalculate_cost
     *
     * @param bool $recalculate_cost recalculate_cost
     *
     * @return $this
     */
    public function setRecalculateCost($recalculate_cost)
    {
        $this->container['recalculate_cost'] = $recalculate_cost;

        return $this;
    }

    /**
     * Gets reset_addons
     *
     * @return bool
     */
    public function getResetAddons()
    {
        return $this->container['reset_addons'];
    }

    /**
     * Sets reset_addons
     *
     * @param bool $reset_addons reset_addons
     *
     * @return $this
     */
    public function setResetAddons($reset_addons)
    {
        $this->container['reset_addons'] = $reset_addons;

        return $this;
    }

    /**
     * Gets copy_comments
     *
     * @return bool
     */
    public function getCopyComments()
    {
        return $this->container['copy_comments'];
    }

    /**
     * Sets copy_comments
     *
     * @param bool $copy_comments copy_comments
     *
     * @return $this
     */
    public function setCopyComments($copy_comments)
    {
        $this->container['copy_comments'] = $copy_comments;

        return $this;
    }

    /**
     * Gets copy_notes
     *
     * @return bool
     */
    public function getCopyNotes()
    {
        return $this->container['copy_notes'];
    }

    /**
     * Sets copy_notes
     *
     * @param bool $copy_notes copy_notes
     *
     * @return $this
     */
    public function setCopyNotes($copy_notes)
    {
        $this->container['copy_notes'] = $copy_notes;

        return $this;
    }

    /**
     * Gets copy_edi_data
     *
     * @return bool
     */
    public function getCopyEdiData()
    {
        return $this->container['copy_edi_data'];
    }

    /**
     * Sets copy_edi_data
     *
     * @param bool $copy_edi_data copy_edi_data
     *
     * @return $this
     */
    public function setCopyEdiData($copy_edi_data)
    {
        $this->container['copy_edi_data'] = $copy_edi_data;

        return $this;
    }

    /**
     * Gets copy_internal_external_subtotals
     *
     * @return bool
     */
    public function getCopyInternalExternalSubtotals()
    {
        return $this->container['copy_internal_external_subtotals'];
    }

    /**
     * Sets copy_internal_external_subtotals
     *
     * @param bool $copy_internal_external_subtotals copy_internal_external_subtotals
     *
     * @return $this
     */
    public function setCopyInternalExternalSubtotals($copy_internal_external_subtotals)
    {
        $this->container['copy_internal_external_subtotals'] = $copy_internal_external_subtotals;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


