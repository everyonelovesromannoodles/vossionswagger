<?php
/**
 * TArtransV3
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TArtransV3 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TArtransV3 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-artransV3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'invdt' => '\DateTime',
        'invno' => 'string',
        'invnoraw' => 'int',
        'invsufraw' => 'int',
        'notesfl' => 'string',
        'statustype' => 'string',
        'transcd' => 'string',
        'transcdraw' => 'int',
        'refer' => 'string',
        'amountx' => 'string',
        'amtduex' => 'string',
        'seqno' => 'int',
        'period' => 'int',
        'discdt' => '\DateTime',
        'discamt' => 'double',
        'duedt' => '\DateTime',
        'disputefl' => 'bool',
        'jrnlno' => 'int',
        'setno' => 'int',
        'custpo' => 'string',
        'paymentrefer' => 'string',
        'userfield' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'invdt' => 'date',
        'invno' => null,
        'invnoraw' => 'int64',
        'invsufraw' => 'int64',
        'notesfl' => null,
        'statustype' => null,
        'transcd' => null,
        'transcdraw' => 'int64',
        'refer' => null,
        'amountx' => null,
        'amtduex' => null,
        'seqno' => 'int64',
        'period' => 'int64',
        'discdt' => 'date',
        'discamt' => 'double',
        'duedt' => 'date',
        'disputefl' => null,
        'jrnlno' => 'int64',
        'setno' => 'int64',
        'custpo' => null,
        'paymentrefer' => null,
        'userfield' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invdt' => 'invdt',
        'invno' => 'invno',
        'invnoraw' => 'invnoraw',
        'invsufraw' => 'invsufraw',
        'notesfl' => 'notesfl',
        'statustype' => 'statustype',
        'transcd' => 'transcd',
        'transcdraw' => 'transcdraw',
        'refer' => 'refer',
        'amountx' => 'amountx',
        'amtduex' => 'amtduex',
        'seqno' => 'seqno',
        'period' => 'period',
        'discdt' => 'discdt',
        'discamt' => 'discamt',
        'duedt' => 'duedt',
        'disputefl' => 'disputefl',
        'jrnlno' => 'jrnlno',
        'setno' => 'setno',
        'custpo' => 'custpo',
        'paymentrefer' => 'paymentrefer',
        'userfield' => 'userfield'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invdt' => 'setInvdt',
        'invno' => 'setInvno',
        'invnoraw' => 'setInvnoraw',
        'invsufraw' => 'setInvsufraw',
        'notesfl' => 'setNotesfl',
        'statustype' => 'setStatustype',
        'transcd' => 'setTranscd',
        'transcdraw' => 'setTranscdraw',
        'refer' => 'setRefer',
        'amountx' => 'setAmountx',
        'amtduex' => 'setAmtduex',
        'seqno' => 'setSeqno',
        'period' => 'setPeriod',
        'discdt' => 'setDiscdt',
        'discamt' => 'setDiscamt',
        'duedt' => 'setDuedt',
        'disputefl' => 'setDisputefl',
        'jrnlno' => 'setJrnlno',
        'setno' => 'setSetno',
        'custpo' => 'setCustpo',
        'paymentrefer' => 'setPaymentrefer',
        'userfield' => 'setUserfield'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invdt' => 'getInvdt',
        'invno' => 'getInvno',
        'invnoraw' => 'getInvnoraw',
        'invsufraw' => 'getInvsufraw',
        'notesfl' => 'getNotesfl',
        'statustype' => 'getStatustype',
        'transcd' => 'getTranscd',
        'transcdraw' => 'getTranscdraw',
        'refer' => 'getRefer',
        'amountx' => 'getAmountx',
        'amtduex' => 'getAmtduex',
        'seqno' => 'getSeqno',
        'period' => 'getPeriod',
        'discdt' => 'getDiscdt',
        'discamt' => 'getDiscamt',
        'duedt' => 'getDuedt',
        'disputefl' => 'getDisputefl',
        'jrnlno' => 'getJrnlno',
        'setno' => 'getSetno',
        'custpo' => 'getCustpo',
        'paymentrefer' => 'getPaymentrefer',
        'userfield' => 'getUserfield'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['invdt'] = isset($data['invdt']) ? $data['invdt'] : null;
        $this->container['invno'] = isset($data['invno']) ? $data['invno'] : null;
        $this->container['invnoraw'] = isset($data['invnoraw']) ? $data['invnoraw'] : null;
        $this->container['invsufraw'] = isset($data['invsufraw']) ? $data['invsufraw'] : null;
        $this->container['notesfl'] = isset($data['notesfl']) ? $data['notesfl'] : null;
        $this->container['statustype'] = isset($data['statustype']) ? $data['statustype'] : null;
        $this->container['transcd'] = isset($data['transcd']) ? $data['transcd'] : null;
        $this->container['transcdraw'] = isset($data['transcdraw']) ? $data['transcdraw'] : null;
        $this->container['refer'] = isset($data['refer']) ? $data['refer'] : null;
        $this->container['amountx'] = isset($data['amountx']) ? $data['amountx'] : null;
        $this->container['amtduex'] = isset($data['amtduex']) ? $data['amtduex'] : null;
        $this->container['seqno'] = isset($data['seqno']) ? $data['seqno'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['discdt'] = isset($data['discdt']) ? $data['discdt'] : null;
        $this->container['discamt'] = isset($data['discamt']) ? $data['discamt'] : null;
        $this->container['duedt'] = isset($data['duedt']) ? $data['duedt'] : null;
        $this->container['disputefl'] = isset($data['disputefl']) ? $data['disputefl'] : null;
        $this->container['jrnlno'] = isset($data['jrnlno']) ? $data['jrnlno'] : null;
        $this->container['setno'] = isset($data['setno']) ? $data['setno'] : null;
        $this->container['custpo'] = isset($data['custpo']) ? $data['custpo'] : null;
        $this->container['paymentrefer'] = isset($data['paymentrefer']) ? $data['paymentrefer'] : null;
        $this->container['userfield'] = isset($data['userfield']) ? $data['userfield'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invdt
     *
     * @return \DateTime
     */
    public function getInvdt()
    {
        return $this->container['invdt'];
    }

    /**
     * Sets invdt
     *
     * @param \DateTime $invdt invdt
     *
     * @return $this
     */
    public function setInvdt($invdt)
    {
        $this->container['invdt'] = $invdt;

        return $this;
    }

    /**
     * Gets invno
     *
     * @return string
     */
    public function getInvno()
    {
        return $this->container['invno'];
    }

    /**
     * Sets invno
     *
     * @param string $invno invno
     *
     * @return $this
     */
    public function setInvno($invno)
    {
        $this->container['invno'] = $invno;

        return $this;
    }

    /**
     * Gets invnoraw
     *
     * @return int
     */
    public function getInvnoraw()
    {
        return $this->container['invnoraw'];
    }

    /**
     * Sets invnoraw
     *
     * @param int $invnoraw invnoraw
     *
     * @return $this
     */
    public function setInvnoraw($invnoraw)
    {
        $this->container['invnoraw'] = $invnoraw;

        return $this;
    }

    /**
     * Gets invsufraw
     *
     * @return int
     */
    public function getInvsufraw()
    {
        return $this->container['invsufraw'];
    }

    /**
     * Sets invsufraw
     *
     * @param int $invsufraw invsufraw
     *
     * @return $this
     */
    public function setInvsufraw($invsufraw)
    {
        $this->container['invsufraw'] = $invsufraw;

        return $this;
    }

    /**
     * Gets notesfl
     *
     * @return string
     */
    public function getNotesfl()
    {
        return $this->container['notesfl'];
    }

    /**
     * Sets notesfl
     *
     * @param string $notesfl notesfl
     *
     * @return $this
     */
    public function setNotesfl($notesfl)
    {
        $this->container['notesfl'] = $notesfl;

        return $this;
    }

    /**
     * Gets statustype
     *
     * @return string
     */
    public function getStatustype()
    {
        return $this->container['statustype'];
    }

    /**
     * Sets statustype
     *
     * @param string $statustype statustype
     *
     * @return $this
     */
    public function setStatustype($statustype)
    {
        $this->container['statustype'] = $statustype;

        return $this;
    }

    /**
     * Gets transcd
     *
     * @return string
     */
    public function getTranscd()
    {
        return $this->container['transcd'];
    }

    /**
     * Sets transcd
     *
     * @param string $transcd transcd
     *
     * @return $this
     */
    public function setTranscd($transcd)
    {
        $this->container['transcd'] = $transcd;

        return $this;
    }

    /**
     * Gets transcdraw
     *
     * @return int
     */
    public function getTranscdraw()
    {
        return $this->container['transcdraw'];
    }

    /**
     * Sets transcdraw
     *
     * @param int $transcdraw transcdraw
     *
     * @return $this
     */
    public function setTranscdraw($transcdraw)
    {
        $this->container['transcdraw'] = $transcdraw;

        return $this;
    }

    /**
     * Gets refer
     *
     * @return string
     */
    public function getRefer()
    {
        return $this->container['refer'];
    }

    /**
     * Sets refer
     *
     * @param string $refer refer
     *
     * @return $this
     */
    public function setRefer($refer)
    {
        $this->container['refer'] = $refer;

        return $this;
    }

    /**
     * Gets amountx
     *
     * @return string
     */
    public function getAmountx()
    {
        return $this->container['amountx'];
    }

    /**
     * Sets amountx
     *
     * @param string $amountx amountx
     *
     * @return $this
     */
    public function setAmountx($amountx)
    {
        $this->container['amountx'] = $amountx;

        return $this;
    }

    /**
     * Gets amtduex
     *
     * @return string
     */
    public function getAmtduex()
    {
        return $this->container['amtduex'];
    }

    /**
     * Sets amtduex
     *
     * @param string $amtduex amtduex
     *
     * @return $this
     */
    public function setAmtduex($amtduex)
    {
        $this->container['amtduex'] = $amtduex;

        return $this;
    }

    /**
     * Gets seqno
     *
     * @return int
     */
    public function getSeqno()
    {
        return $this->container['seqno'];
    }

    /**
     * Sets seqno
     *
     * @param int $seqno seqno
     *
     * @return $this
     */
    public function setSeqno($seqno)
    {
        $this->container['seqno'] = $seqno;

        return $this;
    }

    /**
     * Gets period
     *
     * @return int
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param int $period period
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets discdt
     *
     * @return \DateTime
     */
    public function getDiscdt()
    {
        return $this->container['discdt'];
    }

    /**
     * Sets discdt
     *
     * @param \DateTime $discdt discdt
     *
     * @return $this
     */
    public function setDiscdt($discdt)
    {
        $this->container['discdt'] = $discdt;

        return $this;
    }

    /**
     * Gets discamt
     *
     * @return double
     */
    public function getDiscamt()
    {
        return $this->container['discamt'];
    }

    /**
     * Sets discamt
     *
     * @param double $discamt discamt
     *
     * @return $this
     */
    public function setDiscamt($discamt)
    {
        $this->container['discamt'] = $discamt;

        return $this;
    }

    /**
     * Gets duedt
     *
     * @return \DateTime
     */
    public function getDuedt()
    {
        return $this->container['duedt'];
    }

    /**
     * Sets duedt
     *
     * @param \DateTime $duedt duedt
     *
     * @return $this
     */
    public function setDuedt($duedt)
    {
        $this->container['duedt'] = $duedt;

        return $this;
    }

    /**
     * Gets disputefl
     *
     * @return bool
     */
    public function getDisputefl()
    {
        return $this->container['disputefl'];
    }

    /**
     * Sets disputefl
     *
     * @param bool $disputefl disputefl
     *
     * @return $this
     */
    public function setDisputefl($disputefl)
    {
        $this->container['disputefl'] = $disputefl;

        return $this;
    }

    /**
     * Gets jrnlno
     *
     * @return int
     */
    public function getJrnlno()
    {
        return $this->container['jrnlno'];
    }

    /**
     * Sets jrnlno
     *
     * @param int $jrnlno jrnlno
     *
     * @return $this
     */
    public function setJrnlno($jrnlno)
    {
        $this->container['jrnlno'] = $jrnlno;

        return $this;
    }

    /**
     * Gets setno
     *
     * @return int
     */
    public function getSetno()
    {
        return $this->container['setno'];
    }

    /**
     * Sets setno
     *
     * @param int $setno setno
     *
     * @return $this
     */
    public function setSetno($setno)
    {
        $this->container['setno'] = $setno;

        return $this;
    }

    /**
     * Gets custpo
     *
     * @return string
     */
    public function getCustpo()
    {
        return $this->container['custpo'];
    }

    /**
     * Sets custpo
     *
     * @param string $custpo custpo
     *
     * @return $this
     */
    public function setCustpo($custpo)
    {
        $this->container['custpo'] = $custpo;

        return $this;
    }

    /**
     * Gets paymentrefer
     *
     * @return string
     */
    public function getPaymentrefer()
    {
        return $this->container['paymentrefer'];
    }

    /**
     * Sets paymentrefer
     *
     * @param string $paymentrefer paymentrefer
     *
     * @return $this
     */
    public function setPaymentrefer($paymentrefer)
    {
        $this->container['paymentrefer'] = $paymentrefer;

        return $this;
    }

    /**
     * Gets userfield
     *
     * @return string
     */
    public function getUserfield()
    {
        return $this->container['userfield'];
    }

    /**
     * Sets userfield
     *
     * @param string $userfield userfield
     *
     * @return $this
     */
    public function setUserfield($userfield)
    {
        $this->container['userfield'] = $userfield;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


