<?php
/**
 * Sxapiicgetproductdatageneralv4Response
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Sxapiicgetproductdatageneralv4Response Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Sxapiicgetproductdatageneralv4Response implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapiicgetproductdatageneralv4_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'c_error_message' => 'string',
        'cross_reference_product' => 'string',
        'cross_reference_type' => 'string',
        'cubes' => 'double',
        'description1' => 'string',
        'description2' => 'string',
        'height' => 'double',
        'kit_type' => 'string',
        'length' => 'double',
        'lookup_name' => 'string',
        'notes_flag' => 'string',
        'product_category' => 'string',
        'product_category_description' => 'string',
        'status_type' => 'string',
        'unit_count' => 'string',
        'unit_sell' => 'string',
        'unit_stock' => 'string',
        'weight' => 'double',
        'width' => 'double',
        'catalog_flag' => 'bool',
        'build_on_demand_transfer_type' => 'string',
        'core_charge' => 'double',
        'customer_core_grace_flag' => 'bool',
        'customer_core_grace_period' => 'int',
        'dirty_core_product' => 'string',
        'entered_date' => '\DateTime',
        'exponents_on_invoice_flag' => 'bool',
        'special_cost_record_number' => 'int',
        'units_per_stocking' => 'double',
        'price_cost_per' => 'string',
        'special_conversion_type' => 'string',
        'special_conversion_factor' => 'int',
        'implied_core_product' => 'string',
        'kit_non_stock_required_flag' => 'bool',
        'kit_roll_type' => 'string',
        'memo_mix_flag' => 'bool',
        'msds_change_date' => '\DateTime',
        'msds_flag' => 'bool',
        'msds_sheet_number' => 'string',
        'random_mix_flag' => 'bool',
        'selling_multiplier' => 'int',
        'tied_component_print' => 'string',
        'warranty_length' => 'int',
        'warranty_type' => 'string',
        'web_page' => 'string',
        'web_page_external' => 'string',
        'last_update' => 'string',
        't_outfieldvalue' => '\Swagger\Client\Model\TOutfieldvalueResp'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'c_error_message' => null,
        'cross_reference_product' => null,
        'cross_reference_type' => null,
        'cubes' => 'double',
        'description1' => null,
        'description2' => null,
        'height' => 'double',
        'kit_type' => null,
        'length' => 'double',
        'lookup_name' => null,
        'notes_flag' => null,
        'product_category' => null,
        'product_category_description' => null,
        'status_type' => null,
        'unit_count' => null,
        'unit_sell' => null,
        'unit_stock' => null,
        'weight' => 'double',
        'width' => 'double',
        'catalog_flag' => null,
        'build_on_demand_transfer_type' => null,
        'core_charge' => 'double',
        'customer_core_grace_flag' => null,
        'customer_core_grace_period' => 'int64',
        'dirty_core_product' => null,
        'entered_date' => 'date',
        'exponents_on_invoice_flag' => null,
        'special_cost_record_number' => 'int64',
        'units_per_stocking' => 'double',
        'price_cost_per' => null,
        'special_conversion_type' => null,
        'special_conversion_factor' => 'int64',
        'implied_core_product' => null,
        'kit_non_stock_required_flag' => null,
        'kit_roll_type' => null,
        'memo_mix_flag' => null,
        'msds_change_date' => 'date',
        'msds_flag' => null,
        'msds_sheet_number' => null,
        'random_mix_flag' => null,
        'selling_multiplier' => 'int64',
        'tied_component_print' => null,
        'warranty_length' => 'int64',
        'warranty_type' => null,
        'web_page' => null,
        'web_page_external' => null,
        'last_update' => null,
        't_outfieldvalue' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c_error_message' => 'cErrorMessage',
        'cross_reference_product' => 'crossReferenceProduct',
        'cross_reference_type' => 'crossReferenceType',
        'cubes' => 'cubes',
        'description1' => 'description1',
        'description2' => 'description2',
        'height' => 'height',
        'kit_type' => 'kitType',
        'length' => 'length',
        'lookup_name' => 'lookupName',
        'notes_flag' => 'notesFlag',
        'product_category' => 'productCategory',
        'product_category_description' => 'productCategoryDescription',
        'status_type' => 'statusType',
        'unit_count' => 'unitCount',
        'unit_sell' => 'unitSell',
        'unit_stock' => 'unitStock',
        'weight' => 'weight',
        'width' => 'width',
        'catalog_flag' => 'catalogFlag',
        'build_on_demand_transfer_type' => 'buildOnDemandTransferType',
        'core_charge' => 'coreCharge',
        'customer_core_grace_flag' => 'customerCoreGraceFlag',
        'customer_core_grace_period' => 'customerCoreGracePeriod',
        'dirty_core_product' => 'dirtyCoreProduct',
        'entered_date' => 'enteredDate',
        'exponents_on_invoice_flag' => 'exponentsOnInvoiceFlag',
        'special_cost_record_number' => 'specialCostRecordNumber',
        'units_per_stocking' => 'unitsPerStocking',
        'price_cost_per' => 'priceCostPer',
        'special_conversion_type' => 'specialConversionType',
        'special_conversion_factor' => 'specialConversionFactor',
        'implied_core_product' => 'impliedCoreProduct',
        'kit_non_stock_required_flag' => 'kitNonStockRequiredFlag',
        'kit_roll_type' => 'kitRollType',
        'memo_mix_flag' => 'memoMixFlag',
        'msds_change_date' => 'msdsChangeDate',
        'msds_flag' => 'msdsFlag',
        'msds_sheet_number' => 'msdsSheetNumber',
        'random_mix_flag' => 'randomMixFlag',
        'selling_multiplier' => 'sellingMultiplier',
        'tied_component_print' => 'tiedComponentPrint',
        'warranty_length' => 'warrantyLength',
        'warranty_type' => 'warrantyType',
        'web_page' => 'webPage',
        'web_page_external' => 'webPageExternal',
        'last_update' => 'lastUpdate',
        't_outfieldvalue' => 'tOutfieldvalue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c_error_message' => 'setCErrorMessage',
        'cross_reference_product' => 'setCrossReferenceProduct',
        'cross_reference_type' => 'setCrossReferenceType',
        'cubes' => 'setCubes',
        'description1' => 'setDescription1',
        'description2' => 'setDescription2',
        'height' => 'setHeight',
        'kit_type' => 'setKitType',
        'length' => 'setLength',
        'lookup_name' => 'setLookupName',
        'notes_flag' => 'setNotesFlag',
        'product_category' => 'setProductCategory',
        'product_category_description' => 'setProductCategoryDescription',
        'status_type' => 'setStatusType',
        'unit_count' => 'setUnitCount',
        'unit_sell' => 'setUnitSell',
        'unit_stock' => 'setUnitStock',
        'weight' => 'setWeight',
        'width' => 'setWidth',
        'catalog_flag' => 'setCatalogFlag',
        'build_on_demand_transfer_type' => 'setBuildOnDemandTransferType',
        'core_charge' => 'setCoreCharge',
        'customer_core_grace_flag' => 'setCustomerCoreGraceFlag',
        'customer_core_grace_period' => 'setCustomerCoreGracePeriod',
        'dirty_core_product' => 'setDirtyCoreProduct',
        'entered_date' => 'setEnteredDate',
        'exponents_on_invoice_flag' => 'setExponentsOnInvoiceFlag',
        'special_cost_record_number' => 'setSpecialCostRecordNumber',
        'units_per_stocking' => 'setUnitsPerStocking',
        'price_cost_per' => 'setPriceCostPer',
        'special_conversion_type' => 'setSpecialConversionType',
        'special_conversion_factor' => 'setSpecialConversionFactor',
        'implied_core_product' => 'setImpliedCoreProduct',
        'kit_non_stock_required_flag' => 'setKitNonStockRequiredFlag',
        'kit_roll_type' => 'setKitRollType',
        'memo_mix_flag' => 'setMemoMixFlag',
        'msds_change_date' => 'setMsdsChangeDate',
        'msds_flag' => 'setMsdsFlag',
        'msds_sheet_number' => 'setMsdsSheetNumber',
        'random_mix_flag' => 'setRandomMixFlag',
        'selling_multiplier' => 'setSellingMultiplier',
        'tied_component_print' => 'setTiedComponentPrint',
        'warranty_length' => 'setWarrantyLength',
        'warranty_type' => 'setWarrantyType',
        'web_page' => 'setWebPage',
        'web_page_external' => 'setWebPageExternal',
        'last_update' => 'setLastUpdate',
        't_outfieldvalue' => 'setTOutfieldvalue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c_error_message' => 'getCErrorMessage',
        'cross_reference_product' => 'getCrossReferenceProduct',
        'cross_reference_type' => 'getCrossReferenceType',
        'cubes' => 'getCubes',
        'description1' => 'getDescription1',
        'description2' => 'getDescription2',
        'height' => 'getHeight',
        'kit_type' => 'getKitType',
        'length' => 'getLength',
        'lookup_name' => 'getLookupName',
        'notes_flag' => 'getNotesFlag',
        'product_category' => 'getProductCategory',
        'product_category_description' => 'getProductCategoryDescription',
        'status_type' => 'getStatusType',
        'unit_count' => 'getUnitCount',
        'unit_sell' => 'getUnitSell',
        'unit_stock' => 'getUnitStock',
        'weight' => 'getWeight',
        'width' => 'getWidth',
        'catalog_flag' => 'getCatalogFlag',
        'build_on_demand_transfer_type' => 'getBuildOnDemandTransferType',
        'core_charge' => 'getCoreCharge',
        'customer_core_grace_flag' => 'getCustomerCoreGraceFlag',
        'customer_core_grace_period' => 'getCustomerCoreGracePeriod',
        'dirty_core_product' => 'getDirtyCoreProduct',
        'entered_date' => 'getEnteredDate',
        'exponents_on_invoice_flag' => 'getExponentsOnInvoiceFlag',
        'special_cost_record_number' => 'getSpecialCostRecordNumber',
        'units_per_stocking' => 'getUnitsPerStocking',
        'price_cost_per' => 'getPriceCostPer',
        'special_conversion_type' => 'getSpecialConversionType',
        'special_conversion_factor' => 'getSpecialConversionFactor',
        'implied_core_product' => 'getImpliedCoreProduct',
        'kit_non_stock_required_flag' => 'getKitNonStockRequiredFlag',
        'kit_roll_type' => 'getKitRollType',
        'memo_mix_flag' => 'getMemoMixFlag',
        'msds_change_date' => 'getMsdsChangeDate',
        'msds_flag' => 'getMsdsFlag',
        'msds_sheet_number' => 'getMsdsSheetNumber',
        'random_mix_flag' => 'getRandomMixFlag',
        'selling_multiplier' => 'getSellingMultiplier',
        'tied_component_print' => 'getTiedComponentPrint',
        'warranty_length' => 'getWarrantyLength',
        'warranty_type' => 'getWarrantyType',
        'web_page' => 'getWebPage',
        'web_page_external' => 'getWebPageExternal',
        'last_update' => 'getLastUpdate',
        't_outfieldvalue' => 'getTOutfieldvalue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['c_error_message'] = isset($data['c_error_message']) ? $data['c_error_message'] : null;
        $this->container['cross_reference_product'] = isset($data['cross_reference_product']) ? $data['cross_reference_product'] : null;
        $this->container['cross_reference_type'] = isset($data['cross_reference_type']) ? $data['cross_reference_type'] : null;
        $this->container['cubes'] = isset($data['cubes']) ? $data['cubes'] : null;
        $this->container['description1'] = isset($data['description1']) ? $data['description1'] : null;
        $this->container['description2'] = isset($data['description2']) ? $data['description2'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['kit_type'] = isset($data['kit_type']) ? $data['kit_type'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['lookup_name'] = isset($data['lookup_name']) ? $data['lookup_name'] : null;
        $this->container['notes_flag'] = isset($data['notes_flag']) ? $data['notes_flag'] : null;
        $this->container['product_category'] = isset($data['product_category']) ? $data['product_category'] : null;
        $this->container['product_category_description'] = isset($data['product_category_description']) ? $data['product_category_description'] : null;
        $this->container['status_type'] = isset($data['status_type']) ? $data['status_type'] : null;
        $this->container['unit_count'] = isset($data['unit_count']) ? $data['unit_count'] : null;
        $this->container['unit_sell'] = isset($data['unit_sell']) ? $data['unit_sell'] : null;
        $this->container['unit_stock'] = isset($data['unit_stock']) ? $data['unit_stock'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['catalog_flag'] = isset($data['catalog_flag']) ? $data['catalog_flag'] : null;
        $this->container['build_on_demand_transfer_type'] = isset($data['build_on_demand_transfer_type']) ? $data['build_on_demand_transfer_type'] : null;
        $this->container['core_charge'] = isset($data['core_charge']) ? $data['core_charge'] : null;
        $this->container['customer_core_grace_flag'] = isset($data['customer_core_grace_flag']) ? $data['customer_core_grace_flag'] : null;
        $this->container['customer_core_grace_period'] = isset($data['customer_core_grace_period']) ? $data['customer_core_grace_period'] : null;
        $this->container['dirty_core_product'] = isset($data['dirty_core_product']) ? $data['dirty_core_product'] : null;
        $this->container['entered_date'] = isset($data['entered_date']) ? $data['entered_date'] : null;
        $this->container['exponents_on_invoice_flag'] = isset($data['exponents_on_invoice_flag']) ? $data['exponents_on_invoice_flag'] : null;
        $this->container['special_cost_record_number'] = isset($data['special_cost_record_number']) ? $data['special_cost_record_number'] : null;
        $this->container['units_per_stocking'] = isset($data['units_per_stocking']) ? $data['units_per_stocking'] : null;
        $this->container['price_cost_per'] = isset($data['price_cost_per']) ? $data['price_cost_per'] : null;
        $this->container['special_conversion_type'] = isset($data['special_conversion_type']) ? $data['special_conversion_type'] : null;
        $this->container['special_conversion_factor'] = isset($data['special_conversion_factor']) ? $data['special_conversion_factor'] : null;
        $this->container['implied_core_product'] = isset($data['implied_core_product']) ? $data['implied_core_product'] : null;
        $this->container['kit_non_stock_required_flag'] = isset($data['kit_non_stock_required_flag']) ? $data['kit_non_stock_required_flag'] : null;
        $this->container['kit_roll_type'] = isset($data['kit_roll_type']) ? $data['kit_roll_type'] : null;
        $this->container['memo_mix_flag'] = isset($data['memo_mix_flag']) ? $data['memo_mix_flag'] : null;
        $this->container['msds_change_date'] = isset($data['msds_change_date']) ? $data['msds_change_date'] : null;
        $this->container['msds_flag'] = isset($data['msds_flag']) ? $data['msds_flag'] : null;
        $this->container['msds_sheet_number'] = isset($data['msds_sheet_number']) ? $data['msds_sheet_number'] : null;
        $this->container['random_mix_flag'] = isset($data['random_mix_flag']) ? $data['random_mix_flag'] : null;
        $this->container['selling_multiplier'] = isset($data['selling_multiplier']) ? $data['selling_multiplier'] : null;
        $this->container['tied_component_print'] = isset($data['tied_component_print']) ? $data['tied_component_print'] : null;
        $this->container['warranty_length'] = isset($data['warranty_length']) ? $data['warranty_length'] : null;
        $this->container['warranty_type'] = isset($data['warranty_type']) ? $data['warranty_type'] : null;
        $this->container['web_page'] = isset($data['web_page']) ? $data['web_page'] : null;
        $this->container['web_page_external'] = isset($data['web_page_external']) ? $data['web_page_external'] : null;
        $this->container['last_update'] = isset($data['last_update']) ? $data['last_update'] : null;
        $this->container['t_outfieldvalue'] = isset($data['t_outfieldvalue']) ? $data['t_outfieldvalue'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c_error_message
     *
     * @return string
     */
    public function getCErrorMessage()
    {
        return $this->container['c_error_message'];
    }

    /**
     * Sets c_error_message
     *
     * @param string $c_error_message c_error_message
     *
     * @return $this
     */
    public function setCErrorMessage($c_error_message)
    {
        $this->container['c_error_message'] = $c_error_message;

        return $this;
    }

    /**
     * Gets cross_reference_product
     *
     * @return string
     */
    public function getCrossReferenceProduct()
    {
        return $this->container['cross_reference_product'];
    }

    /**
     * Sets cross_reference_product
     *
     * @param string $cross_reference_product cross_reference_product
     *
     * @return $this
     */
    public function setCrossReferenceProduct($cross_reference_product)
    {
        $this->container['cross_reference_product'] = $cross_reference_product;

        return $this;
    }

    /**
     * Gets cross_reference_type
     *
     * @return string
     */
    public function getCrossReferenceType()
    {
        return $this->container['cross_reference_type'];
    }

    /**
     * Sets cross_reference_type
     *
     * @param string $cross_reference_type cross_reference_type
     *
     * @return $this
     */
    public function setCrossReferenceType($cross_reference_type)
    {
        $this->container['cross_reference_type'] = $cross_reference_type;

        return $this;
    }

    /**
     * Gets cubes
     *
     * @return double
     */
    public function getCubes()
    {
        return $this->container['cubes'];
    }

    /**
     * Sets cubes
     *
     * @param double $cubes cubes
     *
     * @return $this
     */
    public function setCubes($cubes)
    {
        $this->container['cubes'] = $cubes;

        return $this;
    }

    /**
     * Gets description1
     *
     * @return string
     */
    public function getDescription1()
    {
        return $this->container['description1'];
    }

    /**
     * Sets description1
     *
     * @param string $description1 description1
     *
     * @return $this
     */
    public function setDescription1($description1)
    {
        $this->container['description1'] = $description1;

        return $this;
    }

    /**
     * Gets description2
     *
     * @return string
     */
    public function getDescription2()
    {
        return $this->container['description2'];
    }

    /**
     * Sets description2
     *
     * @param string $description2 description2
     *
     * @return $this
     */
    public function setDescription2($description2)
    {
        $this->container['description2'] = $description2;

        return $this;
    }

    /**
     * Gets height
     *
     * @return double
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param double $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets kit_type
     *
     * @return string
     */
    public function getKitType()
    {
        return $this->container['kit_type'];
    }

    /**
     * Sets kit_type
     *
     * @param string $kit_type kit_type
     *
     * @return $this
     */
    public function setKitType($kit_type)
    {
        $this->container['kit_type'] = $kit_type;

        return $this;
    }

    /**
     * Gets length
     *
     * @return double
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param double $length length
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets lookup_name
     *
     * @return string
     */
    public function getLookupName()
    {
        return $this->container['lookup_name'];
    }

    /**
     * Sets lookup_name
     *
     * @param string $lookup_name lookup_name
     *
     * @return $this
     */
    public function setLookupName($lookup_name)
    {
        $this->container['lookup_name'] = $lookup_name;

        return $this;
    }

    /**
     * Gets notes_flag
     *
     * @return string
     */
    public function getNotesFlag()
    {
        return $this->container['notes_flag'];
    }

    /**
     * Sets notes_flag
     *
     * @param string $notes_flag notes_flag
     *
     * @return $this
     */
    public function setNotesFlag($notes_flag)
    {
        $this->container['notes_flag'] = $notes_flag;

        return $this;
    }

    /**
     * Gets product_category
     *
     * @return string
     */
    public function getProductCategory()
    {
        return $this->container['product_category'];
    }

    /**
     * Sets product_category
     *
     * @param string $product_category product_category
     *
     * @return $this
     */
    public function setProductCategory($product_category)
    {
        $this->container['product_category'] = $product_category;

        return $this;
    }

    /**
     * Gets product_category_description
     *
     * @return string
     */
    public function getProductCategoryDescription()
    {
        return $this->container['product_category_description'];
    }

    /**
     * Sets product_category_description
     *
     * @param string $product_category_description product_category_description
     *
     * @return $this
     */
    public function setProductCategoryDescription($product_category_description)
    {
        $this->container['product_category_description'] = $product_category_description;

        return $this;
    }

    /**
     * Gets status_type
     *
     * @return string
     */
    public function getStatusType()
    {
        return $this->container['status_type'];
    }

    /**
     * Sets status_type
     *
     * @param string $status_type status_type
     *
     * @return $this
     */
    public function setStatusType($status_type)
    {
        $this->container['status_type'] = $status_type;

        return $this;
    }

    /**
     * Gets unit_count
     *
     * @return string
     */
    public function getUnitCount()
    {
        return $this->container['unit_count'];
    }

    /**
     * Sets unit_count
     *
     * @param string $unit_count unit_count
     *
     * @return $this
     */
    public function setUnitCount($unit_count)
    {
        $this->container['unit_count'] = $unit_count;

        return $this;
    }

    /**
     * Gets unit_sell
     *
     * @return string
     */
    public function getUnitSell()
    {
        return $this->container['unit_sell'];
    }

    /**
     * Sets unit_sell
     *
     * @param string $unit_sell unit_sell
     *
     * @return $this
     */
    public function setUnitSell($unit_sell)
    {
        $this->container['unit_sell'] = $unit_sell;

        return $this;
    }

    /**
     * Gets unit_stock
     *
     * @return string
     */
    public function getUnitStock()
    {
        return $this->container['unit_stock'];
    }

    /**
     * Sets unit_stock
     *
     * @param string $unit_stock unit_stock
     *
     * @return $this
     */
    public function setUnitStock($unit_stock)
    {
        $this->container['unit_stock'] = $unit_stock;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return double
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param double $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets width
     *
     * @return double
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param double $width width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets catalog_flag
     *
     * @return bool
     */
    public function getCatalogFlag()
    {
        return $this->container['catalog_flag'];
    }

    /**
     * Sets catalog_flag
     *
     * @param bool $catalog_flag catalog_flag
     *
     * @return $this
     */
    public function setCatalogFlag($catalog_flag)
    {
        $this->container['catalog_flag'] = $catalog_flag;

        return $this;
    }

    /**
     * Gets build_on_demand_transfer_type
     *
     * @return string
     */
    public function getBuildOnDemandTransferType()
    {
        return $this->container['build_on_demand_transfer_type'];
    }

    /**
     * Sets build_on_demand_transfer_type
     *
     * @param string $build_on_demand_transfer_type build_on_demand_transfer_type
     *
     * @return $this
     */
    public function setBuildOnDemandTransferType($build_on_demand_transfer_type)
    {
        $this->container['build_on_demand_transfer_type'] = $build_on_demand_transfer_type;

        return $this;
    }

    /**
     * Gets core_charge
     *
     * @return double
     */
    public function getCoreCharge()
    {
        return $this->container['core_charge'];
    }

    /**
     * Sets core_charge
     *
     * @param double $core_charge core_charge
     *
     * @return $this
     */
    public function setCoreCharge($core_charge)
    {
        $this->container['core_charge'] = $core_charge;

        return $this;
    }

    /**
     * Gets customer_core_grace_flag
     *
     * @return bool
     */
    public function getCustomerCoreGraceFlag()
    {
        return $this->container['customer_core_grace_flag'];
    }

    /**
     * Sets customer_core_grace_flag
     *
     * @param bool $customer_core_grace_flag customer_core_grace_flag
     *
     * @return $this
     */
    public function setCustomerCoreGraceFlag($customer_core_grace_flag)
    {
        $this->container['customer_core_grace_flag'] = $customer_core_grace_flag;

        return $this;
    }

    /**
     * Gets customer_core_grace_period
     *
     * @return int
     */
    public function getCustomerCoreGracePeriod()
    {
        return $this->container['customer_core_grace_period'];
    }

    /**
     * Sets customer_core_grace_period
     *
     * @param int $customer_core_grace_period customer_core_grace_period
     *
     * @return $this
     */
    public function setCustomerCoreGracePeriod($customer_core_grace_period)
    {
        $this->container['customer_core_grace_period'] = $customer_core_grace_period;

        return $this;
    }

    /**
     * Gets dirty_core_product
     *
     * @return string
     */
    public function getDirtyCoreProduct()
    {
        return $this->container['dirty_core_product'];
    }

    /**
     * Sets dirty_core_product
     *
     * @param string $dirty_core_product dirty_core_product
     *
     * @return $this
     */
    public function setDirtyCoreProduct($dirty_core_product)
    {
        $this->container['dirty_core_product'] = $dirty_core_product;

        return $this;
    }

    /**
     * Gets entered_date
     *
     * @return \DateTime
     */
    public function getEnteredDate()
    {
        return $this->container['entered_date'];
    }

    /**
     * Sets entered_date
     *
     * @param \DateTime $entered_date entered_date
     *
     * @return $this
     */
    public function setEnteredDate($entered_date)
    {
        $this->container['entered_date'] = $entered_date;

        return $this;
    }

    /**
     * Gets exponents_on_invoice_flag
     *
     * @return bool
     */
    public function getExponentsOnInvoiceFlag()
    {
        return $this->container['exponents_on_invoice_flag'];
    }

    /**
     * Sets exponents_on_invoice_flag
     *
     * @param bool $exponents_on_invoice_flag exponents_on_invoice_flag
     *
     * @return $this
     */
    public function setExponentsOnInvoiceFlag($exponents_on_invoice_flag)
    {
        $this->container['exponents_on_invoice_flag'] = $exponents_on_invoice_flag;

        return $this;
    }

    /**
     * Gets special_cost_record_number
     *
     * @return int
     */
    public function getSpecialCostRecordNumber()
    {
        return $this->container['special_cost_record_number'];
    }

    /**
     * Sets special_cost_record_number
     *
     * @param int $special_cost_record_number special_cost_record_number
     *
     * @return $this
     */
    public function setSpecialCostRecordNumber($special_cost_record_number)
    {
        $this->container['special_cost_record_number'] = $special_cost_record_number;

        return $this;
    }

    /**
     * Gets units_per_stocking
     *
     * @return double
     */
    public function getUnitsPerStocking()
    {
        return $this->container['units_per_stocking'];
    }

    /**
     * Sets units_per_stocking
     *
     * @param double $units_per_stocking units_per_stocking
     *
     * @return $this
     */
    public function setUnitsPerStocking($units_per_stocking)
    {
        $this->container['units_per_stocking'] = $units_per_stocking;

        return $this;
    }

    /**
     * Gets price_cost_per
     *
     * @return string
     */
    public function getPriceCostPer()
    {
        return $this->container['price_cost_per'];
    }

    /**
     * Sets price_cost_per
     *
     * @param string $price_cost_per price_cost_per
     *
     * @return $this
     */
    public function setPriceCostPer($price_cost_per)
    {
        $this->container['price_cost_per'] = $price_cost_per;

        return $this;
    }

    /**
     * Gets special_conversion_type
     *
     * @return string
     */
    public function getSpecialConversionType()
    {
        return $this->container['special_conversion_type'];
    }

    /**
     * Sets special_conversion_type
     *
     * @param string $special_conversion_type special_conversion_type
     *
     * @return $this
     */
    public function setSpecialConversionType($special_conversion_type)
    {
        $this->container['special_conversion_type'] = $special_conversion_type;

        return $this;
    }

    /**
     * Gets special_conversion_factor
     *
     * @return int
     */
    public function getSpecialConversionFactor()
    {
        return $this->container['special_conversion_factor'];
    }

    /**
     * Sets special_conversion_factor
     *
     * @param int $special_conversion_factor special_conversion_factor
     *
     * @return $this
     */
    public function setSpecialConversionFactor($special_conversion_factor)
    {
        $this->container['special_conversion_factor'] = $special_conversion_factor;

        return $this;
    }

    /**
     * Gets implied_core_product
     *
     * @return string
     */
    public function getImpliedCoreProduct()
    {
        return $this->container['implied_core_product'];
    }

    /**
     * Sets implied_core_product
     *
     * @param string $implied_core_product implied_core_product
     *
     * @return $this
     */
    public function setImpliedCoreProduct($implied_core_product)
    {
        $this->container['implied_core_product'] = $implied_core_product;

        return $this;
    }

    /**
     * Gets kit_non_stock_required_flag
     *
     * @return bool
     */
    public function getKitNonStockRequiredFlag()
    {
        return $this->container['kit_non_stock_required_flag'];
    }

    /**
     * Sets kit_non_stock_required_flag
     *
     * @param bool $kit_non_stock_required_flag kit_non_stock_required_flag
     *
     * @return $this
     */
    public function setKitNonStockRequiredFlag($kit_non_stock_required_flag)
    {
        $this->container['kit_non_stock_required_flag'] = $kit_non_stock_required_flag;

        return $this;
    }

    /**
     * Gets kit_roll_type
     *
     * @return string
     */
    public function getKitRollType()
    {
        return $this->container['kit_roll_type'];
    }

    /**
     * Sets kit_roll_type
     *
     * @param string $kit_roll_type kit_roll_type
     *
     * @return $this
     */
    public function setKitRollType($kit_roll_type)
    {
        $this->container['kit_roll_type'] = $kit_roll_type;

        return $this;
    }

    /**
     * Gets memo_mix_flag
     *
     * @return bool
     */
    public function getMemoMixFlag()
    {
        return $this->container['memo_mix_flag'];
    }

    /**
     * Sets memo_mix_flag
     *
     * @param bool $memo_mix_flag memo_mix_flag
     *
     * @return $this
     */
    public function setMemoMixFlag($memo_mix_flag)
    {
        $this->container['memo_mix_flag'] = $memo_mix_flag;

        return $this;
    }

    /**
     * Gets msds_change_date
     *
     * @return \DateTime
     */
    public function getMsdsChangeDate()
    {
        return $this->container['msds_change_date'];
    }

    /**
     * Sets msds_change_date
     *
     * @param \DateTime $msds_change_date msds_change_date
     *
     * @return $this
     */
    public function setMsdsChangeDate($msds_change_date)
    {
        $this->container['msds_change_date'] = $msds_change_date;

        return $this;
    }

    /**
     * Gets msds_flag
     *
     * @return bool
     */
    public function getMsdsFlag()
    {
        return $this->container['msds_flag'];
    }

    /**
     * Sets msds_flag
     *
     * @param bool $msds_flag msds_flag
     *
     * @return $this
     */
    public function setMsdsFlag($msds_flag)
    {
        $this->container['msds_flag'] = $msds_flag;

        return $this;
    }

    /**
     * Gets msds_sheet_number
     *
     * @return string
     */
    public function getMsdsSheetNumber()
    {
        return $this->container['msds_sheet_number'];
    }

    /**
     * Sets msds_sheet_number
     *
     * @param string $msds_sheet_number msds_sheet_number
     *
     * @return $this
     */
    public function setMsdsSheetNumber($msds_sheet_number)
    {
        $this->container['msds_sheet_number'] = $msds_sheet_number;

        return $this;
    }

    /**
     * Gets random_mix_flag
     *
     * @return bool
     */
    public function getRandomMixFlag()
    {
        return $this->container['random_mix_flag'];
    }

    /**
     * Sets random_mix_flag
     *
     * @param bool $random_mix_flag random_mix_flag
     *
     * @return $this
     */
    public function setRandomMixFlag($random_mix_flag)
    {
        $this->container['random_mix_flag'] = $random_mix_flag;

        return $this;
    }

    /**
     * Gets selling_multiplier
     *
     * @return int
     */
    public function getSellingMultiplier()
    {
        return $this->container['selling_multiplier'];
    }

    /**
     * Sets selling_multiplier
     *
     * @param int $selling_multiplier selling_multiplier
     *
     * @return $this
     */
    public function setSellingMultiplier($selling_multiplier)
    {
        $this->container['selling_multiplier'] = $selling_multiplier;

        return $this;
    }

    /**
     * Gets tied_component_print
     *
     * @return string
     */
    public function getTiedComponentPrint()
    {
        return $this->container['tied_component_print'];
    }

    /**
     * Sets tied_component_print
     *
     * @param string $tied_component_print tied_component_print
     *
     * @return $this
     */
    public function setTiedComponentPrint($tied_component_print)
    {
        $this->container['tied_component_print'] = $tied_component_print;

        return $this;
    }

    /**
     * Gets warranty_length
     *
     * @return int
     */
    public function getWarrantyLength()
    {
        return $this->container['warranty_length'];
    }

    /**
     * Sets warranty_length
     *
     * @param int $warranty_length warranty_length
     *
     * @return $this
     */
    public function setWarrantyLength($warranty_length)
    {
        $this->container['warranty_length'] = $warranty_length;

        return $this;
    }

    /**
     * Gets warranty_type
     *
     * @return string
     */
    public function getWarrantyType()
    {
        return $this->container['warranty_type'];
    }

    /**
     * Sets warranty_type
     *
     * @param string $warranty_type warranty_type
     *
     * @return $this
     */
    public function setWarrantyType($warranty_type)
    {
        $this->container['warranty_type'] = $warranty_type;

        return $this;
    }

    /**
     * Gets web_page
     *
     * @return string
     */
    public function getWebPage()
    {
        return $this->container['web_page'];
    }

    /**
     * Sets web_page
     *
     * @param string $web_page web_page
     *
     * @return $this
     */
    public function setWebPage($web_page)
    {
        $this->container['web_page'] = $web_page;

        return $this;
    }

    /**
     * Gets web_page_external
     *
     * @return string
     */
    public function getWebPageExternal()
    {
        return $this->container['web_page_external'];
    }

    /**
     * Sets web_page_external
     *
     * @param string $web_page_external web_page_external
     *
     * @return $this
     */
    public function setWebPageExternal($web_page_external)
    {
        $this->container['web_page_external'] = $web_page_external;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return string
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param string $last_update last_update
     *
     * @return $this
     */
    public function setLastUpdate($last_update)
    {
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets t_outfieldvalue
     *
     * @return \Swagger\Client\Model\TOutfieldvalueResp
     */
    public function getTOutfieldvalue()
    {
        return $this->container['t_outfieldvalue'];
    }

    /**
     * Sets t_outfieldvalue
     *
     * @param \Swagger\Client\Model\TOutfieldvalueResp $t_outfieldvalue t_outfieldvalue
     *
     * @return $this
     */
    public function setTOutfieldvalue($t_outfieldvalue)
    {
        $this->container['t_outfieldvalue'] = $t_outfieldvalue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


