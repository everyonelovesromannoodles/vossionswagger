<?php
/**
 * TShiptolstv3
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TShiptolstv3 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TShiptolstv3 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-shiptolstv3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'custno' => 'double',
        'shipto' => 'string',
        'name' => 'string',
        'addr1' => 'string',
        'addr2' => 'string',
        'addr3' => 'string',
        'addr4' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zipcd' => 'string',
        'phoneno' => 'string',
        'notesfl' => 'string',
        'sortfld' => 'string',
        'contact' => 'string',
        'countrycd' => 'string',
        'whse' => 'string',
        'shipviaty' => 'string',
        'whseseqcd' => 'string',
        'prodrestrict' => 'string',
        'poreqfl' => 'bool',
        'custpo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'custno' => 'double',
        'shipto' => null,
        'name' => null,
        'addr1' => null,
        'addr2' => null,
        'addr3' => null,
        'addr4' => null,
        'city' => null,
        'state' => null,
        'zipcd' => null,
        'phoneno' => null,
        'notesfl' => null,
        'sortfld' => null,
        'contact' => null,
        'countrycd' => null,
        'whse' => null,
        'shipviaty' => null,
        'whseseqcd' => null,
        'prodrestrict' => null,
        'poreqfl' => null,
        'custpo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'custno' => 'custno',
        'shipto' => 'shipto',
        'name' => 'name',
        'addr1' => 'addr1',
        'addr2' => 'addr2',
        'addr3' => 'addr3',
        'addr4' => 'addr4',
        'city' => 'city',
        'state' => 'state',
        'zipcd' => 'zipcd',
        'phoneno' => 'phoneno',
        'notesfl' => 'notesfl',
        'sortfld' => 'sortfld',
        'contact' => 'contact',
        'countrycd' => 'countrycd',
        'whse' => 'whse',
        'shipviaty' => 'shipviaty',
        'whseseqcd' => 'whseseqcd',
        'prodrestrict' => 'prodrestrict',
        'poreqfl' => 'poreqfl',
        'custpo' => 'custpo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'custno' => 'setCustno',
        'shipto' => 'setShipto',
        'name' => 'setName',
        'addr1' => 'setAddr1',
        'addr2' => 'setAddr2',
        'addr3' => 'setAddr3',
        'addr4' => 'setAddr4',
        'city' => 'setCity',
        'state' => 'setState',
        'zipcd' => 'setZipcd',
        'phoneno' => 'setPhoneno',
        'notesfl' => 'setNotesfl',
        'sortfld' => 'setSortfld',
        'contact' => 'setContact',
        'countrycd' => 'setCountrycd',
        'whse' => 'setWhse',
        'shipviaty' => 'setShipviaty',
        'whseseqcd' => 'setWhseseqcd',
        'prodrestrict' => 'setProdrestrict',
        'poreqfl' => 'setPoreqfl',
        'custpo' => 'setCustpo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'custno' => 'getCustno',
        'shipto' => 'getShipto',
        'name' => 'getName',
        'addr1' => 'getAddr1',
        'addr2' => 'getAddr2',
        'addr3' => 'getAddr3',
        'addr4' => 'getAddr4',
        'city' => 'getCity',
        'state' => 'getState',
        'zipcd' => 'getZipcd',
        'phoneno' => 'getPhoneno',
        'notesfl' => 'getNotesfl',
        'sortfld' => 'getSortfld',
        'contact' => 'getContact',
        'countrycd' => 'getCountrycd',
        'whse' => 'getWhse',
        'shipviaty' => 'getShipviaty',
        'whseseqcd' => 'getWhseseqcd',
        'prodrestrict' => 'getProdrestrict',
        'poreqfl' => 'getPoreqfl',
        'custpo' => 'getCustpo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['custno'] = isset($data['custno']) ? $data['custno'] : null;
        $this->container['shipto'] = isset($data['shipto']) ? $data['shipto'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['addr1'] = isset($data['addr1']) ? $data['addr1'] : null;
        $this->container['addr2'] = isset($data['addr2']) ? $data['addr2'] : null;
        $this->container['addr3'] = isset($data['addr3']) ? $data['addr3'] : null;
        $this->container['addr4'] = isset($data['addr4']) ? $data['addr4'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['zipcd'] = isset($data['zipcd']) ? $data['zipcd'] : null;
        $this->container['phoneno'] = isset($data['phoneno']) ? $data['phoneno'] : null;
        $this->container['notesfl'] = isset($data['notesfl']) ? $data['notesfl'] : null;
        $this->container['sortfld'] = isset($data['sortfld']) ? $data['sortfld'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['countrycd'] = isset($data['countrycd']) ? $data['countrycd'] : null;
        $this->container['whse'] = isset($data['whse']) ? $data['whse'] : null;
        $this->container['shipviaty'] = isset($data['shipviaty']) ? $data['shipviaty'] : null;
        $this->container['whseseqcd'] = isset($data['whseseqcd']) ? $data['whseseqcd'] : null;
        $this->container['prodrestrict'] = isset($data['prodrestrict']) ? $data['prodrestrict'] : null;
        $this->container['poreqfl'] = isset($data['poreqfl']) ? $data['poreqfl'] : null;
        $this->container['custpo'] = isset($data['custpo']) ? $data['custpo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets custno
     *
     * @return double
     */
    public function getCustno()
    {
        return $this->container['custno'];
    }

    /**
     * Sets custno
     *
     * @param double $custno custno
     *
     * @return $this
     */
    public function setCustno($custno)
    {
        $this->container['custno'] = $custno;

        return $this;
    }

    /**
     * Gets shipto
     *
     * @return string
     */
    public function getShipto()
    {
        return $this->container['shipto'];
    }

    /**
     * Sets shipto
     *
     * @param string $shipto shipto
     *
     * @return $this
     */
    public function setShipto($shipto)
    {
        $this->container['shipto'] = $shipto;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets addr1
     *
     * @return string
     */
    public function getAddr1()
    {
        return $this->container['addr1'];
    }

    /**
     * Sets addr1
     *
     * @param string $addr1 addr1
     *
     * @return $this
     */
    public function setAddr1($addr1)
    {
        $this->container['addr1'] = $addr1;

        return $this;
    }

    /**
     * Gets addr2
     *
     * @return string
     */
    public function getAddr2()
    {
        return $this->container['addr2'];
    }

    /**
     * Sets addr2
     *
     * @param string $addr2 addr2
     *
     * @return $this
     */
    public function setAddr2($addr2)
    {
        $this->container['addr2'] = $addr2;

        return $this;
    }

    /**
     * Gets addr3
     *
     * @return string
     */
    public function getAddr3()
    {
        return $this->container['addr3'];
    }

    /**
     * Sets addr3
     *
     * @param string $addr3 addr3
     *
     * @return $this
     */
    public function setAddr3($addr3)
    {
        $this->container['addr3'] = $addr3;

        return $this;
    }

    /**
     * Gets addr4
     *
     * @return string
     */
    public function getAddr4()
    {
        return $this->container['addr4'];
    }

    /**
     * Sets addr4
     *
     * @param string $addr4 addr4
     *
     * @return $this
     */
    public function setAddr4($addr4)
    {
        $this->container['addr4'] = $addr4;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zipcd
     *
     * @return string
     */
    public function getZipcd()
    {
        return $this->container['zipcd'];
    }

    /**
     * Sets zipcd
     *
     * @param string $zipcd zipcd
     *
     * @return $this
     */
    public function setZipcd($zipcd)
    {
        $this->container['zipcd'] = $zipcd;

        return $this;
    }

    /**
     * Gets phoneno
     *
     * @return string
     */
    public function getPhoneno()
    {
        return $this->container['phoneno'];
    }

    /**
     * Sets phoneno
     *
     * @param string $phoneno phoneno
     *
     * @return $this
     */
    public function setPhoneno($phoneno)
    {
        $this->container['phoneno'] = $phoneno;

        return $this;
    }

    /**
     * Gets notesfl
     *
     * @return string
     */
    public function getNotesfl()
    {
        return $this->container['notesfl'];
    }

    /**
     * Sets notesfl
     *
     * @param string $notesfl notesfl
     *
     * @return $this
     */
    public function setNotesfl($notesfl)
    {
        $this->container['notesfl'] = $notesfl;

        return $this;
    }

    /**
     * Gets sortfld
     *
     * @return string
     */
    public function getSortfld()
    {
        return $this->container['sortfld'];
    }

    /**
     * Sets sortfld
     *
     * @param string $sortfld sortfld
     *
     * @return $this
     */
    public function setSortfld($sortfld)
    {
        $this->container['sortfld'] = $sortfld;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return string
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param string $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets countrycd
     *
     * @return string
     */
    public function getCountrycd()
    {
        return $this->container['countrycd'];
    }

    /**
     * Sets countrycd
     *
     * @param string $countrycd countrycd
     *
     * @return $this
     */
    public function setCountrycd($countrycd)
    {
        $this->container['countrycd'] = $countrycd;

        return $this;
    }

    /**
     * Gets whse
     *
     * @return string
     */
    public function getWhse()
    {
        return $this->container['whse'];
    }

    /**
     * Sets whse
     *
     * @param string $whse whse
     *
     * @return $this
     */
    public function setWhse($whse)
    {
        $this->container['whse'] = $whse;

        return $this;
    }

    /**
     * Gets shipviaty
     *
     * @return string
     */
    public function getShipviaty()
    {
        return $this->container['shipviaty'];
    }

    /**
     * Sets shipviaty
     *
     * @param string $shipviaty shipviaty
     *
     * @return $this
     */
    public function setShipviaty($shipviaty)
    {
        $this->container['shipviaty'] = $shipviaty;

        return $this;
    }

    /**
     * Gets whseseqcd
     *
     * @return string
     */
    public function getWhseseqcd()
    {
        return $this->container['whseseqcd'];
    }

    /**
     * Sets whseseqcd
     *
     * @param string $whseseqcd whseseqcd
     *
     * @return $this
     */
    public function setWhseseqcd($whseseqcd)
    {
        $this->container['whseseqcd'] = $whseseqcd;

        return $this;
    }

    /**
     * Gets prodrestrict
     *
     * @return string
     */
    public function getProdrestrict()
    {
        return $this->container['prodrestrict'];
    }

    /**
     * Sets prodrestrict
     *
     * @param string $prodrestrict prodrestrict
     *
     * @return $this
     */
    public function setProdrestrict($prodrestrict)
    {
        $this->container['prodrestrict'] = $prodrestrict;

        return $this;
    }

    /**
     * Gets poreqfl
     *
     * @return bool
     */
    public function getPoreqfl()
    {
        return $this->container['poreqfl'];
    }

    /**
     * Sets poreqfl
     *
     * @param bool $poreqfl poreqfl
     *
     * @return $this
     */
    public function setPoreqfl($poreqfl)
    {
        $this->container['poreqfl'] = $poreqfl;

        return $this;
    }

    /**
     * Gets custpo
     *
     * @return string
     */
    public function getCustpo()
    {
        return $this->container['custpo'];
    }

    /**
     * Sets custpo
     *
     * @param string $custpo custpo
     *
     * @return $this
     */
    public function setCustpo($custpo)
    {
        $this->container['custpo'] = $custpo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


