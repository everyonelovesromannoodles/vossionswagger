<?php
/**
 * TOutAddrValidation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TOutAddrValidation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TOutAddrValidation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-out-addr-validation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'streetaddr' => 'string',
        'streetaddr2' => 'string',
        'streetaddr3' => 'string',
        'city' => 'string',
        'country' => 'string',
        'county' => 'string',
        'geocd' => 'int',
        'state' => 'string',
        'zipcd' => 'string',
        'zipcdext' => 'string',
        'docidentifier' => 'string',
        'addressoverfl' => 'bool',
        'customparam' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'streetaddr' => null,
        'streetaddr2' => null,
        'streetaddr3' => null,
        'city' => null,
        'country' => null,
        'county' => null,
        'geocd' => 'int64',
        'state' => null,
        'zipcd' => null,
        'zipcdext' => null,
        'docidentifier' => null,
        'addressoverfl' => null,
        'customparam' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'streetaddr' => 'streetaddr',
        'streetaddr2' => 'streetaddr2',
        'streetaddr3' => 'streetaddr3',
        'city' => 'city',
        'country' => 'country',
        'county' => 'county',
        'geocd' => 'geocd',
        'state' => 'state',
        'zipcd' => 'zipcd',
        'zipcdext' => 'zipcdext',
        'docidentifier' => 'docidentifier',
        'addressoverfl' => 'addressoverfl',
        'customparam' => 'customparam'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'streetaddr' => 'setStreetaddr',
        'streetaddr2' => 'setStreetaddr2',
        'streetaddr3' => 'setStreetaddr3',
        'city' => 'setCity',
        'country' => 'setCountry',
        'county' => 'setCounty',
        'geocd' => 'setGeocd',
        'state' => 'setState',
        'zipcd' => 'setZipcd',
        'zipcdext' => 'setZipcdext',
        'docidentifier' => 'setDocidentifier',
        'addressoverfl' => 'setAddressoverfl',
        'customparam' => 'setCustomparam'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'streetaddr' => 'getStreetaddr',
        'streetaddr2' => 'getStreetaddr2',
        'streetaddr3' => 'getStreetaddr3',
        'city' => 'getCity',
        'country' => 'getCountry',
        'county' => 'getCounty',
        'geocd' => 'getGeocd',
        'state' => 'getState',
        'zipcd' => 'getZipcd',
        'zipcdext' => 'getZipcdext',
        'docidentifier' => 'getDocidentifier',
        'addressoverfl' => 'getAddressoverfl',
        'customparam' => 'getCustomparam'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['streetaddr'] = isset($data['streetaddr']) ? $data['streetaddr'] : null;
        $this->container['streetaddr2'] = isset($data['streetaddr2']) ? $data['streetaddr2'] : null;
        $this->container['streetaddr3'] = isset($data['streetaddr3']) ? $data['streetaddr3'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['county'] = isset($data['county']) ? $data['county'] : null;
        $this->container['geocd'] = isset($data['geocd']) ? $data['geocd'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['zipcd'] = isset($data['zipcd']) ? $data['zipcd'] : null;
        $this->container['zipcdext'] = isset($data['zipcdext']) ? $data['zipcdext'] : null;
        $this->container['docidentifier'] = isset($data['docidentifier']) ? $data['docidentifier'] : null;
        $this->container['addressoverfl'] = isset($data['addressoverfl']) ? $data['addressoverfl'] : null;
        $this->container['customparam'] = isset($data['customparam']) ? $data['customparam'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets streetaddr
     *
     * @return string
     */
    public function getStreetaddr()
    {
        return $this->container['streetaddr'];
    }

    /**
     * Sets streetaddr
     *
     * @param string $streetaddr streetaddr
     *
     * @return $this
     */
    public function setStreetaddr($streetaddr)
    {
        $this->container['streetaddr'] = $streetaddr;

        return $this;
    }

    /**
     * Gets streetaddr2
     *
     * @return string
     */
    public function getStreetaddr2()
    {
        return $this->container['streetaddr2'];
    }

    /**
     * Sets streetaddr2
     *
     * @param string $streetaddr2 streetaddr2
     *
     * @return $this
     */
    public function setStreetaddr2($streetaddr2)
    {
        $this->container['streetaddr2'] = $streetaddr2;

        return $this;
    }

    /**
     * Gets streetaddr3
     *
     * @return string
     */
    public function getStreetaddr3()
    {
        return $this->container['streetaddr3'];
    }

    /**
     * Sets streetaddr3
     *
     * @param string $streetaddr3 streetaddr3
     *
     * @return $this
     */
    public function setStreetaddr3($streetaddr3)
    {
        $this->container['streetaddr3'] = $streetaddr3;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string $county county
     *
     * @return $this
     */
    public function setCounty($county)
    {
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets geocd
     *
     * @return int
     */
    public function getGeocd()
    {
        return $this->container['geocd'];
    }

    /**
     * Sets geocd
     *
     * @param int $geocd geocd
     *
     * @return $this
     */
    public function setGeocd($geocd)
    {
        $this->container['geocd'] = $geocd;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zipcd
     *
     * @return string
     */
    public function getZipcd()
    {
        return $this->container['zipcd'];
    }

    /**
     * Sets zipcd
     *
     * @param string $zipcd zipcd
     *
     * @return $this
     */
    public function setZipcd($zipcd)
    {
        $this->container['zipcd'] = $zipcd;

        return $this;
    }

    /**
     * Gets zipcdext
     *
     * @return string
     */
    public function getZipcdext()
    {
        return $this->container['zipcdext'];
    }

    /**
     * Sets zipcdext
     *
     * @param string $zipcdext zipcdext
     *
     * @return $this
     */
    public function setZipcdext($zipcdext)
    {
        $this->container['zipcdext'] = $zipcdext;

        return $this;
    }

    /**
     * Gets docidentifier
     *
     * @return string
     */
    public function getDocidentifier()
    {
        return $this->container['docidentifier'];
    }

    /**
     * Sets docidentifier
     *
     * @param string $docidentifier docidentifier
     *
     * @return $this
     */
    public function setDocidentifier($docidentifier)
    {
        $this->container['docidentifier'] = $docidentifier;

        return $this;
    }

    /**
     * Gets addressoverfl
     *
     * @return bool
     */
    public function getAddressoverfl()
    {
        return $this->container['addressoverfl'];
    }

    /**
     * Sets addressoverfl
     *
     * @param bool $addressoverfl addressoverfl
     *
     * @return $this
     */
    public function setAddressoverfl($addressoverfl)
    {
        $this->container['addressoverfl'] = $addressoverfl;

        return $this;
    }

    /**
     * Gets customparam
     *
     * @return string
     */
    public function getCustomparam()
    {
        return $this->container['customparam'];
    }

    /**
     * Sets customparam
     *
     * @param string $customparam customparam
     *
     * @return $this
     */
    public function setCustomparam($customparam)
    {
        $this->container['customparam'] = $customparam;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


