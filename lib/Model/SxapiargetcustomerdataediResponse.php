<?php
/**
 * SxapiargetcustomerdataediResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SxapiargetcustomerdataediResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SxapiargetcustomerdataediResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapiargetcustomerdataedi_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'c_error_message' => 'string',
        'acknowledge_type' => 'string',
        'advance_ship_notice_group' => 'string',
        'advance_ship_notice_send_to' => 'string',
        'e_comm_warehouse' => 'string',
        'acknowledge_version' => 'string',
        'catalog_product_flag' => 'bool',
        'change_reason_code' => 'string',
        'invoice_version' => 'string',
        'jit_order_flag' => 'bool',
        'net_work' => 'string',
        'non_stock_product_flag' => 'bool',
        'order_statuscode' => 'string',
        'partner_address' => 'string',
        'partner' => 'string',
        'price_override_flag' => 'bool',
        'print_notes_flag' => 'bool',
        'terms_override_flag' => 'bool',
        'your_address' => 'string',
        'invoice_type' => 'string',
        'proposal_type' => 'string',
        'statement_type' => 'string',
        'web_page' => 'string',
        'web_page_external' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'c_error_message' => null,
        'acknowledge_type' => null,
        'advance_ship_notice_group' => null,
        'advance_ship_notice_send_to' => null,
        'e_comm_warehouse' => null,
        'acknowledge_version' => null,
        'catalog_product_flag' => null,
        'change_reason_code' => null,
        'invoice_version' => null,
        'jit_order_flag' => null,
        'net_work' => null,
        'non_stock_product_flag' => null,
        'order_statuscode' => null,
        'partner_address' => null,
        'partner' => null,
        'price_override_flag' => null,
        'print_notes_flag' => null,
        'terms_override_flag' => null,
        'your_address' => null,
        'invoice_type' => null,
        'proposal_type' => null,
        'statement_type' => null,
        'web_page' => null,
        'web_page_external' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c_error_message' => 'cErrorMessage',
        'acknowledge_type' => 'acknowledgeType',
        'advance_ship_notice_group' => 'advanceShipNoticeGroup',
        'advance_ship_notice_send_to' => 'advanceShipNoticeSendTo',
        'e_comm_warehouse' => 'eCommWarehouse',
        'acknowledge_version' => 'acknowledgeVersion',
        'catalog_product_flag' => 'catalogProductFlag',
        'change_reason_code' => 'changeReasonCode',
        'invoice_version' => 'invoiceVersion',
        'jit_order_flag' => 'jitOrderFlag',
        'net_work' => 'netWork',
        'non_stock_product_flag' => 'nonStockProductFlag',
        'order_statuscode' => 'orderStatuscode',
        'partner_address' => 'partnerAddress',
        'partner' => 'partner',
        'price_override_flag' => 'priceOverrideFlag',
        'print_notes_flag' => 'printNotesFlag',
        'terms_override_flag' => 'termsOverrideFlag',
        'your_address' => 'yourAddress',
        'invoice_type' => 'invoiceType',
        'proposal_type' => 'proposalType',
        'statement_type' => 'statementType',
        'web_page' => 'webPage',
        'web_page_external' => 'webPageExternal'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c_error_message' => 'setCErrorMessage',
        'acknowledge_type' => 'setAcknowledgeType',
        'advance_ship_notice_group' => 'setAdvanceShipNoticeGroup',
        'advance_ship_notice_send_to' => 'setAdvanceShipNoticeSendTo',
        'e_comm_warehouse' => 'setECommWarehouse',
        'acknowledge_version' => 'setAcknowledgeVersion',
        'catalog_product_flag' => 'setCatalogProductFlag',
        'change_reason_code' => 'setChangeReasonCode',
        'invoice_version' => 'setInvoiceVersion',
        'jit_order_flag' => 'setJitOrderFlag',
        'net_work' => 'setNetWork',
        'non_stock_product_flag' => 'setNonStockProductFlag',
        'order_statuscode' => 'setOrderStatuscode',
        'partner_address' => 'setPartnerAddress',
        'partner' => 'setPartner',
        'price_override_flag' => 'setPriceOverrideFlag',
        'print_notes_flag' => 'setPrintNotesFlag',
        'terms_override_flag' => 'setTermsOverrideFlag',
        'your_address' => 'setYourAddress',
        'invoice_type' => 'setInvoiceType',
        'proposal_type' => 'setProposalType',
        'statement_type' => 'setStatementType',
        'web_page' => 'setWebPage',
        'web_page_external' => 'setWebPageExternal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c_error_message' => 'getCErrorMessage',
        'acknowledge_type' => 'getAcknowledgeType',
        'advance_ship_notice_group' => 'getAdvanceShipNoticeGroup',
        'advance_ship_notice_send_to' => 'getAdvanceShipNoticeSendTo',
        'e_comm_warehouse' => 'getECommWarehouse',
        'acknowledge_version' => 'getAcknowledgeVersion',
        'catalog_product_flag' => 'getCatalogProductFlag',
        'change_reason_code' => 'getChangeReasonCode',
        'invoice_version' => 'getInvoiceVersion',
        'jit_order_flag' => 'getJitOrderFlag',
        'net_work' => 'getNetWork',
        'non_stock_product_flag' => 'getNonStockProductFlag',
        'order_statuscode' => 'getOrderStatuscode',
        'partner_address' => 'getPartnerAddress',
        'partner' => 'getPartner',
        'price_override_flag' => 'getPriceOverrideFlag',
        'print_notes_flag' => 'getPrintNotesFlag',
        'terms_override_flag' => 'getTermsOverrideFlag',
        'your_address' => 'getYourAddress',
        'invoice_type' => 'getInvoiceType',
        'proposal_type' => 'getProposalType',
        'statement_type' => 'getStatementType',
        'web_page' => 'getWebPage',
        'web_page_external' => 'getWebPageExternal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['c_error_message'] = isset($data['c_error_message']) ? $data['c_error_message'] : null;
        $this->container['acknowledge_type'] = isset($data['acknowledge_type']) ? $data['acknowledge_type'] : null;
        $this->container['advance_ship_notice_group'] = isset($data['advance_ship_notice_group']) ? $data['advance_ship_notice_group'] : null;
        $this->container['advance_ship_notice_send_to'] = isset($data['advance_ship_notice_send_to']) ? $data['advance_ship_notice_send_to'] : null;
        $this->container['e_comm_warehouse'] = isset($data['e_comm_warehouse']) ? $data['e_comm_warehouse'] : null;
        $this->container['acknowledge_version'] = isset($data['acknowledge_version']) ? $data['acknowledge_version'] : null;
        $this->container['catalog_product_flag'] = isset($data['catalog_product_flag']) ? $data['catalog_product_flag'] : null;
        $this->container['change_reason_code'] = isset($data['change_reason_code']) ? $data['change_reason_code'] : null;
        $this->container['invoice_version'] = isset($data['invoice_version']) ? $data['invoice_version'] : null;
        $this->container['jit_order_flag'] = isset($data['jit_order_flag']) ? $data['jit_order_flag'] : null;
        $this->container['net_work'] = isset($data['net_work']) ? $data['net_work'] : null;
        $this->container['non_stock_product_flag'] = isset($data['non_stock_product_flag']) ? $data['non_stock_product_flag'] : null;
        $this->container['order_statuscode'] = isset($data['order_statuscode']) ? $data['order_statuscode'] : null;
        $this->container['partner_address'] = isset($data['partner_address']) ? $data['partner_address'] : null;
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
        $this->container['price_override_flag'] = isset($data['price_override_flag']) ? $data['price_override_flag'] : null;
        $this->container['print_notes_flag'] = isset($data['print_notes_flag']) ? $data['print_notes_flag'] : null;
        $this->container['terms_override_flag'] = isset($data['terms_override_flag']) ? $data['terms_override_flag'] : null;
        $this->container['your_address'] = isset($data['your_address']) ? $data['your_address'] : null;
        $this->container['invoice_type'] = isset($data['invoice_type']) ? $data['invoice_type'] : null;
        $this->container['proposal_type'] = isset($data['proposal_type']) ? $data['proposal_type'] : null;
        $this->container['statement_type'] = isset($data['statement_type']) ? $data['statement_type'] : null;
        $this->container['web_page'] = isset($data['web_page']) ? $data['web_page'] : null;
        $this->container['web_page_external'] = isset($data['web_page_external']) ? $data['web_page_external'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c_error_message
     *
     * @return string
     */
    public function getCErrorMessage()
    {
        return $this->container['c_error_message'];
    }

    /**
     * Sets c_error_message
     *
     * @param string $c_error_message c_error_message
     *
     * @return $this
     */
    public function setCErrorMessage($c_error_message)
    {
        $this->container['c_error_message'] = $c_error_message;

        return $this;
    }

    /**
     * Gets acknowledge_type
     *
     * @return string
     */
    public function getAcknowledgeType()
    {
        return $this->container['acknowledge_type'];
    }

    /**
     * Sets acknowledge_type
     *
     * @param string $acknowledge_type acknowledge_type
     *
     * @return $this
     */
    public function setAcknowledgeType($acknowledge_type)
    {
        $this->container['acknowledge_type'] = $acknowledge_type;

        return $this;
    }

    /**
     * Gets advance_ship_notice_group
     *
     * @return string
     */
    public function getAdvanceShipNoticeGroup()
    {
        return $this->container['advance_ship_notice_group'];
    }

    /**
     * Sets advance_ship_notice_group
     *
     * @param string $advance_ship_notice_group advance_ship_notice_group
     *
     * @return $this
     */
    public function setAdvanceShipNoticeGroup($advance_ship_notice_group)
    {
        $this->container['advance_ship_notice_group'] = $advance_ship_notice_group;

        return $this;
    }

    /**
     * Gets advance_ship_notice_send_to
     *
     * @return string
     */
    public function getAdvanceShipNoticeSendTo()
    {
        return $this->container['advance_ship_notice_send_to'];
    }

    /**
     * Sets advance_ship_notice_send_to
     *
     * @param string $advance_ship_notice_send_to advance_ship_notice_send_to
     *
     * @return $this
     */
    public function setAdvanceShipNoticeSendTo($advance_ship_notice_send_to)
    {
        $this->container['advance_ship_notice_send_to'] = $advance_ship_notice_send_to;

        return $this;
    }

    /**
     * Gets e_comm_warehouse
     *
     * @return string
     */
    public function getECommWarehouse()
    {
        return $this->container['e_comm_warehouse'];
    }

    /**
     * Sets e_comm_warehouse
     *
     * @param string $e_comm_warehouse e_comm_warehouse
     *
     * @return $this
     */
    public function setECommWarehouse($e_comm_warehouse)
    {
        $this->container['e_comm_warehouse'] = $e_comm_warehouse;

        return $this;
    }

    /**
     * Gets acknowledge_version
     *
     * @return string
     */
    public function getAcknowledgeVersion()
    {
        return $this->container['acknowledge_version'];
    }

    /**
     * Sets acknowledge_version
     *
     * @param string $acknowledge_version acknowledge_version
     *
     * @return $this
     */
    public function setAcknowledgeVersion($acknowledge_version)
    {
        $this->container['acknowledge_version'] = $acknowledge_version;

        return $this;
    }

    /**
     * Gets catalog_product_flag
     *
     * @return bool
     */
    public function getCatalogProductFlag()
    {
        return $this->container['catalog_product_flag'];
    }

    /**
     * Sets catalog_product_flag
     *
     * @param bool $catalog_product_flag catalog_product_flag
     *
     * @return $this
     */
    public function setCatalogProductFlag($catalog_product_flag)
    {
        $this->container['catalog_product_flag'] = $catalog_product_flag;

        return $this;
    }

    /**
     * Gets change_reason_code
     *
     * @return string
     */
    public function getChangeReasonCode()
    {
        return $this->container['change_reason_code'];
    }

    /**
     * Sets change_reason_code
     *
     * @param string $change_reason_code change_reason_code
     *
     * @return $this
     */
    public function setChangeReasonCode($change_reason_code)
    {
        $this->container['change_reason_code'] = $change_reason_code;

        return $this;
    }

    /**
     * Gets invoice_version
     *
     * @return string
     */
    public function getInvoiceVersion()
    {
        return $this->container['invoice_version'];
    }

    /**
     * Sets invoice_version
     *
     * @param string $invoice_version invoice_version
     *
     * @return $this
     */
    public function setInvoiceVersion($invoice_version)
    {
        $this->container['invoice_version'] = $invoice_version;

        return $this;
    }

    /**
     * Gets jit_order_flag
     *
     * @return bool
     */
    public function getJitOrderFlag()
    {
        return $this->container['jit_order_flag'];
    }

    /**
     * Sets jit_order_flag
     *
     * @param bool $jit_order_flag jit_order_flag
     *
     * @return $this
     */
    public function setJitOrderFlag($jit_order_flag)
    {
        $this->container['jit_order_flag'] = $jit_order_flag;

        return $this;
    }

    /**
     * Gets net_work
     *
     * @return string
     */
    public function getNetWork()
    {
        return $this->container['net_work'];
    }

    /**
     * Sets net_work
     *
     * @param string $net_work net_work
     *
     * @return $this
     */
    public function setNetWork($net_work)
    {
        $this->container['net_work'] = $net_work;

        return $this;
    }

    /**
     * Gets non_stock_product_flag
     *
     * @return bool
     */
    public function getNonStockProductFlag()
    {
        return $this->container['non_stock_product_flag'];
    }

    /**
     * Sets non_stock_product_flag
     *
     * @param bool $non_stock_product_flag non_stock_product_flag
     *
     * @return $this
     */
    public function setNonStockProductFlag($non_stock_product_flag)
    {
        $this->container['non_stock_product_flag'] = $non_stock_product_flag;

        return $this;
    }

    /**
     * Gets order_statuscode
     *
     * @return string
     */
    public function getOrderStatuscode()
    {
        return $this->container['order_statuscode'];
    }

    /**
     * Sets order_statuscode
     *
     * @param string $order_statuscode order_statuscode
     *
     * @return $this
     */
    public function setOrderStatuscode($order_statuscode)
    {
        $this->container['order_statuscode'] = $order_statuscode;

        return $this;
    }

    /**
     * Gets partner_address
     *
     * @return string
     */
    public function getPartnerAddress()
    {
        return $this->container['partner_address'];
    }

    /**
     * Sets partner_address
     *
     * @param string $partner_address partner_address
     *
     * @return $this
     */
    public function setPartnerAddress($partner_address)
    {
        $this->container['partner_address'] = $partner_address;

        return $this;
    }

    /**
     * Gets partner
     *
     * @return string
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     *
     * @param string $partner partner
     *
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets price_override_flag
     *
     * @return bool
     */
    public function getPriceOverrideFlag()
    {
        return $this->container['price_override_flag'];
    }

    /**
     * Sets price_override_flag
     *
     * @param bool $price_override_flag price_override_flag
     *
     * @return $this
     */
    public function setPriceOverrideFlag($price_override_flag)
    {
        $this->container['price_override_flag'] = $price_override_flag;

        return $this;
    }

    /**
     * Gets print_notes_flag
     *
     * @return bool
     */
    public function getPrintNotesFlag()
    {
        return $this->container['print_notes_flag'];
    }

    /**
     * Sets print_notes_flag
     *
     * @param bool $print_notes_flag print_notes_flag
     *
     * @return $this
     */
    public function setPrintNotesFlag($print_notes_flag)
    {
        $this->container['print_notes_flag'] = $print_notes_flag;

        return $this;
    }

    /**
     * Gets terms_override_flag
     *
     * @return bool
     */
    public function getTermsOverrideFlag()
    {
        return $this->container['terms_override_flag'];
    }

    /**
     * Sets terms_override_flag
     *
     * @param bool $terms_override_flag terms_override_flag
     *
     * @return $this
     */
    public function setTermsOverrideFlag($terms_override_flag)
    {
        $this->container['terms_override_flag'] = $terms_override_flag;

        return $this;
    }

    /**
     * Gets your_address
     *
     * @return string
     */
    public function getYourAddress()
    {
        return $this->container['your_address'];
    }

    /**
     * Sets your_address
     *
     * @param string $your_address your_address
     *
     * @return $this
     */
    public function setYourAddress($your_address)
    {
        $this->container['your_address'] = $your_address;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return string
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param string $invoice_type invoice_type
     *
     * @return $this
     */
    public function setInvoiceType($invoice_type)
    {
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets proposal_type
     *
     * @return string
     */
    public function getProposalType()
    {
        return $this->container['proposal_type'];
    }

    /**
     * Sets proposal_type
     *
     * @param string $proposal_type proposal_type
     *
     * @return $this
     */
    public function setProposalType($proposal_type)
    {
        $this->container['proposal_type'] = $proposal_type;

        return $this;
    }

    /**
     * Gets statement_type
     *
     * @return string
     */
    public function getStatementType()
    {
        return $this->container['statement_type'];
    }

    /**
     * Sets statement_type
     *
     * @param string $statement_type statement_type
     *
     * @return $this
     */
    public function setStatementType($statement_type)
    {
        $this->container['statement_type'] = $statement_type;

        return $this;
    }

    /**
     * Gets web_page
     *
     * @return string
     */
    public function getWebPage()
    {
        return $this->container['web_page'];
    }

    /**
     * Sets web_page
     *
     * @param string $web_page web_page
     *
     * @return $this
     */
    public function setWebPage($web_page)
    {
        $this->container['web_page'] = $web_page;

        return $this;
    }

    /**
     * Gets web_page_external
     *
     * @return string
     */
    public function getWebPageExternal()
    {
        return $this->container['web_page_external'];
    }

    /**
     * Sets web_page_external
     *
     * @param string $web_page_external web_page_external
     *
     * @return $this
     */
    public function setWebPageExternal($web_page_external)
    {
        $this->container['web_page_external'] = $web_page_external;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


