<?php
/**
 * SxapiargetcustomerdatacreditResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SxapiargetcustomerdatacreditResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SxapiargetcustomerdatacreditResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapiargetcustomerdatacredit_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'c_error_message' => 'string',
        'credit_manager' => 'string',
        'credit_limit' => 'double',
        'hold_period_code' => 'int',
        'sell_type' => 'string',
        'avg_pay_days' => 'int',
        'no_past_due' => 'int',
        'no_payments' => 'int',
        'no_invoices' => 'int',
        'last_payment_amount' => 'double',
        'high_balance' => 'double',
        'order_balance' => 'double',
        'terms_type' => 'string',
        'terms_type_description' => 'string',
        'credit_established_date' => '\DateTime',
        'last_review_date' => '\DateTime',
        'next_review_date' => '\DateTime',
        'last_payment_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'c_error_message' => null,
        'credit_manager' => null,
        'credit_limit' => 'double',
        'hold_period_code' => 'int64',
        'sell_type' => null,
        'avg_pay_days' => 'int64',
        'no_past_due' => 'int64',
        'no_payments' => 'int64',
        'no_invoices' => 'int64',
        'last_payment_amount' => 'double',
        'high_balance' => 'double',
        'order_balance' => 'double',
        'terms_type' => null,
        'terms_type_description' => null,
        'credit_established_date' => 'date',
        'last_review_date' => 'date',
        'next_review_date' => 'date',
        'last_payment_date' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c_error_message' => 'cErrorMessage',
        'credit_manager' => 'creditManager',
        'credit_limit' => 'creditLimit',
        'hold_period_code' => 'holdPeriodCode',
        'sell_type' => 'sellType',
        'avg_pay_days' => 'avgPayDays',
        'no_past_due' => 'noPastDue',
        'no_payments' => 'noPayments',
        'no_invoices' => 'noInvoices',
        'last_payment_amount' => 'lastPaymentAmount',
        'high_balance' => 'highBalance',
        'order_balance' => 'orderBalance',
        'terms_type' => 'termsType',
        'terms_type_description' => 'termsTypeDescription',
        'credit_established_date' => 'creditEstablishedDate',
        'last_review_date' => 'lastReviewDate',
        'next_review_date' => 'nextReviewDate',
        'last_payment_date' => 'lastPaymentDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c_error_message' => 'setCErrorMessage',
        'credit_manager' => 'setCreditManager',
        'credit_limit' => 'setCreditLimit',
        'hold_period_code' => 'setHoldPeriodCode',
        'sell_type' => 'setSellType',
        'avg_pay_days' => 'setAvgPayDays',
        'no_past_due' => 'setNoPastDue',
        'no_payments' => 'setNoPayments',
        'no_invoices' => 'setNoInvoices',
        'last_payment_amount' => 'setLastPaymentAmount',
        'high_balance' => 'setHighBalance',
        'order_balance' => 'setOrderBalance',
        'terms_type' => 'setTermsType',
        'terms_type_description' => 'setTermsTypeDescription',
        'credit_established_date' => 'setCreditEstablishedDate',
        'last_review_date' => 'setLastReviewDate',
        'next_review_date' => 'setNextReviewDate',
        'last_payment_date' => 'setLastPaymentDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c_error_message' => 'getCErrorMessage',
        'credit_manager' => 'getCreditManager',
        'credit_limit' => 'getCreditLimit',
        'hold_period_code' => 'getHoldPeriodCode',
        'sell_type' => 'getSellType',
        'avg_pay_days' => 'getAvgPayDays',
        'no_past_due' => 'getNoPastDue',
        'no_payments' => 'getNoPayments',
        'no_invoices' => 'getNoInvoices',
        'last_payment_amount' => 'getLastPaymentAmount',
        'high_balance' => 'getHighBalance',
        'order_balance' => 'getOrderBalance',
        'terms_type' => 'getTermsType',
        'terms_type_description' => 'getTermsTypeDescription',
        'credit_established_date' => 'getCreditEstablishedDate',
        'last_review_date' => 'getLastReviewDate',
        'next_review_date' => 'getNextReviewDate',
        'last_payment_date' => 'getLastPaymentDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['c_error_message'] = isset($data['c_error_message']) ? $data['c_error_message'] : null;
        $this->container['credit_manager'] = isset($data['credit_manager']) ? $data['credit_manager'] : null;
        $this->container['credit_limit'] = isset($data['credit_limit']) ? $data['credit_limit'] : null;
        $this->container['hold_period_code'] = isset($data['hold_period_code']) ? $data['hold_period_code'] : null;
        $this->container['sell_type'] = isset($data['sell_type']) ? $data['sell_type'] : null;
        $this->container['avg_pay_days'] = isset($data['avg_pay_days']) ? $data['avg_pay_days'] : null;
        $this->container['no_past_due'] = isset($data['no_past_due']) ? $data['no_past_due'] : null;
        $this->container['no_payments'] = isset($data['no_payments']) ? $data['no_payments'] : null;
        $this->container['no_invoices'] = isset($data['no_invoices']) ? $data['no_invoices'] : null;
        $this->container['last_payment_amount'] = isset($data['last_payment_amount']) ? $data['last_payment_amount'] : null;
        $this->container['high_balance'] = isset($data['high_balance']) ? $data['high_balance'] : null;
        $this->container['order_balance'] = isset($data['order_balance']) ? $data['order_balance'] : null;
        $this->container['terms_type'] = isset($data['terms_type']) ? $data['terms_type'] : null;
        $this->container['terms_type_description'] = isset($data['terms_type_description']) ? $data['terms_type_description'] : null;
        $this->container['credit_established_date'] = isset($data['credit_established_date']) ? $data['credit_established_date'] : null;
        $this->container['last_review_date'] = isset($data['last_review_date']) ? $data['last_review_date'] : null;
        $this->container['next_review_date'] = isset($data['next_review_date']) ? $data['next_review_date'] : null;
        $this->container['last_payment_date'] = isset($data['last_payment_date']) ? $data['last_payment_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c_error_message
     *
     * @return string
     */
    public function getCErrorMessage()
    {
        return $this->container['c_error_message'];
    }

    /**
     * Sets c_error_message
     *
     * @param string $c_error_message c_error_message
     *
     * @return $this
     */
    public function setCErrorMessage($c_error_message)
    {
        $this->container['c_error_message'] = $c_error_message;

        return $this;
    }

    /**
     * Gets credit_manager
     *
     * @return string
     */
    public function getCreditManager()
    {
        return $this->container['credit_manager'];
    }

    /**
     * Sets credit_manager
     *
     * @param string $credit_manager credit_manager
     *
     * @return $this
     */
    public function setCreditManager($credit_manager)
    {
        $this->container['credit_manager'] = $credit_manager;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return double
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param double $credit_limit credit_limit
     *
     * @return $this
     */
    public function setCreditLimit($credit_limit)
    {
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets hold_period_code
     *
     * @return int
     */
    public function getHoldPeriodCode()
    {
        return $this->container['hold_period_code'];
    }

    /**
     * Sets hold_period_code
     *
     * @param int $hold_period_code hold_period_code
     *
     * @return $this
     */
    public function setHoldPeriodCode($hold_period_code)
    {
        $this->container['hold_period_code'] = $hold_period_code;

        return $this;
    }

    /**
     * Gets sell_type
     *
     * @return string
     */
    public function getSellType()
    {
        return $this->container['sell_type'];
    }

    /**
     * Sets sell_type
     *
     * @param string $sell_type sell_type
     *
     * @return $this
     */
    public function setSellType($sell_type)
    {
        $this->container['sell_type'] = $sell_type;

        return $this;
    }

    /**
     * Gets avg_pay_days
     *
     * @return int
     */
    public function getAvgPayDays()
    {
        return $this->container['avg_pay_days'];
    }

    /**
     * Sets avg_pay_days
     *
     * @param int $avg_pay_days avg_pay_days
     *
     * @return $this
     */
    public function setAvgPayDays($avg_pay_days)
    {
        $this->container['avg_pay_days'] = $avg_pay_days;

        return $this;
    }

    /**
     * Gets no_past_due
     *
     * @return int
     */
    public function getNoPastDue()
    {
        return $this->container['no_past_due'];
    }

    /**
     * Sets no_past_due
     *
     * @param int $no_past_due no_past_due
     *
     * @return $this
     */
    public function setNoPastDue($no_past_due)
    {
        $this->container['no_past_due'] = $no_past_due;

        return $this;
    }

    /**
     * Gets no_payments
     *
     * @return int
     */
    public function getNoPayments()
    {
        return $this->container['no_payments'];
    }

    /**
     * Sets no_payments
     *
     * @param int $no_payments no_payments
     *
     * @return $this
     */
    public function setNoPayments($no_payments)
    {
        $this->container['no_payments'] = $no_payments;

        return $this;
    }

    /**
     * Gets no_invoices
     *
     * @return int
     */
    public function getNoInvoices()
    {
        return $this->container['no_invoices'];
    }

    /**
     * Sets no_invoices
     *
     * @param int $no_invoices no_invoices
     *
     * @return $this
     */
    public function setNoInvoices($no_invoices)
    {
        $this->container['no_invoices'] = $no_invoices;

        return $this;
    }

    /**
     * Gets last_payment_amount
     *
     * @return double
     */
    public function getLastPaymentAmount()
    {
        return $this->container['last_payment_amount'];
    }

    /**
     * Sets last_payment_amount
     *
     * @param double $last_payment_amount last_payment_amount
     *
     * @return $this
     */
    public function setLastPaymentAmount($last_payment_amount)
    {
        $this->container['last_payment_amount'] = $last_payment_amount;

        return $this;
    }

    /**
     * Gets high_balance
     *
     * @return double
     */
    public function getHighBalance()
    {
        return $this->container['high_balance'];
    }

    /**
     * Sets high_balance
     *
     * @param double $high_balance high_balance
     *
     * @return $this
     */
    public function setHighBalance($high_balance)
    {
        $this->container['high_balance'] = $high_balance;

        return $this;
    }

    /**
     * Gets order_balance
     *
     * @return double
     */
    public function getOrderBalance()
    {
        return $this->container['order_balance'];
    }

    /**
     * Sets order_balance
     *
     * @param double $order_balance order_balance
     *
     * @return $this
     */
    public function setOrderBalance($order_balance)
    {
        $this->container['order_balance'] = $order_balance;

        return $this;
    }

    /**
     * Gets terms_type
     *
     * @return string
     */
    public function getTermsType()
    {
        return $this->container['terms_type'];
    }

    /**
     * Sets terms_type
     *
     * @param string $terms_type terms_type
     *
     * @return $this
     */
    public function setTermsType($terms_type)
    {
        $this->container['terms_type'] = $terms_type;

        return $this;
    }

    /**
     * Gets terms_type_description
     *
     * @return string
     */
    public function getTermsTypeDescription()
    {
        return $this->container['terms_type_description'];
    }

    /**
     * Sets terms_type_description
     *
     * @param string $terms_type_description terms_type_description
     *
     * @return $this
     */
    public function setTermsTypeDescription($terms_type_description)
    {
        $this->container['terms_type_description'] = $terms_type_description;

        return $this;
    }

    /**
     * Gets credit_established_date
     *
     * @return \DateTime
     */
    public function getCreditEstablishedDate()
    {
        return $this->container['credit_established_date'];
    }

    /**
     * Sets credit_established_date
     *
     * @param \DateTime $credit_established_date credit_established_date
     *
     * @return $this
     */
    public function setCreditEstablishedDate($credit_established_date)
    {
        $this->container['credit_established_date'] = $credit_established_date;

        return $this;
    }

    /**
     * Gets last_review_date
     *
     * @return \DateTime
     */
    public function getLastReviewDate()
    {
        return $this->container['last_review_date'];
    }

    /**
     * Sets last_review_date
     *
     * @param \DateTime $last_review_date last_review_date
     *
     * @return $this
     */
    public function setLastReviewDate($last_review_date)
    {
        $this->container['last_review_date'] = $last_review_date;

        return $this;
    }

    /**
     * Gets next_review_date
     *
     * @return \DateTime
     */
    public function getNextReviewDate()
    {
        return $this->container['next_review_date'];
    }

    /**
     * Sets next_review_date
     *
     * @param \DateTime $next_review_date next_review_date
     *
     * @return $this
     */
    public function setNextReviewDate($next_review_date)
    {
        $this->container['next_review_date'] = $next_review_date;

        return $this;
    }

    /**
     * Gets last_payment_date
     *
     * @return \DateTime
     */
    public function getLastPaymentDate()
    {
        return $this->container['last_payment_date'];
    }

    /**
     * Sets last_payment_date
     *
     * @param \DateTime $last_payment_date last_payment_date
     *
     * @return $this
     */
    public function setLastPaymentDate($last_payment_date)
    {
        $this->container['last_payment_date'] = $last_payment_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


