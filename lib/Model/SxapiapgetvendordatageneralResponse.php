<?php
/**
 * SxapiapgetvendordatageneralResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SxapiapgetvendordatageneralResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SxapiapgetvendordatageneralResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapiapgetvendordatageneral_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'c_error_message' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'address3' => 'string',
        'ap_customer_number' => 'string',
        'vendor_class' => 'int',
        'ar_customer_number' => 'double',
        'bank_number' => 'int',
        'city' => 'string',
        'comment' => 'string',
        'country_code' => 'string',
        'country_code_description' => 'string',
        'currency_type' => 'string',
        'dispute_flag' => 'bool',
        'division_number' => 'int',
        'duns_number' => 'string',
        'email_address' => 'string',
        'entered_date' => '\DateTime',
        'exclude_e_commerce_type' => 'string',
        'expediter_name' => 'string',
        'expediter_phone_number' => 'string',
        'fax_phone_number' => 'string',
        'invoice_type' => 'string',
        'language_code' => 'string',
        'language_code_description' => 'string',
        'lookup_name' => 'string',
        'name' => 'string',
        'notes_indicator' => 'string',
        'phone_number' => 'string',
        'sales_rep_name' => 'string',
        'sales_rep_phone_number' => 'string',
        'state' => 'string',
        'status_type' => 'string',
        'sync_crm_flag' => 'bool',
        'terms_type' => 'string',
        'terms_type_description' => 'string',
        'send_checks_to_vendor_number' => 'double',
        'vendor_type' => 'string',
        'postal_code' => 'string',
        'last_update' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'c_error_message' => null,
        'address1' => null,
        'address2' => null,
        'address3' => null,
        'ap_customer_number' => null,
        'vendor_class' => 'int64',
        'ar_customer_number' => 'double',
        'bank_number' => 'int64',
        'city' => null,
        'comment' => null,
        'country_code' => null,
        'country_code_description' => null,
        'currency_type' => null,
        'dispute_flag' => null,
        'division_number' => 'int64',
        'duns_number' => null,
        'email_address' => null,
        'entered_date' => 'date',
        'exclude_e_commerce_type' => null,
        'expediter_name' => null,
        'expediter_phone_number' => null,
        'fax_phone_number' => null,
        'invoice_type' => null,
        'language_code' => null,
        'language_code_description' => null,
        'lookup_name' => null,
        'name' => null,
        'notes_indicator' => null,
        'phone_number' => null,
        'sales_rep_name' => null,
        'sales_rep_phone_number' => null,
        'state' => null,
        'status_type' => null,
        'sync_crm_flag' => null,
        'terms_type' => null,
        'terms_type_description' => null,
        'send_checks_to_vendor_number' => 'double',
        'vendor_type' => null,
        'postal_code' => null,
        'last_update' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c_error_message' => 'cErrorMessage',
        'address1' => 'address1',
        'address2' => 'address2',
        'address3' => 'address3',
        'ap_customer_number' => 'apCustomerNumber',
        'vendor_class' => 'vendorClass',
        'ar_customer_number' => 'arCustomerNumber',
        'bank_number' => 'bankNumber',
        'city' => 'city',
        'comment' => 'comment',
        'country_code' => 'countryCode',
        'country_code_description' => 'countryCodeDescription',
        'currency_type' => 'currencyType',
        'dispute_flag' => 'disputeFlag',
        'division_number' => 'divisionNumber',
        'duns_number' => 'dunsNumber',
        'email_address' => 'emailAddress',
        'entered_date' => 'enteredDate',
        'exclude_e_commerce_type' => 'excludeECommerceType',
        'expediter_name' => 'expediterName',
        'expediter_phone_number' => 'expediterPhoneNumber',
        'fax_phone_number' => 'faxPhoneNumber',
        'invoice_type' => 'invoiceType',
        'language_code' => 'languageCode',
        'language_code_description' => 'languageCodeDescription',
        'lookup_name' => 'lookupName',
        'name' => 'name',
        'notes_indicator' => 'notesIndicator',
        'phone_number' => 'phoneNumber',
        'sales_rep_name' => 'salesRepName',
        'sales_rep_phone_number' => 'salesRepPhoneNumber',
        'state' => 'state',
        'status_type' => 'statusType',
        'sync_crm_flag' => 'syncCRMFlag',
        'terms_type' => 'termsType',
        'terms_type_description' => 'termsTypeDescription',
        'send_checks_to_vendor_number' => 'sendChecksToVendorNumber',
        'vendor_type' => 'vendorType',
        'postal_code' => 'postalCode',
        'last_update' => 'lastUpdate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c_error_message' => 'setCErrorMessage',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'address3' => 'setAddress3',
        'ap_customer_number' => 'setApCustomerNumber',
        'vendor_class' => 'setVendorClass',
        'ar_customer_number' => 'setArCustomerNumber',
        'bank_number' => 'setBankNumber',
        'city' => 'setCity',
        'comment' => 'setComment',
        'country_code' => 'setCountryCode',
        'country_code_description' => 'setCountryCodeDescription',
        'currency_type' => 'setCurrencyType',
        'dispute_flag' => 'setDisputeFlag',
        'division_number' => 'setDivisionNumber',
        'duns_number' => 'setDunsNumber',
        'email_address' => 'setEmailAddress',
        'entered_date' => 'setEnteredDate',
        'exclude_e_commerce_type' => 'setExcludeECommerceType',
        'expediter_name' => 'setExpediterName',
        'expediter_phone_number' => 'setExpediterPhoneNumber',
        'fax_phone_number' => 'setFaxPhoneNumber',
        'invoice_type' => 'setInvoiceType',
        'language_code' => 'setLanguageCode',
        'language_code_description' => 'setLanguageCodeDescription',
        'lookup_name' => 'setLookupName',
        'name' => 'setName',
        'notes_indicator' => 'setNotesIndicator',
        'phone_number' => 'setPhoneNumber',
        'sales_rep_name' => 'setSalesRepName',
        'sales_rep_phone_number' => 'setSalesRepPhoneNumber',
        'state' => 'setState',
        'status_type' => 'setStatusType',
        'sync_crm_flag' => 'setSyncCrmFlag',
        'terms_type' => 'setTermsType',
        'terms_type_description' => 'setTermsTypeDescription',
        'send_checks_to_vendor_number' => 'setSendChecksToVendorNumber',
        'vendor_type' => 'setVendorType',
        'postal_code' => 'setPostalCode',
        'last_update' => 'setLastUpdate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c_error_message' => 'getCErrorMessage',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'address3' => 'getAddress3',
        'ap_customer_number' => 'getApCustomerNumber',
        'vendor_class' => 'getVendorClass',
        'ar_customer_number' => 'getArCustomerNumber',
        'bank_number' => 'getBankNumber',
        'city' => 'getCity',
        'comment' => 'getComment',
        'country_code' => 'getCountryCode',
        'country_code_description' => 'getCountryCodeDescription',
        'currency_type' => 'getCurrencyType',
        'dispute_flag' => 'getDisputeFlag',
        'division_number' => 'getDivisionNumber',
        'duns_number' => 'getDunsNumber',
        'email_address' => 'getEmailAddress',
        'entered_date' => 'getEnteredDate',
        'exclude_e_commerce_type' => 'getExcludeECommerceType',
        'expediter_name' => 'getExpediterName',
        'expediter_phone_number' => 'getExpediterPhoneNumber',
        'fax_phone_number' => 'getFaxPhoneNumber',
        'invoice_type' => 'getInvoiceType',
        'language_code' => 'getLanguageCode',
        'language_code_description' => 'getLanguageCodeDescription',
        'lookup_name' => 'getLookupName',
        'name' => 'getName',
        'notes_indicator' => 'getNotesIndicator',
        'phone_number' => 'getPhoneNumber',
        'sales_rep_name' => 'getSalesRepName',
        'sales_rep_phone_number' => 'getSalesRepPhoneNumber',
        'state' => 'getState',
        'status_type' => 'getStatusType',
        'sync_crm_flag' => 'getSyncCrmFlag',
        'terms_type' => 'getTermsType',
        'terms_type_description' => 'getTermsTypeDescription',
        'send_checks_to_vendor_number' => 'getSendChecksToVendorNumber',
        'vendor_type' => 'getVendorType',
        'postal_code' => 'getPostalCode',
        'last_update' => 'getLastUpdate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['c_error_message'] = isset($data['c_error_message']) ? $data['c_error_message'] : null;
        $this->container['address1'] = isset($data['address1']) ? $data['address1'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['address3'] = isset($data['address3']) ? $data['address3'] : null;
        $this->container['ap_customer_number'] = isset($data['ap_customer_number']) ? $data['ap_customer_number'] : null;
        $this->container['vendor_class'] = isset($data['vendor_class']) ? $data['vendor_class'] : null;
        $this->container['ar_customer_number'] = isset($data['ar_customer_number']) ? $data['ar_customer_number'] : null;
        $this->container['bank_number'] = isset($data['bank_number']) ? $data['bank_number'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['country_code_description'] = isset($data['country_code_description']) ? $data['country_code_description'] : null;
        $this->container['currency_type'] = isset($data['currency_type']) ? $data['currency_type'] : null;
        $this->container['dispute_flag'] = isset($data['dispute_flag']) ? $data['dispute_flag'] : null;
        $this->container['division_number'] = isset($data['division_number']) ? $data['division_number'] : null;
        $this->container['duns_number'] = isset($data['duns_number']) ? $data['duns_number'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['entered_date'] = isset($data['entered_date']) ? $data['entered_date'] : null;
        $this->container['exclude_e_commerce_type'] = isset($data['exclude_e_commerce_type']) ? $data['exclude_e_commerce_type'] : null;
        $this->container['expediter_name'] = isset($data['expediter_name']) ? $data['expediter_name'] : null;
        $this->container['expediter_phone_number'] = isset($data['expediter_phone_number']) ? $data['expediter_phone_number'] : null;
        $this->container['fax_phone_number'] = isset($data['fax_phone_number']) ? $data['fax_phone_number'] : null;
        $this->container['invoice_type'] = isset($data['invoice_type']) ? $data['invoice_type'] : null;
        $this->container['language_code'] = isset($data['language_code']) ? $data['language_code'] : null;
        $this->container['language_code_description'] = isset($data['language_code_description']) ? $data['language_code_description'] : null;
        $this->container['lookup_name'] = isset($data['lookup_name']) ? $data['lookup_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['notes_indicator'] = isset($data['notes_indicator']) ? $data['notes_indicator'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['sales_rep_name'] = isset($data['sales_rep_name']) ? $data['sales_rep_name'] : null;
        $this->container['sales_rep_phone_number'] = isset($data['sales_rep_phone_number']) ? $data['sales_rep_phone_number'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['status_type'] = isset($data['status_type']) ? $data['status_type'] : null;
        $this->container['sync_crm_flag'] = isset($data['sync_crm_flag']) ? $data['sync_crm_flag'] : null;
        $this->container['terms_type'] = isset($data['terms_type']) ? $data['terms_type'] : null;
        $this->container['terms_type_description'] = isset($data['terms_type_description']) ? $data['terms_type_description'] : null;
        $this->container['send_checks_to_vendor_number'] = isset($data['send_checks_to_vendor_number']) ? $data['send_checks_to_vendor_number'] : null;
        $this->container['vendor_type'] = isset($data['vendor_type']) ? $data['vendor_type'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['last_update'] = isset($data['last_update']) ? $data['last_update'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c_error_message
     *
     * @return string
     */
    public function getCErrorMessage()
    {
        return $this->container['c_error_message'];
    }

    /**
     * Sets c_error_message
     *
     * @param string $c_error_message c_error_message
     *
     * @return $this
     */
    public function setCErrorMessage($c_error_message)
    {
        $this->container['c_error_message'] = $c_error_message;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string $address1 address1
     *
     * @return $this
     */
    public function setAddress1($address1)
    {
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string $address2 address2
     *
     * @return $this
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets address3
     *
     * @return string
     */
    public function getAddress3()
    {
        return $this->container['address3'];
    }

    /**
     * Sets address3
     *
     * @param string $address3 address3
     *
     * @return $this
     */
    public function setAddress3($address3)
    {
        $this->container['address3'] = $address3;

        return $this;
    }

    /**
     * Gets ap_customer_number
     *
     * @return string
     */
    public function getApCustomerNumber()
    {
        return $this->container['ap_customer_number'];
    }

    /**
     * Sets ap_customer_number
     *
     * @param string $ap_customer_number ap_customer_number
     *
     * @return $this
     */
    public function setApCustomerNumber($ap_customer_number)
    {
        $this->container['ap_customer_number'] = $ap_customer_number;

        return $this;
    }

    /**
     * Gets vendor_class
     *
     * @return int
     */
    public function getVendorClass()
    {
        return $this->container['vendor_class'];
    }

    /**
     * Sets vendor_class
     *
     * @param int $vendor_class vendor_class
     *
     * @return $this
     */
    public function setVendorClass($vendor_class)
    {
        $this->container['vendor_class'] = $vendor_class;

        return $this;
    }

    /**
     * Gets ar_customer_number
     *
     * @return double
     */
    public function getArCustomerNumber()
    {
        return $this->container['ar_customer_number'];
    }

    /**
     * Sets ar_customer_number
     *
     * @param double $ar_customer_number ar_customer_number
     *
     * @return $this
     */
    public function setArCustomerNumber($ar_customer_number)
    {
        $this->container['ar_customer_number'] = $ar_customer_number;

        return $this;
    }

    /**
     * Gets bank_number
     *
     * @return int
     */
    public function getBankNumber()
    {
        return $this->container['bank_number'];
    }

    /**
     * Sets bank_number
     *
     * @param int $bank_number bank_number
     *
     * @return $this
     */
    public function setBankNumber($bank_number)
    {
        $this->container['bank_number'] = $bank_number;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code country_code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets country_code_description
     *
     * @return string
     */
    public function getCountryCodeDescription()
    {
        return $this->container['country_code_description'];
    }

    /**
     * Sets country_code_description
     *
     * @param string $country_code_description country_code_description
     *
     * @return $this
     */
    public function setCountryCodeDescription($country_code_description)
    {
        $this->container['country_code_description'] = $country_code_description;

        return $this;
    }

    /**
     * Gets currency_type
     *
     * @return string
     */
    public function getCurrencyType()
    {
        return $this->container['currency_type'];
    }

    /**
     * Sets currency_type
     *
     * @param string $currency_type currency_type
     *
     * @return $this
     */
    public function setCurrencyType($currency_type)
    {
        $this->container['currency_type'] = $currency_type;

        return $this;
    }

    /**
     * Gets dispute_flag
     *
     * @return bool
     */
    public function getDisputeFlag()
    {
        return $this->container['dispute_flag'];
    }

    /**
     * Sets dispute_flag
     *
     * @param bool $dispute_flag dispute_flag
     *
     * @return $this
     */
    public function setDisputeFlag($dispute_flag)
    {
        $this->container['dispute_flag'] = $dispute_flag;

        return $this;
    }

    /**
     * Gets division_number
     *
     * @return int
     */
    public function getDivisionNumber()
    {
        return $this->container['division_number'];
    }

    /**
     * Sets division_number
     *
     * @param int $division_number division_number
     *
     * @return $this
     */
    public function setDivisionNumber($division_number)
    {
        $this->container['division_number'] = $division_number;

        return $this;
    }

    /**
     * Gets duns_number
     *
     * @return string
     */
    public function getDunsNumber()
    {
        return $this->container['duns_number'];
    }

    /**
     * Sets duns_number
     *
     * @param string $duns_number duns_number
     *
     * @return $this
     */
    public function setDunsNumber($duns_number)
    {
        $this->container['duns_number'] = $duns_number;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address email_address
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets entered_date
     *
     * @return \DateTime
     */
    public function getEnteredDate()
    {
        return $this->container['entered_date'];
    }

    /**
     * Sets entered_date
     *
     * @param \DateTime $entered_date entered_date
     *
     * @return $this
     */
    public function setEnteredDate($entered_date)
    {
        $this->container['entered_date'] = $entered_date;

        return $this;
    }

    /**
     * Gets exclude_e_commerce_type
     *
     * @return string
     */
    public function getExcludeECommerceType()
    {
        return $this->container['exclude_e_commerce_type'];
    }

    /**
     * Sets exclude_e_commerce_type
     *
     * @param string $exclude_e_commerce_type exclude_e_commerce_type
     *
     * @return $this
     */
    public function setExcludeECommerceType($exclude_e_commerce_type)
    {
        $this->container['exclude_e_commerce_type'] = $exclude_e_commerce_type;

        return $this;
    }

    /**
     * Gets expediter_name
     *
     * @return string
     */
    public function getExpediterName()
    {
        return $this->container['expediter_name'];
    }

    /**
     * Sets expediter_name
     *
     * @param string $expediter_name expediter_name
     *
     * @return $this
     */
    public function setExpediterName($expediter_name)
    {
        $this->container['expediter_name'] = $expediter_name;

        return $this;
    }

    /**
     * Gets expediter_phone_number
     *
     * @return string
     */
    public function getExpediterPhoneNumber()
    {
        return $this->container['expediter_phone_number'];
    }

    /**
     * Sets expediter_phone_number
     *
     * @param string $expediter_phone_number expediter_phone_number
     *
     * @return $this
     */
    public function setExpediterPhoneNumber($expediter_phone_number)
    {
        $this->container['expediter_phone_number'] = $expediter_phone_number;

        return $this;
    }

    /**
     * Gets fax_phone_number
     *
     * @return string
     */
    public function getFaxPhoneNumber()
    {
        return $this->container['fax_phone_number'];
    }

    /**
     * Sets fax_phone_number
     *
     * @param string $fax_phone_number fax_phone_number
     *
     * @return $this
     */
    public function setFaxPhoneNumber($fax_phone_number)
    {
        $this->container['fax_phone_number'] = $fax_phone_number;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return string
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param string $invoice_type invoice_type
     *
     * @return $this
     */
    public function setInvoiceType($invoice_type)
    {
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets language_code
     *
     * @return string
     */
    public function getLanguageCode()
    {
        return $this->container['language_code'];
    }

    /**
     * Sets language_code
     *
     * @param string $language_code language_code
     *
     * @return $this
     */
    public function setLanguageCode($language_code)
    {
        $this->container['language_code'] = $language_code;

        return $this;
    }

    /**
     * Gets language_code_description
     *
     * @return string
     */
    public function getLanguageCodeDescription()
    {
        return $this->container['language_code_description'];
    }

    /**
     * Sets language_code_description
     *
     * @param string $language_code_description language_code_description
     *
     * @return $this
     */
    public function setLanguageCodeDescription($language_code_description)
    {
        $this->container['language_code_description'] = $language_code_description;

        return $this;
    }

    /**
     * Gets lookup_name
     *
     * @return string
     */
    public function getLookupName()
    {
        return $this->container['lookup_name'];
    }

    /**
     * Sets lookup_name
     *
     * @param string $lookup_name lookup_name
     *
     * @return $this
     */
    public function setLookupName($lookup_name)
    {
        $this->container['lookup_name'] = $lookup_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets notes_indicator
     *
     * @return string
     */
    public function getNotesIndicator()
    {
        return $this->container['notes_indicator'];
    }

    /**
     * Sets notes_indicator
     *
     * @param string $notes_indicator notes_indicator
     *
     * @return $this
     */
    public function setNotesIndicator($notes_indicator)
    {
        $this->container['notes_indicator'] = $notes_indicator;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number phone_number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets sales_rep_name
     *
     * @return string
     */
    public function getSalesRepName()
    {
        return $this->container['sales_rep_name'];
    }

    /**
     * Sets sales_rep_name
     *
     * @param string $sales_rep_name sales_rep_name
     *
     * @return $this
     */
    public function setSalesRepName($sales_rep_name)
    {
        $this->container['sales_rep_name'] = $sales_rep_name;

        return $this;
    }

    /**
     * Gets sales_rep_phone_number
     *
     * @return string
     */
    public function getSalesRepPhoneNumber()
    {
        return $this->container['sales_rep_phone_number'];
    }

    /**
     * Sets sales_rep_phone_number
     *
     * @param string $sales_rep_phone_number sales_rep_phone_number
     *
     * @return $this
     */
    public function setSalesRepPhoneNumber($sales_rep_phone_number)
    {
        $this->container['sales_rep_phone_number'] = $sales_rep_phone_number;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets status_type
     *
     * @return string
     */
    public function getStatusType()
    {
        return $this->container['status_type'];
    }

    /**
     * Sets status_type
     *
     * @param string $status_type status_type
     *
     * @return $this
     */
    public function setStatusType($status_type)
    {
        $this->container['status_type'] = $status_type;

        return $this;
    }

    /**
     * Gets sync_crm_flag
     *
     * @return bool
     */
    public function getSyncCrmFlag()
    {
        return $this->container['sync_crm_flag'];
    }

    /**
     * Sets sync_crm_flag
     *
     * @param bool $sync_crm_flag sync_crm_flag
     *
     * @return $this
     */
    public function setSyncCrmFlag($sync_crm_flag)
    {
        $this->container['sync_crm_flag'] = $sync_crm_flag;

        return $this;
    }

    /**
     * Gets terms_type
     *
     * @return string
     */
    public function getTermsType()
    {
        return $this->container['terms_type'];
    }

    /**
     * Sets terms_type
     *
     * @param string $terms_type terms_type
     *
     * @return $this
     */
    public function setTermsType($terms_type)
    {
        $this->container['terms_type'] = $terms_type;

        return $this;
    }

    /**
     * Gets terms_type_description
     *
     * @return string
     */
    public function getTermsTypeDescription()
    {
        return $this->container['terms_type_description'];
    }

    /**
     * Sets terms_type_description
     *
     * @param string $terms_type_description terms_type_description
     *
     * @return $this
     */
    public function setTermsTypeDescription($terms_type_description)
    {
        $this->container['terms_type_description'] = $terms_type_description;

        return $this;
    }

    /**
     * Gets send_checks_to_vendor_number
     *
     * @return double
     */
    public function getSendChecksToVendorNumber()
    {
        return $this->container['send_checks_to_vendor_number'];
    }

    /**
     * Sets send_checks_to_vendor_number
     *
     * @param double $send_checks_to_vendor_number send_checks_to_vendor_number
     *
     * @return $this
     */
    public function setSendChecksToVendorNumber($send_checks_to_vendor_number)
    {
        $this->container['send_checks_to_vendor_number'] = $send_checks_to_vendor_number;

        return $this;
    }

    /**
     * Gets vendor_type
     *
     * @return string
     */
    public function getVendorType()
    {
        return $this->container['vendor_type'];
    }

    /**
     * Sets vendor_type
     *
     * @param string $vendor_type vendor_type
     *
     * @return $this
     */
    public function setVendorType($vendor_type)
    {
        $this->container['vendor_type'] = $vendor_type;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code postal_code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return string
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param string $last_update last_update
     *
     * @return $this
     */
    public function setLastUpdate($last_update)
    {
        $this->container['last_update'] = $last_update;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


