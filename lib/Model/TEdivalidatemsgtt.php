<?php
/**
 * TEdivalidatemsgtt
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TEdivalidatemsgtt Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TEdivalidatemsgtt implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-edivalidatemsgtt';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'batchnm' => 'string',
        'cono' => 'int',
        'custno' => 'double',
        'docty' => 'string',
        'errseqno' => 'int',
        'errty' => 'string',
        'fieldty' => 'string',
        'fieldvalue' => 'string',
        'level' => 'string',
        'lineno' => 'int',
        'operinit' => 'string',
        'seqno' => 'double',
        'shipto' => 'string',
        'statusty' => 'string',
        'transdt' => '\DateTime',
        'transproc' => 'string',
        'transtm' => 'string',
        'whse' => 'string',
        'errormessage' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'batchnm' => null,
        'cono' => 'int64',
        'custno' => 'double',
        'docty' => null,
        'errseqno' => 'int64',
        'errty' => null,
        'fieldty' => null,
        'fieldvalue' => null,
        'level' => null,
        'lineno' => 'int64',
        'operinit' => null,
        'seqno' => 'double',
        'shipto' => null,
        'statusty' => null,
        'transdt' => 'date',
        'transproc' => null,
        'transtm' => null,
        'whse' => null,
        'errormessage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'batchnm' => 'batchnm',
        'cono' => 'cono',
        'custno' => 'custno',
        'docty' => 'docty',
        'errseqno' => 'errseqno',
        'errty' => 'errty',
        'fieldty' => 'fieldty',
        'fieldvalue' => 'fieldvalue',
        'level' => 'level',
        'lineno' => 'lineno',
        'operinit' => 'operinit',
        'seqno' => 'seqno',
        'shipto' => 'shipto',
        'statusty' => 'statusty',
        'transdt' => 'transdt',
        'transproc' => 'transproc',
        'transtm' => 'transtm',
        'whse' => 'whse',
        'errormessage' => 'errormessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'batchnm' => 'setBatchnm',
        'cono' => 'setCono',
        'custno' => 'setCustno',
        'docty' => 'setDocty',
        'errseqno' => 'setErrseqno',
        'errty' => 'setErrty',
        'fieldty' => 'setFieldty',
        'fieldvalue' => 'setFieldvalue',
        'level' => 'setLevel',
        'lineno' => 'setLineno',
        'operinit' => 'setOperinit',
        'seqno' => 'setSeqno',
        'shipto' => 'setShipto',
        'statusty' => 'setStatusty',
        'transdt' => 'setTransdt',
        'transproc' => 'setTransproc',
        'transtm' => 'setTranstm',
        'whse' => 'setWhse',
        'errormessage' => 'setErrormessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'batchnm' => 'getBatchnm',
        'cono' => 'getCono',
        'custno' => 'getCustno',
        'docty' => 'getDocty',
        'errseqno' => 'getErrseqno',
        'errty' => 'getErrty',
        'fieldty' => 'getFieldty',
        'fieldvalue' => 'getFieldvalue',
        'level' => 'getLevel',
        'lineno' => 'getLineno',
        'operinit' => 'getOperinit',
        'seqno' => 'getSeqno',
        'shipto' => 'getShipto',
        'statusty' => 'getStatusty',
        'transdt' => 'getTransdt',
        'transproc' => 'getTransproc',
        'transtm' => 'getTranstm',
        'whse' => 'getWhse',
        'errormessage' => 'getErrormessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['batchnm'] = isset($data['batchnm']) ? $data['batchnm'] : null;
        $this->container['cono'] = isset($data['cono']) ? $data['cono'] : null;
        $this->container['custno'] = isset($data['custno']) ? $data['custno'] : null;
        $this->container['docty'] = isset($data['docty']) ? $data['docty'] : null;
        $this->container['errseqno'] = isset($data['errseqno']) ? $data['errseqno'] : null;
        $this->container['errty'] = isset($data['errty']) ? $data['errty'] : null;
        $this->container['fieldty'] = isset($data['fieldty']) ? $data['fieldty'] : null;
        $this->container['fieldvalue'] = isset($data['fieldvalue']) ? $data['fieldvalue'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['lineno'] = isset($data['lineno']) ? $data['lineno'] : null;
        $this->container['operinit'] = isset($data['operinit']) ? $data['operinit'] : null;
        $this->container['seqno'] = isset($data['seqno']) ? $data['seqno'] : null;
        $this->container['shipto'] = isset($data['shipto']) ? $data['shipto'] : null;
        $this->container['statusty'] = isset($data['statusty']) ? $data['statusty'] : null;
        $this->container['transdt'] = isset($data['transdt']) ? $data['transdt'] : null;
        $this->container['transproc'] = isset($data['transproc']) ? $data['transproc'] : null;
        $this->container['transtm'] = isset($data['transtm']) ? $data['transtm'] : null;
        $this->container['whse'] = isset($data['whse']) ? $data['whse'] : null;
        $this->container['errormessage'] = isset($data['errormessage']) ? $data['errormessage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets batchnm
     *
     * @return string
     */
    public function getBatchnm()
    {
        return $this->container['batchnm'];
    }

    /**
     * Sets batchnm
     *
     * @param string $batchnm batchnm
     *
     * @return $this
     */
    public function setBatchnm($batchnm)
    {
        $this->container['batchnm'] = $batchnm;

        return $this;
    }

    /**
     * Gets cono
     *
     * @return int
     */
    public function getCono()
    {
        return $this->container['cono'];
    }

    /**
     * Sets cono
     *
     * @param int $cono cono
     *
     * @return $this
     */
    public function setCono($cono)
    {
        $this->container['cono'] = $cono;

        return $this;
    }

    /**
     * Gets custno
     *
     * @return double
     */
    public function getCustno()
    {
        return $this->container['custno'];
    }

    /**
     * Sets custno
     *
     * @param double $custno custno
     *
     * @return $this
     */
    public function setCustno($custno)
    {
        $this->container['custno'] = $custno;

        return $this;
    }

    /**
     * Gets docty
     *
     * @return string
     */
    public function getDocty()
    {
        return $this->container['docty'];
    }

    /**
     * Sets docty
     *
     * @param string $docty docty
     *
     * @return $this
     */
    public function setDocty($docty)
    {
        $this->container['docty'] = $docty;

        return $this;
    }

    /**
     * Gets errseqno
     *
     * @return int
     */
    public function getErrseqno()
    {
        return $this->container['errseqno'];
    }

    /**
     * Sets errseqno
     *
     * @param int $errseqno errseqno
     *
     * @return $this
     */
    public function setErrseqno($errseqno)
    {
        $this->container['errseqno'] = $errseqno;

        return $this;
    }

    /**
     * Gets errty
     *
     * @return string
     */
    public function getErrty()
    {
        return $this->container['errty'];
    }

    /**
     * Sets errty
     *
     * @param string $errty errty
     *
     * @return $this
     */
    public function setErrty($errty)
    {
        $this->container['errty'] = $errty;

        return $this;
    }

    /**
     * Gets fieldty
     *
     * @return string
     */
    public function getFieldty()
    {
        return $this->container['fieldty'];
    }

    /**
     * Sets fieldty
     *
     * @param string $fieldty fieldty
     *
     * @return $this
     */
    public function setFieldty($fieldty)
    {
        $this->container['fieldty'] = $fieldty;

        return $this;
    }

    /**
     * Gets fieldvalue
     *
     * @return string
     */
    public function getFieldvalue()
    {
        return $this->container['fieldvalue'];
    }

    /**
     * Sets fieldvalue
     *
     * @param string $fieldvalue fieldvalue
     *
     * @return $this
     */
    public function setFieldvalue($fieldvalue)
    {
        $this->container['fieldvalue'] = $fieldvalue;

        return $this;
    }

    /**
     * Gets level
     *
     * @return string
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param string $level level
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets lineno
     *
     * @return int
     */
    public function getLineno()
    {
        return $this->container['lineno'];
    }

    /**
     * Sets lineno
     *
     * @param int $lineno lineno
     *
     * @return $this
     */
    public function setLineno($lineno)
    {
        $this->container['lineno'] = $lineno;

        return $this;
    }

    /**
     * Gets operinit
     *
     * @return string
     */
    public function getOperinit()
    {
        return $this->container['operinit'];
    }

    /**
     * Sets operinit
     *
     * @param string $operinit operinit
     *
     * @return $this
     */
    public function setOperinit($operinit)
    {
        $this->container['operinit'] = $operinit;

        return $this;
    }

    /**
     * Gets seqno
     *
     * @return double
     */
    public function getSeqno()
    {
        return $this->container['seqno'];
    }

    /**
     * Sets seqno
     *
     * @param double $seqno seqno
     *
     * @return $this
     */
    public function setSeqno($seqno)
    {
        $this->container['seqno'] = $seqno;

        return $this;
    }

    /**
     * Gets shipto
     *
     * @return string
     */
    public function getShipto()
    {
        return $this->container['shipto'];
    }

    /**
     * Sets shipto
     *
     * @param string $shipto shipto
     *
     * @return $this
     */
    public function setShipto($shipto)
    {
        $this->container['shipto'] = $shipto;

        return $this;
    }

    /**
     * Gets statusty
     *
     * @return string
     */
    public function getStatusty()
    {
        return $this->container['statusty'];
    }

    /**
     * Sets statusty
     *
     * @param string $statusty statusty
     *
     * @return $this
     */
    public function setStatusty($statusty)
    {
        $this->container['statusty'] = $statusty;

        return $this;
    }

    /**
     * Gets transdt
     *
     * @return \DateTime
     */
    public function getTransdt()
    {
        return $this->container['transdt'];
    }

    /**
     * Sets transdt
     *
     * @param \DateTime $transdt transdt
     *
     * @return $this
     */
    public function setTransdt($transdt)
    {
        $this->container['transdt'] = $transdt;

        return $this;
    }

    /**
     * Gets transproc
     *
     * @return string
     */
    public function getTransproc()
    {
        return $this->container['transproc'];
    }

    /**
     * Sets transproc
     *
     * @param string $transproc transproc
     *
     * @return $this
     */
    public function setTransproc($transproc)
    {
        $this->container['transproc'] = $transproc;

        return $this;
    }

    /**
     * Gets transtm
     *
     * @return string
     */
    public function getTranstm()
    {
        return $this->container['transtm'];
    }

    /**
     * Sets transtm
     *
     * @param string $transtm transtm
     *
     * @return $this
     */
    public function setTranstm($transtm)
    {
        $this->container['transtm'] = $transtm;

        return $this;
    }

    /**
     * Gets whse
     *
     * @return string
     */
    public function getWhse()
    {
        return $this->container['whse'];
    }

    /**
     * Sets whse
     *
     * @param string $whse whse
     *
     * @return $this
     */
    public function setWhse($whse)
    {
        $this->container['whse'] = $whse;

        return $this;
    }

    /**
     * Gets errormessage
     *
     * @return string
     */
    public function getErrormessage()
    {
        return $this->container['errormessage'];
    }

    /**
     * Sets errormessage
     *
     * @param string $errormessage errormessage
     *
     * @return $this
     */
    public function setErrormessage($errormessage)
    {
        $this->container['errormessage'] = $errormessage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


