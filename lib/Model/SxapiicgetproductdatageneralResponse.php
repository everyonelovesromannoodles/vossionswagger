<?php
/**
 * SxapiicgetproductdatageneralResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SxapiicgetproductdatageneralResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SxapiicgetproductdatageneralResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapiicgetproductdatageneral_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'c_error_message' => 'string',
        'cross_reference_product' => 'string',
        'cross_reference_type' => 'string',
        'cubes' => 'double',
        'description1' => 'string',
        'description2' => 'string',
        'height' => 'double',
        'kit_type' => 'string',
        'length' => 'double',
        'lookup_name' => 'string',
        'notes_flag' => 'string',
        'product_category' => 'string',
        'product_category_desc' => 'string',
        'status_type' => 'string',
        'unit_count' => 'string',
        'unit_sell' => 'string',
        'unit_stock' => 'string',
        'weight' => 'double',
        'width' => 'double',
        'found_in_catalog' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'c_error_message' => null,
        'cross_reference_product' => null,
        'cross_reference_type' => null,
        'cubes' => 'double',
        'description1' => null,
        'description2' => null,
        'height' => 'double',
        'kit_type' => null,
        'length' => 'double',
        'lookup_name' => null,
        'notes_flag' => null,
        'product_category' => null,
        'product_category_desc' => null,
        'status_type' => null,
        'unit_count' => null,
        'unit_sell' => null,
        'unit_stock' => null,
        'weight' => 'double',
        'width' => 'double',
        'found_in_catalog' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c_error_message' => 'cErrorMessage',
        'cross_reference_product' => 'crossReferenceProduct',
        'cross_reference_type' => 'crossReferenceType',
        'cubes' => 'cubes',
        'description1' => 'description1',
        'description2' => 'description2',
        'height' => 'height',
        'kit_type' => 'kitType',
        'length' => 'length',
        'lookup_name' => 'lookupName',
        'notes_flag' => 'notesFlag',
        'product_category' => 'productCategory',
        'product_category_desc' => 'productCategoryDesc',
        'status_type' => 'statusType',
        'unit_count' => 'unitCount',
        'unit_sell' => 'unitSell',
        'unit_stock' => 'unitStock',
        'weight' => 'weight',
        'width' => 'width',
        'found_in_catalog' => 'foundInCatalog'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c_error_message' => 'setCErrorMessage',
        'cross_reference_product' => 'setCrossReferenceProduct',
        'cross_reference_type' => 'setCrossReferenceType',
        'cubes' => 'setCubes',
        'description1' => 'setDescription1',
        'description2' => 'setDescription2',
        'height' => 'setHeight',
        'kit_type' => 'setKitType',
        'length' => 'setLength',
        'lookup_name' => 'setLookupName',
        'notes_flag' => 'setNotesFlag',
        'product_category' => 'setProductCategory',
        'product_category_desc' => 'setProductCategoryDesc',
        'status_type' => 'setStatusType',
        'unit_count' => 'setUnitCount',
        'unit_sell' => 'setUnitSell',
        'unit_stock' => 'setUnitStock',
        'weight' => 'setWeight',
        'width' => 'setWidth',
        'found_in_catalog' => 'setFoundInCatalog'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c_error_message' => 'getCErrorMessage',
        'cross_reference_product' => 'getCrossReferenceProduct',
        'cross_reference_type' => 'getCrossReferenceType',
        'cubes' => 'getCubes',
        'description1' => 'getDescription1',
        'description2' => 'getDescription2',
        'height' => 'getHeight',
        'kit_type' => 'getKitType',
        'length' => 'getLength',
        'lookup_name' => 'getLookupName',
        'notes_flag' => 'getNotesFlag',
        'product_category' => 'getProductCategory',
        'product_category_desc' => 'getProductCategoryDesc',
        'status_type' => 'getStatusType',
        'unit_count' => 'getUnitCount',
        'unit_sell' => 'getUnitSell',
        'unit_stock' => 'getUnitStock',
        'weight' => 'getWeight',
        'width' => 'getWidth',
        'found_in_catalog' => 'getFoundInCatalog'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['c_error_message'] = isset($data['c_error_message']) ? $data['c_error_message'] : null;
        $this->container['cross_reference_product'] = isset($data['cross_reference_product']) ? $data['cross_reference_product'] : null;
        $this->container['cross_reference_type'] = isset($data['cross_reference_type']) ? $data['cross_reference_type'] : null;
        $this->container['cubes'] = isset($data['cubes']) ? $data['cubes'] : null;
        $this->container['description1'] = isset($data['description1']) ? $data['description1'] : null;
        $this->container['description2'] = isset($data['description2']) ? $data['description2'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['kit_type'] = isset($data['kit_type']) ? $data['kit_type'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['lookup_name'] = isset($data['lookup_name']) ? $data['lookup_name'] : null;
        $this->container['notes_flag'] = isset($data['notes_flag']) ? $data['notes_flag'] : null;
        $this->container['product_category'] = isset($data['product_category']) ? $data['product_category'] : null;
        $this->container['product_category_desc'] = isset($data['product_category_desc']) ? $data['product_category_desc'] : null;
        $this->container['status_type'] = isset($data['status_type']) ? $data['status_type'] : null;
        $this->container['unit_count'] = isset($data['unit_count']) ? $data['unit_count'] : null;
        $this->container['unit_sell'] = isset($data['unit_sell']) ? $data['unit_sell'] : null;
        $this->container['unit_stock'] = isset($data['unit_stock']) ? $data['unit_stock'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['found_in_catalog'] = isset($data['found_in_catalog']) ? $data['found_in_catalog'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c_error_message
     *
     * @return string
     */
    public function getCErrorMessage()
    {
        return $this->container['c_error_message'];
    }

    /**
     * Sets c_error_message
     *
     * @param string $c_error_message c_error_message
     *
     * @return $this
     */
    public function setCErrorMessage($c_error_message)
    {
        $this->container['c_error_message'] = $c_error_message;

        return $this;
    }

    /**
     * Gets cross_reference_product
     *
     * @return string
     */
    public function getCrossReferenceProduct()
    {
        return $this->container['cross_reference_product'];
    }

    /**
     * Sets cross_reference_product
     *
     * @param string $cross_reference_product cross_reference_product
     *
     * @return $this
     */
    public function setCrossReferenceProduct($cross_reference_product)
    {
        $this->container['cross_reference_product'] = $cross_reference_product;

        return $this;
    }

    /**
     * Gets cross_reference_type
     *
     * @return string
     */
    public function getCrossReferenceType()
    {
        return $this->container['cross_reference_type'];
    }

    /**
     * Sets cross_reference_type
     *
     * @param string $cross_reference_type cross_reference_type
     *
     * @return $this
     */
    public function setCrossReferenceType($cross_reference_type)
    {
        $this->container['cross_reference_type'] = $cross_reference_type;

        return $this;
    }

    /**
     * Gets cubes
     *
     * @return double
     */
    public function getCubes()
    {
        return $this->container['cubes'];
    }

    /**
     * Sets cubes
     *
     * @param double $cubes cubes
     *
     * @return $this
     */
    public function setCubes($cubes)
    {
        $this->container['cubes'] = $cubes;

        return $this;
    }

    /**
     * Gets description1
     *
     * @return string
     */
    public function getDescription1()
    {
        return $this->container['description1'];
    }

    /**
     * Sets description1
     *
     * @param string $description1 description1
     *
     * @return $this
     */
    public function setDescription1($description1)
    {
        $this->container['description1'] = $description1;

        return $this;
    }

    /**
     * Gets description2
     *
     * @return string
     */
    public function getDescription2()
    {
        return $this->container['description2'];
    }

    /**
     * Sets description2
     *
     * @param string $description2 description2
     *
     * @return $this
     */
    public function setDescription2($description2)
    {
        $this->container['description2'] = $description2;

        return $this;
    }

    /**
     * Gets height
     *
     * @return double
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param double $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets kit_type
     *
     * @return string
     */
    public function getKitType()
    {
        return $this->container['kit_type'];
    }

    /**
     * Sets kit_type
     *
     * @param string $kit_type kit_type
     *
     * @return $this
     */
    public function setKitType($kit_type)
    {
        $this->container['kit_type'] = $kit_type;

        return $this;
    }

    /**
     * Gets length
     *
     * @return double
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param double $length length
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets lookup_name
     *
     * @return string
     */
    public function getLookupName()
    {
        return $this->container['lookup_name'];
    }

    /**
     * Sets lookup_name
     *
     * @param string $lookup_name lookup_name
     *
     * @return $this
     */
    public function setLookupName($lookup_name)
    {
        $this->container['lookup_name'] = $lookup_name;

        return $this;
    }

    /**
     * Gets notes_flag
     *
     * @return string
     */
    public function getNotesFlag()
    {
        return $this->container['notes_flag'];
    }

    /**
     * Sets notes_flag
     *
     * @param string $notes_flag notes_flag
     *
     * @return $this
     */
    public function setNotesFlag($notes_flag)
    {
        $this->container['notes_flag'] = $notes_flag;

        return $this;
    }

    /**
     * Gets product_category
     *
     * @return string
     */
    public function getProductCategory()
    {
        return $this->container['product_category'];
    }

    /**
     * Sets product_category
     *
     * @param string $product_category product_category
     *
     * @return $this
     */
    public function setProductCategory($product_category)
    {
        $this->container['product_category'] = $product_category;

        return $this;
    }

    /**
     * Gets product_category_desc
     *
     * @return string
     */
    public function getProductCategoryDesc()
    {
        return $this->container['product_category_desc'];
    }

    /**
     * Sets product_category_desc
     *
     * @param string $product_category_desc product_category_desc
     *
     * @return $this
     */
    public function setProductCategoryDesc($product_category_desc)
    {
        $this->container['product_category_desc'] = $product_category_desc;

        return $this;
    }

    /**
     * Gets status_type
     *
     * @return string
     */
    public function getStatusType()
    {
        return $this->container['status_type'];
    }

    /**
     * Sets status_type
     *
     * @param string $status_type status_type
     *
     * @return $this
     */
    public function setStatusType($status_type)
    {
        $this->container['status_type'] = $status_type;

        return $this;
    }

    /**
     * Gets unit_count
     *
     * @return string
     */
    public function getUnitCount()
    {
        return $this->container['unit_count'];
    }

    /**
     * Sets unit_count
     *
     * @param string $unit_count unit_count
     *
     * @return $this
     */
    public function setUnitCount($unit_count)
    {
        $this->container['unit_count'] = $unit_count;

        return $this;
    }

    /**
     * Gets unit_sell
     *
     * @return string
     */
    public function getUnitSell()
    {
        return $this->container['unit_sell'];
    }

    /**
     * Sets unit_sell
     *
     * @param string $unit_sell unit_sell
     *
     * @return $this
     */
    public function setUnitSell($unit_sell)
    {
        $this->container['unit_sell'] = $unit_sell;

        return $this;
    }

    /**
     * Gets unit_stock
     *
     * @return string
     */
    public function getUnitStock()
    {
        return $this->container['unit_stock'];
    }

    /**
     * Sets unit_stock
     *
     * @param string $unit_stock unit_stock
     *
     * @return $this
     */
    public function setUnitStock($unit_stock)
    {
        $this->container['unit_stock'] = $unit_stock;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return double
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param double $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets width
     *
     * @return double
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param double $width width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets found_in_catalog
     *
     * @return bool
     */
    public function getFoundInCatalog()
    {
        return $this->container['found_in_catalog'];
    }

    /**
     * Sets found_in_catalog
     *
     * @param bool $found_in_catalog found_in_catalog
     *
     * @return $this
     */
    public function setFoundInCatalog($found_in_catalog)
    {
        $this->container['found_in_catalog'] = $found_in_catalog;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


