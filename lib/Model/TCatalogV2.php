<?php
/**
 * TCatalogV2
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TCatalogV2 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TCatalogV2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-catalogV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'catalog' => 'string',
        'prodcat' => 'string',
        'vendno' => 'double',
        'prodline' => 'string',
        'serlottype' => 'string',
        'descrip1' => 'string',
        'descrip2' => 'string',
        'listprice' => 'double',
        'baseprice' => 'double',
        'priceonty' => 'string',
        'glcost' => 'double',
        'pdcost' => 'double',
        'pocost' => 'double',
        'smcost' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'catalog' => null,
        'prodcat' => null,
        'vendno' => 'double',
        'prodline' => null,
        'serlottype' => null,
        'descrip1' => null,
        'descrip2' => null,
        'listprice' => 'double',
        'baseprice' => 'double',
        'priceonty' => null,
        'glcost' => 'double',
        'pdcost' => 'double',
        'pocost' => 'double',
        'smcost' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'catalog' => 'catalog',
        'prodcat' => 'prodcat',
        'vendno' => 'vendno',
        'prodline' => 'prodline',
        'serlottype' => 'serlottype',
        'descrip1' => 'descrip1',
        'descrip2' => 'descrip2',
        'listprice' => 'listprice',
        'baseprice' => 'baseprice',
        'priceonty' => 'priceonty',
        'glcost' => 'glcost',
        'pdcost' => 'pdcost',
        'pocost' => 'pocost',
        'smcost' => 'smcost'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'catalog' => 'setCatalog',
        'prodcat' => 'setProdcat',
        'vendno' => 'setVendno',
        'prodline' => 'setProdline',
        'serlottype' => 'setSerlottype',
        'descrip1' => 'setDescrip1',
        'descrip2' => 'setDescrip2',
        'listprice' => 'setListprice',
        'baseprice' => 'setBaseprice',
        'priceonty' => 'setPriceonty',
        'glcost' => 'setGlcost',
        'pdcost' => 'setPdcost',
        'pocost' => 'setPocost',
        'smcost' => 'setSmcost'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'catalog' => 'getCatalog',
        'prodcat' => 'getProdcat',
        'vendno' => 'getVendno',
        'prodline' => 'getProdline',
        'serlottype' => 'getSerlottype',
        'descrip1' => 'getDescrip1',
        'descrip2' => 'getDescrip2',
        'listprice' => 'getListprice',
        'baseprice' => 'getBaseprice',
        'priceonty' => 'getPriceonty',
        'glcost' => 'getGlcost',
        'pdcost' => 'getPdcost',
        'pocost' => 'getPocost',
        'smcost' => 'getSmcost'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['catalog'] = isset($data['catalog']) ? $data['catalog'] : null;
        $this->container['prodcat'] = isset($data['prodcat']) ? $data['prodcat'] : null;
        $this->container['vendno'] = isset($data['vendno']) ? $data['vendno'] : null;
        $this->container['prodline'] = isset($data['prodline']) ? $data['prodline'] : null;
        $this->container['serlottype'] = isset($data['serlottype']) ? $data['serlottype'] : null;
        $this->container['descrip1'] = isset($data['descrip1']) ? $data['descrip1'] : null;
        $this->container['descrip2'] = isset($data['descrip2']) ? $data['descrip2'] : null;
        $this->container['listprice'] = isset($data['listprice']) ? $data['listprice'] : null;
        $this->container['baseprice'] = isset($data['baseprice']) ? $data['baseprice'] : null;
        $this->container['priceonty'] = isset($data['priceonty']) ? $data['priceonty'] : null;
        $this->container['glcost'] = isset($data['glcost']) ? $data['glcost'] : null;
        $this->container['pdcost'] = isset($data['pdcost']) ? $data['pdcost'] : null;
        $this->container['pocost'] = isset($data['pocost']) ? $data['pocost'] : null;
        $this->container['smcost'] = isset($data['smcost']) ? $data['smcost'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets catalog
     *
     * @return string
     */
    public function getCatalog()
    {
        return $this->container['catalog'];
    }

    /**
     * Sets catalog
     *
     * @param string $catalog catalog
     *
     * @return $this
     */
    public function setCatalog($catalog)
    {
        $this->container['catalog'] = $catalog;

        return $this;
    }

    /**
     * Gets prodcat
     *
     * @return string
     */
    public function getProdcat()
    {
        return $this->container['prodcat'];
    }

    /**
     * Sets prodcat
     *
     * @param string $prodcat prodcat
     *
     * @return $this
     */
    public function setProdcat($prodcat)
    {
        $this->container['prodcat'] = $prodcat;

        return $this;
    }

    /**
     * Gets vendno
     *
     * @return double
     */
    public function getVendno()
    {
        return $this->container['vendno'];
    }

    /**
     * Sets vendno
     *
     * @param double $vendno vendno
     *
     * @return $this
     */
    public function setVendno($vendno)
    {
        $this->container['vendno'] = $vendno;

        return $this;
    }

    /**
     * Gets prodline
     *
     * @return string
     */
    public function getProdline()
    {
        return $this->container['prodline'];
    }

    /**
     * Sets prodline
     *
     * @param string $prodline prodline
     *
     * @return $this
     */
    public function setProdline($prodline)
    {
        $this->container['prodline'] = $prodline;

        return $this;
    }

    /**
     * Gets serlottype
     *
     * @return string
     */
    public function getSerlottype()
    {
        return $this->container['serlottype'];
    }

    /**
     * Sets serlottype
     *
     * @param string $serlottype serlottype
     *
     * @return $this
     */
    public function setSerlottype($serlottype)
    {
        $this->container['serlottype'] = $serlottype;

        return $this;
    }

    /**
     * Gets descrip1
     *
     * @return string
     */
    public function getDescrip1()
    {
        return $this->container['descrip1'];
    }

    /**
     * Sets descrip1
     *
     * @param string $descrip1 descrip1
     *
     * @return $this
     */
    public function setDescrip1($descrip1)
    {
        $this->container['descrip1'] = $descrip1;

        return $this;
    }

    /**
     * Gets descrip2
     *
     * @return string
     */
    public function getDescrip2()
    {
        return $this->container['descrip2'];
    }

    /**
     * Sets descrip2
     *
     * @param string $descrip2 descrip2
     *
     * @return $this
     */
    public function setDescrip2($descrip2)
    {
        $this->container['descrip2'] = $descrip2;

        return $this;
    }

    /**
     * Gets listprice
     *
     * @return double
     */
    public function getListprice()
    {
        return $this->container['listprice'];
    }

    /**
     * Sets listprice
     *
     * @param double $listprice listprice
     *
     * @return $this
     */
    public function setListprice($listprice)
    {
        $this->container['listprice'] = $listprice;

        return $this;
    }

    /**
     * Gets baseprice
     *
     * @return double
     */
    public function getBaseprice()
    {
        return $this->container['baseprice'];
    }

    /**
     * Sets baseprice
     *
     * @param double $baseprice baseprice
     *
     * @return $this
     */
    public function setBaseprice($baseprice)
    {
        $this->container['baseprice'] = $baseprice;

        return $this;
    }

    /**
     * Gets priceonty
     *
     * @return string
     */
    public function getPriceonty()
    {
        return $this->container['priceonty'];
    }

    /**
     * Sets priceonty
     *
     * @param string $priceonty priceonty
     *
     * @return $this
     */
    public function setPriceonty($priceonty)
    {
        $this->container['priceonty'] = $priceonty;

        return $this;
    }

    /**
     * Gets glcost
     *
     * @return double
     */
    public function getGlcost()
    {
        return $this->container['glcost'];
    }

    /**
     * Sets glcost
     *
     * @param double $glcost glcost
     *
     * @return $this
     */
    public function setGlcost($glcost)
    {
        $this->container['glcost'] = $glcost;

        return $this;
    }

    /**
     * Gets pdcost
     *
     * @return double
     */
    public function getPdcost()
    {
        return $this->container['pdcost'];
    }

    /**
     * Sets pdcost
     *
     * @param double $pdcost pdcost
     *
     * @return $this
     */
    public function setPdcost($pdcost)
    {
        $this->container['pdcost'] = $pdcost;

        return $this;
    }

    /**
     * Gets pocost
     *
     * @return double
     */
    public function getPocost()
    {
        return $this->container['pocost'];
    }

    /**
     * Sets pocost
     *
     * @param double $pocost pocost
     *
     * @return $this
     */
    public function setPocost($pocost)
    {
        $this->container['pocost'] = $pocost;

        return $this;
    }

    /**
     * Gets smcost
     *
     * @return double
     */
    public function getSmcost()
    {
        return $this->container['smcost'];
    }

    /**
     * Sets smcost
     *
     * @param double $smcost smcost
     *
     * @return $this
     */
    public function setSmcost($smcost)
    {
        $this->container['smcost'] = $smcost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


