<?php
/**
 * TCartoninfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TCartoninfo Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TCartoninfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-cartoninfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'orderno' => 'int',
        'ordersuf' => 'int',
        'whse' => 'string',
        'lineno' => 'int',
        'cartonno' => 'int',
        'shipviaty' => 'string',
        'boxid' => 'string',
        'cartonid' => 'string',
        'trackingid' => 'string',
        'weight' => 'double',
        'height' => 'double',
        'length' => 'double',
        'width' => 'double',
        'cube' => 'double',
        'dimweight' => 'double',
        'boxdesc' => 'string',
        'billoflading' => 'string',
        'ordhistcd' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'orderno' => 'int64',
        'ordersuf' => 'int64',
        'whse' => null,
        'lineno' => 'int64',
        'cartonno' => 'int64',
        'shipviaty' => null,
        'boxid' => null,
        'cartonid' => null,
        'trackingid' => null,
        'weight' => 'double',
        'height' => 'double',
        'length' => 'double',
        'width' => 'double',
        'cube' => 'double',
        'dimweight' => 'double',
        'boxdesc' => null,
        'billoflading' => null,
        'ordhistcd' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orderno' => 'orderno',
        'ordersuf' => 'ordersuf',
        'whse' => 'whse',
        'lineno' => 'lineno',
        'cartonno' => 'cartonno',
        'shipviaty' => 'shipviaty',
        'boxid' => 'boxid',
        'cartonid' => 'cartonid',
        'trackingid' => 'trackingid',
        'weight' => 'weight',
        'height' => 'height',
        'length' => 'length',
        'width' => 'width',
        'cube' => 'cube',
        'dimweight' => 'dimweight',
        'boxdesc' => 'boxdesc',
        'billoflading' => 'billoflading',
        'ordhistcd' => 'ordhistcd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'orderno' => 'setOrderno',
        'ordersuf' => 'setOrdersuf',
        'whse' => 'setWhse',
        'lineno' => 'setLineno',
        'cartonno' => 'setCartonno',
        'shipviaty' => 'setShipviaty',
        'boxid' => 'setBoxid',
        'cartonid' => 'setCartonid',
        'trackingid' => 'setTrackingid',
        'weight' => 'setWeight',
        'height' => 'setHeight',
        'length' => 'setLength',
        'width' => 'setWidth',
        'cube' => 'setCube',
        'dimweight' => 'setDimweight',
        'boxdesc' => 'setBoxdesc',
        'billoflading' => 'setBilloflading',
        'ordhistcd' => 'setOrdhistcd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'orderno' => 'getOrderno',
        'ordersuf' => 'getOrdersuf',
        'whse' => 'getWhse',
        'lineno' => 'getLineno',
        'cartonno' => 'getCartonno',
        'shipviaty' => 'getShipviaty',
        'boxid' => 'getBoxid',
        'cartonid' => 'getCartonid',
        'trackingid' => 'getTrackingid',
        'weight' => 'getWeight',
        'height' => 'getHeight',
        'length' => 'getLength',
        'width' => 'getWidth',
        'cube' => 'getCube',
        'dimweight' => 'getDimweight',
        'boxdesc' => 'getBoxdesc',
        'billoflading' => 'getBilloflading',
        'ordhistcd' => 'getOrdhistcd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['orderno'] = isset($data['orderno']) ? $data['orderno'] : null;
        $this->container['ordersuf'] = isset($data['ordersuf']) ? $data['ordersuf'] : null;
        $this->container['whse'] = isset($data['whse']) ? $data['whse'] : null;
        $this->container['lineno'] = isset($data['lineno']) ? $data['lineno'] : null;
        $this->container['cartonno'] = isset($data['cartonno']) ? $data['cartonno'] : null;
        $this->container['shipviaty'] = isset($data['shipviaty']) ? $data['shipviaty'] : null;
        $this->container['boxid'] = isset($data['boxid']) ? $data['boxid'] : null;
        $this->container['cartonid'] = isset($data['cartonid']) ? $data['cartonid'] : null;
        $this->container['trackingid'] = isset($data['trackingid']) ? $data['trackingid'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['cube'] = isset($data['cube']) ? $data['cube'] : null;
        $this->container['dimweight'] = isset($data['dimweight']) ? $data['dimweight'] : null;
        $this->container['boxdesc'] = isset($data['boxdesc']) ? $data['boxdesc'] : null;
        $this->container['billoflading'] = isset($data['billoflading']) ? $data['billoflading'] : null;
        $this->container['ordhistcd'] = isset($data['ordhistcd']) ? $data['ordhistcd'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets orderno
     *
     * @return int
     */
    public function getOrderno()
    {
        return $this->container['orderno'];
    }

    /**
     * Sets orderno
     *
     * @param int $orderno orderno
     *
     * @return $this
     */
    public function setOrderno($orderno)
    {
        $this->container['orderno'] = $orderno;

        return $this;
    }

    /**
     * Gets ordersuf
     *
     * @return int
     */
    public function getOrdersuf()
    {
        return $this->container['ordersuf'];
    }

    /**
     * Sets ordersuf
     *
     * @param int $ordersuf ordersuf
     *
     * @return $this
     */
    public function setOrdersuf($ordersuf)
    {
        $this->container['ordersuf'] = $ordersuf;

        return $this;
    }

    /**
     * Gets whse
     *
     * @return string
     */
    public function getWhse()
    {
        return $this->container['whse'];
    }

    /**
     * Sets whse
     *
     * @param string $whse whse
     *
     * @return $this
     */
    public function setWhse($whse)
    {
        $this->container['whse'] = $whse;

        return $this;
    }

    /**
     * Gets lineno
     *
     * @return int
     */
    public function getLineno()
    {
        return $this->container['lineno'];
    }

    /**
     * Sets lineno
     *
     * @param int $lineno lineno
     *
     * @return $this
     */
    public function setLineno($lineno)
    {
        $this->container['lineno'] = $lineno;

        return $this;
    }

    /**
     * Gets cartonno
     *
     * @return int
     */
    public function getCartonno()
    {
        return $this->container['cartonno'];
    }

    /**
     * Sets cartonno
     *
     * @param int $cartonno cartonno
     *
     * @return $this
     */
    public function setCartonno($cartonno)
    {
        $this->container['cartonno'] = $cartonno;

        return $this;
    }

    /**
     * Gets shipviaty
     *
     * @return string
     */
    public function getShipviaty()
    {
        return $this->container['shipviaty'];
    }

    /**
     * Sets shipviaty
     *
     * @param string $shipviaty shipviaty
     *
     * @return $this
     */
    public function setShipviaty($shipviaty)
    {
        $this->container['shipviaty'] = $shipviaty;

        return $this;
    }

    /**
     * Gets boxid
     *
     * @return string
     */
    public function getBoxid()
    {
        return $this->container['boxid'];
    }

    /**
     * Sets boxid
     *
     * @param string $boxid boxid
     *
     * @return $this
     */
    public function setBoxid($boxid)
    {
        $this->container['boxid'] = $boxid;

        return $this;
    }

    /**
     * Gets cartonid
     *
     * @return string
     */
    public function getCartonid()
    {
        return $this->container['cartonid'];
    }

    /**
     * Sets cartonid
     *
     * @param string $cartonid cartonid
     *
     * @return $this
     */
    public function setCartonid($cartonid)
    {
        $this->container['cartonid'] = $cartonid;

        return $this;
    }

    /**
     * Gets trackingid
     *
     * @return string
     */
    public function getTrackingid()
    {
        return $this->container['trackingid'];
    }

    /**
     * Sets trackingid
     *
     * @param string $trackingid trackingid
     *
     * @return $this
     */
    public function setTrackingid($trackingid)
    {
        $this->container['trackingid'] = $trackingid;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return double
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param double $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets height
     *
     * @return double
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param double $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets length
     *
     * @return double
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param double $length length
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets width
     *
     * @return double
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param double $width width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets cube
     *
     * @return double
     */
    public function getCube()
    {
        return $this->container['cube'];
    }

    /**
     * Sets cube
     *
     * @param double $cube cube
     *
     * @return $this
     */
    public function setCube($cube)
    {
        $this->container['cube'] = $cube;

        return $this;
    }

    /**
     * Gets dimweight
     *
     * @return double
     */
    public function getDimweight()
    {
        return $this->container['dimweight'];
    }

    /**
     * Sets dimweight
     *
     * @param double $dimweight dimweight
     *
     * @return $this
     */
    public function setDimweight($dimweight)
    {
        $this->container['dimweight'] = $dimweight;

        return $this;
    }

    /**
     * Gets boxdesc
     *
     * @return string
     */
    public function getBoxdesc()
    {
        return $this->container['boxdesc'];
    }

    /**
     * Sets boxdesc
     *
     * @param string $boxdesc boxdesc
     *
     * @return $this
     */
    public function setBoxdesc($boxdesc)
    {
        $this->container['boxdesc'] = $boxdesc;

        return $this;
    }

    /**
     * Gets billoflading
     *
     * @return string
     */
    public function getBilloflading()
    {
        return $this->container['billoflading'];
    }

    /**
     * Sets billoflading
     *
     * @param string $billoflading billoflading
     *
     * @return $this
     */
    public function setBilloflading($billoflading)
    {
        $this->container['billoflading'] = $billoflading;

        return $this;
    }

    /**
     * Gets ordhistcd
     *
     * @return string
     */
    public function getOrdhistcd()
    {
        return $this->container['ordhistcd'];
    }

    /**
     * Sets ordhistcd
     *
     * @param string $ordhistcd ordhistcd
     *
     * @return $this
     */
    public function setOrdhistcd($ordhistcd)
    {
        $this->container['ordhistcd'] = $ordhistcd;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


