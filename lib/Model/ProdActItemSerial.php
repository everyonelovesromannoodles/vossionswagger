<?php
/**
 * ProdActItemSerial
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProdActItemSerial Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProdActItemSerial implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'prodActItemSerial';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_no' => 'string',
        'activity_code' => 'string',
        'seq_no' => 'string',
        'serial_number' => 'string',
        'serial_status' => 'string',
        'serial_description' => 'string',
        'co_no' => 'string',
        'whse' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'line_no' => null,
        'activity_code' => null,
        'seq_no' => null,
        'serial_number' => null,
        'serial_status' => null,
        'serial_description' => null,
        'co_no' => null,
        'whse' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_no' => 'lineNo',
        'activity_code' => 'activityCode',
        'seq_no' => 'SeqNo',
        'serial_number' => 'serialNumber',
        'serial_status' => 'serialStatus',
        'serial_description' => 'serialDescription',
        'co_no' => 'coNo',
        'whse' => 'whse'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_no' => 'setLineNo',
        'activity_code' => 'setActivityCode',
        'seq_no' => 'setSeqNo',
        'serial_number' => 'setSerialNumber',
        'serial_status' => 'setSerialStatus',
        'serial_description' => 'setSerialDescription',
        'co_no' => 'setCoNo',
        'whse' => 'setWhse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_no' => 'getLineNo',
        'activity_code' => 'getActivityCode',
        'seq_no' => 'getSeqNo',
        'serial_number' => 'getSerialNumber',
        'serial_status' => 'getSerialStatus',
        'serial_description' => 'getSerialDescription',
        'co_no' => 'getCoNo',
        'whse' => 'getWhse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_no'] = isset($data['line_no']) ? $data['line_no'] : null;
        $this->container['activity_code'] = isset($data['activity_code']) ? $data['activity_code'] : null;
        $this->container['seq_no'] = isset($data['seq_no']) ? $data['seq_no'] : null;
        $this->container['serial_number'] = isset($data['serial_number']) ? $data['serial_number'] : null;
        $this->container['serial_status'] = isset($data['serial_status']) ? $data['serial_status'] : null;
        $this->container['serial_description'] = isset($data['serial_description']) ? $data['serial_description'] : null;
        $this->container['co_no'] = isset($data['co_no']) ? $data['co_no'] : null;
        $this->container['whse'] = isset($data['whse']) ? $data['whse'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_no
     *
     * @return string
     */
    public function getLineNo()
    {
        return $this->container['line_no'];
    }

    /**
     * Sets line_no
     *
     * @param string $line_no line_no
     *
     * @return $this
     */
    public function setLineNo($line_no)
    {
        $this->container['line_no'] = $line_no;

        return $this;
    }

    /**
     * Gets activity_code
     *
     * @return string
     */
    public function getActivityCode()
    {
        return $this->container['activity_code'];
    }

    /**
     * Sets activity_code
     *
     * @param string $activity_code activity_code
     *
     * @return $this
     */
    public function setActivityCode($activity_code)
    {
        $this->container['activity_code'] = $activity_code;

        return $this;
    }

    /**
     * Gets seq_no
     *
     * @return string
     */
    public function getSeqNo()
    {
        return $this->container['seq_no'];
    }

    /**
     * Sets seq_no
     *
     * @param string $seq_no seq_no
     *
     * @return $this
     */
    public function setSeqNo($seq_no)
    {
        $this->container['seq_no'] = $seq_no;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string $serial_number serial_number
     *
     * @return $this
     */
    public function setSerialNumber($serial_number)
    {
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets serial_status
     *
     * @return string
     */
    public function getSerialStatus()
    {
        return $this->container['serial_status'];
    }

    /**
     * Sets serial_status
     *
     * @param string $serial_status serial_status
     *
     * @return $this
     */
    public function setSerialStatus($serial_status)
    {
        $this->container['serial_status'] = $serial_status;

        return $this;
    }

    /**
     * Gets serial_description
     *
     * @return string
     */
    public function getSerialDescription()
    {
        return $this->container['serial_description'];
    }

    /**
     * Sets serial_description
     *
     * @param string $serial_description serial_description
     *
     * @return $this
     */
    public function setSerialDescription($serial_description)
    {
        $this->container['serial_description'] = $serial_description;

        return $this;
    }

    /**
     * Gets co_no
     *
     * @return string
     */
    public function getCoNo()
    {
        return $this->container['co_no'];
    }

    /**
     * Sets co_no
     *
     * @param string $co_no co_no
     *
     * @return $this
     */
    public function setCoNo($co_no)
    {
        $this->container['co_no'] = $co_no;

        return $this;
    }

    /**
     * Gets whse
     *
     * @return string
     */
    public function getWhse()
    {
        return $this->container['whse'];
    }

    /**
     * Sets whse
     *
     * @param string $whse whse
     *
     * @return $this
     */
    public function setWhse($whse)
    {
        $this->container['whse'] = $whse;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


