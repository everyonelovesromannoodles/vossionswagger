<?php
/**
 * SxtFuncAck
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SxtFuncAck Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SxtFuncAck implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxt_func_ack';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'co_no' => 'int',
        'correlation_data' => 'string',
        'data1' => 'string',
        'error_no' => 'int',
        'msg' => 'string',
        'seq_no' => 'int',
        'trx_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'co_no' => 'int64',
        'correlation_data' => null,
        'data1' => null,
        'error_no' => 'int64',
        'msg' => null,
        'seq_no' => 'int64',
        'trx_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'co_no' => 'coNo',
        'correlation_data' => 'correlation_data',
        'data1' => 'data1',
        'error_no' => 'errorNo',
        'msg' => 'msg',
        'seq_no' => 'seqNo',
        'trx_type' => 'trxType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'co_no' => 'setCoNo',
        'correlation_data' => 'setCorrelationData',
        'data1' => 'setData1',
        'error_no' => 'setErrorNo',
        'msg' => 'setMsg',
        'seq_no' => 'setSeqNo',
        'trx_type' => 'setTrxType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'co_no' => 'getCoNo',
        'correlation_data' => 'getCorrelationData',
        'data1' => 'getData1',
        'error_no' => 'getErrorNo',
        'msg' => 'getMsg',
        'seq_no' => 'getSeqNo',
        'trx_type' => 'getTrxType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['co_no'] = isset($data['co_no']) ? $data['co_no'] : null;
        $this->container['correlation_data'] = isset($data['correlation_data']) ? $data['correlation_data'] : null;
        $this->container['data1'] = isset($data['data1']) ? $data['data1'] : null;
        $this->container['error_no'] = isset($data['error_no']) ? $data['error_no'] : null;
        $this->container['msg'] = isset($data['msg']) ? $data['msg'] : null;
        $this->container['seq_no'] = isset($data['seq_no']) ? $data['seq_no'] : null;
        $this->container['trx_type'] = isset($data['trx_type']) ? $data['trx_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets co_no
     *
     * @return int
     */
    public function getCoNo()
    {
        return $this->container['co_no'];
    }

    /**
     * Sets co_no
     *
     * @param int $co_no co_no
     *
     * @return $this
     */
    public function setCoNo($co_no)
    {
        $this->container['co_no'] = $co_no;

        return $this;
    }

    /**
     * Gets correlation_data
     *
     * @return string
     */
    public function getCorrelationData()
    {
        return $this->container['correlation_data'];
    }

    /**
     * Sets correlation_data
     *
     * @param string $correlation_data correlation_data
     *
     * @return $this
     */
    public function setCorrelationData($correlation_data)
    {
        $this->container['correlation_data'] = $correlation_data;

        return $this;
    }

    /**
     * Gets data1
     *
     * @return string
     */
    public function getData1()
    {
        return $this->container['data1'];
    }

    /**
     * Sets data1
     *
     * @param string $data1 data1
     *
     * @return $this
     */
    public function setData1($data1)
    {
        $this->container['data1'] = $data1;

        return $this;
    }

    /**
     * Gets error_no
     *
     * @return int
     */
    public function getErrorNo()
    {
        return $this->container['error_no'];
    }

    /**
     * Sets error_no
     *
     * @param int $error_no error_no
     *
     * @return $this
     */
    public function setErrorNo($error_no)
    {
        $this->container['error_no'] = $error_no;

        return $this;
    }

    /**
     * Gets msg
     *
     * @return string
     */
    public function getMsg()
    {
        return $this->container['msg'];
    }

    /**
     * Sets msg
     *
     * @param string $msg msg
     *
     * @return $this
     */
    public function setMsg($msg)
    {
        $this->container['msg'] = $msg;

        return $this;
    }

    /**
     * Gets seq_no
     *
     * @return int
     */
    public function getSeqNo()
    {
        return $this->container['seq_no'];
    }

    /**
     * Sets seq_no
     *
     * @param int $seq_no seq_no
     *
     * @return $this
     */
    public function setSeqNo($seq_no)
    {
        $this->container['seq_no'] = $seq_no;

        return $this;
    }

    /**
     * Gets trx_type
     *
     * @return string
     */
    public function getTrxType()
    {
        return $this->container['trx_type'];
    }

    /**
     * Sets trx_type
     *
     * @param string $trx_type trx_type
     *
     * @return $this
     */
    public function setTrxType($trx_type)
    {
        $this->container['trx_type'] = $trx_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


