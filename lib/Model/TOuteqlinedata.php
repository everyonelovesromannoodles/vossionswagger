<?php
/**
 * TOuteqlinedata
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TOuteqlinedata Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TOuteqlinedata implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-outeqlinedata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cartid' => 'string',
        'warehouseid' => 'string',
        'orderno' => 'int',
        'ordersuf' => 'int',
        'lineno' => 'int',
        'seqno' => 'int',
        'itemnumber' => 'string',
        'orderqty' => 'double',
        'unitofmeasure' => 'string',
        'itemdesc1' => 'string',
        'itemdesc2' => 'string',
        'nonstockflag' => 'string',
        'returnfl' => 'bool',
        'vendor' => 'double',
        'prodline' => 'string',
        'prodcat' => 'string',
        'pricematchfl' => 'bool',
        'manpricefl' => 'bool',
        'manualprice' => 'double',
        'regularprice' => 'double',
        'lookupprice' => 'double',
        'minimumprice' => 'double',
        'userfield' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cartid' => null,
        'warehouseid' => null,
        'orderno' => 'int64',
        'ordersuf' => 'int64',
        'lineno' => 'int64',
        'seqno' => 'int64',
        'itemnumber' => null,
        'orderqty' => 'double',
        'unitofmeasure' => null,
        'itemdesc1' => null,
        'itemdesc2' => null,
        'nonstockflag' => null,
        'returnfl' => null,
        'vendor' => 'double',
        'prodline' => null,
        'prodcat' => null,
        'pricematchfl' => null,
        'manpricefl' => null,
        'manualprice' => 'double',
        'regularprice' => 'double',
        'lookupprice' => 'double',
        'minimumprice' => 'double',
        'userfield' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cartid' => 'cartid',
        'warehouseid' => 'warehouseid',
        'orderno' => 'orderno',
        'ordersuf' => 'ordersuf',
        'lineno' => 'lineno',
        'seqno' => 'seqno',
        'itemnumber' => 'itemnumber',
        'orderqty' => 'orderqty',
        'unitofmeasure' => 'unitofmeasure',
        'itemdesc1' => 'itemdesc1',
        'itemdesc2' => 'itemdesc2',
        'nonstockflag' => 'nonstockflag',
        'returnfl' => 'returnfl',
        'vendor' => 'vendor',
        'prodline' => 'prodline',
        'prodcat' => 'prodcat',
        'pricematchfl' => 'pricematchfl',
        'manpricefl' => 'manpricefl',
        'manualprice' => 'manualprice',
        'regularprice' => 'regularprice',
        'lookupprice' => 'lookupprice',
        'minimumprice' => 'minimumprice',
        'userfield' => 'userfield'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cartid' => 'setCartid',
        'warehouseid' => 'setWarehouseid',
        'orderno' => 'setOrderno',
        'ordersuf' => 'setOrdersuf',
        'lineno' => 'setLineno',
        'seqno' => 'setSeqno',
        'itemnumber' => 'setItemnumber',
        'orderqty' => 'setOrderqty',
        'unitofmeasure' => 'setUnitofmeasure',
        'itemdesc1' => 'setItemdesc1',
        'itemdesc2' => 'setItemdesc2',
        'nonstockflag' => 'setNonstockflag',
        'returnfl' => 'setReturnfl',
        'vendor' => 'setVendor',
        'prodline' => 'setProdline',
        'prodcat' => 'setProdcat',
        'pricematchfl' => 'setPricematchfl',
        'manpricefl' => 'setManpricefl',
        'manualprice' => 'setManualprice',
        'regularprice' => 'setRegularprice',
        'lookupprice' => 'setLookupprice',
        'minimumprice' => 'setMinimumprice',
        'userfield' => 'setUserfield'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cartid' => 'getCartid',
        'warehouseid' => 'getWarehouseid',
        'orderno' => 'getOrderno',
        'ordersuf' => 'getOrdersuf',
        'lineno' => 'getLineno',
        'seqno' => 'getSeqno',
        'itemnumber' => 'getItemnumber',
        'orderqty' => 'getOrderqty',
        'unitofmeasure' => 'getUnitofmeasure',
        'itemdesc1' => 'getItemdesc1',
        'itemdesc2' => 'getItemdesc2',
        'nonstockflag' => 'getNonstockflag',
        'returnfl' => 'getReturnfl',
        'vendor' => 'getVendor',
        'prodline' => 'getProdline',
        'prodcat' => 'getProdcat',
        'pricematchfl' => 'getPricematchfl',
        'manpricefl' => 'getManpricefl',
        'manualprice' => 'getManualprice',
        'regularprice' => 'getRegularprice',
        'lookupprice' => 'getLookupprice',
        'minimumprice' => 'getMinimumprice',
        'userfield' => 'getUserfield'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cartid'] = isset($data['cartid']) ? $data['cartid'] : null;
        $this->container['warehouseid'] = isset($data['warehouseid']) ? $data['warehouseid'] : null;
        $this->container['orderno'] = isset($data['orderno']) ? $data['orderno'] : null;
        $this->container['ordersuf'] = isset($data['ordersuf']) ? $data['ordersuf'] : null;
        $this->container['lineno'] = isset($data['lineno']) ? $data['lineno'] : null;
        $this->container['seqno'] = isset($data['seqno']) ? $data['seqno'] : null;
        $this->container['itemnumber'] = isset($data['itemnumber']) ? $data['itemnumber'] : null;
        $this->container['orderqty'] = isset($data['orderqty']) ? $data['orderqty'] : null;
        $this->container['unitofmeasure'] = isset($data['unitofmeasure']) ? $data['unitofmeasure'] : null;
        $this->container['itemdesc1'] = isset($data['itemdesc1']) ? $data['itemdesc1'] : null;
        $this->container['itemdesc2'] = isset($data['itemdesc2']) ? $data['itemdesc2'] : null;
        $this->container['nonstockflag'] = isset($data['nonstockflag']) ? $data['nonstockflag'] : null;
        $this->container['returnfl'] = isset($data['returnfl']) ? $data['returnfl'] : null;
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
        $this->container['prodline'] = isset($data['prodline']) ? $data['prodline'] : null;
        $this->container['prodcat'] = isset($data['prodcat']) ? $data['prodcat'] : null;
        $this->container['pricematchfl'] = isset($data['pricematchfl']) ? $data['pricematchfl'] : null;
        $this->container['manpricefl'] = isset($data['manpricefl']) ? $data['manpricefl'] : null;
        $this->container['manualprice'] = isset($data['manualprice']) ? $data['manualprice'] : null;
        $this->container['regularprice'] = isset($data['regularprice']) ? $data['regularprice'] : null;
        $this->container['lookupprice'] = isset($data['lookupprice']) ? $data['lookupprice'] : null;
        $this->container['minimumprice'] = isset($data['minimumprice']) ? $data['minimumprice'] : null;
        $this->container['userfield'] = isset($data['userfield']) ? $data['userfield'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cartid
     *
     * @return string
     */
    public function getCartid()
    {
        return $this->container['cartid'];
    }

    /**
     * Sets cartid
     *
     * @param string $cartid cartid
     *
     * @return $this
     */
    public function setCartid($cartid)
    {
        $this->container['cartid'] = $cartid;

        return $this;
    }

    /**
     * Gets warehouseid
     *
     * @return string
     */
    public function getWarehouseid()
    {
        return $this->container['warehouseid'];
    }

    /**
     * Sets warehouseid
     *
     * @param string $warehouseid warehouseid
     *
     * @return $this
     */
    public function setWarehouseid($warehouseid)
    {
        $this->container['warehouseid'] = $warehouseid;

        return $this;
    }

    /**
     * Gets orderno
     *
     * @return int
     */
    public function getOrderno()
    {
        return $this->container['orderno'];
    }

    /**
     * Sets orderno
     *
     * @param int $orderno orderno
     *
     * @return $this
     */
    public function setOrderno($orderno)
    {
        $this->container['orderno'] = $orderno;

        return $this;
    }

    /**
     * Gets ordersuf
     *
     * @return int
     */
    public function getOrdersuf()
    {
        return $this->container['ordersuf'];
    }

    /**
     * Sets ordersuf
     *
     * @param int $ordersuf ordersuf
     *
     * @return $this
     */
    public function setOrdersuf($ordersuf)
    {
        $this->container['ordersuf'] = $ordersuf;

        return $this;
    }

    /**
     * Gets lineno
     *
     * @return int
     */
    public function getLineno()
    {
        return $this->container['lineno'];
    }

    /**
     * Sets lineno
     *
     * @param int $lineno lineno
     *
     * @return $this
     */
    public function setLineno($lineno)
    {
        $this->container['lineno'] = $lineno;

        return $this;
    }

    /**
     * Gets seqno
     *
     * @return int
     */
    public function getSeqno()
    {
        return $this->container['seqno'];
    }

    /**
     * Sets seqno
     *
     * @param int $seqno seqno
     *
     * @return $this
     */
    public function setSeqno($seqno)
    {
        $this->container['seqno'] = $seqno;

        return $this;
    }

    /**
     * Gets itemnumber
     *
     * @return string
     */
    public function getItemnumber()
    {
        return $this->container['itemnumber'];
    }

    /**
     * Sets itemnumber
     *
     * @param string $itemnumber itemnumber
     *
     * @return $this
     */
    public function setItemnumber($itemnumber)
    {
        $this->container['itemnumber'] = $itemnumber;

        return $this;
    }

    /**
     * Gets orderqty
     *
     * @return double
     */
    public function getOrderqty()
    {
        return $this->container['orderqty'];
    }

    /**
     * Sets orderqty
     *
     * @param double $orderqty orderqty
     *
     * @return $this
     */
    public function setOrderqty($orderqty)
    {
        $this->container['orderqty'] = $orderqty;

        return $this;
    }

    /**
     * Gets unitofmeasure
     *
     * @return string
     */
    public function getUnitofmeasure()
    {
        return $this->container['unitofmeasure'];
    }

    /**
     * Sets unitofmeasure
     *
     * @param string $unitofmeasure unitofmeasure
     *
     * @return $this
     */
    public function setUnitofmeasure($unitofmeasure)
    {
        $this->container['unitofmeasure'] = $unitofmeasure;

        return $this;
    }

    /**
     * Gets itemdesc1
     *
     * @return string
     */
    public function getItemdesc1()
    {
        return $this->container['itemdesc1'];
    }

    /**
     * Sets itemdesc1
     *
     * @param string $itemdesc1 itemdesc1
     *
     * @return $this
     */
    public function setItemdesc1($itemdesc1)
    {
        $this->container['itemdesc1'] = $itemdesc1;

        return $this;
    }

    /**
     * Gets itemdesc2
     *
     * @return string
     */
    public function getItemdesc2()
    {
        return $this->container['itemdesc2'];
    }

    /**
     * Sets itemdesc2
     *
     * @param string $itemdesc2 itemdesc2
     *
     * @return $this
     */
    public function setItemdesc2($itemdesc2)
    {
        $this->container['itemdesc2'] = $itemdesc2;

        return $this;
    }

    /**
     * Gets nonstockflag
     *
     * @return string
     */
    public function getNonstockflag()
    {
        return $this->container['nonstockflag'];
    }

    /**
     * Sets nonstockflag
     *
     * @param string $nonstockflag nonstockflag
     *
     * @return $this
     */
    public function setNonstockflag($nonstockflag)
    {
        $this->container['nonstockflag'] = $nonstockflag;

        return $this;
    }

    /**
     * Gets returnfl
     *
     * @return bool
     */
    public function getReturnfl()
    {
        return $this->container['returnfl'];
    }

    /**
     * Sets returnfl
     *
     * @param bool $returnfl returnfl
     *
     * @return $this
     */
    public function setReturnfl($returnfl)
    {
        $this->container['returnfl'] = $returnfl;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return double
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param double $vendor vendor
     *
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets prodline
     *
     * @return string
     */
    public function getProdline()
    {
        return $this->container['prodline'];
    }

    /**
     * Sets prodline
     *
     * @param string $prodline prodline
     *
     * @return $this
     */
    public function setProdline($prodline)
    {
        $this->container['prodline'] = $prodline;

        return $this;
    }

    /**
     * Gets prodcat
     *
     * @return string
     */
    public function getProdcat()
    {
        return $this->container['prodcat'];
    }

    /**
     * Sets prodcat
     *
     * @param string $prodcat prodcat
     *
     * @return $this
     */
    public function setProdcat($prodcat)
    {
        $this->container['prodcat'] = $prodcat;

        return $this;
    }

    /**
     * Gets pricematchfl
     *
     * @return bool
     */
    public function getPricematchfl()
    {
        return $this->container['pricematchfl'];
    }

    /**
     * Sets pricematchfl
     *
     * @param bool $pricematchfl pricematchfl
     *
     * @return $this
     */
    public function setPricematchfl($pricematchfl)
    {
        $this->container['pricematchfl'] = $pricematchfl;

        return $this;
    }

    /**
     * Gets manpricefl
     *
     * @return bool
     */
    public function getManpricefl()
    {
        return $this->container['manpricefl'];
    }

    /**
     * Sets manpricefl
     *
     * @param bool $manpricefl manpricefl
     *
     * @return $this
     */
    public function setManpricefl($manpricefl)
    {
        $this->container['manpricefl'] = $manpricefl;

        return $this;
    }

    /**
     * Gets manualprice
     *
     * @return double
     */
    public function getManualprice()
    {
        return $this->container['manualprice'];
    }

    /**
     * Sets manualprice
     *
     * @param double $manualprice manualprice
     *
     * @return $this
     */
    public function setManualprice($manualprice)
    {
        $this->container['manualprice'] = $manualprice;

        return $this;
    }

    /**
     * Gets regularprice
     *
     * @return double
     */
    public function getRegularprice()
    {
        return $this->container['regularprice'];
    }

    /**
     * Sets regularprice
     *
     * @param double $regularprice regularprice
     *
     * @return $this
     */
    public function setRegularprice($regularprice)
    {
        $this->container['regularprice'] = $regularprice;

        return $this;
    }

    /**
     * Gets lookupprice
     *
     * @return double
     */
    public function getLookupprice()
    {
        return $this->container['lookupprice'];
    }

    /**
     * Sets lookupprice
     *
     * @param double $lookupprice lookupprice
     *
     * @return $this
     */
    public function setLookupprice($lookupprice)
    {
        $this->container['lookupprice'] = $lookupprice;

        return $this;
    }

    /**
     * Gets minimumprice
     *
     * @return double
     */
    public function getMinimumprice()
    {
        return $this->container['minimumprice'];
    }

    /**
     * Sets minimumprice
     *
     * @param double $minimumprice minimumprice
     *
     * @return $this
     */
    public function setMinimumprice($minimumprice)
    {
        $this->container['minimumprice'] = $minimumprice;

        return $this;
    }

    /**
     * Gets userfield
     *
     * @return string
     */
    public function getUserfield()
    {
        return $this->container['userfield'];
    }

    /**
     * Sets userfield
     *
     * @param string $userfield userfield
     *
     * @return $this
     */
    public function setUserfield($userfield)
    {
        $this->container['userfield'] = $userfield;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


