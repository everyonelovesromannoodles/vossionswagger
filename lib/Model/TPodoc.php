<?php
/**
 * TPodoc
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TPodoc Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TPodoc implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-podoc';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'doc_id' => 'int',
        'whse' => 'string',
        'vend_no' => 'double',
        'ship_fm_no' => 'int',
        'po_no' => 'int',
        'po_suf' => 'int',
        'stage_cd' => 'int',
        'stage_cd_words' => 'string',
        'enter_dt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'doc_id' => 'int64',
        'whse' => null,
        'vend_no' => 'double',
        'ship_fm_no' => 'int64',
        'po_no' => 'int64',
        'po_suf' => 'int64',
        'stage_cd' => 'int64',
        'stage_cd_words' => null,
        'enter_dt' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'doc_id' => 'docId',
        'whse' => 'whse',
        'vend_no' => 'vendNo',
        'ship_fm_no' => 'shipFmNo',
        'po_no' => 'poNo',
        'po_suf' => 'poSuf',
        'stage_cd' => 'stageCd',
        'stage_cd_words' => 'stageCdWords',
        'enter_dt' => 'enterDt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'doc_id' => 'setDocId',
        'whse' => 'setWhse',
        'vend_no' => 'setVendNo',
        'ship_fm_no' => 'setShipFmNo',
        'po_no' => 'setPoNo',
        'po_suf' => 'setPoSuf',
        'stage_cd' => 'setStageCd',
        'stage_cd_words' => 'setStageCdWords',
        'enter_dt' => 'setEnterDt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'doc_id' => 'getDocId',
        'whse' => 'getWhse',
        'vend_no' => 'getVendNo',
        'ship_fm_no' => 'getShipFmNo',
        'po_no' => 'getPoNo',
        'po_suf' => 'getPoSuf',
        'stage_cd' => 'getStageCd',
        'stage_cd_words' => 'getStageCdWords',
        'enter_dt' => 'getEnterDt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['doc_id'] = isset($data['doc_id']) ? $data['doc_id'] : null;
        $this->container['whse'] = isset($data['whse']) ? $data['whse'] : null;
        $this->container['vend_no'] = isset($data['vend_no']) ? $data['vend_no'] : null;
        $this->container['ship_fm_no'] = isset($data['ship_fm_no']) ? $data['ship_fm_no'] : null;
        $this->container['po_no'] = isset($data['po_no']) ? $data['po_no'] : null;
        $this->container['po_suf'] = isset($data['po_suf']) ? $data['po_suf'] : null;
        $this->container['stage_cd'] = isset($data['stage_cd']) ? $data['stage_cd'] : null;
        $this->container['stage_cd_words'] = isset($data['stage_cd_words']) ? $data['stage_cd_words'] : null;
        $this->container['enter_dt'] = isset($data['enter_dt']) ? $data['enter_dt'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets doc_id
     *
     * @return int
     */
    public function getDocId()
    {
        return $this->container['doc_id'];
    }

    /**
     * Sets doc_id
     *
     * @param int $doc_id doc_id
     *
     * @return $this
     */
    public function setDocId($doc_id)
    {
        $this->container['doc_id'] = $doc_id;

        return $this;
    }

    /**
     * Gets whse
     *
     * @return string
     */
    public function getWhse()
    {
        return $this->container['whse'];
    }

    /**
     * Sets whse
     *
     * @param string $whse whse
     *
     * @return $this
     */
    public function setWhse($whse)
    {
        $this->container['whse'] = $whse;

        return $this;
    }

    /**
     * Gets vend_no
     *
     * @return double
     */
    public function getVendNo()
    {
        return $this->container['vend_no'];
    }

    /**
     * Sets vend_no
     *
     * @param double $vend_no vend_no
     *
     * @return $this
     */
    public function setVendNo($vend_no)
    {
        $this->container['vend_no'] = $vend_no;

        return $this;
    }

    /**
     * Gets ship_fm_no
     *
     * @return int
     */
    public function getShipFmNo()
    {
        return $this->container['ship_fm_no'];
    }

    /**
     * Sets ship_fm_no
     *
     * @param int $ship_fm_no ship_fm_no
     *
     * @return $this
     */
    public function setShipFmNo($ship_fm_no)
    {
        $this->container['ship_fm_no'] = $ship_fm_no;

        return $this;
    }

    /**
     * Gets po_no
     *
     * @return int
     */
    public function getPoNo()
    {
        return $this->container['po_no'];
    }

    /**
     * Sets po_no
     *
     * @param int $po_no po_no
     *
     * @return $this
     */
    public function setPoNo($po_no)
    {
        $this->container['po_no'] = $po_no;

        return $this;
    }

    /**
     * Gets po_suf
     *
     * @return int
     */
    public function getPoSuf()
    {
        return $this->container['po_suf'];
    }

    /**
     * Sets po_suf
     *
     * @param int $po_suf po_suf
     *
     * @return $this
     */
    public function setPoSuf($po_suf)
    {
        $this->container['po_suf'] = $po_suf;

        return $this;
    }

    /**
     * Gets stage_cd
     *
     * @return int
     */
    public function getStageCd()
    {
        return $this->container['stage_cd'];
    }

    /**
     * Sets stage_cd
     *
     * @param int $stage_cd stage_cd
     *
     * @return $this
     */
    public function setStageCd($stage_cd)
    {
        $this->container['stage_cd'] = $stage_cd;

        return $this;
    }

    /**
     * Gets stage_cd_words
     *
     * @return string
     */
    public function getStageCdWords()
    {
        return $this->container['stage_cd_words'];
    }

    /**
     * Sets stage_cd_words
     *
     * @param string $stage_cd_words stage_cd_words
     *
     * @return $this
     */
    public function setStageCdWords($stage_cd_words)
    {
        $this->container['stage_cd_words'] = $stage_cd_words;

        return $this;
    }

    /**
     * Gets enter_dt
     *
     * @return \DateTime
     */
    public function getEnterDt()
    {
        return $this->container['enter_dt'];
    }

    /**
     * Sets enter_dt
     *
     * @param \DateTime $enter_dt enter_dt
     *
     * @return $this
     */
    public function setEnterDt($enter_dt)
    {
        $this->container['enter_dt'] = $enter_dt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


