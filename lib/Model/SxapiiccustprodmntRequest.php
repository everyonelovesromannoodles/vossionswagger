<?php
/**
 * SxapiiccustprodmntRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SxapiiccustprodmntRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SxapiiccustprodmntRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapiiccustprodmnt_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company_number' => 'int',
        'operator_init' => 'string',
        'operator_password' => 'string',
        'update_type' => 'string',
        'customer_number' => 'double',
        'ship_to' => 'string',
        'product_code' => 'string',
        'alternate_product_code' => 'string',
        'order_quantity' => 'double',
        'unit_sell' => 'string',
        'additional_print_info' => 'string',
        'last_price' => 'double',
        'general_ledger_account' => 'string',
        'custom_parameter' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'company_number' => 'int64',
        'operator_init' => null,
        'operator_password' => null,
        'update_type' => null,
        'customer_number' => 'double',
        'ship_to' => null,
        'product_code' => null,
        'alternate_product_code' => null,
        'order_quantity' => 'double',
        'unit_sell' => null,
        'additional_print_info' => null,
        'last_price' => 'double',
        'general_ledger_account' => null,
        'custom_parameter' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_number' => 'companyNumber',
        'operator_init' => 'operatorInit',
        'operator_password' => 'operatorPassword',
        'update_type' => 'updateType',
        'customer_number' => 'customerNumber',
        'ship_to' => 'shipTo',
        'product_code' => 'productCode',
        'alternate_product_code' => 'alternateProductCode',
        'order_quantity' => 'orderQuantity',
        'unit_sell' => 'unitSell',
        'additional_print_info' => 'additionalPrintInfo',
        'last_price' => 'lastPrice',
        'general_ledger_account' => 'generalLedgerAccount',
        'custom_parameter' => 'customParameter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_number' => 'setCompanyNumber',
        'operator_init' => 'setOperatorInit',
        'operator_password' => 'setOperatorPassword',
        'update_type' => 'setUpdateType',
        'customer_number' => 'setCustomerNumber',
        'ship_to' => 'setShipTo',
        'product_code' => 'setProductCode',
        'alternate_product_code' => 'setAlternateProductCode',
        'order_quantity' => 'setOrderQuantity',
        'unit_sell' => 'setUnitSell',
        'additional_print_info' => 'setAdditionalPrintInfo',
        'last_price' => 'setLastPrice',
        'general_ledger_account' => 'setGeneralLedgerAccount',
        'custom_parameter' => 'setCustomParameter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_number' => 'getCompanyNumber',
        'operator_init' => 'getOperatorInit',
        'operator_password' => 'getOperatorPassword',
        'update_type' => 'getUpdateType',
        'customer_number' => 'getCustomerNumber',
        'ship_to' => 'getShipTo',
        'product_code' => 'getProductCode',
        'alternate_product_code' => 'getAlternateProductCode',
        'order_quantity' => 'getOrderQuantity',
        'unit_sell' => 'getUnitSell',
        'additional_print_info' => 'getAdditionalPrintInfo',
        'last_price' => 'getLastPrice',
        'general_ledger_account' => 'getGeneralLedgerAccount',
        'custom_parameter' => 'getCustomParameter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_number'] = isset($data['company_number']) ? $data['company_number'] : null;
        $this->container['operator_init'] = isset($data['operator_init']) ? $data['operator_init'] : null;
        $this->container['operator_password'] = isset($data['operator_password']) ? $data['operator_password'] : null;
        $this->container['update_type'] = isset($data['update_type']) ? $data['update_type'] : null;
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['ship_to'] = isset($data['ship_to']) ? $data['ship_to'] : null;
        $this->container['product_code'] = isset($data['product_code']) ? $data['product_code'] : null;
        $this->container['alternate_product_code'] = isset($data['alternate_product_code']) ? $data['alternate_product_code'] : null;
        $this->container['order_quantity'] = isset($data['order_quantity']) ? $data['order_quantity'] : null;
        $this->container['unit_sell'] = isset($data['unit_sell']) ? $data['unit_sell'] : null;
        $this->container['additional_print_info'] = isset($data['additional_print_info']) ? $data['additional_print_info'] : null;
        $this->container['last_price'] = isset($data['last_price']) ? $data['last_price'] : null;
        $this->container['general_ledger_account'] = isset($data['general_ledger_account']) ? $data['general_ledger_account'] : null;
        $this->container['custom_parameter'] = isset($data['custom_parameter']) ? $data['custom_parameter'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_number
     *
     * @return int
     */
    public function getCompanyNumber()
    {
        return $this->container['company_number'];
    }

    /**
     * Sets company_number
     *
     * @param int $company_number company_number
     *
     * @return $this
     */
    public function setCompanyNumber($company_number)
    {
        $this->container['company_number'] = $company_number;

        return $this;
    }

    /**
     * Gets operator_init
     *
     * @return string
     */
    public function getOperatorInit()
    {
        return $this->container['operator_init'];
    }

    /**
     * Sets operator_init
     *
     * @param string $operator_init operator_init
     *
     * @return $this
     */
    public function setOperatorInit($operator_init)
    {
        $this->container['operator_init'] = $operator_init;

        return $this;
    }

    /**
     * Gets operator_password
     *
     * @return string
     */
    public function getOperatorPassword()
    {
        return $this->container['operator_password'];
    }

    /**
     * Sets operator_password
     *
     * @param string $operator_password operator_password
     *
     * @return $this
     */
    public function setOperatorPassword($operator_password)
    {
        $this->container['operator_password'] = $operator_password;

        return $this;
    }

    /**
     * Gets update_type
     *
     * @return string
     */
    public function getUpdateType()
    {
        return $this->container['update_type'];
    }

    /**
     * Sets update_type
     *
     * @param string $update_type update_type
     *
     * @return $this
     */
    public function setUpdateType($update_type)
    {
        $this->container['update_type'] = $update_type;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return double
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param double $customer_number customer_number
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return string
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param string $ship_to ship_to
     *
     * @return $this
     */
    public function setShipTo($ship_to)
    {
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string $product_code product_code
     *
     * @return $this
     */
    public function setProductCode($product_code)
    {
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets alternate_product_code
     *
     * @return string
     */
    public function getAlternateProductCode()
    {
        return $this->container['alternate_product_code'];
    }

    /**
     * Sets alternate_product_code
     *
     * @param string $alternate_product_code alternate_product_code
     *
     * @return $this
     */
    public function setAlternateProductCode($alternate_product_code)
    {
        $this->container['alternate_product_code'] = $alternate_product_code;

        return $this;
    }

    /**
     * Gets order_quantity
     *
     * @return double
     */
    public function getOrderQuantity()
    {
        return $this->container['order_quantity'];
    }

    /**
     * Sets order_quantity
     *
     * @param double $order_quantity order_quantity
     *
     * @return $this
     */
    public function setOrderQuantity($order_quantity)
    {
        $this->container['order_quantity'] = $order_quantity;

        return $this;
    }

    /**
     * Gets unit_sell
     *
     * @return string
     */
    public function getUnitSell()
    {
        return $this->container['unit_sell'];
    }

    /**
     * Sets unit_sell
     *
     * @param string $unit_sell unit_sell
     *
     * @return $this
     */
    public function setUnitSell($unit_sell)
    {
        $this->container['unit_sell'] = $unit_sell;

        return $this;
    }

    /**
     * Gets additional_print_info
     *
     * @return string
     */
    public function getAdditionalPrintInfo()
    {
        return $this->container['additional_print_info'];
    }

    /**
     * Sets additional_print_info
     *
     * @param string $additional_print_info additional_print_info
     *
     * @return $this
     */
    public function setAdditionalPrintInfo($additional_print_info)
    {
        $this->container['additional_print_info'] = $additional_print_info;

        return $this;
    }

    /**
     * Gets last_price
     *
     * @return double
     */
    public function getLastPrice()
    {
        return $this->container['last_price'];
    }

    /**
     * Sets last_price
     *
     * @param double $last_price last_price
     *
     * @return $this
     */
    public function setLastPrice($last_price)
    {
        $this->container['last_price'] = $last_price;

        return $this;
    }

    /**
     * Gets general_ledger_account
     *
     * @return string
     */
    public function getGeneralLedgerAccount()
    {
        return $this->container['general_ledger_account'];
    }

    /**
     * Sets general_ledger_account
     *
     * @param string $general_ledger_account general_ledger_account
     *
     * @return $this
     */
    public function setGeneralLedgerAccount($general_ledger_account)
    {
        $this->container['general_ledger_account'] = $general_ledger_account;

        return $this;
    }

    /**
     * Gets custom_parameter
     *
     * @return string
     */
    public function getCustomParameter()
    {
        return $this->container['custom_parameter'];
    }

    /**
     * Sets custom_parameter
     *
     * @param string $custom_parameter custom_parameter
     *
     * @return $this
     */
    public function setCustomParameter($custom_parameter)
    {
        $this->container['custom_parameter'] = $custom_parameter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


