<?php
/**
 * TOutjrnl
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TOutjrnl Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TOutjrnl implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-outjrnl';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'g_currproc' => 'string',
        'g_jrnlno' => 'int',
        'g_jrnlproc' => 'string',
        'g_nopostings' => 'int',
        'g_percal' => 'int',
        'g_perfisc' => 'int',
        'g_period' => 'int',
        'g_postdt' => '\DateTime',
        'g_setno' => 'int',
        'g_totcr' => 'double',
        'g_totdr' => 'double',
        'g_tothash' => 'double',
        'g_transno' => 'int',
        'g_year' => 'int',
        'g_proofcr' => 'double',
        'g_proofdr' => 'double',
        's_system' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'g_currproc' => null,
        'g_jrnlno' => 'int64',
        'g_jrnlproc' => null,
        'g_nopostings' => 'int64',
        'g_percal' => 'int64',
        'g_perfisc' => 'int64',
        'g_period' => 'int64',
        'g_postdt' => 'date',
        'g_setno' => 'int64',
        'g_totcr' => 'double',
        'g_totdr' => 'double',
        'g_tothash' => 'double',
        'g_transno' => 'int64',
        'g_year' => 'int64',
        'g_proofcr' => 'double',
        'g_proofdr' => 'double',
        's_system' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'g_currproc' => 'g-currproc',
        'g_jrnlno' => 'g-jrnlno',
        'g_jrnlproc' => 'g-jrnlproc',
        'g_nopostings' => 'g-nopostings',
        'g_percal' => 'g-percal',
        'g_perfisc' => 'g-perfisc',
        'g_period' => 'g-period',
        'g_postdt' => 'g-postdt',
        'g_setno' => 'g-setno',
        'g_totcr' => 'g-totcr',
        'g_totdr' => 'g-totdr',
        'g_tothash' => 'g-tothash',
        'g_transno' => 'g-transno',
        'g_year' => 'g-year',
        'g_proofcr' => 'g-proofcr',
        'g_proofdr' => 'g-proofdr',
        's_system' => 's-system'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'g_currproc' => 'setGCurrproc',
        'g_jrnlno' => 'setGJrnlno',
        'g_jrnlproc' => 'setGJrnlproc',
        'g_nopostings' => 'setGNopostings',
        'g_percal' => 'setGPercal',
        'g_perfisc' => 'setGPerfisc',
        'g_period' => 'setGPeriod',
        'g_postdt' => 'setGPostdt',
        'g_setno' => 'setGSetno',
        'g_totcr' => 'setGTotcr',
        'g_totdr' => 'setGTotdr',
        'g_tothash' => 'setGTothash',
        'g_transno' => 'setGTransno',
        'g_year' => 'setGYear',
        'g_proofcr' => 'setGProofcr',
        'g_proofdr' => 'setGProofdr',
        's_system' => 'setSSystem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'g_currproc' => 'getGCurrproc',
        'g_jrnlno' => 'getGJrnlno',
        'g_jrnlproc' => 'getGJrnlproc',
        'g_nopostings' => 'getGNopostings',
        'g_percal' => 'getGPercal',
        'g_perfisc' => 'getGPerfisc',
        'g_period' => 'getGPeriod',
        'g_postdt' => 'getGPostdt',
        'g_setno' => 'getGSetno',
        'g_totcr' => 'getGTotcr',
        'g_totdr' => 'getGTotdr',
        'g_tothash' => 'getGTothash',
        'g_transno' => 'getGTransno',
        'g_year' => 'getGYear',
        'g_proofcr' => 'getGProofcr',
        'g_proofdr' => 'getGProofdr',
        's_system' => 'getSSystem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['g_currproc'] = isset($data['g_currproc']) ? $data['g_currproc'] : null;
        $this->container['g_jrnlno'] = isset($data['g_jrnlno']) ? $data['g_jrnlno'] : null;
        $this->container['g_jrnlproc'] = isset($data['g_jrnlproc']) ? $data['g_jrnlproc'] : null;
        $this->container['g_nopostings'] = isset($data['g_nopostings']) ? $data['g_nopostings'] : null;
        $this->container['g_percal'] = isset($data['g_percal']) ? $data['g_percal'] : null;
        $this->container['g_perfisc'] = isset($data['g_perfisc']) ? $data['g_perfisc'] : null;
        $this->container['g_period'] = isset($data['g_period']) ? $data['g_period'] : null;
        $this->container['g_postdt'] = isset($data['g_postdt']) ? $data['g_postdt'] : null;
        $this->container['g_setno'] = isset($data['g_setno']) ? $data['g_setno'] : null;
        $this->container['g_totcr'] = isset($data['g_totcr']) ? $data['g_totcr'] : null;
        $this->container['g_totdr'] = isset($data['g_totdr']) ? $data['g_totdr'] : null;
        $this->container['g_tothash'] = isset($data['g_tothash']) ? $data['g_tothash'] : null;
        $this->container['g_transno'] = isset($data['g_transno']) ? $data['g_transno'] : null;
        $this->container['g_year'] = isset($data['g_year']) ? $data['g_year'] : null;
        $this->container['g_proofcr'] = isset($data['g_proofcr']) ? $data['g_proofcr'] : null;
        $this->container['g_proofdr'] = isset($data['g_proofdr']) ? $data['g_proofdr'] : null;
        $this->container['s_system'] = isset($data['s_system']) ? $data['s_system'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets g_currproc
     *
     * @return string
     */
    public function getGCurrproc()
    {
        return $this->container['g_currproc'];
    }

    /**
     * Sets g_currproc
     *
     * @param string $g_currproc g_currproc
     *
     * @return $this
     */
    public function setGCurrproc($g_currproc)
    {
        $this->container['g_currproc'] = $g_currproc;

        return $this;
    }

    /**
     * Gets g_jrnlno
     *
     * @return int
     */
    public function getGJrnlno()
    {
        return $this->container['g_jrnlno'];
    }

    /**
     * Sets g_jrnlno
     *
     * @param int $g_jrnlno g_jrnlno
     *
     * @return $this
     */
    public function setGJrnlno($g_jrnlno)
    {
        $this->container['g_jrnlno'] = $g_jrnlno;

        return $this;
    }

    /**
     * Gets g_jrnlproc
     *
     * @return string
     */
    public function getGJrnlproc()
    {
        return $this->container['g_jrnlproc'];
    }

    /**
     * Sets g_jrnlproc
     *
     * @param string $g_jrnlproc g_jrnlproc
     *
     * @return $this
     */
    public function setGJrnlproc($g_jrnlproc)
    {
        $this->container['g_jrnlproc'] = $g_jrnlproc;

        return $this;
    }

    /**
     * Gets g_nopostings
     *
     * @return int
     */
    public function getGNopostings()
    {
        return $this->container['g_nopostings'];
    }

    /**
     * Sets g_nopostings
     *
     * @param int $g_nopostings g_nopostings
     *
     * @return $this
     */
    public function setGNopostings($g_nopostings)
    {
        $this->container['g_nopostings'] = $g_nopostings;

        return $this;
    }

    /**
     * Gets g_percal
     *
     * @return int
     */
    public function getGPercal()
    {
        return $this->container['g_percal'];
    }

    /**
     * Sets g_percal
     *
     * @param int $g_percal g_percal
     *
     * @return $this
     */
    public function setGPercal($g_percal)
    {
        $this->container['g_percal'] = $g_percal;

        return $this;
    }

    /**
     * Gets g_perfisc
     *
     * @return int
     */
    public function getGPerfisc()
    {
        return $this->container['g_perfisc'];
    }

    /**
     * Sets g_perfisc
     *
     * @param int $g_perfisc g_perfisc
     *
     * @return $this
     */
    public function setGPerfisc($g_perfisc)
    {
        $this->container['g_perfisc'] = $g_perfisc;

        return $this;
    }

    /**
     * Gets g_period
     *
     * @return int
     */
    public function getGPeriod()
    {
        return $this->container['g_period'];
    }

    /**
     * Sets g_period
     *
     * @param int $g_period g_period
     *
     * @return $this
     */
    public function setGPeriod($g_period)
    {
        $this->container['g_period'] = $g_period;

        return $this;
    }

    /**
     * Gets g_postdt
     *
     * @return \DateTime
     */
    public function getGPostdt()
    {
        return $this->container['g_postdt'];
    }

    /**
     * Sets g_postdt
     *
     * @param \DateTime $g_postdt g_postdt
     *
     * @return $this
     */
    public function setGPostdt($g_postdt)
    {
        $this->container['g_postdt'] = $g_postdt;

        return $this;
    }

    /**
     * Gets g_setno
     *
     * @return int
     */
    public function getGSetno()
    {
        return $this->container['g_setno'];
    }

    /**
     * Sets g_setno
     *
     * @param int $g_setno g_setno
     *
     * @return $this
     */
    public function setGSetno($g_setno)
    {
        $this->container['g_setno'] = $g_setno;

        return $this;
    }

    /**
     * Gets g_totcr
     *
     * @return double
     */
    public function getGTotcr()
    {
        return $this->container['g_totcr'];
    }

    /**
     * Sets g_totcr
     *
     * @param double $g_totcr g_totcr
     *
     * @return $this
     */
    public function setGTotcr($g_totcr)
    {
        $this->container['g_totcr'] = $g_totcr;

        return $this;
    }

    /**
     * Gets g_totdr
     *
     * @return double
     */
    public function getGTotdr()
    {
        return $this->container['g_totdr'];
    }

    /**
     * Sets g_totdr
     *
     * @param double $g_totdr g_totdr
     *
     * @return $this
     */
    public function setGTotdr($g_totdr)
    {
        $this->container['g_totdr'] = $g_totdr;

        return $this;
    }

    /**
     * Gets g_tothash
     *
     * @return double
     */
    public function getGTothash()
    {
        return $this->container['g_tothash'];
    }

    /**
     * Sets g_tothash
     *
     * @param double $g_tothash g_tothash
     *
     * @return $this
     */
    public function setGTothash($g_tothash)
    {
        $this->container['g_tothash'] = $g_tothash;

        return $this;
    }

    /**
     * Gets g_transno
     *
     * @return int
     */
    public function getGTransno()
    {
        return $this->container['g_transno'];
    }

    /**
     * Sets g_transno
     *
     * @param int $g_transno g_transno
     *
     * @return $this
     */
    public function setGTransno($g_transno)
    {
        $this->container['g_transno'] = $g_transno;

        return $this;
    }

    /**
     * Gets g_year
     *
     * @return int
     */
    public function getGYear()
    {
        return $this->container['g_year'];
    }

    /**
     * Sets g_year
     *
     * @param int $g_year g_year
     *
     * @return $this
     */
    public function setGYear($g_year)
    {
        $this->container['g_year'] = $g_year;

        return $this;
    }

    /**
     * Gets g_proofcr
     *
     * @return double
     */
    public function getGProofcr()
    {
        return $this->container['g_proofcr'];
    }

    /**
     * Sets g_proofcr
     *
     * @param double $g_proofcr g_proofcr
     *
     * @return $this
     */
    public function setGProofcr($g_proofcr)
    {
        $this->container['g_proofcr'] = $g_proofcr;

        return $this;
    }

    /**
     * Gets g_proofdr
     *
     * @return double
     */
    public function getGProofdr()
    {
        return $this->container['g_proofdr'];
    }

    /**
     * Sets g_proofdr
     *
     * @param double $g_proofdr g_proofdr
     *
     * @return $this
     */
    public function setGProofdr($g_proofdr)
    {
        $this->container['g_proofdr'] = $g_proofdr;

        return $this;
    }

    /**
     * Gets s_system
     *
     * @return string
     */
    public function getSSystem()
    {
        return $this->container['s_system'];
    }

    /**
     * Sets s_system
     *
     * @param string $s_system s_system
     *
     * @return $this
     */
    public function setSSystem($s_system)
    {
        $this->container['s_system'] = $s_system;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


