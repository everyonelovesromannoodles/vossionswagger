<?php
/**
 * TProdfutureavail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TProdfutureavail Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TProdfutureavail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-prodfutureavail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'c_module' => 'string',
        'c_name' => 'string',
        'c_trans_type' => 'string',
        'd_qty_bal' => 'double',
        'd_qty_ord' => 'double',
        'dt_due' => '\DateTime',
        'i_order_no' => 'int',
        'i_order_suf' => 'int',
        'i_sort_order' => 'int',
        'l_assign' => 'bool',
        'user1' => 'string',
        'user2' => 'string',
        'user3' => 'string',
        'user4' => 'string',
        'user5' => 'string',
        'user6' => 'double',
        'user7' => 'double',
        'user8' => '\DateTime',
        'user9' => '\DateTime',
        'c_order_notes' => 'string',
        'c_cust_vend_notes' => 'string',
        'd_vend_no' => 'double',
        'd_cust_no' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'c_module' => null,
        'c_name' => null,
        'c_trans_type' => null,
        'd_qty_bal' => 'double',
        'd_qty_ord' => 'double',
        'dt_due' => 'date',
        'i_order_no' => 'int64',
        'i_order_suf' => 'int64',
        'i_sort_order' => 'int64',
        'l_assign' => null,
        'user1' => null,
        'user2' => null,
        'user3' => null,
        'user4' => null,
        'user5' => null,
        'user6' => 'double',
        'user7' => 'double',
        'user8' => 'date',
        'user9' => 'date',
        'c_order_notes' => null,
        'c_cust_vend_notes' => null,
        'd_vend_no' => 'double',
        'd_cust_no' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'c_module' => 'cModule',
        'c_name' => 'cName',
        'c_trans_type' => 'cTransType',
        'd_qty_bal' => 'dQtyBal',
        'd_qty_ord' => 'dQtyOrd',
        'dt_due' => 'dtDue',
        'i_order_no' => 'iOrderNo',
        'i_order_suf' => 'iOrderSuf',
        'i_sort_order' => 'iSortOrder',
        'l_assign' => 'lAssign',
        'user1' => 'user1',
        'user2' => 'user2',
        'user3' => 'user3',
        'user4' => 'user4',
        'user5' => 'user5',
        'user6' => 'user6',
        'user7' => 'user7',
        'user8' => 'user8',
        'user9' => 'user9',
        'c_order_notes' => 'cOrderNotes',
        'c_cust_vend_notes' => 'cCustVendNotes',
        'd_vend_no' => 'dVendNo',
        'd_cust_no' => 'dCustNo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'c_module' => 'setCModule',
        'c_name' => 'setCName',
        'c_trans_type' => 'setCTransType',
        'd_qty_bal' => 'setDQtyBal',
        'd_qty_ord' => 'setDQtyOrd',
        'dt_due' => 'setDtDue',
        'i_order_no' => 'setIOrderNo',
        'i_order_suf' => 'setIOrderSuf',
        'i_sort_order' => 'setISortOrder',
        'l_assign' => 'setLAssign',
        'user1' => 'setUser1',
        'user2' => 'setUser2',
        'user3' => 'setUser3',
        'user4' => 'setUser4',
        'user5' => 'setUser5',
        'user6' => 'setUser6',
        'user7' => 'setUser7',
        'user8' => 'setUser8',
        'user9' => 'setUser9',
        'c_order_notes' => 'setCOrderNotes',
        'c_cust_vend_notes' => 'setCCustVendNotes',
        'd_vend_no' => 'setDVendNo',
        'd_cust_no' => 'setDCustNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'c_module' => 'getCModule',
        'c_name' => 'getCName',
        'c_trans_type' => 'getCTransType',
        'd_qty_bal' => 'getDQtyBal',
        'd_qty_ord' => 'getDQtyOrd',
        'dt_due' => 'getDtDue',
        'i_order_no' => 'getIOrderNo',
        'i_order_suf' => 'getIOrderSuf',
        'i_sort_order' => 'getISortOrder',
        'l_assign' => 'getLAssign',
        'user1' => 'getUser1',
        'user2' => 'getUser2',
        'user3' => 'getUser3',
        'user4' => 'getUser4',
        'user5' => 'getUser5',
        'user6' => 'getUser6',
        'user7' => 'getUser7',
        'user8' => 'getUser8',
        'user9' => 'getUser9',
        'c_order_notes' => 'getCOrderNotes',
        'c_cust_vend_notes' => 'getCCustVendNotes',
        'd_vend_no' => 'getDVendNo',
        'd_cust_no' => 'getDCustNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['c_module'] = isset($data['c_module']) ? $data['c_module'] : null;
        $this->container['c_name'] = isset($data['c_name']) ? $data['c_name'] : null;
        $this->container['c_trans_type'] = isset($data['c_trans_type']) ? $data['c_trans_type'] : null;
        $this->container['d_qty_bal'] = isset($data['d_qty_bal']) ? $data['d_qty_bal'] : null;
        $this->container['d_qty_ord'] = isset($data['d_qty_ord']) ? $data['d_qty_ord'] : null;
        $this->container['dt_due'] = isset($data['dt_due']) ? $data['dt_due'] : null;
        $this->container['i_order_no'] = isset($data['i_order_no']) ? $data['i_order_no'] : null;
        $this->container['i_order_suf'] = isset($data['i_order_suf']) ? $data['i_order_suf'] : null;
        $this->container['i_sort_order'] = isset($data['i_sort_order']) ? $data['i_sort_order'] : null;
        $this->container['l_assign'] = isset($data['l_assign']) ? $data['l_assign'] : null;
        $this->container['user1'] = isset($data['user1']) ? $data['user1'] : null;
        $this->container['user2'] = isset($data['user2']) ? $data['user2'] : null;
        $this->container['user3'] = isset($data['user3']) ? $data['user3'] : null;
        $this->container['user4'] = isset($data['user4']) ? $data['user4'] : null;
        $this->container['user5'] = isset($data['user5']) ? $data['user5'] : null;
        $this->container['user6'] = isset($data['user6']) ? $data['user6'] : null;
        $this->container['user7'] = isset($data['user7']) ? $data['user7'] : null;
        $this->container['user8'] = isset($data['user8']) ? $data['user8'] : null;
        $this->container['user9'] = isset($data['user9']) ? $data['user9'] : null;
        $this->container['c_order_notes'] = isset($data['c_order_notes']) ? $data['c_order_notes'] : null;
        $this->container['c_cust_vend_notes'] = isset($data['c_cust_vend_notes']) ? $data['c_cust_vend_notes'] : null;
        $this->container['d_vend_no'] = isset($data['d_vend_no']) ? $data['d_vend_no'] : null;
        $this->container['d_cust_no'] = isset($data['d_cust_no']) ? $data['d_cust_no'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets c_module
     *
     * @return string
     */
    public function getCModule()
    {
        return $this->container['c_module'];
    }

    /**
     * Sets c_module
     *
     * @param string $c_module c_module
     *
     * @return $this
     */
    public function setCModule($c_module)
    {
        $this->container['c_module'] = $c_module;

        return $this;
    }

    /**
     * Gets c_name
     *
     * @return string
     */
    public function getCName()
    {
        return $this->container['c_name'];
    }

    /**
     * Sets c_name
     *
     * @param string $c_name c_name
     *
     * @return $this
     */
    public function setCName($c_name)
    {
        $this->container['c_name'] = $c_name;

        return $this;
    }

    /**
     * Gets c_trans_type
     *
     * @return string
     */
    public function getCTransType()
    {
        return $this->container['c_trans_type'];
    }

    /**
     * Sets c_trans_type
     *
     * @param string $c_trans_type c_trans_type
     *
     * @return $this
     */
    public function setCTransType($c_trans_type)
    {
        $this->container['c_trans_type'] = $c_trans_type;

        return $this;
    }

    /**
     * Gets d_qty_bal
     *
     * @return double
     */
    public function getDQtyBal()
    {
        return $this->container['d_qty_bal'];
    }

    /**
     * Sets d_qty_bal
     *
     * @param double $d_qty_bal d_qty_bal
     *
     * @return $this
     */
    public function setDQtyBal($d_qty_bal)
    {
        $this->container['d_qty_bal'] = $d_qty_bal;

        return $this;
    }

    /**
     * Gets d_qty_ord
     *
     * @return double
     */
    public function getDQtyOrd()
    {
        return $this->container['d_qty_ord'];
    }

    /**
     * Sets d_qty_ord
     *
     * @param double $d_qty_ord d_qty_ord
     *
     * @return $this
     */
    public function setDQtyOrd($d_qty_ord)
    {
        $this->container['d_qty_ord'] = $d_qty_ord;

        return $this;
    }

    /**
     * Gets dt_due
     *
     * @return \DateTime
     */
    public function getDtDue()
    {
        return $this->container['dt_due'];
    }

    /**
     * Sets dt_due
     *
     * @param \DateTime $dt_due dt_due
     *
     * @return $this
     */
    public function setDtDue($dt_due)
    {
        $this->container['dt_due'] = $dt_due;

        return $this;
    }

    /**
     * Gets i_order_no
     *
     * @return int
     */
    public function getIOrderNo()
    {
        return $this->container['i_order_no'];
    }

    /**
     * Sets i_order_no
     *
     * @param int $i_order_no i_order_no
     *
     * @return $this
     */
    public function setIOrderNo($i_order_no)
    {
        $this->container['i_order_no'] = $i_order_no;

        return $this;
    }

    /**
     * Gets i_order_suf
     *
     * @return int
     */
    public function getIOrderSuf()
    {
        return $this->container['i_order_suf'];
    }

    /**
     * Sets i_order_suf
     *
     * @param int $i_order_suf i_order_suf
     *
     * @return $this
     */
    public function setIOrderSuf($i_order_suf)
    {
        $this->container['i_order_suf'] = $i_order_suf;

        return $this;
    }

    /**
     * Gets i_sort_order
     *
     * @return int
     */
    public function getISortOrder()
    {
        return $this->container['i_sort_order'];
    }

    /**
     * Sets i_sort_order
     *
     * @param int $i_sort_order i_sort_order
     *
     * @return $this
     */
    public function setISortOrder($i_sort_order)
    {
        $this->container['i_sort_order'] = $i_sort_order;

        return $this;
    }

    /**
     * Gets l_assign
     *
     * @return bool
     */
    public function getLAssign()
    {
        return $this->container['l_assign'];
    }

    /**
     * Sets l_assign
     *
     * @param bool $l_assign l_assign
     *
     * @return $this
     */
    public function setLAssign($l_assign)
    {
        $this->container['l_assign'] = $l_assign;

        return $this;
    }

    /**
     * Gets user1
     *
     * @return string
     */
    public function getUser1()
    {
        return $this->container['user1'];
    }

    /**
     * Sets user1
     *
     * @param string $user1 user1
     *
     * @return $this
     */
    public function setUser1($user1)
    {
        $this->container['user1'] = $user1;

        return $this;
    }

    /**
     * Gets user2
     *
     * @return string
     */
    public function getUser2()
    {
        return $this->container['user2'];
    }

    /**
     * Sets user2
     *
     * @param string $user2 user2
     *
     * @return $this
     */
    public function setUser2($user2)
    {
        $this->container['user2'] = $user2;

        return $this;
    }

    /**
     * Gets user3
     *
     * @return string
     */
    public function getUser3()
    {
        return $this->container['user3'];
    }

    /**
     * Sets user3
     *
     * @param string $user3 user3
     *
     * @return $this
     */
    public function setUser3($user3)
    {
        $this->container['user3'] = $user3;

        return $this;
    }

    /**
     * Gets user4
     *
     * @return string
     */
    public function getUser4()
    {
        return $this->container['user4'];
    }

    /**
     * Sets user4
     *
     * @param string $user4 user4
     *
     * @return $this
     */
    public function setUser4($user4)
    {
        $this->container['user4'] = $user4;

        return $this;
    }

    /**
     * Gets user5
     *
     * @return string
     */
    public function getUser5()
    {
        return $this->container['user5'];
    }

    /**
     * Sets user5
     *
     * @param string $user5 user5
     *
     * @return $this
     */
    public function setUser5($user5)
    {
        $this->container['user5'] = $user5;

        return $this;
    }

    /**
     * Gets user6
     *
     * @return double
     */
    public function getUser6()
    {
        return $this->container['user6'];
    }

    /**
     * Sets user6
     *
     * @param double $user6 user6
     *
     * @return $this
     */
    public function setUser6($user6)
    {
        $this->container['user6'] = $user6;

        return $this;
    }

    /**
     * Gets user7
     *
     * @return double
     */
    public function getUser7()
    {
        return $this->container['user7'];
    }

    /**
     * Sets user7
     *
     * @param double $user7 user7
     *
     * @return $this
     */
    public function setUser7($user7)
    {
        $this->container['user7'] = $user7;

        return $this;
    }

    /**
     * Gets user8
     *
     * @return \DateTime
     */
    public function getUser8()
    {
        return $this->container['user8'];
    }

    /**
     * Sets user8
     *
     * @param \DateTime $user8 user8
     *
     * @return $this
     */
    public function setUser8($user8)
    {
        $this->container['user8'] = $user8;

        return $this;
    }

    /**
     * Gets user9
     *
     * @return \DateTime
     */
    public function getUser9()
    {
        return $this->container['user9'];
    }

    /**
     * Sets user9
     *
     * @param \DateTime $user9 user9
     *
     * @return $this
     */
    public function setUser9($user9)
    {
        $this->container['user9'] = $user9;

        return $this;
    }

    /**
     * Gets c_order_notes
     *
     * @return string
     */
    public function getCOrderNotes()
    {
        return $this->container['c_order_notes'];
    }

    /**
     * Sets c_order_notes
     *
     * @param string $c_order_notes c_order_notes
     *
     * @return $this
     */
    public function setCOrderNotes($c_order_notes)
    {
        $this->container['c_order_notes'] = $c_order_notes;

        return $this;
    }

    /**
     * Gets c_cust_vend_notes
     *
     * @return string
     */
    public function getCCustVendNotes()
    {
        return $this->container['c_cust_vend_notes'];
    }

    /**
     * Sets c_cust_vend_notes
     *
     * @param string $c_cust_vend_notes c_cust_vend_notes
     *
     * @return $this
     */
    public function setCCustVendNotes($c_cust_vend_notes)
    {
        $this->container['c_cust_vend_notes'] = $c_cust_vend_notes;

        return $this;
    }

    /**
     * Gets d_vend_no
     *
     * @return double
     */
    public function getDVendNo()
    {
        return $this->container['d_vend_no'];
    }

    /**
     * Sets d_vend_no
     *
     * @param double $d_vend_no d_vend_no
     *
     * @return $this
     */
    public function setDVendNo($d_vend_no)
    {
        $this->container['d_vend_no'] = $d_vend_no;

        return $this;
    }

    /**
     * Gets d_cust_no
     *
     * @return double
     */
    public function getDCustNo()
    {
        return $this->container['d_cust_no'];
    }

    /**
     * Sets d_cust_no
     *
     * @param double $d_cust_no d_cust_no
     *
     * @return $this
     */
    public function setDCustNo($d_cust_no)
    {
        $this->container['d_cust_no'] = $d_cust_no;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


