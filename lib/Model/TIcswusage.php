<?php
/**
 * TIcswusage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TIcswusage Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TIcswusage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-icswusage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'monthseq' => 'int',
        'monthwords' => 'string',
        'year' => 'int',
        'normusage' => 'double',
        'overreasty' => 'string',
        'overrsdesc' => 'string',
        'nodaysso' => 'int',
        'notimesso' => 'int',
        'avginvval' => 'double',
        'overusage' => 'double',
        'transpct' => 'double',
        'linehits' => 'int',
        'linehitswt' => 'int',
        'linehitslb' => 'int',
        'linehitstot' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'monthseq' => 'int64',
        'monthwords' => null,
        'year' => 'int64',
        'normusage' => 'double',
        'overreasty' => null,
        'overrsdesc' => null,
        'nodaysso' => 'int64',
        'notimesso' => 'int64',
        'avginvval' => 'double',
        'overusage' => 'double',
        'transpct' => 'double',
        'linehits' => 'int64',
        'linehitswt' => 'int64',
        'linehitslb' => 'int64',
        'linehitstot' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'monthseq' => 'monthseq',
        'monthwords' => 'monthwords',
        'year' => 'year',
        'normusage' => 'normusage',
        'overreasty' => 'overreasty',
        'overrsdesc' => 'overrsdesc',
        'nodaysso' => 'nodaysso',
        'notimesso' => 'notimesso',
        'avginvval' => 'avginvval',
        'overusage' => 'overusage',
        'transpct' => 'transpct',
        'linehits' => 'linehits',
        'linehitswt' => 'linehitswt',
        'linehitslb' => 'linehitslb',
        'linehitstot' => 'linehitstot'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'monthseq' => 'setMonthseq',
        'monthwords' => 'setMonthwords',
        'year' => 'setYear',
        'normusage' => 'setNormusage',
        'overreasty' => 'setOverreasty',
        'overrsdesc' => 'setOverrsdesc',
        'nodaysso' => 'setNodaysso',
        'notimesso' => 'setNotimesso',
        'avginvval' => 'setAvginvval',
        'overusage' => 'setOverusage',
        'transpct' => 'setTranspct',
        'linehits' => 'setLinehits',
        'linehitswt' => 'setLinehitswt',
        'linehitslb' => 'setLinehitslb',
        'linehitstot' => 'setLinehitstot'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'monthseq' => 'getMonthseq',
        'monthwords' => 'getMonthwords',
        'year' => 'getYear',
        'normusage' => 'getNormusage',
        'overreasty' => 'getOverreasty',
        'overrsdesc' => 'getOverrsdesc',
        'nodaysso' => 'getNodaysso',
        'notimesso' => 'getNotimesso',
        'avginvval' => 'getAvginvval',
        'overusage' => 'getOverusage',
        'transpct' => 'getTranspct',
        'linehits' => 'getLinehits',
        'linehitswt' => 'getLinehitswt',
        'linehitslb' => 'getLinehitslb',
        'linehitstot' => 'getLinehitstot'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['monthseq'] = isset($data['monthseq']) ? $data['monthseq'] : null;
        $this->container['monthwords'] = isset($data['monthwords']) ? $data['monthwords'] : null;
        $this->container['year'] = isset($data['year']) ? $data['year'] : null;
        $this->container['normusage'] = isset($data['normusage']) ? $data['normusage'] : null;
        $this->container['overreasty'] = isset($data['overreasty']) ? $data['overreasty'] : null;
        $this->container['overrsdesc'] = isset($data['overrsdesc']) ? $data['overrsdesc'] : null;
        $this->container['nodaysso'] = isset($data['nodaysso']) ? $data['nodaysso'] : null;
        $this->container['notimesso'] = isset($data['notimesso']) ? $data['notimesso'] : null;
        $this->container['avginvval'] = isset($data['avginvval']) ? $data['avginvval'] : null;
        $this->container['overusage'] = isset($data['overusage']) ? $data['overusage'] : null;
        $this->container['transpct'] = isset($data['transpct']) ? $data['transpct'] : null;
        $this->container['linehits'] = isset($data['linehits']) ? $data['linehits'] : null;
        $this->container['linehitswt'] = isset($data['linehitswt']) ? $data['linehitswt'] : null;
        $this->container['linehitslb'] = isset($data['linehitslb']) ? $data['linehitslb'] : null;
        $this->container['linehitstot'] = isset($data['linehitstot']) ? $data['linehitstot'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets monthseq
     *
     * @return int
     */
    public function getMonthseq()
    {
        return $this->container['monthseq'];
    }

    /**
     * Sets monthseq
     *
     * @param int $monthseq monthseq
     *
     * @return $this
     */
    public function setMonthseq($monthseq)
    {
        $this->container['monthseq'] = $monthseq;

        return $this;
    }

    /**
     * Gets monthwords
     *
     * @return string
     */
    public function getMonthwords()
    {
        return $this->container['monthwords'];
    }

    /**
     * Sets monthwords
     *
     * @param string $monthwords monthwords
     *
     * @return $this
     */
    public function setMonthwords($monthwords)
    {
        $this->container['monthwords'] = $monthwords;

        return $this;
    }

    /**
     * Gets year
     *
     * @return int
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param int $year year
     *
     * @return $this
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets normusage
     *
     * @return double
     */
    public function getNormusage()
    {
        return $this->container['normusage'];
    }

    /**
     * Sets normusage
     *
     * @param double $normusage normusage
     *
     * @return $this
     */
    public function setNormusage($normusage)
    {
        $this->container['normusage'] = $normusage;

        return $this;
    }

    /**
     * Gets overreasty
     *
     * @return string
     */
    public function getOverreasty()
    {
        return $this->container['overreasty'];
    }

    /**
     * Sets overreasty
     *
     * @param string $overreasty overreasty
     *
     * @return $this
     */
    public function setOverreasty($overreasty)
    {
        $this->container['overreasty'] = $overreasty;

        return $this;
    }

    /**
     * Gets overrsdesc
     *
     * @return string
     */
    public function getOverrsdesc()
    {
        return $this->container['overrsdesc'];
    }

    /**
     * Sets overrsdesc
     *
     * @param string $overrsdesc overrsdesc
     *
     * @return $this
     */
    public function setOverrsdesc($overrsdesc)
    {
        $this->container['overrsdesc'] = $overrsdesc;

        return $this;
    }

    /**
     * Gets nodaysso
     *
     * @return int
     */
    public function getNodaysso()
    {
        return $this->container['nodaysso'];
    }

    /**
     * Sets nodaysso
     *
     * @param int $nodaysso nodaysso
     *
     * @return $this
     */
    public function setNodaysso($nodaysso)
    {
        $this->container['nodaysso'] = $nodaysso;

        return $this;
    }

    /**
     * Gets notimesso
     *
     * @return int
     */
    public function getNotimesso()
    {
        return $this->container['notimesso'];
    }

    /**
     * Sets notimesso
     *
     * @param int $notimesso notimesso
     *
     * @return $this
     */
    public function setNotimesso($notimesso)
    {
        $this->container['notimesso'] = $notimesso;

        return $this;
    }

    /**
     * Gets avginvval
     *
     * @return double
     */
    public function getAvginvval()
    {
        return $this->container['avginvval'];
    }

    /**
     * Sets avginvval
     *
     * @param double $avginvval avginvval
     *
     * @return $this
     */
    public function setAvginvval($avginvval)
    {
        $this->container['avginvval'] = $avginvval;

        return $this;
    }

    /**
     * Gets overusage
     *
     * @return double
     */
    public function getOverusage()
    {
        return $this->container['overusage'];
    }

    /**
     * Sets overusage
     *
     * @param double $overusage overusage
     *
     * @return $this
     */
    public function setOverusage($overusage)
    {
        $this->container['overusage'] = $overusage;

        return $this;
    }

    /**
     * Gets transpct
     *
     * @return double
     */
    public function getTranspct()
    {
        return $this->container['transpct'];
    }

    /**
     * Sets transpct
     *
     * @param double $transpct transpct
     *
     * @return $this
     */
    public function setTranspct($transpct)
    {
        $this->container['transpct'] = $transpct;

        return $this;
    }

    /**
     * Gets linehits
     *
     * @return int
     */
    public function getLinehits()
    {
        return $this->container['linehits'];
    }

    /**
     * Sets linehits
     *
     * @param int $linehits linehits
     *
     * @return $this
     */
    public function setLinehits($linehits)
    {
        $this->container['linehits'] = $linehits;

        return $this;
    }

    /**
     * Gets linehitswt
     *
     * @return int
     */
    public function getLinehitswt()
    {
        return $this->container['linehitswt'];
    }

    /**
     * Sets linehitswt
     *
     * @param int $linehitswt linehitswt
     *
     * @return $this
     */
    public function setLinehitswt($linehitswt)
    {
        $this->container['linehitswt'] = $linehitswt;

        return $this;
    }

    /**
     * Gets linehitslb
     *
     * @return int
     */
    public function getLinehitslb()
    {
        return $this->container['linehitslb'];
    }

    /**
     * Sets linehitslb
     *
     * @param int $linehitslb linehitslb
     *
     * @return $this
     */
    public function setLinehitslb($linehitslb)
    {
        $this->container['linehitslb'] = $linehitslb;

        return $this;
    }

    /**
     * Gets linehitstot
     *
     * @return int
     */
    public function getLinehitstot()
    {
        return $this->container['linehitstot'];
    }

    /**
     * Sets linehitstot
     *
     * @param int $linehitstot linehitstot
     *
     * @return $this
     */
    public function setLinehitstot($linehitstot)
    {
        $this->container['linehitstot'] = $linehitstot;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


