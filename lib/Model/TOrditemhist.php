<?php
/**
 * TOrditemhist
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TOrditemhist Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TOrditemhist implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-orditemhist';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'prod' => 'string',
        'proddesc1' => 'string',
        'proddesc2' => 'string',
        'default_uom' => 'string',
        'uom1' => 'string',
        'uom2' => 'string',
        'uom3' => 'string',
        'listprice' => 'double',
        'price_uom' => 'string',
        'extradata' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'prod' => null,
        'proddesc1' => null,
        'proddesc2' => null,
        'default_uom' => null,
        'uom1' => null,
        'uom2' => null,
        'uom3' => null,
        'listprice' => 'double',
        'price_uom' => null,
        'extradata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'prod' => 'prod',
        'proddesc1' => 'proddesc1',
        'proddesc2' => 'proddesc2',
        'default_uom' => 'defaultUOM',
        'uom1' => 'UOM1',
        'uom2' => 'UOM2',
        'uom3' => 'UOM3',
        'listprice' => 'listprice',
        'price_uom' => 'priceUOM',
        'extradata' => 'extradata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'prod' => 'setProd',
        'proddesc1' => 'setProddesc1',
        'proddesc2' => 'setProddesc2',
        'default_uom' => 'setDefaultUom',
        'uom1' => 'setUom1',
        'uom2' => 'setUom2',
        'uom3' => 'setUom3',
        'listprice' => 'setListprice',
        'price_uom' => 'setPriceUom',
        'extradata' => 'setExtradata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'prod' => 'getProd',
        'proddesc1' => 'getProddesc1',
        'proddesc2' => 'getProddesc2',
        'default_uom' => 'getDefaultUom',
        'uom1' => 'getUom1',
        'uom2' => 'getUom2',
        'uom3' => 'getUom3',
        'listprice' => 'getListprice',
        'price_uom' => 'getPriceUom',
        'extradata' => 'getExtradata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['prod'] = isset($data['prod']) ? $data['prod'] : null;
        $this->container['proddesc1'] = isset($data['proddesc1']) ? $data['proddesc1'] : null;
        $this->container['proddesc2'] = isset($data['proddesc2']) ? $data['proddesc2'] : null;
        $this->container['default_uom'] = isset($data['default_uom']) ? $data['default_uom'] : null;
        $this->container['uom1'] = isset($data['uom1']) ? $data['uom1'] : null;
        $this->container['uom2'] = isset($data['uom2']) ? $data['uom2'] : null;
        $this->container['uom3'] = isset($data['uom3']) ? $data['uom3'] : null;
        $this->container['listprice'] = isset($data['listprice']) ? $data['listprice'] : null;
        $this->container['price_uom'] = isset($data['price_uom']) ? $data['price_uom'] : null;
        $this->container['extradata'] = isset($data['extradata']) ? $data['extradata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets prod
     *
     * @return string
     */
    public function getProd()
    {
        return $this->container['prod'];
    }

    /**
     * Sets prod
     *
     * @param string $prod prod
     *
     * @return $this
     */
    public function setProd($prod)
    {
        $this->container['prod'] = $prod;

        return $this;
    }

    /**
     * Gets proddesc1
     *
     * @return string
     */
    public function getProddesc1()
    {
        return $this->container['proddesc1'];
    }

    /**
     * Sets proddesc1
     *
     * @param string $proddesc1 proddesc1
     *
     * @return $this
     */
    public function setProddesc1($proddesc1)
    {
        $this->container['proddesc1'] = $proddesc1;

        return $this;
    }

    /**
     * Gets proddesc2
     *
     * @return string
     */
    public function getProddesc2()
    {
        return $this->container['proddesc2'];
    }

    /**
     * Sets proddesc2
     *
     * @param string $proddesc2 proddesc2
     *
     * @return $this
     */
    public function setProddesc2($proddesc2)
    {
        $this->container['proddesc2'] = $proddesc2;

        return $this;
    }

    /**
     * Gets default_uom
     *
     * @return string
     */
    public function getDefaultUom()
    {
        return $this->container['default_uom'];
    }

    /**
     * Sets default_uom
     *
     * @param string $default_uom default_uom
     *
     * @return $this
     */
    public function setDefaultUom($default_uom)
    {
        $this->container['default_uom'] = $default_uom;

        return $this;
    }

    /**
     * Gets uom1
     *
     * @return string
     */
    public function getUom1()
    {
        return $this->container['uom1'];
    }

    /**
     * Sets uom1
     *
     * @param string $uom1 uom1
     *
     * @return $this
     */
    public function setUom1($uom1)
    {
        $this->container['uom1'] = $uom1;

        return $this;
    }

    /**
     * Gets uom2
     *
     * @return string
     */
    public function getUom2()
    {
        return $this->container['uom2'];
    }

    /**
     * Sets uom2
     *
     * @param string $uom2 uom2
     *
     * @return $this
     */
    public function setUom2($uom2)
    {
        $this->container['uom2'] = $uom2;

        return $this;
    }

    /**
     * Gets uom3
     *
     * @return string
     */
    public function getUom3()
    {
        return $this->container['uom3'];
    }

    /**
     * Sets uom3
     *
     * @param string $uom3 uom3
     *
     * @return $this
     */
    public function setUom3($uom3)
    {
        $this->container['uom3'] = $uom3;

        return $this;
    }

    /**
     * Gets listprice
     *
     * @return double
     */
    public function getListprice()
    {
        return $this->container['listprice'];
    }

    /**
     * Sets listprice
     *
     * @param double $listprice listprice
     *
     * @return $this
     */
    public function setListprice($listprice)
    {
        $this->container['listprice'] = $listprice;

        return $this;
    }

    /**
     * Gets price_uom
     *
     * @return string
     */
    public function getPriceUom()
    {
        return $this->container['price_uom'];
    }

    /**
     * Sets price_uom
     *
     * @param string $price_uom price_uom
     *
     * @return $this
     */
    public function setPriceUom($price_uom)
    {
        $this->container['price_uom'] = $price_uom;

        return $this;
    }

    /**
     * Gets extradata
     *
     * @return string
     */
    public function getExtradata()
    {
        return $this->container['extradata'];
    }

    /**
     * Sets extradata
     *
     * @param string $extradata extradata
     *
     * @return $this
     */
    public function setExtradata($extradata)
    {
        $this->container['extradata'] = $extradata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


