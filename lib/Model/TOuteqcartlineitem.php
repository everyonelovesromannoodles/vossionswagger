<?php
/**
 * TOuteqcartlineitem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TOuteqcartlineitem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TOuteqcartlineitem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-outeqcartlineitem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cartid' => 'string',
        'linenumber' => 'int',
        'originallinenumber' => 'int',
        'descrip' => 'string',
        'upgrade_fee' => 'double',
        'selling_price' => 'double',
        'selling_price_type' => 'int',
        'financial_selling_price' => 'double',
        'qtyord' => 'double',
        'qtyreturn' => 'double',
        'orderno' => 'int',
        'ordersuf' => 'int',
        'lineno' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cartid' => null,
        'linenumber' => 'int64',
        'originallinenumber' => 'int64',
        'descrip' => null,
        'upgrade_fee' => 'double',
        'selling_price' => 'double',
        'selling_price_type' => 'int64',
        'financial_selling_price' => 'double',
        'qtyord' => 'double',
        'qtyreturn' => 'double',
        'orderno' => 'int64',
        'ordersuf' => 'int64',
        'lineno' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cartid' => 'cartid',
        'linenumber' => 'linenumber',
        'originallinenumber' => 'originallinenumber',
        'descrip' => 'descrip',
        'upgrade_fee' => 'upgradeFee',
        'selling_price' => 'sellingPrice',
        'selling_price_type' => 'sellingPriceType',
        'financial_selling_price' => 'financialSellingPrice',
        'qtyord' => 'qtyord',
        'qtyreturn' => 'qtyreturn',
        'orderno' => 'orderno',
        'ordersuf' => 'ordersuf',
        'lineno' => 'lineno'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cartid' => 'setCartid',
        'linenumber' => 'setLinenumber',
        'originallinenumber' => 'setOriginallinenumber',
        'descrip' => 'setDescrip',
        'upgrade_fee' => 'setUpgradeFee',
        'selling_price' => 'setSellingPrice',
        'selling_price_type' => 'setSellingPriceType',
        'financial_selling_price' => 'setFinancialSellingPrice',
        'qtyord' => 'setQtyord',
        'qtyreturn' => 'setQtyreturn',
        'orderno' => 'setOrderno',
        'ordersuf' => 'setOrdersuf',
        'lineno' => 'setLineno'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cartid' => 'getCartid',
        'linenumber' => 'getLinenumber',
        'originallinenumber' => 'getOriginallinenumber',
        'descrip' => 'getDescrip',
        'upgrade_fee' => 'getUpgradeFee',
        'selling_price' => 'getSellingPrice',
        'selling_price_type' => 'getSellingPriceType',
        'financial_selling_price' => 'getFinancialSellingPrice',
        'qtyord' => 'getQtyord',
        'qtyreturn' => 'getQtyreturn',
        'orderno' => 'getOrderno',
        'ordersuf' => 'getOrdersuf',
        'lineno' => 'getLineno'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cartid'] = isset($data['cartid']) ? $data['cartid'] : null;
        $this->container['linenumber'] = isset($data['linenumber']) ? $data['linenumber'] : null;
        $this->container['originallinenumber'] = isset($data['originallinenumber']) ? $data['originallinenumber'] : null;
        $this->container['descrip'] = isset($data['descrip']) ? $data['descrip'] : null;
        $this->container['upgrade_fee'] = isset($data['upgrade_fee']) ? $data['upgrade_fee'] : null;
        $this->container['selling_price'] = isset($data['selling_price']) ? $data['selling_price'] : null;
        $this->container['selling_price_type'] = isset($data['selling_price_type']) ? $data['selling_price_type'] : null;
        $this->container['financial_selling_price'] = isset($data['financial_selling_price']) ? $data['financial_selling_price'] : null;
        $this->container['qtyord'] = isset($data['qtyord']) ? $data['qtyord'] : null;
        $this->container['qtyreturn'] = isset($data['qtyreturn']) ? $data['qtyreturn'] : null;
        $this->container['orderno'] = isset($data['orderno']) ? $data['orderno'] : null;
        $this->container['ordersuf'] = isset($data['ordersuf']) ? $data['ordersuf'] : null;
        $this->container['lineno'] = isset($data['lineno']) ? $data['lineno'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cartid
     *
     * @return string
     */
    public function getCartid()
    {
        return $this->container['cartid'];
    }

    /**
     * Sets cartid
     *
     * @param string $cartid cartid
     *
     * @return $this
     */
    public function setCartid($cartid)
    {
        $this->container['cartid'] = $cartid;

        return $this;
    }

    /**
     * Gets linenumber
     *
     * @return int
     */
    public function getLinenumber()
    {
        return $this->container['linenumber'];
    }

    /**
     * Sets linenumber
     *
     * @param int $linenumber linenumber
     *
     * @return $this
     */
    public function setLinenumber($linenumber)
    {
        $this->container['linenumber'] = $linenumber;

        return $this;
    }

    /**
     * Gets originallinenumber
     *
     * @return int
     */
    public function getOriginallinenumber()
    {
        return $this->container['originallinenumber'];
    }

    /**
     * Sets originallinenumber
     *
     * @param int $originallinenumber originallinenumber
     *
     * @return $this
     */
    public function setOriginallinenumber($originallinenumber)
    {
        $this->container['originallinenumber'] = $originallinenumber;

        return $this;
    }

    /**
     * Gets descrip
     *
     * @return string
     */
    public function getDescrip()
    {
        return $this->container['descrip'];
    }

    /**
     * Sets descrip
     *
     * @param string $descrip descrip
     *
     * @return $this
     */
    public function setDescrip($descrip)
    {
        $this->container['descrip'] = $descrip;

        return $this;
    }

    /**
     * Gets upgrade_fee
     *
     * @return double
     */
    public function getUpgradeFee()
    {
        return $this->container['upgrade_fee'];
    }

    /**
     * Sets upgrade_fee
     *
     * @param double $upgrade_fee upgrade_fee
     *
     * @return $this
     */
    public function setUpgradeFee($upgrade_fee)
    {
        $this->container['upgrade_fee'] = $upgrade_fee;

        return $this;
    }

    /**
     * Gets selling_price
     *
     * @return double
     */
    public function getSellingPrice()
    {
        return $this->container['selling_price'];
    }

    /**
     * Sets selling_price
     *
     * @param double $selling_price selling_price
     *
     * @return $this
     */
    public function setSellingPrice($selling_price)
    {
        $this->container['selling_price'] = $selling_price;

        return $this;
    }

    /**
     * Gets selling_price_type
     *
     * @return int
     */
    public function getSellingPriceType()
    {
        return $this->container['selling_price_type'];
    }

    /**
     * Sets selling_price_type
     *
     * @param int $selling_price_type selling_price_type
     *
     * @return $this
     */
    public function setSellingPriceType($selling_price_type)
    {
        $this->container['selling_price_type'] = $selling_price_type;

        return $this;
    }

    /**
     * Gets financial_selling_price
     *
     * @return double
     */
    public function getFinancialSellingPrice()
    {
        return $this->container['financial_selling_price'];
    }

    /**
     * Sets financial_selling_price
     *
     * @param double $financial_selling_price financial_selling_price
     *
     * @return $this
     */
    public function setFinancialSellingPrice($financial_selling_price)
    {
        $this->container['financial_selling_price'] = $financial_selling_price;

        return $this;
    }

    /**
     * Gets qtyord
     *
     * @return double
     */
    public function getQtyord()
    {
        return $this->container['qtyord'];
    }

    /**
     * Sets qtyord
     *
     * @param double $qtyord qtyord
     *
     * @return $this
     */
    public function setQtyord($qtyord)
    {
        $this->container['qtyord'] = $qtyord;

        return $this;
    }

    /**
     * Gets qtyreturn
     *
     * @return double
     */
    public function getQtyreturn()
    {
        return $this->container['qtyreturn'];
    }

    /**
     * Sets qtyreturn
     *
     * @param double $qtyreturn qtyreturn
     *
     * @return $this
     */
    public function setQtyreturn($qtyreturn)
    {
        $this->container['qtyreturn'] = $qtyreturn;

        return $this;
    }

    /**
     * Gets orderno
     *
     * @return int
     */
    public function getOrderno()
    {
        return $this->container['orderno'];
    }

    /**
     * Sets orderno
     *
     * @param int $orderno orderno
     *
     * @return $this
     */
    public function setOrderno($orderno)
    {
        $this->container['orderno'] = $orderno;

        return $this;
    }

    /**
     * Gets ordersuf
     *
     * @return int
     */
    public function getOrdersuf()
    {
        return $this->container['ordersuf'];
    }

    /**
     * Sets ordersuf
     *
     * @param int $ordersuf ordersuf
     *
     * @return $this
     */
    public function setOrdersuf($ordersuf)
    {
        $this->container['ordersuf'] = $ordersuf;

        return $this;
    }

    /**
     * Gets lineno
     *
     * @return int
     */
    public function getLineno()
    {
        return $this->container['lineno'];
    }

    /**
     * Sets lineno
     *
     * @param int $lineno lineno
     *
     * @return $this
     */
    public function setLineno($lineno)
    {
        $this->container['lineno'] = $lineno;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


