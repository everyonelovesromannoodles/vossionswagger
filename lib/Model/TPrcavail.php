<?php
/**
 * TPrcavail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TPrcavail Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TPrcavail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 't-prcavail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transid' => 'string',
        'shipprod' => 'string',
        'whse' => 'string',
        'netavail' => 'double',
        'price' => 'double',
        'nextpoqty' => 'double',
        'nextpodate' => '\DateTime',
        'unit' => 'string',
        'unitconv' => 'double',
        'nextbreakfl' => 'bool',
        'nextqtybreak' => 'double',
        'nextqtyprice' => 'double',
        'nextbrktype' => 'string',
        'extendprice' => 'double',
        'errormess' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transid' => null,
        'shipprod' => null,
        'whse' => null,
        'netavail' => 'double',
        'price' => 'double',
        'nextpoqty' => 'double',
        'nextpodate' => 'date',
        'unit' => null,
        'unitconv' => 'double',
        'nextbreakfl' => null,
        'nextqtybreak' => 'double',
        'nextqtyprice' => 'double',
        'nextbrktype' => null,
        'extendprice' => 'double',
        'errormess' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transid' => 'transid',
        'shipprod' => 'shipprod',
        'whse' => 'whse',
        'netavail' => 'netavail',
        'price' => 'price',
        'nextpoqty' => 'nextpoqty',
        'nextpodate' => 'nextpodate',
        'unit' => 'unit',
        'unitconv' => 'unitconv',
        'nextbreakfl' => 'nextbreakfl',
        'nextqtybreak' => 'nextqtybreak',
        'nextqtyprice' => 'nextqtyprice',
        'nextbrktype' => 'nextbrktype',
        'extendprice' => 'extendprice',
        'errormess' => 'errormess'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transid' => 'setTransid',
        'shipprod' => 'setShipprod',
        'whse' => 'setWhse',
        'netavail' => 'setNetavail',
        'price' => 'setPrice',
        'nextpoqty' => 'setNextpoqty',
        'nextpodate' => 'setNextpodate',
        'unit' => 'setUnit',
        'unitconv' => 'setUnitconv',
        'nextbreakfl' => 'setNextbreakfl',
        'nextqtybreak' => 'setNextqtybreak',
        'nextqtyprice' => 'setNextqtyprice',
        'nextbrktype' => 'setNextbrktype',
        'extendprice' => 'setExtendprice',
        'errormess' => 'setErrormess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transid' => 'getTransid',
        'shipprod' => 'getShipprod',
        'whse' => 'getWhse',
        'netavail' => 'getNetavail',
        'price' => 'getPrice',
        'nextpoqty' => 'getNextpoqty',
        'nextpodate' => 'getNextpodate',
        'unit' => 'getUnit',
        'unitconv' => 'getUnitconv',
        'nextbreakfl' => 'getNextbreakfl',
        'nextqtybreak' => 'getNextqtybreak',
        'nextqtyprice' => 'getNextqtyprice',
        'nextbrktype' => 'getNextbrktype',
        'extendprice' => 'getExtendprice',
        'errormess' => 'getErrormess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transid'] = isset($data['transid']) ? $data['transid'] : null;
        $this->container['shipprod'] = isset($data['shipprod']) ? $data['shipprod'] : null;
        $this->container['whse'] = isset($data['whse']) ? $data['whse'] : null;
        $this->container['netavail'] = isset($data['netavail']) ? $data['netavail'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['nextpoqty'] = isset($data['nextpoqty']) ? $data['nextpoqty'] : null;
        $this->container['nextpodate'] = isset($data['nextpodate']) ? $data['nextpodate'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['unitconv'] = isset($data['unitconv']) ? $data['unitconv'] : null;
        $this->container['nextbreakfl'] = isset($data['nextbreakfl']) ? $data['nextbreakfl'] : null;
        $this->container['nextqtybreak'] = isset($data['nextqtybreak']) ? $data['nextqtybreak'] : null;
        $this->container['nextqtyprice'] = isset($data['nextqtyprice']) ? $data['nextqtyprice'] : null;
        $this->container['nextbrktype'] = isset($data['nextbrktype']) ? $data['nextbrktype'] : null;
        $this->container['extendprice'] = isset($data['extendprice']) ? $data['extendprice'] : null;
        $this->container['errormess'] = isset($data['errormess']) ? $data['errormess'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transid
     *
     * @return string
     */
    public function getTransid()
    {
        return $this->container['transid'];
    }

    /**
     * Sets transid
     *
     * @param string $transid transid
     *
     * @return $this
     */
    public function setTransid($transid)
    {
        $this->container['transid'] = $transid;

        return $this;
    }

    /**
     * Gets shipprod
     *
     * @return string
     */
    public function getShipprod()
    {
        return $this->container['shipprod'];
    }

    /**
     * Sets shipprod
     *
     * @param string $shipprod shipprod
     *
     * @return $this
     */
    public function setShipprod($shipprod)
    {
        $this->container['shipprod'] = $shipprod;

        return $this;
    }

    /**
     * Gets whse
     *
     * @return string
     */
    public function getWhse()
    {
        return $this->container['whse'];
    }

    /**
     * Sets whse
     *
     * @param string $whse whse
     *
     * @return $this
     */
    public function setWhse($whse)
    {
        $this->container['whse'] = $whse;

        return $this;
    }

    /**
     * Gets netavail
     *
     * @return double
     */
    public function getNetavail()
    {
        return $this->container['netavail'];
    }

    /**
     * Sets netavail
     *
     * @param double $netavail netavail
     *
     * @return $this
     */
    public function setNetavail($netavail)
    {
        $this->container['netavail'] = $netavail;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets nextpoqty
     *
     * @return double
     */
    public function getNextpoqty()
    {
        return $this->container['nextpoqty'];
    }

    /**
     * Sets nextpoqty
     *
     * @param double $nextpoqty nextpoqty
     *
     * @return $this
     */
    public function setNextpoqty($nextpoqty)
    {
        $this->container['nextpoqty'] = $nextpoqty;

        return $this;
    }

    /**
     * Gets nextpodate
     *
     * @return \DateTime
     */
    public function getNextpodate()
    {
        return $this->container['nextpodate'];
    }

    /**
     * Sets nextpodate
     *
     * @param \DateTime $nextpodate nextpodate
     *
     * @return $this
     */
    public function setNextpodate($nextpodate)
    {
        $this->container['nextpodate'] = $nextpodate;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets unitconv
     *
     * @return double
     */
    public function getUnitconv()
    {
        return $this->container['unitconv'];
    }

    /**
     * Sets unitconv
     *
     * @param double $unitconv unitconv
     *
     * @return $this
     */
    public function setUnitconv($unitconv)
    {
        $this->container['unitconv'] = $unitconv;

        return $this;
    }

    /**
     * Gets nextbreakfl
     *
     * @return bool
     */
    public function getNextbreakfl()
    {
        return $this->container['nextbreakfl'];
    }

    /**
     * Sets nextbreakfl
     *
     * @param bool $nextbreakfl nextbreakfl
     *
     * @return $this
     */
    public function setNextbreakfl($nextbreakfl)
    {
        $this->container['nextbreakfl'] = $nextbreakfl;

        return $this;
    }

    /**
     * Gets nextqtybreak
     *
     * @return double
     */
    public function getNextqtybreak()
    {
        return $this->container['nextqtybreak'];
    }

    /**
     * Sets nextqtybreak
     *
     * @param double $nextqtybreak nextqtybreak
     *
     * @return $this
     */
    public function setNextqtybreak($nextqtybreak)
    {
        $this->container['nextqtybreak'] = $nextqtybreak;

        return $this;
    }

    /**
     * Gets nextqtyprice
     *
     * @return double
     */
    public function getNextqtyprice()
    {
        return $this->container['nextqtyprice'];
    }

    /**
     * Sets nextqtyprice
     *
     * @param double $nextqtyprice nextqtyprice
     *
     * @return $this
     */
    public function setNextqtyprice($nextqtyprice)
    {
        $this->container['nextqtyprice'] = $nextqtyprice;

        return $this;
    }

    /**
     * Gets nextbrktype
     *
     * @return string
     */
    public function getNextbrktype()
    {
        return $this->container['nextbrktype'];
    }

    /**
     * Sets nextbrktype
     *
     * @param string $nextbrktype nextbrktype
     *
     * @return $this
     */
    public function setNextbrktype($nextbrktype)
    {
        $this->container['nextbrktype'] = $nextbrktype;

        return $this;
    }

    /**
     * Gets extendprice
     *
     * @return double
     */
    public function getExtendprice()
    {
        return $this->container['extendprice'];
    }

    /**
     * Sets extendprice
     *
     * @param double $extendprice extendprice
     *
     * @return $this
     */
    public function setExtendprice($extendprice)
    {
        $this->container['extendprice'] = $extendprice;

        return $this;
    }

    /**
     * Gets errormess
     *
     * @return string
     */
    public function getErrormess()
    {
        return $this->container['errormess'];
    }

    /**
     * Sets errormess
     *
     * @param string $errormess errormess
     *
     * @return $this
     */
    public function setErrormess($errormess)
    {
        $this->container['errormess'] = $errormess;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


