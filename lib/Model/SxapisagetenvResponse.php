<?php
/**
 * SxapisagetenvResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SxapisagetenvResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SxapisagetenvResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapisagetenv_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'number_of_databases' => 'string',
        'database_physical_names' => 'string',
        'database_logical_names' => 'string',
        'schema_holder_file_name' => 'string',
        'database_type' => 'string',
        'database_version' => 'string',
        'operating_system' => 'string',
        'progress_version' => 'string',
        'c_pro_path' => 'string',
        'century_setting' => 'string',
        'base_ade' => 'string',
        'batch_mode' => 'string',
        'client_type' => 'string',
        'code_page_case' => 'string',
        'code_page_internal' => 'string',
        'code_page_log' => 'string',
        'code_page_print' => 'string',
        'code_page_r_code_in' => 'string',
        'code_page_r_code_out' => 'string',
        'code_page_stream' => 'string',
        'date_format' => 'string',
        'numeric_decimal_point' => 'string',
        'numeric_format' => 'string',
        'numeric_separator' => 'string',
        'c_error_message' => 'string',
        'sx_enterprise_version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'number_of_databases' => null,
        'database_physical_names' => null,
        'database_logical_names' => null,
        'schema_holder_file_name' => null,
        'database_type' => null,
        'database_version' => null,
        'operating_system' => null,
        'progress_version' => null,
        'c_pro_path' => null,
        'century_setting' => null,
        'base_ade' => null,
        'batch_mode' => null,
        'client_type' => null,
        'code_page_case' => null,
        'code_page_internal' => null,
        'code_page_log' => null,
        'code_page_print' => null,
        'code_page_r_code_in' => null,
        'code_page_r_code_out' => null,
        'code_page_stream' => null,
        'date_format' => null,
        'numeric_decimal_point' => null,
        'numeric_format' => null,
        'numeric_separator' => null,
        'c_error_message' => null,
        'sx_enterprise_version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number_of_databases' => 'numberOfDatabases',
        'database_physical_names' => 'databasePhysicalNames',
        'database_logical_names' => 'databaseLogicalNames',
        'schema_holder_file_name' => 'schemaHolderFileName',
        'database_type' => 'databaseType',
        'database_version' => 'databaseVersion',
        'operating_system' => 'operatingSystem',
        'progress_version' => 'progressVersion',
        'c_pro_path' => 'cProPath',
        'century_setting' => 'centurySetting',
        'base_ade' => 'baseADE',
        'batch_mode' => 'batchMode',
        'client_type' => 'clientType',
        'code_page_case' => 'codePageCase',
        'code_page_internal' => 'codePageInternal',
        'code_page_log' => 'codePageLog',
        'code_page_print' => 'codePagePrint',
        'code_page_r_code_in' => 'codePageRCodeIn',
        'code_page_r_code_out' => 'codePageRCodeOut',
        'code_page_stream' => 'codePageStream',
        'date_format' => 'dateFormat',
        'numeric_decimal_point' => 'numericDecimalPoint',
        'numeric_format' => 'numericFormat',
        'numeric_separator' => 'numericSeparator',
        'c_error_message' => 'cErrorMessage',
        'sx_enterprise_version' => 'sxEnterpriseVersion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number_of_databases' => 'setNumberOfDatabases',
        'database_physical_names' => 'setDatabasePhysicalNames',
        'database_logical_names' => 'setDatabaseLogicalNames',
        'schema_holder_file_name' => 'setSchemaHolderFileName',
        'database_type' => 'setDatabaseType',
        'database_version' => 'setDatabaseVersion',
        'operating_system' => 'setOperatingSystem',
        'progress_version' => 'setProgressVersion',
        'c_pro_path' => 'setCProPath',
        'century_setting' => 'setCenturySetting',
        'base_ade' => 'setBaseAde',
        'batch_mode' => 'setBatchMode',
        'client_type' => 'setClientType',
        'code_page_case' => 'setCodePageCase',
        'code_page_internal' => 'setCodePageInternal',
        'code_page_log' => 'setCodePageLog',
        'code_page_print' => 'setCodePagePrint',
        'code_page_r_code_in' => 'setCodePageRCodeIn',
        'code_page_r_code_out' => 'setCodePageRCodeOut',
        'code_page_stream' => 'setCodePageStream',
        'date_format' => 'setDateFormat',
        'numeric_decimal_point' => 'setNumericDecimalPoint',
        'numeric_format' => 'setNumericFormat',
        'numeric_separator' => 'setNumericSeparator',
        'c_error_message' => 'setCErrorMessage',
        'sx_enterprise_version' => 'setSxEnterpriseVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number_of_databases' => 'getNumberOfDatabases',
        'database_physical_names' => 'getDatabasePhysicalNames',
        'database_logical_names' => 'getDatabaseLogicalNames',
        'schema_holder_file_name' => 'getSchemaHolderFileName',
        'database_type' => 'getDatabaseType',
        'database_version' => 'getDatabaseVersion',
        'operating_system' => 'getOperatingSystem',
        'progress_version' => 'getProgressVersion',
        'c_pro_path' => 'getCProPath',
        'century_setting' => 'getCenturySetting',
        'base_ade' => 'getBaseAde',
        'batch_mode' => 'getBatchMode',
        'client_type' => 'getClientType',
        'code_page_case' => 'getCodePageCase',
        'code_page_internal' => 'getCodePageInternal',
        'code_page_log' => 'getCodePageLog',
        'code_page_print' => 'getCodePagePrint',
        'code_page_r_code_in' => 'getCodePageRCodeIn',
        'code_page_r_code_out' => 'getCodePageRCodeOut',
        'code_page_stream' => 'getCodePageStream',
        'date_format' => 'getDateFormat',
        'numeric_decimal_point' => 'getNumericDecimalPoint',
        'numeric_format' => 'getNumericFormat',
        'numeric_separator' => 'getNumericSeparator',
        'c_error_message' => 'getCErrorMessage',
        'sx_enterprise_version' => 'getSxEnterpriseVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['number_of_databases'] = isset($data['number_of_databases']) ? $data['number_of_databases'] : null;
        $this->container['database_physical_names'] = isset($data['database_physical_names']) ? $data['database_physical_names'] : null;
        $this->container['database_logical_names'] = isset($data['database_logical_names']) ? $data['database_logical_names'] : null;
        $this->container['schema_holder_file_name'] = isset($data['schema_holder_file_name']) ? $data['schema_holder_file_name'] : null;
        $this->container['database_type'] = isset($data['database_type']) ? $data['database_type'] : null;
        $this->container['database_version'] = isset($data['database_version']) ? $data['database_version'] : null;
        $this->container['operating_system'] = isset($data['operating_system']) ? $data['operating_system'] : null;
        $this->container['progress_version'] = isset($data['progress_version']) ? $data['progress_version'] : null;
        $this->container['c_pro_path'] = isset($data['c_pro_path']) ? $data['c_pro_path'] : null;
        $this->container['century_setting'] = isset($data['century_setting']) ? $data['century_setting'] : null;
        $this->container['base_ade'] = isset($data['base_ade']) ? $data['base_ade'] : null;
        $this->container['batch_mode'] = isset($data['batch_mode']) ? $data['batch_mode'] : null;
        $this->container['client_type'] = isset($data['client_type']) ? $data['client_type'] : null;
        $this->container['code_page_case'] = isset($data['code_page_case']) ? $data['code_page_case'] : null;
        $this->container['code_page_internal'] = isset($data['code_page_internal']) ? $data['code_page_internal'] : null;
        $this->container['code_page_log'] = isset($data['code_page_log']) ? $data['code_page_log'] : null;
        $this->container['code_page_print'] = isset($data['code_page_print']) ? $data['code_page_print'] : null;
        $this->container['code_page_r_code_in'] = isset($data['code_page_r_code_in']) ? $data['code_page_r_code_in'] : null;
        $this->container['code_page_r_code_out'] = isset($data['code_page_r_code_out']) ? $data['code_page_r_code_out'] : null;
        $this->container['code_page_stream'] = isset($data['code_page_stream']) ? $data['code_page_stream'] : null;
        $this->container['date_format'] = isset($data['date_format']) ? $data['date_format'] : null;
        $this->container['numeric_decimal_point'] = isset($data['numeric_decimal_point']) ? $data['numeric_decimal_point'] : null;
        $this->container['numeric_format'] = isset($data['numeric_format']) ? $data['numeric_format'] : null;
        $this->container['numeric_separator'] = isset($data['numeric_separator']) ? $data['numeric_separator'] : null;
        $this->container['c_error_message'] = isset($data['c_error_message']) ? $data['c_error_message'] : null;
        $this->container['sx_enterprise_version'] = isset($data['sx_enterprise_version']) ? $data['sx_enterprise_version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number_of_databases
     *
     * @return string
     */
    public function getNumberOfDatabases()
    {
        return $this->container['number_of_databases'];
    }

    /**
     * Sets number_of_databases
     *
     * @param string $number_of_databases number_of_databases
     *
     * @return $this
     */
    public function setNumberOfDatabases($number_of_databases)
    {
        $this->container['number_of_databases'] = $number_of_databases;

        return $this;
    }

    /**
     * Gets database_physical_names
     *
     * @return string
     */
    public function getDatabasePhysicalNames()
    {
        return $this->container['database_physical_names'];
    }

    /**
     * Sets database_physical_names
     *
     * @param string $database_physical_names database_physical_names
     *
     * @return $this
     */
    public function setDatabasePhysicalNames($database_physical_names)
    {
        $this->container['database_physical_names'] = $database_physical_names;

        return $this;
    }

    /**
     * Gets database_logical_names
     *
     * @return string
     */
    public function getDatabaseLogicalNames()
    {
        return $this->container['database_logical_names'];
    }

    /**
     * Sets database_logical_names
     *
     * @param string $database_logical_names database_logical_names
     *
     * @return $this
     */
    public function setDatabaseLogicalNames($database_logical_names)
    {
        $this->container['database_logical_names'] = $database_logical_names;

        return $this;
    }

    /**
     * Gets schema_holder_file_name
     *
     * @return string
     */
    public function getSchemaHolderFileName()
    {
        return $this->container['schema_holder_file_name'];
    }

    /**
     * Sets schema_holder_file_name
     *
     * @param string $schema_holder_file_name schema_holder_file_name
     *
     * @return $this
     */
    public function setSchemaHolderFileName($schema_holder_file_name)
    {
        $this->container['schema_holder_file_name'] = $schema_holder_file_name;

        return $this;
    }

    /**
     * Gets database_type
     *
     * @return string
     */
    public function getDatabaseType()
    {
        return $this->container['database_type'];
    }

    /**
     * Sets database_type
     *
     * @param string $database_type database_type
     *
     * @return $this
     */
    public function setDatabaseType($database_type)
    {
        $this->container['database_type'] = $database_type;

        return $this;
    }

    /**
     * Gets database_version
     *
     * @return string
     */
    public function getDatabaseVersion()
    {
        return $this->container['database_version'];
    }

    /**
     * Sets database_version
     *
     * @param string $database_version database_version
     *
     * @return $this
     */
    public function setDatabaseVersion($database_version)
    {
        $this->container['database_version'] = $database_version;

        return $this;
    }

    /**
     * Gets operating_system
     *
     * @return string
     */
    public function getOperatingSystem()
    {
        return $this->container['operating_system'];
    }

    /**
     * Sets operating_system
     *
     * @param string $operating_system operating_system
     *
     * @return $this
     */
    public function setOperatingSystem($operating_system)
    {
        $this->container['operating_system'] = $operating_system;

        return $this;
    }

    /**
     * Gets progress_version
     *
     * @return string
     */
    public function getProgressVersion()
    {
        return $this->container['progress_version'];
    }

    /**
     * Sets progress_version
     *
     * @param string $progress_version progress_version
     *
     * @return $this
     */
    public function setProgressVersion($progress_version)
    {
        $this->container['progress_version'] = $progress_version;

        return $this;
    }

    /**
     * Gets c_pro_path
     *
     * @return string
     */
    public function getCProPath()
    {
        return $this->container['c_pro_path'];
    }

    /**
     * Sets c_pro_path
     *
     * @param string $c_pro_path c_pro_path
     *
     * @return $this
     */
    public function setCProPath($c_pro_path)
    {
        $this->container['c_pro_path'] = $c_pro_path;

        return $this;
    }

    /**
     * Gets century_setting
     *
     * @return string
     */
    public function getCenturySetting()
    {
        return $this->container['century_setting'];
    }

    /**
     * Sets century_setting
     *
     * @param string $century_setting century_setting
     *
     * @return $this
     */
    public function setCenturySetting($century_setting)
    {
        $this->container['century_setting'] = $century_setting;

        return $this;
    }

    /**
     * Gets base_ade
     *
     * @return string
     */
    public function getBaseAde()
    {
        return $this->container['base_ade'];
    }

    /**
     * Sets base_ade
     *
     * @param string $base_ade base_ade
     *
     * @return $this
     */
    public function setBaseAde($base_ade)
    {
        $this->container['base_ade'] = $base_ade;

        return $this;
    }

    /**
     * Gets batch_mode
     *
     * @return string
     */
    public function getBatchMode()
    {
        return $this->container['batch_mode'];
    }

    /**
     * Sets batch_mode
     *
     * @param string $batch_mode batch_mode
     *
     * @return $this
     */
    public function setBatchMode($batch_mode)
    {
        $this->container['batch_mode'] = $batch_mode;

        return $this;
    }

    /**
     * Gets client_type
     *
     * @return string
     */
    public function getClientType()
    {
        return $this->container['client_type'];
    }

    /**
     * Sets client_type
     *
     * @param string $client_type client_type
     *
     * @return $this
     */
    public function setClientType($client_type)
    {
        $this->container['client_type'] = $client_type;

        return $this;
    }

    /**
     * Gets code_page_case
     *
     * @return string
     */
    public function getCodePageCase()
    {
        return $this->container['code_page_case'];
    }

    /**
     * Sets code_page_case
     *
     * @param string $code_page_case code_page_case
     *
     * @return $this
     */
    public function setCodePageCase($code_page_case)
    {
        $this->container['code_page_case'] = $code_page_case;

        return $this;
    }

    /**
     * Gets code_page_internal
     *
     * @return string
     */
    public function getCodePageInternal()
    {
        return $this->container['code_page_internal'];
    }

    /**
     * Sets code_page_internal
     *
     * @param string $code_page_internal code_page_internal
     *
     * @return $this
     */
    public function setCodePageInternal($code_page_internal)
    {
        $this->container['code_page_internal'] = $code_page_internal;

        return $this;
    }

    /**
     * Gets code_page_log
     *
     * @return string
     */
    public function getCodePageLog()
    {
        return $this->container['code_page_log'];
    }

    /**
     * Sets code_page_log
     *
     * @param string $code_page_log code_page_log
     *
     * @return $this
     */
    public function setCodePageLog($code_page_log)
    {
        $this->container['code_page_log'] = $code_page_log;

        return $this;
    }

    /**
     * Gets code_page_print
     *
     * @return string
     */
    public function getCodePagePrint()
    {
        return $this->container['code_page_print'];
    }

    /**
     * Sets code_page_print
     *
     * @param string $code_page_print code_page_print
     *
     * @return $this
     */
    public function setCodePagePrint($code_page_print)
    {
        $this->container['code_page_print'] = $code_page_print;

        return $this;
    }

    /**
     * Gets code_page_r_code_in
     *
     * @return string
     */
    public function getCodePageRCodeIn()
    {
        return $this->container['code_page_r_code_in'];
    }

    /**
     * Sets code_page_r_code_in
     *
     * @param string $code_page_r_code_in code_page_r_code_in
     *
     * @return $this
     */
    public function setCodePageRCodeIn($code_page_r_code_in)
    {
        $this->container['code_page_r_code_in'] = $code_page_r_code_in;

        return $this;
    }

    /**
     * Gets code_page_r_code_out
     *
     * @return string
     */
    public function getCodePageRCodeOut()
    {
        return $this->container['code_page_r_code_out'];
    }

    /**
     * Sets code_page_r_code_out
     *
     * @param string $code_page_r_code_out code_page_r_code_out
     *
     * @return $this
     */
    public function setCodePageRCodeOut($code_page_r_code_out)
    {
        $this->container['code_page_r_code_out'] = $code_page_r_code_out;

        return $this;
    }

    /**
     * Gets code_page_stream
     *
     * @return string
     */
    public function getCodePageStream()
    {
        return $this->container['code_page_stream'];
    }

    /**
     * Sets code_page_stream
     *
     * @param string $code_page_stream code_page_stream
     *
     * @return $this
     */
    public function setCodePageStream($code_page_stream)
    {
        $this->container['code_page_stream'] = $code_page_stream;

        return $this;
    }

    /**
     * Gets date_format
     *
     * @return string
     */
    public function getDateFormat()
    {
        return $this->container['date_format'];
    }

    /**
     * Sets date_format
     *
     * @param string $date_format date_format
     *
     * @return $this
     */
    public function setDateFormat($date_format)
    {
        $this->container['date_format'] = $date_format;

        return $this;
    }

    /**
     * Gets numeric_decimal_point
     *
     * @return string
     */
    public function getNumericDecimalPoint()
    {
        return $this->container['numeric_decimal_point'];
    }

    /**
     * Sets numeric_decimal_point
     *
     * @param string $numeric_decimal_point numeric_decimal_point
     *
     * @return $this
     */
    public function setNumericDecimalPoint($numeric_decimal_point)
    {
        $this->container['numeric_decimal_point'] = $numeric_decimal_point;

        return $this;
    }

    /**
     * Gets numeric_format
     *
     * @return string
     */
    public function getNumericFormat()
    {
        return $this->container['numeric_format'];
    }

    /**
     * Sets numeric_format
     *
     * @param string $numeric_format numeric_format
     *
     * @return $this
     */
    public function setNumericFormat($numeric_format)
    {
        $this->container['numeric_format'] = $numeric_format;

        return $this;
    }

    /**
     * Gets numeric_separator
     *
     * @return string
     */
    public function getNumericSeparator()
    {
        return $this->container['numeric_separator'];
    }

    /**
     * Sets numeric_separator
     *
     * @param string $numeric_separator numeric_separator
     *
     * @return $this
     */
    public function setNumericSeparator($numeric_separator)
    {
        $this->container['numeric_separator'] = $numeric_separator;

        return $this;
    }

    /**
     * Gets c_error_message
     *
     * @return string
     */
    public function getCErrorMessage()
    {
        return $this->container['c_error_message'];
    }

    /**
     * Sets c_error_message
     *
     * @param string $c_error_message c_error_message
     *
     * @return $this
     */
    public function setCErrorMessage($c_error_message)
    {
        $this->container['c_error_message'] = $c_error_message;

        return $this;
    }

    /**
     * Gets sx_enterprise_version
     *
     * @return string
     */
    public function getSxEnterpriseVersion()
    {
        return $this->container['sx_enterprise_version'];
    }

    /**
     * Sets sx_enterprise_version
     *
     * @param string $sx_enterprise_version sx_enterprise_version
     *
     * @return $this
     */
    public function setSxEnterpriseVersion($sx_enterprise_version)
    {
        $this->container['sx_enterprise_version'] = $sx_enterprise_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


