<?php
/**
 * SxapiargetinvoicelistRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SX.e API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SxapiargetinvoicelistRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SxapiargetinvoicelistRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sxapiargetinvoicelist_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company_number' => 'int',
        'operator_init' => 'string',
        'operator_password' => 'string',
        'customer_number' => 'double',
        'ship_to' => 'string',
        'include_invoices' => 'bool',
        'include_service_charges' => 'bool',
        'include_cod' => 'bool',
        'include_debit_memos' => 'bool',
        'include_credit_memos' => 'bool',
        'include_unapplied_cash' => 'bool',
        'include_misc_credits' => 'bool',
        'include_rebates' => 'bool',
        'include_checks' => 'bool',
        'include_scheduled_payments' => 'bool',
        'c_status' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'invoice_number' => 'int',
        'check_number' => 'double',
        'include_period1' => 'bool',
        'include_period2' => 'bool',
        'include_period3' => 'bool',
        'include_period4' => 'bool',
        'include_period5' => 'bool',
        'include_future_invoices' => 'bool',
        'record_limit' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'company_number' => 'int64',
        'operator_init' => null,
        'operator_password' => null,
        'customer_number' => 'double',
        'ship_to' => null,
        'include_invoices' => null,
        'include_service_charges' => null,
        'include_cod' => null,
        'include_debit_memos' => null,
        'include_credit_memos' => null,
        'include_unapplied_cash' => null,
        'include_misc_credits' => null,
        'include_rebates' => null,
        'include_checks' => null,
        'include_scheduled_payments' => null,
        'c_status' => null,
        'start_date' => 'date',
        'end_date' => 'date',
        'invoice_number' => 'int64',
        'check_number' => 'double',
        'include_period1' => null,
        'include_period2' => null,
        'include_period3' => null,
        'include_period4' => null,
        'include_period5' => null,
        'include_future_invoices' => null,
        'record_limit' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_number' => 'companyNumber',
        'operator_init' => 'operatorInit',
        'operator_password' => 'operatorPassword',
        'customer_number' => 'customerNumber',
        'ship_to' => 'shipTo',
        'include_invoices' => 'includeInvoices',
        'include_service_charges' => 'includeServiceCharges',
        'include_cod' => 'includeCOD',
        'include_debit_memos' => 'includeDebitMemos',
        'include_credit_memos' => 'includeCreditMemos',
        'include_unapplied_cash' => 'includeUnappliedCash',
        'include_misc_credits' => 'includeMiscCredits',
        'include_rebates' => 'includeRebates',
        'include_checks' => 'includeChecks',
        'include_scheduled_payments' => 'includeScheduledPayments',
        'c_status' => 'cStatus',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'invoice_number' => 'invoiceNumber',
        'check_number' => 'checkNumber',
        'include_period1' => 'includePeriod1',
        'include_period2' => 'includePeriod2',
        'include_period3' => 'includePeriod3',
        'include_period4' => 'includePeriod4',
        'include_period5' => 'includePeriod5',
        'include_future_invoices' => 'includeFutureInvoices',
        'record_limit' => 'recordLimit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_number' => 'setCompanyNumber',
        'operator_init' => 'setOperatorInit',
        'operator_password' => 'setOperatorPassword',
        'customer_number' => 'setCustomerNumber',
        'ship_to' => 'setShipTo',
        'include_invoices' => 'setIncludeInvoices',
        'include_service_charges' => 'setIncludeServiceCharges',
        'include_cod' => 'setIncludeCod',
        'include_debit_memos' => 'setIncludeDebitMemos',
        'include_credit_memos' => 'setIncludeCreditMemos',
        'include_unapplied_cash' => 'setIncludeUnappliedCash',
        'include_misc_credits' => 'setIncludeMiscCredits',
        'include_rebates' => 'setIncludeRebates',
        'include_checks' => 'setIncludeChecks',
        'include_scheduled_payments' => 'setIncludeScheduledPayments',
        'c_status' => 'setCStatus',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'invoice_number' => 'setInvoiceNumber',
        'check_number' => 'setCheckNumber',
        'include_period1' => 'setIncludePeriod1',
        'include_period2' => 'setIncludePeriod2',
        'include_period3' => 'setIncludePeriod3',
        'include_period4' => 'setIncludePeriod4',
        'include_period5' => 'setIncludePeriod5',
        'include_future_invoices' => 'setIncludeFutureInvoices',
        'record_limit' => 'setRecordLimit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_number' => 'getCompanyNumber',
        'operator_init' => 'getOperatorInit',
        'operator_password' => 'getOperatorPassword',
        'customer_number' => 'getCustomerNumber',
        'ship_to' => 'getShipTo',
        'include_invoices' => 'getIncludeInvoices',
        'include_service_charges' => 'getIncludeServiceCharges',
        'include_cod' => 'getIncludeCod',
        'include_debit_memos' => 'getIncludeDebitMemos',
        'include_credit_memos' => 'getIncludeCreditMemos',
        'include_unapplied_cash' => 'getIncludeUnappliedCash',
        'include_misc_credits' => 'getIncludeMiscCredits',
        'include_rebates' => 'getIncludeRebates',
        'include_checks' => 'getIncludeChecks',
        'include_scheduled_payments' => 'getIncludeScheduledPayments',
        'c_status' => 'getCStatus',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'invoice_number' => 'getInvoiceNumber',
        'check_number' => 'getCheckNumber',
        'include_period1' => 'getIncludePeriod1',
        'include_period2' => 'getIncludePeriod2',
        'include_period3' => 'getIncludePeriod3',
        'include_period4' => 'getIncludePeriod4',
        'include_period5' => 'getIncludePeriod5',
        'include_future_invoices' => 'getIncludeFutureInvoices',
        'record_limit' => 'getRecordLimit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_number'] = isset($data['company_number']) ? $data['company_number'] : null;
        $this->container['operator_init'] = isset($data['operator_init']) ? $data['operator_init'] : null;
        $this->container['operator_password'] = isset($data['operator_password']) ? $data['operator_password'] : null;
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['ship_to'] = isset($data['ship_to']) ? $data['ship_to'] : null;
        $this->container['include_invoices'] = isset($data['include_invoices']) ? $data['include_invoices'] : null;
        $this->container['include_service_charges'] = isset($data['include_service_charges']) ? $data['include_service_charges'] : null;
        $this->container['include_cod'] = isset($data['include_cod']) ? $data['include_cod'] : null;
        $this->container['include_debit_memos'] = isset($data['include_debit_memos']) ? $data['include_debit_memos'] : null;
        $this->container['include_credit_memos'] = isset($data['include_credit_memos']) ? $data['include_credit_memos'] : null;
        $this->container['include_unapplied_cash'] = isset($data['include_unapplied_cash']) ? $data['include_unapplied_cash'] : null;
        $this->container['include_misc_credits'] = isset($data['include_misc_credits']) ? $data['include_misc_credits'] : null;
        $this->container['include_rebates'] = isset($data['include_rebates']) ? $data['include_rebates'] : null;
        $this->container['include_checks'] = isset($data['include_checks']) ? $data['include_checks'] : null;
        $this->container['include_scheduled_payments'] = isset($data['include_scheduled_payments']) ? $data['include_scheduled_payments'] : null;
        $this->container['c_status'] = isset($data['c_status']) ? $data['c_status'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['check_number'] = isset($data['check_number']) ? $data['check_number'] : null;
        $this->container['include_period1'] = isset($data['include_period1']) ? $data['include_period1'] : null;
        $this->container['include_period2'] = isset($data['include_period2']) ? $data['include_period2'] : null;
        $this->container['include_period3'] = isset($data['include_period3']) ? $data['include_period3'] : null;
        $this->container['include_period4'] = isset($data['include_period4']) ? $data['include_period4'] : null;
        $this->container['include_period5'] = isset($data['include_period5']) ? $data['include_period5'] : null;
        $this->container['include_future_invoices'] = isset($data['include_future_invoices']) ? $data['include_future_invoices'] : null;
        $this->container['record_limit'] = isset($data['record_limit']) ? $data['record_limit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_number
     *
     * @return int
     */
    public function getCompanyNumber()
    {
        return $this->container['company_number'];
    }

    /**
     * Sets company_number
     *
     * @param int $company_number company_number
     *
     * @return $this
     */
    public function setCompanyNumber($company_number)
    {
        $this->container['company_number'] = $company_number;

        return $this;
    }

    /**
     * Gets operator_init
     *
     * @return string
     */
    public function getOperatorInit()
    {
        return $this->container['operator_init'];
    }

    /**
     * Sets operator_init
     *
     * @param string $operator_init operator_init
     *
     * @return $this
     */
    public function setOperatorInit($operator_init)
    {
        $this->container['operator_init'] = $operator_init;

        return $this;
    }

    /**
     * Gets operator_password
     *
     * @return string
     */
    public function getOperatorPassword()
    {
        return $this->container['operator_password'];
    }

    /**
     * Sets operator_password
     *
     * @param string $operator_password operator_password
     *
     * @return $this
     */
    public function setOperatorPassword($operator_password)
    {
        $this->container['operator_password'] = $operator_password;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return double
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param double $customer_number customer_number
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return string
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param string $ship_to ship_to
     *
     * @return $this
     */
    public function setShipTo($ship_to)
    {
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets include_invoices
     *
     * @return bool
     */
    public function getIncludeInvoices()
    {
        return $this->container['include_invoices'];
    }

    /**
     * Sets include_invoices
     *
     * @param bool $include_invoices include_invoices
     *
     * @return $this
     */
    public function setIncludeInvoices($include_invoices)
    {
        $this->container['include_invoices'] = $include_invoices;

        return $this;
    }

    /**
     * Gets include_service_charges
     *
     * @return bool
     */
    public function getIncludeServiceCharges()
    {
        return $this->container['include_service_charges'];
    }

    /**
     * Sets include_service_charges
     *
     * @param bool $include_service_charges include_service_charges
     *
     * @return $this
     */
    public function setIncludeServiceCharges($include_service_charges)
    {
        $this->container['include_service_charges'] = $include_service_charges;

        return $this;
    }

    /**
     * Gets include_cod
     *
     * @return bool
     */
    public function getIncludeCod()
    {
        return $this->container['include_cod'];
    }

    /**
     * Sets include_cod
     *
     * @param bool $include_cod include_cod
     *
     * @return $this
     */
    public function setIncludeCod($include_cod)
    {
        $this->container['include_cod'] = $include_cod;

        return $this;
    }

    /**
     * Gets include_debit_memos
     *
     * @return bool
     */
    public function getIncludeDebitMemos()
    {
        return $this->container['include_debit_memos'];
    }

    /**
     * Sets include_debit_memos
     *
     * @param bool $include_debit_memos include_debit_memos
     *
     * @return $this
     */
    public function setIncludeDebitMemos($include_debit_memos)
    {
        $this->container['include_debit_memos'] = $include_debit_memos;

        return $this;
    }

    /**
     * Gets include_credit_memos
     *
     * @return bool
     */
    public function getIncludeCreditMemos()
    {
        return $this->container['include_credit_memos'];
    }

    /**
     * Sets include_credit_memos
     *
     * @param bool $include_credit_memos include_credit_memos
     *
     * @return $this
     */
    public function setIncludeCreditMemos($include_credit_memos)
    {
        $this->container['include_credit_memos'] = $include_credit_memos;

        return $this;
    }

    /**
     * Gets include_unapplied_cash
     *
     * @return bool
     */
    public function getIncludeUnappliedCash()
    {
        return $this->container['include_unapplied_cash'];
    }

    /**
     * Sets include_unapplied_cash
     *
     * @param bool $include_unapplied_cash include_unapplied_cash
     *
     * @return $this
     */
    public function setIncludeUnappliedCash($include_unapplied_cash)
    {
        $this->container['include_unapplied_cash'] = $include_unapplied_cash;

        return $this;
    }

    /**
     * Gets include_misc_credits
     *
     * @return bool
     */
    public function getIncludeMiscCredits()
    {
        return $this->container['include_misc_credits'];
    }

    /**
     * Sets include_misc_credits
     *
     * @param bool $include_misc_credits include_misc_credits
     *
     * @return $this
     */
    public function setIncludeMiscCredits($include_misc_credits)
    {
        $this->container['include_misc_credits'] = $include_misc_credits;

        return $this;
    }

    /**
     * Gets include_rebates
     *
     * @return bool
     */
    public function getIncludeRebates()
    {
        return $this->container['include_rebates'];
    }

    /**
     * Sets include_rebates
     *
     * @param bool $include_rebates include_rebates
     *
     * @return $this
     */
    public function setIncludeRebates($include_rebates)
    {
        $this->container['include_rebates'] = $include_rebates;

        return $this;
    }

    /**
     * Gets include_checks
     *
     * @return bool
     */
    public function getIncludeChecks()
    {
        return $this->container['include_checks'];
    }

    /**
     * Sets include_checks
     *
     * @param bool $include_checks include_checks
     *
     * @return $this
     */
    public function setIncludeChecks($include_checks)
    {
        $this->container['include_checks'] = $include_checks;

        return $this;
    }

    /**
     * Gets include_scheduled_payments
     *
     * @return bool
     */
    public function getIncludeScheduledPayments()
    {
        return $this->container['include_scheduled_payments'];
    }

    /**
     * Sets include_scheduled_payments
     *
     * @param bool $include_scheduled_payments include_scheduled_payments
     *
     * @return $this
     */
    public function setIncludeScheduledPayments($include_scheduled_payments)
    {
        $this->container['include_scheduled_payments'] = $include_scheduled_payments;

        return $this;
    }

    /**
     * Gets c_status
     *
     * @return string
     */
    public function getCStatus()
    {
        return $this->container['c_status'];
    }

    /**
     * Sets c_status
     *
     * @param string $c_status c_status
     *
     * @return $this
     */
    public function setCStatus($c_status)
    {
        $this->container['c_status'] = $c_status;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return int
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param int $invoice_number invoice_number
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets check_number
     *
     * @return double
     */
    public function getCheckNumber()
    {
        return $this->container['check_number'];
    }

    /**
     * Sets check_number
     *
     * @param double $check_number check_number
     *
     * @return $this
     */
    public function setCheckNumber($check_number)
    {
        $this->container['check_number'] = $check_number;

        return $this;
    }

    /**
     * Gets include_period1
     *
     * @return bool
     */
    public function getIncludePeriod1()
    {
        return $this->container['include_period1'];
    }

    /**
     * Sets include_period1
     *
     * @param bool $include_period1 include_period1
     *
     * @return $this
     */
    public function setIncludePeriod1($include_period1)
    {
        $this->container['include_period1'] = $include_period1;

        return $this;
    }

    /**
     * Gets include_period2
     *
     * @return bool
     */
    public function getIncludePeriod2()
    {
        return $this->container['include_period2'];
    }

    /**
     * Sets include_period2
     *
     * @param bool $include_period2 include_period2
     *
     * @return $this
     */
    public function setIncludePeriod2($include_period2)
    {
        $this->container['include_period2'] = $include_period2;

        return $this;
    }

    /**
     * Gets include_period3
     *
     * @return bool
     */
    public function getIncludePeriod3()
    {
        return $this->container['include_period3'];
    }

    /**
     * Sets include_period3
     *
     * @param bool $include_period3 include_period3
     *
     * @return $this
     */
    public function setIncludePeriod3($include_period3)
    {
        $this->container['include_period3'] = $include_period3;

        return $this;
    }

    /**
     * Gets include_period4
     *
     * @return bool
     */
    public function getIncludePeriod4()
    {
        return $this->container['include_period4'];
    }

    /**
     * Sets include_period4
     *
     * @param bool $include_period4 include_period4
     *
     * @return $this
     */
    public function setIncludePeriod4($include_period4)
    {
        $this->container['include_period4'] = $include_period4;

        return $this;
    }

    /**
     * Gets include_period5
     *
     * @return bool
     */
    public function getIncludePeriod5()
    {
        return $this->container['include_period5'];
    }

    /**
     * Sets include_period5
     *
     * @param bool $include_period5 include_period5
     *
     * @return $this
     */
    public function setIncludePeriod5($include_period5)
    {
        $this->container['include_period5'] = $include_period5;

        return $this;
    }

    /**
     * Gets include_future_invoices
     *
     * @return bool
     */
    public function getIncludeFutureInvoices()
    {
        return $this->container['include_future_invoices'];
    }

    /**
     * Sets include_future_invoices
     *
     * @param bool $include_future_invoices include_future_invoices
     *
     * @return $this
     */
    public function setIncludeFutureInvoices($include_future_invoices)
    {
        $this->container['include_future_invoices'] = $include_future_invoices;

        return $this;
    }

    /**
     * Gets record_limit
     *
     * @return int
     */
    public function getRecordLimit()
    {
        return $this->container['record_limit'];
    }

    /**
     * Sets record_limit
     *
     * @param int $record_limit record_limit
     *
     * @return $this
     */
    public function setRecordLimit($record_limit)
    {
        $this->container['record_limit'] = $record_limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


